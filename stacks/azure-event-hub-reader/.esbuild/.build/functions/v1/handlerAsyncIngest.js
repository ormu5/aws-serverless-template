var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/lodash.merge/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.merge/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var merge3 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module2.exports = merge3;
  }
});

// ../../node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../node_modules/@smithy/types/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AlgorithmId: () => AlgorithmId,
      EndpointURLScheme: () => EndpointURLScheme,
      FieldPosition: () => FieldPosition,
      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation2,
      HttpAuthLocation: () => HttpAuthLocation,
      IniSectionType: () => IniSectionType,
      RequestHandlerProtocol: () => RequestHandlerProtocol,
      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY4,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
      return HttpAuthLocation2;
    })(HttpAuthLocation || {});
    var HttpApiKeyAuthLocation2 = /* @__PURE__ */ ((HttpApiKeyAuthLocation22) => {
      HttpApiKeyAuthLocation22["HEADER"] = "header";
      HttpApiKeyAuthLocation22["QUERY"] = "query";
      return HttpApiKeyAuthLocation22;
    })(HttpApiKeyAuthLocation2 || {});
    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
      return EndpointURLScheme2;
    })(EndpointURLScheme || {});
    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
      return AlgorithmId2;
    })(AlgorithmId || {});
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "sha256",
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "md5",
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig)
      };
    }, "getDefaultClientConfiguration");
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        ...resolveChecksumRuntimeConfig(config)
      };
    }, "resolveDefaultRuntimeConfig");
    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
      return FieldPosition2;
    })(FieldPosition || {});
    var SMITHY_CONTEXT_KEY4 = "__smithy_context";
    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
      return IniSectionType2;
    })(IniSectionType || {});
    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
      return RequestHandlerProtocol2;
    })(RequestHandlerProtocol || {});
  }
});

// ../../node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Field: () => Field,
      Fields: () => Fields,
      HttpRequest: () => HttpRequest4,
      HttpResponse: () => HttpResponse2,
      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
      isValidHostname: () => isValidHostname,
      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler) {
          httpHandler = handler;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    }, "getHttpHandlerExtensionConfiguration");
    var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    }, "resolveHttpHandlerRuntimeConfig");
    var import_types5 = require_dist_cjs();
    var _Field = class _Field {
      constructor({ name, kind = import_types5.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      /**
       * Appends a value to the field.
       *
       * @param value The value to append.
       */
      add(value) {
        this.values.push(value);
      }
      /**
       * Overwrite existing field values.
       *
       * @param values The new field values.
       */
      set(values) {
        this.values = values;
      }
      /**
       * Remove all matching entries from list.
       *
       * @param value Value to remove.
       */
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      /**
       * Get comma-delimited string.
       *
       * @returns String representation of {@link Field}.
       */
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      /**
       * Get string values as a list
       *
       * @returns Values in {@link Field} as a list.
       */
      get() {
        return this.values;
      }
    };
    __name(_Field, "Field");
    var Field = _Field;
    var _Fields = class _Fields {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      /**
       * Set entry for a {@link Field} name. The `name`
       * attribute will be used to key the collection.
       *
       * @param field The {@link Field} to set.
       */
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      /**
       *  Retrieve {@link Field} entry by name.
       *
       * @param name The name of the {@link Field} entry
       *  to retrieve
       * @returns The {@link Field} if it exists.
       */
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      /**
       * Delete entry from collection.
       *
       * @param name Name of the entry to delete.
       */
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      /**
       * Helper function for retrieving specific types of fields.
       * Used to grab all headers or all trailers.
       *
       * @param kind {@link FieldPosition} of entries to retrieve.
       * @returns The {@link Field} entries with the specified
       *  {@link FieldPosition}.
       */
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    __name(_Fields, "Fields");
    var Fields = _Fields;
    var _HttpRequest = class _HttpRequest2 {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest2({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    __name(_HttpRequest, "HttpRequest");
    var HttpRequest4 = _HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
    __name(cloneQuery, "cloneQuery");
    var _HttpResponse = class _HttpResponse {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    __name(_HttpResponse, "HttpResponse");
    var HttpResponse2 = _HttpResponse;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, "isValidHostname");
  }
});

// ../../node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!import_protocol_http5.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    var hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    }), "getHostHeaderPlugin");
  }
});

// ../../node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getLoggerPlugin: () => getLoggerPlugin,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions
    });
    module2.exports = __toCommonJS2(src_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger2 == null ? void 0 : logger2.info) == null ? void 0 : _a.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        (_b = logger2 == null ? void 0 : logger2.error) == null ? void 0 : _b.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    }, "loggerMiddleware");
    var loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    }), "getLoggerPlugin");
  }
});

// ../../node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!import_protocol_http5.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    var addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    }), "getRecursionDetectionPlugin");
  }
});

// ../../node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../node_modules/@smithy/util-endpoints/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EndpointError: () => EndpointError2,
      customEndpointFunctions: () => customEndpointFunctions,
      isIpAddress: () => isIpAddress2,
      isValidHostLabel: () => isValidHostLabel,
      resolveEndpoint: () => resolveEndpoint2
    });
    module2.exports = __toCommonJS2(src_exports);
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress2 = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
    var customEndpointFunctions = {};
    var debugId = "endpoints";
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, "toDebugString");
    var _EndpointError = class _EndpointError extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    __name(_EndpointError, "EndpointError");
    var EndpointError2 = _EndpointError;
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError2(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
    var getAttr = /* @__PURE__ */ __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
    var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
    var not = /* @__PURE__ */ __name((value) => !value, "not");
    var import_types32 = require_dist_cjs();
    var DEFAULT_PORTS = {
      [import_types32.EndpointURLScheme.HTTP]: 80,
      [import_types32.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(import_types32.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress2(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
    var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
    var endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map(
        (arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options)
      );
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, "callFunction");
    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
    var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce(
      (acc, [headerKey, headerVal]) => ({
        ...acc,
        [headerKey]: headerVal.map((headerValEntry) => {
          const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
          if (typeof processedExpr !== "string") {
            throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
          }
          return processedExpr;
        })
      }),
      {}
    ), "getEndpointHeaders");
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError2(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
    var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce(
      (acc, [propertyKey, propertyVal]) => ({
        ...acc,
        [propertyKey]: getEndpointProperty(propertyVal, options)
      }),
      {}
    ), "getEndpointProperties");
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError2(
        evaluateExpression(error, "Error", {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord }
        })
      );
    }, "evaluateErrorRule");
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError2(`Rules evaluation failed`);
    }, "evaluateRules");
    var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {
      var _a, _b, _c, _d, _e;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      if ((_c = options.endpointParams) == null ? void 0 : _c.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_e = (_d = options.logger) == null ? void 0 : _d.debug) == null ? void 0 : _e.call(_d, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
  }
});

// ../../node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ConditionObject: () => import_util_endpoints.ConditionObject,
      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
      EndpointError: () => import_util_endpoints.EndpointError,
      EndpointObject: () => import_util_endpoints.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
      Expression: () => import_util_endpoints.Expression,
      FunctionArgv: () => import_util_endpoints.FunctionArgv,
      FunctionObject: () => import_util_endpoints.FunctionObject,
      FunctionReturn: () => import_util_endpoints.FunctionReturn,
      ParameterObject: () => import_util_endpoints.ParameterObject,
      ReferenceObject: () => import_util_endpoints.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints.RuleSetObject,
      RuleSetRules: () => import_util_endpoints.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints.isIpAddress,
      partition: () => partition,
      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_endpoints = require_dist_cjs6();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    }, "parseArn");
    var partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = "";
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, "setPartitionInfo");
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, "");
    }, "useDefaultPartitionInfo");
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
    var awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin,
      resolveUserAgentConfig: () => resolveUserAgentConfig,
      userAgentMiddleware: () => userAgentMiddleware
    });
    module2.exports = __toCommonJS2(src_exports);
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    __name(resolveUserAgentConfig, "resolveUserAgentConfig");
    var import_util_endpoints = require_dist_cjs7();
    var import_protocol_http5 = require_dist_cjs2();
    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_NAME_SEPARATOR = "/";
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = "-";
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!import_protocol_http5.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    var getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
      }
    }), "getUserAgentPlugin");
  }
});

// ../../node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SelectorType: () => SelectorType,
      booleanSelector: () => booleanSelector,
      numberSelector: () => numberSelector
    });
    module2.exports = __toCommonJS2(src_exports);
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, "booleanSelector");
    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      const numberValue = parseInt(obj[key], 10);
      if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
      }
      return numberValue;
    }, "numberSelector");
    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
      return SelectorType2;
    })(SelectorType || {});
  }
});

// ../../node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getSmithyContext: () => getSmithyContext4,
      normalizeProvider: () => normalizeProvider2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_types5 = require_dist_cjs();
    var getSmithyContext4 = /* @__PURE__ */ __name((context) => context[import_types5.SMITHY_CONTEXT_KEY] || (context[import_types5.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
    var normalizeProvider2 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});

// ../../node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getRegionInfo: () => getRegionInfo,
      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
      resolveEndpointsConfig: () => resolveEndpointsConfig,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_config_provider = require_dist_cjs9();
    var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    var DEFAULT_USE_FIPS_ENDPOINT = false;
    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var import_util_middleware3 = require_dist_cjs10();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false)
      };
    }, "resolveCustomEndpointsConfig");
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    }, "getEndpointFromRegion");
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const useDualstackEndpoint = (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    }, "resolveEndpointsConfig");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack")
      )) == null ? void 0 : _a.hostname;
    }, "getHostnameFromVariants");
    var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0, "getResolvedHostname");
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
    var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    }, "getResolvedSigningRegion");
    var getRegionInfo = /* @__PURE__ */ __name((region, {
      useFipsEndpoint = false,
      useDualstackEndpoint = false,
      signingService,
      regionHash,
      partitionHash
    }) => {
      var _a, _b, _c, _d, _e;
      const partition = getResolvedPartition(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : ((_a = partitionHash[partition]) == null ? void 0 : _a.endpoint) ?? region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = getHostnameFromVariants((_b = regionHash[resolvedRegion]) == null ? void 0 : _b.variants, hostnameOptions);
      const partitionHostname = getHostnameFromVariants((_c = partitionHash[partition]) == null ? void 0 : _c.variants, hostnameOptions);
      const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = getResolvedSigningRegion(hostname, {
        signingRegion: (_d = regionHash[resolvedRegion]) == null ? void 0 : _d.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_e = regionHash[resolvedRegion]) == null ? void 0 : _e.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    }, "getRegionInfo");
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map.set(scheme.schemeId, scheme);
  }
  return map;
}
var import_types, import_util_middleware, httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    import_types = __toESM(require_dist_cjs());
    import_util_middleware = __toESM(require_dist_cjs10());
    httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
      const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
      const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
      const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
      const failureReasons = [];
      for (const option of options) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});

// ../../node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../node_modules/@smithy/property-provider/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CredentialsProviderError: () => CredentialsProviderError,
      ProviderError: () => ProviderError,
      TokenProviderError: () => TokenProviderError,
      chain: () => chain,
      fromStatic: () => fromStatic,
      memoize: () => memoize
    });
    module2.exports = __toCommonJS2(src_exports);
    var _ProviderError = class _ProviderError2 extends Error {
      constructor(message, options = true) {
        var _a;
        let logger2;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger2 = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger2 = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError2.prototype);
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      /**
       * @deprecated use new operator.
       */
      static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
      }
    };
    __name(_ProviderError, "ProviderError");
    var ProviderError = _ProviderError;
    var _CredentialsProviderError = class _CredentialsProviderError2 extends ProviderError {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError2.prototype);
      }
    };
    __name(_CredentialsProviderError, "CredentialsProviderError");
    var CredentialsProviderError = _CredentialsProviderError;
    var _TokenProviderError = class _TokenProviderError2 extends ProviderError {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError2.prototype);
      }
    };
    __name(_TokenProviderError, "TokenProviderError");
    var TokenProviderError = _TokenProviderError;
    var chain = /* @__PURE__ */ __name((...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err == null ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    }, "chain");
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
  }
});

// ../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports.getHomeDir = getHomeDir2;
  }
});

// ../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath2 = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath2;
  }
});

// ../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile2 = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile2;
  }
});

// ../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// ../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
      DEFAULT_PROFILE: () => DEFAULT_PROFILE,
      ENV_PROFILE: () => ENV_PROFILE,
      getProfileName: () => getProfileName,
      loadSharedConfigFiles: () => loadSharedConfigFiles,
      loadSsoSessionData: () => loadSsoSessionData,
      parseKnownFiles: () => parseKnownFiles
    });
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_getHomeDir(), module2.exports);
    var ENV_PROFILE = "AWS_PROFILE";
    var DEFAULT_PROFILE = "default";
    var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
    __reExport(src_exports, require_getSSOTokenFilepath(), module2.exports);
    __reExport(src_exports, require_getSSOTokenFromFile(), module2.exports);
    var import_types5 = require_dist_cjs();
    var getConfigData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(import_types5.IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce(
      (acc, [key, value]) => {
        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
        const updatedKey = key.substring(0, indexOfSeparator) === import_types5.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
        acc[updatedKey] = value;
        return acc;
      },
      {
        // Populate default profile, if present.
        ...data.default && { default: data.default }
      }
    ), "getConfigData");
    var import_path = require("path");
    var import_getHomeDir = require_getHomeDir();
    var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
    var import_getHomeDir2 = require_getHomeDir();
    var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
    var import_getHomeDir3 = require_getHomeDir();
    var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(import_types5.IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map[currentSection] = map[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map[currentSection][key] = value;
            }
          }
        }
      }
      return map;
    }, "parseIni");
    var import_slurpFile = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var CONFIG_PREFIX_SEPARATOR = ".";
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = (0, import_getHomeDir3.getHomeDir)();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        (0, import_slurpFile.slurpFile)(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    }, "loadSharedConfigFiles");
    var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types5.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {}), "getSsoSessionData");
    var import_slurpFile2 = require_slurpFile();
    var swallowError2 = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    }, "mergeConfigFiles");
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    }, "parseKnownFiles");
  }
});

// ../../node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      loadConfig: () => loadConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_property_provider = require_dist_cjs12();
    function getSelectorName(functionString) {
      try {
        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
        constants.delete("CONFIG");
        constants.delete("CONFIG_PREFIX_SEPARATOR");
        constants.delete("ENV");
        return [...constants].join(", ");
      } catch (e) {
        return functionString;
      }
    }
    __name(getSelectorName, "getSelectorName");
    var fromEnv = /* @__PURE__ */ __name((envVarSelector, logger2) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(
          e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,
          { logger: logger2 }
        );
      }
    }, "fromEnv");
    var import_shared_ini_file_loader = require_dist_cjs13();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(
          e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,
          { logger: init.logger }
        );
      }
    }, "fromSharedConfigFiles");
    var isFunction = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
    var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, import_property_provider.fromStatic)(defaultValue), "fromStatic");
    var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider.memoize)(
      (0, import_property_provider.chain)(
        fromEnv(environmentVariableSelector),
        fromSharedConfigFiles(configFileSelector, configuration),
        fromStatic(defaultValue)
      )
    ), "loadConfig");
  }
});

// ../../node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS({
  "../../node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrlConfig = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs13();
    var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    var CONFIG_ENDPOINT_URL = "endpoint_url";
    var getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env) => {
        const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config) => {
        if (config && profile.services) {
          const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
    exports.getEndpointUrlConfig = getEndpointUrlConfig;
  }
});

// ../../node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS({
  "../../node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromConfig = void 0;
    var node_config_provider_1 = require_dist_cjs14();
    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
    var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId))();
    exports.getEndpointFromConfig = getEndpointFromConfig;
  }
});

// ../../node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseQueryString: () => parseQueryString
    });
    module2.exports = __toCommonJS2(src_exports);
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, "parseQueryString");
  }
});

// ../../node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../node_modules/@smithy/url-parser/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseUrl: () => parseUrl
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_querystring_parser = require_dist_cjs15();
    var parseUrl = /* @__PURE__ */ __name((url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, import_querystring_parser.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
  }
});

// ../../node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      deserializerMiddleware: () => deserializerMiddleware,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      getSerdePlugin: () => getSerdePlugin,
      serializerMiddleware: () => serializerMiddleware,
      serializerMiddlewareOption: () => serializerMiddlewareOption2
    });
    module2.exports = __toCommonJS2(src_exports);
    var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
          if (typeof error.$responseBodyText !== "undefined") {
            if (error.$response) {
              error.$response.body = error.$responseBodyText;
            }
          }
        }
        throw error;
      }
    }, "deserializerMiddleware");
    var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
    var deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    var serializerMiddlewareOption2 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption2);
        }
      };
    }
    __name(getSerdePlugin, "getSerdePlugin");
  }
});

// ../../node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      endpointMiddleware: () => endpointMiddleware,
      endpointMiddlewareOptions: () => endpointMiddlewareOptions2,
      getEndpointFromInstructions: () => getEndpointFromInstructions,
      getEndpointPlugin: () => getEndpointPlugin,
      resolveEndpointConfig: () => resolveEndpointConfig,
      resolveParams: () => resolveParams,
      toEndpointV1: () => toEndpointV1
    });
    module2.exports = __toCommonJS2(src_exports);
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, "isArnBucketName");
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = (credentials == null ? void 0 : credentials.credentialScope) ?? (credentials == null ? void 0 : credentials.CredentialScope);
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
    var import_getEndpointFromConfig = require_getEndpointFromConfig();
    var import_url_parser = require_dist_cjs16();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, import_url_parser.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, import_url_parser.parseUrl)(endpoint);
    }, "toEndpointV1");
    var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.endpoint) {
        const endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId || "");
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
    var import_util_middleware3 = require_dist_cjs10();
    var endpointMiddleware = /* @__PURE__ */ __name(({
      config,
      instructions
    }) => {
      return (next, context) => async (args) => {
        var _a, _b, _c;
        const endpoint = await getEndpointFromInstructions(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            }
          },
          { ...config },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = (0, import_util_middleware3.getSmithyContext)(context);
          const httpAuthOption = (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null ? void 0 : _c.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(
              httpAuthOption.signingProperties || {},
              {
                signing_region: authScheme.signingRegion,
                signingRegion: authScheme.signingRegion,
                signing_service: authScheme.signingName,
                signingName: authScheme.signingName,
                signingRegionSet: authScheme.signingRegionSet
              },
              authScheme.properties
            );
          }
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
    var import_middleware_serde2 = require_dist_cjs17();
    var endpointMiddlewareOptions2 = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde2.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = /* @__PURE__ */ __name((config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          endpointMiddleware({
            config,
            instructions
          }),
          endpointMiddlewareOptions2
        );
      }
    }), "getEndpointPlugin");
    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
      const tls = input.tls ?? true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware3.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useFipsEndpoint ?? false)
      };
    }, "resolveEndpointConfig");
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js
var import_middleware_endpoint, httpAuthSchemeEndpointRuleSetMiddlewareOptions, getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    import_middleware_endpoint = __toESM(require_dist_cjs18());
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_endpoint.endpointMiddlewareOptions.name
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js
var import_middleware_serde, httpAuthSchemeMiddlewareOptions, getHttpAuthSchemePlugin;
var init_getHttpAuthSchemePlugin = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    import_middleware_serde = __toESM(require_dist_cjs17());
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
    };
    getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js
var init_middleware_http_auth_scheme = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js
var import_protocol_http, import_types2, import_util_middleware2, defaultErrorHandler, defaultSuccessHandler, httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    import_protocol_http = __toESM(require_dist_cjs2());
    import_types2 = __toESM(require_dist_cjs());
    import_util_middleware2 = __toESM(require_dist_cjs10());
    defaultErrorHandler = (signingProperties) => (error) => {
      throw error;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config) => (next, context) => async (args) => {
      if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = (0, import_util_middleware2.getSmithyContext)(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});

// ../../node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// ../../node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "../../node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// ../../node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// ../../node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset);
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    stringify_default = stringify;
  }
});

// ../../node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || unsafeStringify(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// ../../node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// ../../node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// ../../node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "../../node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// ../../node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "../../node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35("v3", 48, md5_default);
    v3_default = v3;
  }
});

// ../../node_modules/uuid/dist/esm-node/native.js
var import_crypto3, native_default;
var init_native = __esm({
  "../../node_modules/uuid/dist/esm-node/native.js"() {
    import_crypto3 = __toESM(require("crypto"));
    native_default = {
      randomUUID: import_crypto3.default.randomUUID
    };
  }
});

// ../../node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../node_modules/uuid/dist/esm-node/v4.js"() {
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// ../../node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto4.default.createHash("sha1").update(bytes).digest();
}
var import_crypto4, sha1_default;
var init_sha1 = __esm({
  "../../node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto4 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// ../../node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "../../node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// ../../node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "../../node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var version_default;
var init_version = __esm({
  "../../node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// ../../node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// ../../node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isClockSkewCorrectedError: () => isClockSkewCorrectedError,
      isClockSkewError: () => isClockSkewError,
      isRetryableByTrait: () => isRetryableByTrait,
      isServerError: () => isServerError,
      isThrottlingError: () => isThrottlingError,
      isTransientError: () => isTransientError
    });
    module2.exports = __toCommonJS2(src_exports);
    var CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    var THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
      // DynamoDB
    ];
    var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, "isRetryableByTrait");
    var isClockSkewError = /* @__PURE__ */ __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => {
      var _a;
      return (_a = error.$metadata) == null ? void 0 : _a.clockSkewCorrected;
    }, "isClockSkewCorrectedError");
    var isThrottlingError = /* @__PURE__ */ __name((error) => {
      var _a, _b;
      return ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true;
    }, "isThrottlingError");
    var isTransientError = /* @__PURE__ */ __name((error) => {
      var _a;
      return isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? void 0 : error.code) || "") || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0);
    }, "isTransientError");
    var isServerError = /* @__PURE__ */ __name((error) => {
      var _a;
      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    }, "isServerError");
  }
});

// ../../node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../node_modules/@smithy/util-retry/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
      DefaultRateLimiter: () => DefaultRateLimiter,
      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
      REQUEST_HEADER: () => REQUEST_HEADER,
      RETRY_COST: () => RETRY_COST,
      RETRY_MODES: () => RETRY_MODES,
      StandardRetryStrategy: () => StandardRetryStrategy,
      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
    });
    module2.exports = __toCommonJS2(src_exports);
    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
      return RETRY_MODES2;
    })(RETRY_MODES || {});
    var DEFAULT_MAX_ATTEMPTS = 3;
    var DEFAULT_RETRY_MODE = "standard";
    var import_service_error_classification = require_dist_cjs19();
    var _DefaultRateLimiter = class _DefaultRateLimiter {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (options == null ? void 0 : options.beta) ?? 0.7;
        this.minCapacity = (options == null ? void 0 : options.minCapacity) ?? 1;
        this.minFillRate = (options == null ? void 0 : options.minFillRate) ?? 0.5;
        this.scaleConstant = (options == null ? void 0 : options.scaleConstant) ?? 0.4;
        this.smooth = (options == null ? void 0 : options.smooth) ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, import_service_error_classification.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    __name(_DefaultRateLimiter, "DefaultRateLimiter");
    var DefaultRateLimiter = _DefaultRateLimiter;
    var DEFAULT_RETRY_DELAY_BASE = 100;
    var MAXIMUM_RETRY_DELAY = 20 * 1e3;
    var THROTTLING_RETRY_DELAY_BASE = 500;
    var INITIAL_RETRY_TOKENS = 500;
    var RETRY_COST = 5;
    var TIMEOUT_RETRY_COST = 10;
    var NO_RETRY_INCREMENT = 1;
    var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    var REQUEST_HEADER = "amz-sdk-request";
    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, "computeNextBackoffDelay");
      const setDelayBase = /* @__PURE__ */ __name((delay) => {
        delayBase = delay;
      }, "setDelayBase");
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    }, "getDefaultRetryBackoffStrategy");
    var createDefaultRetryToken = /* @__PURE__ */ __name(({
      retryDelay,
      retryCount,
      retryCost
    }) => {
      const getRetryCount = /* @__PURE__ */ __name(() => retryCount, "getRetryCount");
      const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
      const getRetryCost = /* @__PURE__ */ __name(() => retryCost, "getRetryCost");
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    }, "createDefaultRetryToken");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = "standard";
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(
            errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE
          );
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      /**
       * @returns the current available retry capacity.
       *
       * This number decreases when retries are executed and refills when requests or retries succeed.
       */
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = "adaptive";
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var _ConfiguredRetryStrategy = class _ConfiguredRetryStrategy extends StandardRetryStrategy {
      /**
       * @param maxAttempts - the maximum number of retry attempts allowed.
       *                      e.g., if set to 3, then 4 total requests are possible.
       * @param computeNextBackoffDelay - a millisecond delay for each retry or a function that takes the retry attempt
       *                                  and returns the delay.
       *
       * @example exponential backoff.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, (attempt) => attempt ** 2)
       * });
       * ```
       * @example constant delay.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, 2000)
       * });
       * ```
       */
      constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    __name(_ConfiguredRetryStrategy, "ConfiguredRetryStrategy");
    var ConfiguredRetryStrategy = _ConfiguredRetryStrategy;
  }
});

// ../../node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      constructStack: () => constructStack
    });
    module2.exports = __toCommonJS2(src_exports);
    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, "getAllAliases");
    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    }, "getMiddlewareNameWithAliases");
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name((entries) => entries.sort(
        (a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]
      ), "sort");
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(
          (wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
          },
          []
        );
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`
                  );
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                  );
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          var _a;
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(
            identifyOnResolve || cloned.identifyOnResolve() || (((_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) ?? false)
          );
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }
      };
      return stack;
    }, "constructStack");
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module2.exports = __toCommonJS2(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// ../../node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_is_array_buffer = require_dist_cjs22();
    var import_buffer = require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// ../../node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var BASE64_REGEX2 = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase643 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX2.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase643;
  }
});

// ../../node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs23();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// ../../node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var util_utf8_1 = require_dist_cjs24();
    var toBase642 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = (0, util_utf8_1.fromUtf8)(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
    exports.toBase64 = toBase642;
  }
});

// ../../node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../node_modules/@smithy/util-base64/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_fromBase64(), module2.exports);
    __reExport(src_exports, require_toBase64(), module2.exports);
  }
});

// ../../node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "../../node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream2 = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
  }
});

// ../../node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      escapeUri: () => escapeUri,
      escapeUriPath: () => escapeUriPath
    });
    module2.exports = __toCommonJS2(src_exports);
    var escapeUri = /* @__PURE__ */ __name((uri) => (
      // AWS percent-encodes some extra non-standard characters in a URI
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode)
    ), "escapeUri");
    var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
  }
});

// ../../node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      buildQueryString: () => buildQueryString
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_uri_escape = require_dist_cjs26();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, import_util_uri_escape.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    __name(buildQueryString, "buildQueryString");
  }
});

// ../../node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
      NodeHttp2Handler: () => NodeHttp2Handler,
      NodeHttpHandler: () => NodeHttpHandler,
      streamCollector: () => streamCollector
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs27();
    var import_http = require("http");
    var import_https = require("https");
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    }, "getTransformedHeaders");
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request.destroy();
        reject(
          Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
          })
        );
      }, timeoutInMs);
      request.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    }, "setConnectionTimeout");
    var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    }, "setSocketKeepAlive");
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    }, "setSocketTimeout");
    var import_stream = require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      const headers = request.headers ?? {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let hasError = false;
      if (expect === "100-continue") {
        await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              clearTimeout(timeoutId);
              resolve();
            });
            httpRequest.on("error", () => {
              hasError = true;
              clearTimeout(timeoutId);
              resolve();
            });
          })
        ]);
      }
      if (!hasError) {
        writeBody(httpRequest, request.body);
      }
    }
    __name(writeRequestBody, "writeRequestBody");
    function writeBody(httpRequest, body) {
      if (body instanceof import_stream.Readable) {
        body.pipe(httpRequest);
        return;
      }
      if (body) {
        if (Buffer.isBuffer(body) || typeof body === "string") {
          httpRequest.end(body);
          return;
        }
        const uint8 = body;
        if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
          return;
        }
        httpRequest.end(Buffer.from(body));
        return;
      }
      httpRequest.end();
    }
    __name(writeBody, "writeBody");
    var DEFAULT_REQUEST_TIMEOUT = 0;
    var _NodeHttpHandler = class _NodeHttpHandler2 {
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler2(instanceOrOptions);
      }
      /**
       * @internal
       *
       * @param agent - http(s) agent in use by the NodeHttpHandler instance.
       * @param socketWarningTimestamp - last socket usage check timestamp.
       * @param logger - channel for the warning.
       * @returns timestamp of last emitted warning.
       */
      static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
        var _a, _b, _c;
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = ((_a = sockets[origin]) == null ? void 0 : _a.length) ?? 0;
            const requestsEnqueued = ((_b = requests[origin]) == null ? void 0 : _b.length) ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              (_c = logger2 == null ? void 0 : logger2.warn) == null ? void 0 : _c.call(
                logger2,
                `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`
              );
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof import_http.Agent || typeof (httpAgent == null ? void 0 : httpAgent.destroy) === "function") {
              return httpAgent;
            }
            return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof import_https.Agent || typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === "function") {
              return httpsAgent;
            }
            return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();
        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        let socketCheckTimeoutId;
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            clearTimeout(socketCheckTimeoutId);
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            clearTimeout(socketCheckTimeoutId);
            _reject(arg);
          }, "reject");
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          socketCheckTimeoutId = setTimeout(
            () => {
              this.socketWarningTimestamp = _NodeHttpHandler2.checkSocketUsage(
                agent,
                this.socketWarningTimestamp,
                this.config.logger
              );
            },
            this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)
          );
          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path,
            port: request.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? import_https.request : import_http.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new import_protocol_http5.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          setConnectionTimeout(req, reject, this.config.connectionTimeout);
          setSocketTimeout(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            setSocketKeepAlive(req, {
              // @ts-expect-error keepAlive is not public on httpAgent.
              keepAlive: httpAgent.keepAlive,
              // @ts-expect-error keepAliveMsecs is not public on httpAgent.
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e) => {
            clearTimeout(socketCheckTimeoutId);
            return _reject(e);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_NodeHttpHandler, "NodeHttpHandler");
    var NodeHttpHandler = _NodeHttpHandler;
    var import_http22 = require("http2");
    var import_http2 = __toESM2(require("http2"));
    var _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions ?? [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    __name(_NodeHttp2ConnectionPool, "NodeHttp2ConnectionPool");
    var NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;
    var _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = import_http2.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error(
                "Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString()
              );
            }
          });
        }
        session.unref();
        const destroySessionCb = /* @__PURE__ */ __name(() => {
          session.destroy();
          this.deleteSession(url, session);
        }, "destroySessionCb");
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      /**
       * Delete a session from the connection pool.
       * @param authority The authority of the session to delete.
       * @param session The session to delete.
       */
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) == null ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    __name(_NodeHttp2ConnectionManager, "NodeHttp2ConnectionManager");
    var NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;
    var _NodeHttp2Handler = class _NodeHttp2Handler2 {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttp2Handler2(instanceOrOptions);
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          }, "reject");
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_a = this.config) == null ? void 0 : _a.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = /* @__PURE__ */ __name((err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          }, "rejectWithDestroy");
          const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [import_http22.constants.HTTP2_HEADER_PATH]: path,
            [import_http22.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new import_protocol_http5.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: getTransformedHeaders(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
      /**
       * Destroys a session.
       * @param session The session to destroy.
       */
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    __name(_NodeHttp2Handler, "NodeHttp2Handler");
    var NodeHttp2Handler = _NodeHttp2Handler;
    var _Collector = class _Collector extends import_stream.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    __name(_Collector, "Collector");
    var Collector = _Collector;
    var streamCollector = /* @__PURE__ */ __name((stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    }, "streamCollector");
    var isReadableStreamInstance = /* @__PURE__ */ __name((stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream, "isReadableStreamInstance");
    async function collectReadableStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectReadableStream, "collectReadableStream");
  }
});

// ../../node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../node_modules/@smithy/fetch-http-handler/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      FetchHttpHandler: () => FetchHttpHandler,
      keepAliveSupport: () => keepAliveSupport,
      streamCollector: () => streamCollector
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs27();
    function requestTimeout(timeoutInMs = 0) {
      return new Promise((resolve, reject) => {
        if (timeoutInMs) {
          setTimeout(() => {
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
          }, timeoutInMs);
        }
      });
    }
    __name(requestTimeout, "requestTimeout");
    var keepAliveSupport = {
      supported: void 0
    };
    var _FetchHttpHandler = class _FetchHttpHandler2 {
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _FetchHttpHandler2(instanceOrOptions);
      }
      constructor(options) {
        if (typeof options === "function") {
          this.configProvider = options().then((opts) => opts || {});
        } else {
          this.config = options ?? {};
          this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === void 0) {
          keepAliveSupport.supported = Boolean(
            typeof Request !== "undefined" && "keepalive" in new Request("https://[::1]")
          );
        }
      }
      destroy() {
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal == null ? void 0 : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? void 0 : request.body;
        const requestOptions = {
          body,
          headers: new Headers(request.headers),
          method,
          credentials
        };
        if (body) {
          requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
          requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
          requestOptions.keepalive = keepAlive;
        }
        let removeSignalEventListener = null;
        const fetchRequest = new Request(url, requestOptions);
        const raceOfPromises = [
          fetch(fetchRequest).then((response) => {
            const fetchHeaders = response.headers;
            const transformedHeaders = {};
            for (const pair of fetchHeaders.entries()) {
              transformedHeaders[pair[0]] = pair[1];
            }
            const hasReadableStream = response.body != void 0;
            if (!hasReadableStream) {
              return response.blob().then((body2) => ({
                response: new import_protocol_http5.HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: body2
                })
              }));
            }
            return {
              response: new import_protocol_http5.HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: response.body
              })
            };
          }),
          requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
          raceOfPromises.push(
            new Promise((resolve, reject) => {
              const onAbort = /* @__PURE__ */ __name(() => {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
              }, "onAbort");
              if (typeof abortSignal.addEventListener === "function") {
                const signal = abortSignal;
                signal.addEventListener("abort", onAbort, { once: true });
                removeSignalEventListener = /* @__PURE__ */ __name(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
              } else {
                abortSignal.onabort = onAbort;
              }
            })
          );
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          config[key] = value;
          return config;
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_FetchHttpHandler, "FetchHttpHandler");
    var FetchHttpHandler = _FetchHttpHandler;
    var import_util_base64 = require_dist_cjs25();
    var streamCollector = /* @__PURE__ */ __name((stream) => {
      if (typeof Blob === "function" && stream instanceof Blob) {
        return collectBlob(stream);
      }
      return collectStream(stream);
    }, "streamCollector");
    async function collectBlob(blob) {
      const base64 = await readToBase64(blob);
      const arrayBuffer = (0, import_util_base64.fromBase64)(base64);
      return new Uint8Array(arrayBuffer);
    }
    __name(collectBlob, "collectBlob");
    async function collectStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectStream, "collectStream");
    function readToBase64(blob) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          if (reader.readyState !== 2) {
            return reject(new Error("Reader aborted too early"));
          }
          const result = reader.result ?? "";
          const commaIndex = result.indexOf(",");
          const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
          resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
      });
    }
    __name(readToBase64, "readToBase64");
  }
});

// ../../node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromHex: () => fromHex,
      toHex: () => toHex
    });
    module2.exports = __toCommonJS2(src_exports);
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, "fromHex");
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    __name(toHex, "toHex");
  }
});

// ../../node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS({
  "../../node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var fetch_http_handler_1 = require_dist_cjs29();
    var util_base64_1 = require_dist_cjs25();
    var util_hex_encoding_1 = require_dist_cjs30();
    var util_utf8_1 = require_dist_cjs24();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, fetch_http_handler_1.streamCollector)(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return (0, util_base64_1.toBase64)(buf);
          } else if (encoding === "hex") {
            return (0, util_hex_encoding_1.toHex)(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return (0, util_utf8_1.toUtf8)(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if (isReadableStreamInstance(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
    var isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
    var isReadableStreamInstance = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});

// ../../node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "../../node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs28();
    var util_buffer_from_1 = require_dist_cjs23();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        try {
          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
        } catch (e) {
          const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
  }
});

// ../../node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../node_modules/@smithy/util-stream/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_base64 = require_dist_cjs25();
    var import_util_utf8 = require_dist_cjs24();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, import_util_base64.toBase64)(payload);
      }
      return (0, import_util_utf8.toUtf8)(payload);
    }
    __name(transformToString, "transformToString");
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));
    }
    __name(transformFromString, "transformFromString");
    var _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter2 extends Uint8Array {
      /**
       * @param source - such as a string or Stream.
       * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.
       */
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      /**
       * @param source - Uint8Array to be mutated.
       * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.
       */
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter2.prototype);
        return source;
      }
      /**
       * @param encoding - default 'utf-8'.
       * @returns the blob as string.
       */
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
    __name(_Uint8ArrayBlobAdapter, "Uint8ArrayBlobAdapter");
    var Uint8ArrayBlobAdapter = _Uint8ArrayBlobAdapter;
    __reExport(src_exports, require_getAwsChunkedEncodingStream(), module2.exports);
    __reExport(src_exports, require_sdk_stream_mixin(), module2.exports);
  }
});

// ../../node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Client: () => Client,
      Command: () => Command,
      LazyJsonString: () => LazyJsonString,
      NoOpLogger: () => NoOpLogger,
      SENSITIVE_STRING: () => SENSITIVE_STRING,
      ServiceException: () => ServiceException,
      StringWrapper: () => StringWrapper,
      _json: () => _json,
      collectBody: () => collectBody2,
      convertMap: () => convertMap,
      createAggregatedClient: () => createAggregatedClient,
      dateToUtcString: () => dateToUtcString,
      decorateServiceException: () => decorateServiceException,
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion2,
      expectBoolean: () => expectBoolean,
      expectByte: () => expectByte,
      expectFloat32: () => expectFloat32,
      expectInt: () => expectInt,
      expectInt32: () => expectInt32,
      expectLong: () => expectLong,
      expectNonNull: () => expectNonNull,
      expectNumber: () => expectNumber,
      expectObject: () => expectObject,
      expectShort: () => expectShort,
      expectString: () => expectString,
      expectUnion: () => expectUnion2,
      extendedEncodeURIComponent: () => extendedEncodeURIComponent,
      getArrayIfSingleItem: () => getArrayIfSingleItem,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
      getValueFromTextNode: () => getValueFromTextNode2,
      handleFloat: () => handleFloat,
      limitedParseDouble: () => limitedParseDouble,
      limitedParseFloat: () => limitedParseFloat,
      limitedParseFloat32: () => limitedParseFloat32,
      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
      logger: () => logger2,
      map: () => map,
      parseBoolean: () => parseBoolean,
      parseEpochTimestamp: () => parseEpochTimestamp,
      parseRfc3339DateTime: () => parseRfc3339DateTime,
      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
      parseRfc7231DateTime: () => parseRfc7231DateTime,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
      resolvedPath: () => resolvedPath2,
      serializeDateTime: () => serializeDateTime,
      serializeFloat: () => serializeFloat,
      splitEvery: () => splitEvery,
      strictParseByte: () => strictParseByte,
      strictParseDouble: () => strictParseDouble,
      strictParseFloat: () => strictParseFloat,
      strictParseFloat32: () => strictParseFloat32,
      strictParseInt: () => strictParseInt,
      strictParseInt32: () => strictParseInt32,
      strictParseLong: () => strictParseLong,
      strictParseShort: () => strictParseShort,
      take: () => take,
      throwDefaultError: () => throwDefaultError,
      withBaseException: () => withBaseException
    });
    module2.exports = __toCommonJS2(src_exports);
    var _NoOpLogger = class _NoOpLogger {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    __name(_NoOpLogger, "NoOpLogger");
    var NoOpLogger = _NoOpLogger;
    var import_middleware_stack = require_dist_cjs21();
    var _Client = class _Client {
      constructor(config) {
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then(
            (result) => callback(null, result.output),
            (err) => callback(err)
          ).catch(
            // prevent any errors thrown in the callback from triggering an
            // unhandled promise rejection
            () => {
            }
          );
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    __name(_Client, "Client");
    var Client = _Client;
    var import_util_stream = require_dist_cjs31();
    var collectBody2 = /* @__PURE__ */ __name(async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
    }, "collectBody");
    var import_types5 = require_dist_cjs();
    var _Command = class _Command {
      constructor() {
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      /**
       * Factory for Command ClassBuilder.
       * @internal
       */
      static classBuilder() {
        return new ClassBuilder();
      }
      /**
       * @internal
       */
      resolveMiddlewareWithContext(clientStack, configuration, options, {
        middlewareFn,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        smithyContext,
        additionalContext,
        CommandCtor
      }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger22 } = configuration;
        const handlerExecutionContext = {
          logger: logger22,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [import_types5.SMITHY_CONTEXT_KEY]: {
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
    };
    __name(_Command, "Command");
    var Command = _Command;
    var _ClassBuilder = class _ClassBuilder {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_) => _;
        this._outputFilterSensitiveLog = (_) => _;
        this._serializer = null;
        this._deserializer = null;
      }
      /**
       * Optional init callback.
       */
      init(cb) {
        this._init = cb;
      }
      /**
       * Set the endpoint parameter instructions.
       */
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      /**
       * Add any number of middleware.
       */
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      /**
       * Set the initial handler execution context Smithy field.
       */
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      /**
       * Set the initial handler execution context.
       */
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      /**
       * Set constant string identifiers for the operation.
       */
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      /**
       * Set the input and output sensistive log filters.
       */
      f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      /**
       * Sets the serializer.
       */
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      /**
       * Sets the deserializer.
       */
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      /**
       * @returns a Command class with the classBuilder properties.
       */
      build() {
        var _a;
        const closure = this;
        let CommandRef;
        return CommandRef = (_a = class extends Command {
          /**
           * @public
           */
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
          }
          /**
           * @public
           */
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          /**
           * @internal
           */
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        }, __name(_a, "CommandRef"), _a);
      }
    };
    __name(_ClassBuilder, "ClassBuilder");
    var ClassBuilder = _ClassBuilder;
    var SENSITIVE_STRING = "***SensitiveInformation***";
    var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, "methodImpl");
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    }, "createAggregatedClient");
    var parseBoolean = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    var expectBoolean = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    }, "expectBoolean");
    var expectNumber = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger2.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = /* @__PURE__ */ __name((value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    var expectLong = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    var expectInt = expectLong;
    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    var castInt = /* @__PURE__ */ __name((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    var expectNonNull = /* @__PURE__ */ __name((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    var expectObject = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    var expectString = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger2.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    var expectUnion2 = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    var strictParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectNumber(parseNumber(value));
      }
      return expectNumber(value);
    }, "strictParseDouble");
    var strictParseFloat = strictParseDouble;
    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    }, "strictParseFloat32");
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = /* @__PURE__ */ __name((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    var limitedParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectNumber(value);
    }, "limitedParseDouble");
    var handleFloat = limitedParseDouble;
    var limitedParseFloat = limitedParseDouble;
    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectFloat32(value);
    }, "limitedParseFloat32");
    var parseFloatString = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    }, "parseFloatString");
    var strictParseLong = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    }, "strictParseLong");
    var strictParseInt = strictParseLong;
    var strictParseInt32 = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    }, "strictParseInt32");
    var strictParseShort = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    }, "strictParseShort");
    var strictParseByte = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    }, "strictParseByte");
    var stackTraceWarning = /* @__PURE__ */ __name((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    var logger2 = {
      warn: console.warn
    };
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    __name(dateToUtcString, "dateToUtcString");
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    }, "parseRfc3339DateTime");
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    }, "parseRfc3339DateTimeWithOffset");
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    }, "parseEpochTimestamp");
    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, "hour", 0, 23),
          parseDateValue(time.minutes, "minute", 0, 59),
          // seconds can go up to 60 for leap seconds
          parseDateValue(time.seconds, "seconds", 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    }, "buildDate");
    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    }, "adjustRfc850Year");
    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    var isLeapYear = /* @__PURE__ */ __name((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    var parseMilliseconds = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    }, "parseMilliseconds");
    var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    }, "parseOffsetToMilliseconds");
    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
    var _ServiceException = class _ServiceException2 extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException2.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    __name(_ServiceException, "ServiceException");
    var ServiceException = _ServiceException;
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
    var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody == null ? void 0 : parsedBody.code) || (parsedBody == null ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    }, "throwDefaultError");
    var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, "withBaseException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
    var warningEmitted2 = false;
    var emitWarningIfUnsupportedVersion2 = /* @__PURE__ */ __name((version2) => {
      if (version2 && !warningEmitted2 && parseInt(version2.substring(1, version2.indexOf("."))) < 16) {
        warningEmitted2 = true;
      }
    }, "emitWarningIfUnsupportedVersion");
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in import_types5.AlgorithmId) {
        const algorithmId = import_types5.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    }, "getRetryConfiguration");
    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, "resolveRetryRuntimeConfig");
    var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig),
        ...getRetryConfiguration(runtimeConfig)
      };
    }, "getDefaultExtensionConfiguration");
    var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        ...resolveChecksumRuntimeConfig(config),
        ...resolveRetryRuntimeConfig(config)
      };
    }, "resolveDefaultRuntimeConfig");
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    __name(extendedEncodeURIComponent, "extendedEncodeURIComponent");
    var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
    var getValueFromTextNode2 = /* @__PURE__ */ __name((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode2(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
    var StringWrapper = /* @__PURE__ */ __name(function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    }, "StringWrapper");
    StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(StringWrapper, String);
    var _LazyJsonString = class _LazyJsonString2 extends StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString2) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString2(object);
        }
        return new _LazyJsonString2(JSON.stringify(object));
      }
    };
    __name(_LazyJsonString, "LazyJsonString");
    var LazyJsonString = _LazyJsonString;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    __name(map, "map");
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    }, "convertMap");
    var take = /* @__PURE__ */ __name((source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    }, "take");
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce(
          (_instructions, [key, value]) => {
            if (Array.isArray(value)) {
              _instructions[key] = value;
            } else {
              if (typeof value === "function") {
                _instructions[key] = [filter, value()];
              } else {
                _instructions[key] = [filter, value];
              }
            }
            return _instructions;
          },
          {}
        )
      );
    }, "mapWithFilter");
    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, "applyInstruction");
    var nonNullish = /* @__PURE__ */ __name((_) => _ != null, "nonNullish");
    var pass = /* @__PURE__ */ __name((_) => _, "pass");
    var resolvedPath2 = /* @__PURE__ */ __name((resolvedPath22, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath22 = resolvedPath22.replace(
          uriLabel,
          isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue)
        );
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath22;
    }, "resolvedPath");
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    }, "serializeFloat");
    var serializeDateTime = /* @__PURE__ */ __name((date) => date.toISOString().replace(".000Z", "Z"), "serializeDateTime");
    var _json = /* @__PURE__ */ __name((obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    }, "_json");
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    __name(splitEvery, "splitEvery");
  }
});

// ../../node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS({
  "../../node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isStreamingPayload = void 0;
    var stream_1 = require("stream");
    var isStreamingPayload = (request) => (request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream;
    exports.isStreamingPayload = isStreamingPayload;
  }
});

// ../../node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
      ENV_RETRY_MODE: () => ENV_RETRY_MODE,
      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
      StandardRetryStrategy: () => StandardRetryStrategy,
      defaultDelayDecider: () => defaultDelayDecider,
      defaultRetryDecider: () => defaultRetryDecider,
      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
      getRetryAfterHint: () => getRetryAfterHint,
      getRetryPlugin: () => getRetryPlugin,
      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
      resolveRetryConfig: () => resolveRetryConfig,
      retryMiddleware: () => retryMiddleware,
      retryMiddlewareOptions: () => retryMiddlewareOptions2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    var import_uuid2 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var import_util_retry = require_dist_cjs20();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (options == null ? void 0 : options.noRetryIncrement) ?? import_util_retry.NO_RETRY_INCREMENT;
      const retryCost = (options == null ? void 0 : options.retryCost) ?? import_util_retry.RETRY_COST;
      const timeoutRetryCost = (options == null ? void 0 : options.timeoutRetryCost) ?? import_util_retry.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
      const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, "retrieveRetryTokens");
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, "releaseRetryTokens");
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    }, "getDefaultRetryQuota");
    var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
    var import_service_error_classification = require_dist_cjs19();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
    }, "defaultRetryDecider");
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, "asSdkError");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = import_util_retry.RETRY_MODES.STANDARD;
        this.retryDecider = (options == null ? void 0 : options.retryDecider) ?? defaultRetryDecider;
        this.delayDecider = (options == null ? void 0 : options.delayDecider) ?? defaultDelayDecider;
        this.retryQuota = (options == null ? void 0 : options.retryQuota) ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (import_protocol_http5.HttpRequest.isInstance(request)) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid2.v4)();
        }
        while (true) {
          try {
            if (import_protocol_http5.HttpRequest.isInstance(request)) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options == null ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options == null ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider(
                (0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http5.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, "getDelayFromRetryAfterHeader");
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy extends StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter();
        this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var import_util_middleware3 = require_dist_cjs10();
    var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    var CONFIG_MAX_ATTEMPTS = "max_attempts";
    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: import_util_retry.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
      const { retryStrategy } = input;
      const maxAttempts = (0, import_util_middleware3.normalizeProvider)(input.maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, import_util_middleware3.normalizeProvider)(input.retryMode)();
          if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
            return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
          }
          return new import_util_retry.StandardRetryStrategy(maxAttempts);
        }
      };
    }, "resolveRetryConfig");
    var ENV_RETRY_MODE = "AWS_RETRY_MODE";
    var CONFIG_RETRY_MODE = "retry_mode";
    var NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: import_util_retry.DEFAULT_RETRY_MODE
    };
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http5.HttpRequest.isInstance(request)) {
        delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
        delete request.headers[import_util_retry.REQUEST_HEADER];
      }
      return next(args);
    }, "omitRetryHeadersMiddleware");
    var omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
      }
    }), "getOmitRetryHeadersPlugin");
    var import_smithy_client5 = require_dist_cjs32();
    var import_isStreamingPayload = require_isStreamingPayload();
    var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a;
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = import_protocol_http5.HttpRequest.isInstance(request);
        if (isRequest) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid2.v4)();
        }
        while (true) {
          try {
            if (isRequest) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = asSdkError(e);
            if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
              (_a = context.logger instanceof import_smithy_client5.NoOpLogger ? console : context.logger) == null ? void 0 : _a.warn(
                "An error was encountered in a non-retryable streaming request."
              );
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy == null ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    }, "retryMiddleware");
    var isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
      const errorInfo = {
        error,
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, "getRetryErrorInfo");
    var getRetryErrorType = /* @__PURE__ */ __name((error) => {
      if ((0, import_service_error_classification.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, import_service_error_classification.isTransientError)(error))
        return "TRANSIENT";
      if ((0, import_service_error_classification.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    }, "getRetryErrorType");
    var retryMiddlewareOptions2 = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions2);
      }
    }), "getRetryPlugin");
    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http5.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, "getRetryAfterHint");
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js
var import_middleware_retry, httpSigningMiddlewareOptions, getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    import_middleware_retry = __toESM(require_dist_cjs33());
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: import_middleware_retry.retryMiddlewareOptions.name
    };
    getHttpSigningPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/@smithy/core/dist-es/middleware-http-signing/index.js
var init_middleware_http_signing = __esm({
  "../../node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    DefaultIdentityProviderConfig = class {
      constructor(config) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js
var import_types3, HttpApiKeyAuthSigner;
var init_httpApiKeyAuth = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    import_types3 = __toESM(require_dist_cjs());
    HttpApiKeyAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) {
          throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        }
        if (!signingProperties.name) {
          throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        }
        if (!signingProperties.in) {
          throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        }
        if (!identity.apiKey) {
          throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        }
        const clonedRequest = httpRequest.clone();
        if (signingProperties.in === import_types3.HttpApiKeyAuthLocation.QUERY) {
          clonedRequest.query[signingProperties.name] = identity.apiKey;
        } else if (signingProperties.in === import_types3.HttpApiKeyAuthLocation.HEADER) {
          clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
        } else {
          throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
        }
        return clonedRequest;
      }
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js
var HttpBearerAuthSigner;
var init_httpBearerAuth = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    HttpBearerAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        const clonedRequest = httpRequest.clone();
        if (!identity.token) {
          throw new Error("request could not be signed with `token` since the `token` is not defined");
        }
        clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
        return clonedRequest;
      }
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var NoAuthSigner;
var init_noAuth = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    NoAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
      }
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js
var init_httpAuthSchemes = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
var createIsIdentityExpiredFunction, EXPIRATION_MS, isIdentityExpired, doesIdentityRequireRefresh, memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js
var init_util_identity_and_auth = __esm({
  "../../node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});

// ../../node_modules/@smithy/core/dist-es/getSmithyContext.js
var import_types4, getSmithyContext3;
var init_getSmithyContext = __esm({
  "../../node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    import_types4 = __toESM(require_dist_cjs());
    getSmithyContext3 = (context) => context[import_types4.SMITHY_CONTEXT_KEY] || (context[import_types4.SMITHY_CONTEXT_KEY] = {});
  }
});

// ../../node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider;
var init_normalizeProvider = __esm({
  "../../node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/protocols/requestBuilder.js
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var import_protocol_http2, import_smithy_client, RequestBuilder;
var init_requestBuilder = __esm({
  "../../node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    import_protocol_http2 = __toESM(require_dist_cjs2());
    import_smithy_client = __toESM(require_dist_cjs32());
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new import_protocol_http2.HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = (0, import_smithy_client.resolvedPath)(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/pagination/createPaginator.js
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config, input, ...additionalArguments) {
    let token = config.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input[inputTokenName] = token;
      if (pageSizeTokenName) {
        input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
      }
      if (config.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest, get;
var init_createPaginator = __esm({
  "../../node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    makePagedClientRequest = async (CommandCtor, client2, input, ...args) => {
      return await client2.send(new CommandCtor(input), ...args);
    };
    get = (fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});

// ../../node_modules/@smithy/core/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
  EXPIRATION_MS: () => EXPIRATION_MS,
  HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
  HttpBearerAuthSigner: () => HttpBearerAuthSigner,
  NoAuthSigner: () => NoAuthSigner,
  RequestBuilder: () => RequestBuilder,
  createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
  createPaginator: () => createPaginator,
  doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
  getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
  getHttpSigningPlugin: () => getHttpSigningPlugin,
  getSmithyContext: () => getSmithyContext3,
  httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
  httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
  httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
  httpSigningMiddleware: () => httpSigningMiddleware,
  httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
  isIdentityExpired: () => isIdentityExpired,
  memoizeIdentityProvider: () => memoizeIdentityProvider,
  normalizeProvider: () => normalizeProvider,
  requestBuilder: () => requestBuilder
});
var init_dist_es = __esm({
  "../../node_modules/@smithy/core/dist-es/index.js"() {
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_util_identity_and_auth();
    init_getSmithyContext();
    init_normalizeProvider();
    init_requestBuilder();
    init_createPaginator();
  }
});

// ../../node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      contentLengthMiddleware: () => contentLengthMiddleware,
      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
      getContentLengthPlugin: () => getContentLengthPlugin
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http5 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (import_protocol_http5.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(contentLengthMiddleware, "contentLengthMiddleware");
    var contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    }), "getContentLengthPlugin");
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var warningEmitted, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    warningEmitted = false;
    emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 18) {
        warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var init_client = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_emitWarningIfUnsupportedVersion();
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var import_protocol_http3, getDateHeader;
var init_getDateHeader = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    import_protocol_http3 = __toESM(require_dist_cjs2());
    getDateHeader = (response) => import_protocol_http3.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var import_protocol_http4, throwSigningPropertyError, validateSigningProperties, AwsSdkSigV4Signer, AWSSDKSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    import_protocol_http4 = __toESM(require_dist_cjs2());
    init_utils();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingName = signingProperties?.signingName;
      return {
        config,
        signer,
        signingRegion,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http4.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config, signer, signingRegion, signingName } = await validateSigningProperties(signingProperties);
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error) => {
          const serverTime = error.ServerTime ?? getDateHeader(error.$response);
          if (serverTime) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config.systemClockOffset;
            config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
            const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error.$metadata) {
              error.$metadata.clockSkewCorrected = true;
            }
          }
          throw error;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
      }
    };
    AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  }
});

// ../../node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SignatureV4: () => SignatureV42,
      clearCredentialCache: () => clearCredentialCache,
      createScope: () => createScope,
      getCanonicalHeaders: () => getCanonicalHeaders,
      getCanonicalQuery: () => getCanonicalQuery,
      getPayloadHash: () => getPayloadHash,
      getSigningKey: () => getSigningKey,
      moveHeadersToQuery: () => moveHeadersToQuery,
      prepareRequest: () => prepareRequest
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_middleware3 = require_dist_cjs10();
    var import_util_utf84 = require_dist_cjs24();
    var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    var AUTH_HEADER = "authorization";
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = "date";
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER = "x-amz-content-sha256";
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = "aws4_request";
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
    var import_util_hex_encoding = require_dist_cjs30();
    var import_util_utf8 = require_dist_cjs24();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, "clearCredentialCache");
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, import_util_utf8.toUint8Array)(data));
      return hash.digest();
    }, "hmac");
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
    var import_util_uri_escape = require_dist_cjs26();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce(
            (encoded, value2) => encoded.concat([`${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value2)}`]),
            []
          ).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
    var import_is_array_buffer = require_dist_cjs22();
    var import_util_utf82 = require_dist_cjs24();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, import_util_utf82.toUint8Array)(body));
        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
    var import_util_utf83 = require_dist_cjs24();
    var _HeaderFormatter = class _HeaderFormatter {
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = (0, import_util_utf83.fromUtf8)(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    __name(_HeaderFormatter, "HeaderFormatter");
    var HeaderFormatter = _HeaderFormatter;
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var _Int64 = class _Int642 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int642(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name(_Int64, "Int64");
    var Int64 = _Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    var cloneRequest = /* @__PURE__ */ __name(({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? cloneQuery(query) : void 0
    }), "cloneRequest");
    var cloneQuery = /* @__PURE__ */ __name((query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {}), "cloneQuery");
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
    var iso8601 = /* @__PURE__ */ __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, "toDate");
    var _SignatureV4 = class _SignatureV4 {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true
      }) {
        this.headerFormatter = new HeaderFormatter();
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, import_util_middleware3.normalizeProvider)(region);
        this.credentialProvider = (0, import_util_middleware3.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject(
            "Signature version 4 presigned URLs must have an expiration date less than one week in the future"
          );
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent(
          {
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body
          },
          {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
          }
        );
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, {
        signingDate = /* @__PURE__ */ new Date(),
        signableHeaders,
        unsignableHeaders,
        signingRegion,
        signingService
      } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment == null ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path == null ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)
        typeof credentials.accessKeyId !== "string" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)
        typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    __name(_SignatureV4, "SignatureV4");
    var SignatureV42 = _SignatureV4;
    var formatDate = /* @__PURE__ */ __name((now) => {
      const longDate = iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    }, "formatDate");
    var getCanonicalHeaderList = /* @__PURE__ */ __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var import_signature_v4, resolveAwsSdkSigV4Config, resolveAWSSDKSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_dist_es();
    import_signature_v4 = __toESM(require_dist_cjs35());
    resolveAwsSdkSigV4Config = (config) => {
      let normalizedCreds;
      if (config.credentials) {
        normalizedCreds = memoizeIdentityProvider(config.credentials, isIdentityExpired, doesIdentityRequireRefresh);
      }
      if (!normalizedCreds) {
        if (config.credentialDefaultProvider) {
          normalizedCreds = normalizeProvider(config.credentialDefaultProvider(Object.assign({}, config, {
            parentClientConfig: config
          })));
        } else {
          normalizedCreds = async () => {
            throw new Error("`credentials` is missing");
          };
        }
      }
      const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
      let signer;
      if (config.signer) {
        signer = normalizeProvider(config.signer);
      } else if (config.regionInfoProvider) {
        signer = () => normalizeProvider(config.region)().then(async (region) => [
          await config.regionInfoProvider(region, {
            useFipsEndpoint: await config.useFipsEndpoint(),
            useDualstackEndpoint: await config.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config.signingRegion = config.signingRegion || signingRegion || region;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config.signingName || config.defaultSigningName,
            signingRegion: await normalizeProvider(config.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config.signingRegion = config.signingRegion || signingRegion;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...config,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_AwsSdkSigV4Signer();
    init_resolveAwsSdkSigV4Config();
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes2 = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_aws_sdk();
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var _toStr, _toBool, _toNum;
var init_coercing_serializers = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    _toStr = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number" || typeof val2 === "bigint") {
        const warning = new Error(`Received number ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      if (typeof val2 === "boolean") {
        const warning = new Error(`Received boolean ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      return val2;
    };
    _toBool = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number") {
      }
      if (typeof val2 === "string") {
        const lowercase = val2.toLowerCase();
        if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
          const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
          warning.name = "Warning";
          console.warn(warning);
        }
        return val2 !== "" && lowercase !== "false";
      }
      return val2;
    };
    _toNum = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "boolean") {
      }
      if (typeof val2 === "string") {
        const num = Number(val2);
        if (num.toString() !== val2) {
          const warning = new Error(`Received string "${val2}" where a number was expected.`);
          warning.name = "Warning";
          console.warn(warning);
          return val2;
        }
        return num;
      }
      return val2;
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var import_smithy_client2, awsExpectUnion;
var init_awsExpectUnion = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    import_smithy_client2 = __toESM(require_dist_cjs32());
    awsExpectUnion = (value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === "object" && "__type" in value) {
        delete value.__type;
      }
      return (0, import_smithy_client2.expectUnion)(value);
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var import_smithy_client3, collectBodyString;
var init_common = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    import_smithy_client3 = __toESM(require_dist_cjs32());
    collectBodyString = (streamBody, context) => (0, import_smithy_client3.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e) {
          if (e?.name === "SyntaxError") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "../../node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module2) {
    var util = require_util();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// ../../node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/strnum/strnum.js"(exports, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module2) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports.prettify = prettify;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser2 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser2;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// ../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// ../../node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/fast-xml-parser/src/fxp.js"(exports, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser2 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser: XMLParser2,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_smithy_client4, import_fast_xml_parser, parseXmlBody, parseXmlErrorBody, loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    import_smithy_client4 = __toESM(require_dist_cjs32());
    import_fast_xml_parser = __toESM(require_fxp());
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e) {
          if (e && typeof e === "object") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, import_smithy_client4.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_coercing_serializers();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_parseXmlBody();
  }
});

// ../../node_modules/@aws-sdk/core/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
  AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
  _toBool: () => _toBool,
  _toNum: () => _toNum,
  _toStr: () => _toStr,
  awsExpectUnion: () => awsExpectUnion,
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  loadRestJsonErrorCode: () => loadRestJsonErrorCode,
  loadRestXmlErrorCode: () => loadRestXmlErrorCode,
  parseJsonBody: () => parseJsonBody,
  parseJsonErrorBody: () => parseJsonErrorBody,
  parseXmlBody: () => parseXmlBody,
  parseXmlErrorBody: () => parseXmlErrorBody,
  resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
  resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config
});
var init_dist_es2 = __esm({
  "../../node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_client();
    init_httpAuthSchemes2();
    init_protocols();
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSSMHttpAuthSchemeProvider = exports.defaultSSMHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var defaultSSMHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSSMHttpAuthSchemeParametersProvider = defaultSSMHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "ssm",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultSSMHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSMHttpAuthSchemeProvider = defaultSSMHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// ../../node_modules/@aws-sdk/client-ssm/package.json
var require_package = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-ssm",
      description: "AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-ssm",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo ssm"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.614.0",
        "@aws-sdk/client-sts": "3.614.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/credential-provider-node": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        "@smithy/util-waiter": "^3.1.2",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        "@types/uuid": "^9.0.4",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ssm"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_property_provider = require_dist_cjs12();
    var ENV_KEY = "AWS_ACCESS_KEY_ID";
    var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    var ENV_SESSION = "AWS_SESSION_TOKEN";
    var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    var fromEnv = /* @__PURE__ */ __name((init) => async () => {
      var _a;
      (_a = init == null ? void 0 : init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope }
        };
      }
      throw new import_property_provider.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init == null ? void 0 : init.logger });
    }, "fromEnv");
  }
});

// ../../node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
      Endpoint: () => Endpoint,
      fromContainerMetadata: () => fromContainerMetadata,
      fromInstanceMetadata: () => fromInstanceMetadata,
      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
      httpRequest: () => httpRequest,
      providerConfigFromInit: () => providerConfigFromInit
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_url = require("url");
    var import_property_provider = require_dist_cjs12();
    var import_buffer = require("buffer");
    var import_http = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, import_http.request)({
          method: "GET",
          ...options,
          // Node.js http module doesn't accept hostname with square brackets
          // Refs: https://github.com/nodejs/node/issues/39738
          hostname: (_a = options.hostname) == null ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new import_property_provider.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new import_property_provider.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(new import_property_provider.ProviderError("Error response received from instance metadata service"), { statusCode })
            );
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(import_buffer.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest, "httpRequest");
    var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
    var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    }), "fromImdsCredentials");
    var DEFAULT_TIMEOUT = 1e3;
    var DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(({
      maxRetries = DEFAULT_MAX_RETRIES,
      timeout = DEFAULT_TIMEOUT
    }) => ({ maxRetries, timeout }), "providerConfigFromInit");
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, "retry");
    var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    }, "fromContainerMetadata");
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    }, "requestFromEcsImds");
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new import_property_provider.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new import_property_provider.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new import_property_provider.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,
        {
          tryNextLink: false,
          logger: logger2
        }
      );
    }, "getCmdsUri");
    var _InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError2 extends import_property_provider.CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError2.prototype);
      }
    };
    __name(_InstanceMetadataV1FallbackError, "InstanceMetadataV1FallbackError");
    var InstanceMetadataV1FallbackError = _InstanceMetadataV1FallbackError;
    var import_node_config_provider = require_dist_cjs14();
    var import_url_parser = require_dist_cjs16();
    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
      return Endpoint2;
    })(Endpoint || {});
    var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    var ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
      return EndpointMode2;
    })(EndpointMode || {});
    var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    var ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: "IPv4"
      /* IPv4 */
    };
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
    var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case "IPv4":
          return "http://169.254.169.254";
        case "IPv6":
          return "http://[fd00:ec2::254]";
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    }, "getFromEndpointModeConfig");
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger2) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(
        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL
      );
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    }, "getExtendedInstanceMetadataCredentials");
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger2 = (options == null ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, "staticStabilityProvider");
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }), "fromInstanceMetadata");
    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        var _a;
        const isImdsV1Fallback = disableFetchToken || ((_a = options.headers) == null ? void 0 : _a[X_AWS_EC2_METADATA_TOKEN]) == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await (0, import_node_config_provider.loadConfig)(
            {
              environmentVariableSelector: (env) => {
                const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
                if (envValue === void 0) {
                  throw new import_property_provider.CredentialsProviderError(
                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,
                    { logger: init.logger }
                  );
                }
                return fallbackBlockedFromProcessEnv;
              },
              configFileSelector: (profile2) => {
                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
                return fallbackBlockedFromProfile;
              },
              default: false
            },
            {
              profile
            }
          )();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(
              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(
                ", "
              )}].`
            );
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      }, "getCredentials");
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger2 == null ? void 0 : logger2.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error == null ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            logger2 == null ? void 0 : logger2.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    }, "getInstanceMetadataProvider");
    var getMetadataToken = /* @__PURE__ */ __name(async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }), "getMetadataToken");
    var getProfile = /* @__PURE__ */ __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
      const credentialsResponse = JSON.parse(
        (await httpRequest({
          ...options,
          path: IMDS_PATH + profile
        })).toString()
      );
      if (!isImdsCredentials(credentialsResponse)) {
        throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    }, "getCredentialsFromProfile");
  }
});

// ../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js
var require_checkUrl = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkUrl = void 0;
    var property_provider_1 = require_dist_cjs12();
    var ECS_CONTAINER_HOST = "169.254.170.2";
    var EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
    var EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
    var checkUrl = (url, logger2) => {
      if (url.protocol === "https:") {
        return;
      }
      if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
        return;
      }
      if (url.hostname.includes("[")) {
        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
          return;
        }
      } else {
        if (url.hostname === "localhost") {
          return;
        }
        const ipComponents = url.hostname.split(".");
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
          return;
        }
      }
      throw new property_provider_1.CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger: logger2 });
    };
    exports.checkUrl = checkUrl;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js
var require_requestHelpers = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentials = exports.createGetRequest = void 0;
    var property_provider_1 = require_dist_cjs12();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs32();
    var util_stream_1 = require_dist_cjs31();
    function createGetRequest(url) {
      return new protocol_http_1.HttpRequest({
        protocol: url.protocol,
        hostname: url.hostname,
        port: Number(url.port),
        path: url.pathname,
        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {
          acc[k] = v;
          return acc;
        }, {}),
        fragment: url.hash
      });
    }
    exports.createGetRequest = createGetRequest;
    async function getCredentials(response, logger2) {
      const stream = (0, util_stream_1.sdkStreamMixin)(response.body);
      const str = await stream.transformToString();
      if (response.statusCode === 200) {
        const parsed = JSON.parse(str);
        if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
          throw new property_provider_1.CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger: logger2 });
        }
        return {
          accessKeyId: parsed.AccessKeyId,
          secretAccessKey: parsed.SecretAccessKey,
          sessionToken: parsed.Token,
          expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration)
        };
      }
      if (response.statusCode >= 400 && response.statusCode < 500) {
        let parsedBody = {};
        try {
          parsedBody = JSON.parse(str);
        } catch (e) {
        }
        throw Object.assign(new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 }), {
          Code: parsedBody.Code,
          Message: parsedBody.Message
        });
      }
      throw new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 });
    }
    exports.getCredentials = getCredentials;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js
var require_retry_wrapper = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retryWrapper = void 0;
    var retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i = 0; i < maxRetries; ++i) {
          try {
            return await toRetry();
          } catch (e) {
            await new Promise((resolve) => setTimeout(resolve, delayMs));
          }
        }
        return await toRetry();
      };
    };
    exports.retryWrapper = retryWrapper;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js
var require_fromHttp = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromHttp = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var node_http_handler_1 = require_dist_cjs28();
    var property_provider_1 = require_dist_cjs12();
    var promises_1 = tslib_1.__importDefault(require("fs/promises"));
    var checkUrl_1 = require_checkUrl();
    var requestHelpers_1 = require_requestHelpers();
    var retry_wrapper_1 = require_retry_wrapper();
    var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
    var AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromHttp = (options = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
      let host;
      const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn = options.logger?.constructor?.name === "NoOpLogger" || !options.logger ? console.warn : options.logger.warn;
      if (relative && full) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
        warn("awsContainerCredentialsFullUri will take precedence.");
      }
      if (token && tokenFile) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
        warn("awsContainerAuthorizationToken will take precedence.");
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new property_provider_1.CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
      }
      const url = new URL(host);
      (0, checkUrl_1.checkUrl)(url, options.logger);
      const requestHandler = new node_http_handler_1.NodeHttpHandler({
        requestTimeout: options.timeout ?? 1e3,
        connectionTimeout: options.timeout ?? 1e3
      });
      return (0, retry_wrapper_1.retryWrapper)(async () => {
        const request = (0, requestHelpers_1.createGetRequest)(url);
        if (token) {
          request.headers.Authorization = token;
        } else if (tokenFile) {
          request.headers.Authorization = (await promises_1.default.readFile(tokenFile)).toString();
        }
        try {
          const result = await requestHandler.handle(request);
          return (0, requestHelpers_1.getCredentials)(result.response);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(String(e), { logger: options.logger });
        }
      }, options.maxRetries ?? 3, options.timeout ?? 1e3);
    };
    exports.fromHttp = fromHttp;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromHttp = void 0;
    var fromHttp_1 = require_fromHttp();
    Object.defineProperty(exports, "fromHttp", { enumerable: true, get: function() {
      return fromHttp_1.fromHttp;
    } });
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSSOHttpAuthSchemeProvider = exports.defaultSSOHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "awsssoportal",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_node_config_provider = require_dist_cjs14();
    var import_os = require("os");
    var import_process = require("process");
    var crtAvailability = {
      isCrtAvailable: false
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    }, "isCrtAvailable");
    var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    var UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      const sections = [
        // sdk-metadata
        ["aws-sdk-js", clientVersion],
        // ua-metadata
        ["ua", "2.0"],
        // os-metadata
        [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
        // language-metadata
        // ECMAScript edition doesn't matter in JS, so no version needed.
        ["lang/js"],
        ["md/nodejs", `${import_process.versions.node}`]
      ];
      const crtAvailable = isCrtAvailable();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (import_process.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, import_node_config_provider.loadConfig)({
        environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    }, "defaultUserAgent");
  }
});

// ../../node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../node_modules/@smithy/hash-node/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Hash: () => Hash
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs23();
    var import_util_utf8 = require_dist_cjs24();
    var import_buffer = require("buffer");
    var import_crypto5 = require("crypto");
    var _Hash = class _Hash {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto5.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto5.createHash)(this.algorithmIdentifier);
      }
    };
    __name(_Hash, "Hash");
    var Hash = _Hash;
    function castSourceData(toCast, encoding) {
      if (import_buffer.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, import_util_buffer_from.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, "castSourceData");
  }
});

// ../../node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      calculateBodyLength: () => calculateBodyLength
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_fs2 = require("fs");
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs2.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs2.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "../../node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_config_resolver = require_dist_cjs11();
    var import_node_config_provider = require_dist_cjs14();
    var import_property_provider = require_dist_cjs12();
    var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    var AWS_REGION_ENV = "AWS_REGION";
    var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(({
      region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
      defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
    } = {}) => (0, import_property_provider.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode == null ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(
            `Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`
          );
      }
    }), "resolveDefaultsModeConfig");
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    }, "resolveNodeDefaultsModeAuto");
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() => __toESM2(require_dist_cjs37()));
          const endpoint = await getInstanceMetadataEndpoint();
          return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    }, "inferPhysicalRegion");
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "../../node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let runtimeConfigRegion = /* @__PURE__ */ __name(async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      }, "runtimeConfigRegion");
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
  }
});

// ../../node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client5.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs8();
    var import_config_resolver = require_dist_cjs11();
    var import_core2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_retry2 = require_dist_cjs33();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig();
    var import_region_config_resolver = require_dist_cjs43();
    var import_protocol_http5 = require_dist_cjs2();
    var import_smithy_client5 = require_dist_cjs32();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client5.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http5.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client5.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http5.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOClient = class _SSOClient extends import_smithy_client5.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, import_middleware_endpoint2.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry2.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
          })
        );
        this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new import_core2.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    __name(_SSOClient, "SSOClient");
    var SSOClient = _SSOClient;
    var import_middleware_serde2 = require_dist_cjs17();
    var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException2.prototype);
      }
    };
    __name(_SSOServiceException, "SSOServiceException");
    var SSOServiceException = _SSOServiceException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);
      }
    };
    __name(_TooManyRequestsException, "TooManyRequestsException");
    var TooManyRequestsException = _TooManyRequestsException;
    var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
      }
    };
    __name(_UnauthorizedException, "UnauthorizedException");
    var UnauthorizedException = _UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: import_smithy_client5.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: import_smithy_client5.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client5.map)({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/federation/credentials");
      const query = (0, import_smithy_client5.map)({
        [_rn]: [, (0, import_smithy_client5.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client5.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetRoleCredentialsCommand");
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client5.map)({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/roles");
      const query = (0, import_smithy_client5.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client5.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountRolesCommand");
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client5.map)({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/accounts");
      const query = (0, import_smithy_client5.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountsCommand");
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client5.map)({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/logout");
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_LogoutCommand");
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        roleCredentials: import_smithy_client5._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRoleCredentialsCommand");
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        nextToken: import_smithy_client5.expectString,
        roleList: import_smithy_client5._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountRolesCommand");
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        accountList: import_smithy_client5._json,
        nextToken: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountsCommand");
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client5.collectBody)(output.body, context);
      return contents;
    }, "de_LogoutCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyRequestsExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
    var _aI = "accountId";
    var _aT = "accessToken";
    var _ai = "account_id";
    var _mR = "maxResults";
    var _mr = "max_result";
    var _nT = "nextToken";
    var _nt = "next_token";
    var _rN = "roleName";
    var _rn = "role_name";
    var _xasbt = "x-amz-sso_bearer_token";
    var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
    __name(_GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
    var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;
    var _ListAccountRolesCommand = class _ListAccountRolesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
    __name(_ListAccountRolesCommand, "ListAccountRolesCommand");
    var ListAccountRolesCommand = _ListAccountRolesCommand;
    var _ListAccountsCommand = class _ListAccountsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
    __name(_ListAccountsCommand, "ListAccountsCommand");
    var ListAccountsCommand = _ListAccountsCommand;
    var _LogoutCommand = class _LogoutCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
    __name(_LogoutCommand, "LogoutCommand");
    var LogoutCommand = _LogoutCommand;
    var commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    var _SSO = class _SSO extends SSOClient {
    };
    __name(_SSO, "SSO");
    var SSO = _SSO;
    (0, import_smithy_client5.createAggregatedClient)(commands, SSO);
    var paginateListAccountRoles = (0, import_core2.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListAccounts = (0, import_core2.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSSOOIDCHttpAuthSchemeProvider = exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sso-oauth",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "RegisterClient": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "StartDeviceAuthorization": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso-oidc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/credential-provider-node": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      peerDependencies: {
        "@aws-sdk/client-sts": "^3.614.0"
      },
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      AuthorizationPendingException: () => AuthorizationPendingException,
      CreateTokenCommand: () => CreateTokenCommand,
      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
      CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,
      CreateTokenWithIAMRequestFilterSensitiveLog: () => CreateTokenWithIAMRequestFilterSensitiveLog,
      CreateTokenWithIAMResponseFilterSensitiveLog: () => CreateTokenWithIAMResponseFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      InternalServerException: () => InternalServerException,
      InvalidClientException: () => InvalidClientException,
      InvalidClientMetadataException: () => InvalidClientMetadataException,
      InvalidGrantException: () => InvalidGrantException,
      InvalidRedirectUriException: () => InvalidRedirectUriException,
      InvalidRequestException: () => InvalidRequestException,
      InvalidRequestRegionException: () => InvalidRequestRegionException,
      InvalidScopeException: () => InvalidScopeException,
      RegisterClientCommand: () => RegisterClientCommand,
      RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,
      SSOOIDC: () => SSOOIDC,
      SSOOIDCClient: () => SSOOIDCClient,
      SSOOIDCServiceException: () => SSOOIDCServiceException,
      SlowDownException: () => SlowDownException,
      StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,
      StartDeviceAuthorizationRequestFilterSensitiveLog: () => StartDeviceAuthorizationRequestFilterSensitiveLog,
      UnauthorizedClientException: () => UnauthorizedClientException,
      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
      __Client: () => import_smithy_client5.Client
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs8();
    var import_config_resolver = require_dist_cjs11();
    var import_core2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_retry2 = require_dist_cjs33();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider3();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig2();
    var import_region_config_resolver = require_dist_cjs43();
    var import_protocol_http5 = require_dist_cjs2();
    var import_smithy_client5 = require_dist_cjs32();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client5.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http5.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client5.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http5.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOOIDCClient = class _SSOOIDCClient extends import_smithy_client5.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, import_middleware_endpoint2.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry2.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
          })
        );
        this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new import_core2.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    __name(_SSOOIDCClient, "SSOOIDCClient");
    var SSOOIDCClient = _SSOOIDCClient;
    var import_middleware_serde2 = require_dist_cjs17();
    var _SSOOIDCServiceException = class _SSOOIDCServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException2.prototype);
      }
    };
    __name(_SSOOIDCServiceException, "SSOOIDCServiceException");
    var SSOOIDCServiceException = _SSOOIDCServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _AuthorizationPendingException = class _AuthorizationPendingException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AuthorizationPendingException, "AuthorizationPendingException");
    var AuthorizationPendingException = _AuthorizationPendingException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _InternalServerException = class _InternalServerException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _InvalidClientException = class _InvalidClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientException, "InvalidClientException");
    var InvalidClientException = _InvalidClientException;
    var _InvalidGrantException = class _InvalidGrantException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidGrantException, "InvalidGrantException");
    var InvalidGrantException = _InvalidGrantException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _InvalidScopeException = class _InvalidScopeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidScopeException, "InvalidScopeException");
    var InvalidScopeException = _InvalidScopeException;
    var _SlowDownException = class _SlowDownException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_SlowDownException, "SlowDownException");
    var SlowDownException = _SlowDownException;
    var _UnauthorizedClientException = class _UnauthorizedClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnauthorizedClientException, "UnauthorizedClientException");
    var UnauthorizedClientException = _UnauthorizedClientException;
    var _UnsupportedGrantTypeException = class _UnsupportedGrantTypeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnsupportedGrantTypeException, "UnsupportedGrantTypeException");
    var UnsupportedGrantTypeException = _UnsupportedGrantTypeException;
    var _InvalidRequestRegionException = class _InvalidRequestRegionException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestRegionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestRegionException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
        this.endpoint = opts.endpoint;
        this.region = opts.region;
      }
    };
    __name(_InvalidRequestRegionException, "InvalidRequestRegionException");
    var InvalidRequestRegionException = _InvalidRequestRegionException;
    var _InvalidClientMetadataException = class _InvalidClientMetadataException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientMetadataException, "InvalidClientMetadataException");
    var InvalidClientMetadataException = _InvalidClientMetadataException;
    var _InvalidRedirectUriException = class _InvalidRedirectUriException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRedirectUriException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRedirectUriException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRedirectUriException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRedirectUriException, "InvalidRedirectUriException");
    var InvalidRedirectUriException = _InvalidRedirectUriException;
    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client5.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateTokenRequestFilterSensitiveLog");
    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateTokenResponseFilterSensitiveLog");
    var CreateTokenWithIAMRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.refreshToken && { refreshToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.assertion && { assertion: import_smithy_client5.SENSITIVE_STRING },
      ...obj.subjectToken && { subjectToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateTokenWithIAMRequestFilterSensitiveLog");
    var CreateTokenWithIAMResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client5.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateTokenWithIAMResponseFilterSensitiveLog");
    var RegisterClientResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client5.SENSITIVE_STRING }
    }), "RegisterClientResponseFilterSensitiveLog");
    var StartDeviceAuthorizationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client5.SENSITIVE_STRING }
    }), "StartDeviceAuthorizationRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          codeVerifier: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_) => (0, import_smithy_client5._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateTokenCommand");
    var se_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      const query = (0, import_smithy_client5.map)({
        [_ai]: [, "t"]
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          assertion: [],
          clientId: [],
          code: [],
          codeVerifier: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          requestedTokenType: [],
          scope: (_) => (0, import_smithy_client5._json)(_),
          subjectToken: [],
          subjectTokenType: []
        })
      );
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateTokenWithIAMCommand");
    var se_RegisterClientCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/client/register");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          clientName: [],
          clientType: [],
          entitledApplicationArn: [],
          grantTypes: (_) => (0, import_smithy_client5._json)(_),
          issuerUrl: [],
          redirectUris: (_) => (0, import_smithy_client5._json)(_),
          scopes: (_) => (0, import_smithy_client5._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RegisterClientCommand");
    var se_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/device_authorization");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StartDeviceAuthorizationCommand");
    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        accessToken: import_smithy_client5.expectString,
        expiresIn: import_smithy_client5.expectInt32,
        idToken: import_smithy_client5.expectString,
        refreshToken: import_smithy_client5.expectString,
        tokenType: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenCommand");
    var de_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        accessToken: import_smithy_client5.expectString,
        expiresIn: import_smithy_client5.expectInt32,
        idToken: import_smithy_client5.expectString,
        issuedTokenType: import_smithy_client5.expectString,
        refreshToken: import_smithy_client5.expectString,
        scope: import_smithy_client5._json,
        tokenType: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenWithIAMCommand");
    var de_RegisterClientCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        authorizationEndpoint: import_smithy_client5.expectString,
        clientId: import_smithy_client5.expectString,
        clientIdIssuedAt: import_smithy_client5.expectLong,
        clientSecret: import_smithy_client5.expectString,
        clientSecretExpiresAt: import_smithy_client5.expectLong,
        tokenEndpoint: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RegisterClientCommand");
    var de_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        deviceCode: import_smithy_client5.expectString,
        expiresIn: import_smithy_client5.expectInt32,
        interval: import_smithy_client5.expectInt32,
        userCode: import_smithy_client5.expectString,
        verificationUri: import_smithy_client5.expectString,
        verificationUriComplete: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_StartDeviceAuthorizationCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        case "InvalidRequestRegionException":
        case "com.amazonaws.ssooidc#InvalidRequestRegionException":
          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRedirectUriException":
        case "com.amazonaws.ssooidc#InvalidRedirectUriException":
          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AuthorizationPendingExceptionRes");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ExpiredTokenExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientExceptionRes");
    var de_InvalidClientMetadataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientMetadataExceptionRes");
    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidGrantExceptionRes");
    var de_InvalidRedirectUriExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRedirectUriException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRedirectUriExceptionRes");
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_InvalidRequestRegionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        endpoint: import_smithy_client5.expectString,
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
        region: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestRegionExceptionRes");
    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidScopeExceptionRes");
    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_SlowDownExceptionRes");
    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedClientExceptionRes");
    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedGrantTypeExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _ai = "aws_iam";
    var _CreateTokenCommand = class _CreateTokenCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
    __name(_CreateTokenCommand, "CreateTokenCommand");
    var CreateTokenCommand = _CreateTokenCommand;
    var _CreateTokenWithIAMCommand = class _CreateTokenWithIAMCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateTokenWithIAM", {}).n("SSOOIDCClient", "CreateTokenWithIAMCommand").f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog).ser(se_CreateTokenWithIAMCommand).de(de_CreateTokenWithIAMCommand).build() {
    };
    __name(_CreateTokenWithIAMCommand, "CreateTokenWithIAMCommand");
    var CreateTokenWithIAMCommand = _CreateTokenWithIAMCommand;
    var _RegisterClientCommand = class _RegisterClientCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "RegisterClient", {}).n("SSOOIDCClient", "RegisterClientCommand").f(void 0, RegisterClientResponseFilterSensitiveLog).ser(se_RegisterClientCommand).de(de_RegisterClientCommand).build() {
    };
    __name(_RegisterClientCommand, "RegisterClientCommand");
    var RegisterClientCommand = _RegisterClientCommand;
    var _StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "StartDeviceAuthorization", {}).n("SSOOIDCClient", "StartDeviceAuthorizationCommand").f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0).ser(se_StartDeviceAuthorizationCommand).de(de_StartDeviceAuthorizationCommand).build() {
    };
    __name(_StartDeviceAuthorizationCommand, "StartDeviceAuthorizationCommand");
    var StartDeviceAuthorizationCommand = _StartDeviceAuthorizationCommand;
    var commands = {
      CreateTokenCommand,
      CreateTokenWithIAMCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var _SSOOIDC = class _SSOOIDC extends SSOOIDCClient {
    };
    __name(_SSOOIDC, "SSOOIDC");
    var SSOOIDC = _SSOOIDC;
    (0, import_smithy_client5.createAggregatedClient)(commands, SSOOIDC);
  }
});

// ../../node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "../../node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider
    });
    module2.exports = __toCommonJS2(src_exports);
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion) => {
      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM2(require_dist_cjs45()));
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    }, "getSsoOidcClient");
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion) => {
      const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM2(require_dist_cjs45()));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion);
      return ssoOidcClient.send(
        new CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: "refresh_token"
        })
      );
    }, "getNewSsoOidcToken");
    var import_property_provider = require_dist_cjs12();
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, "validateTokenExpiry");
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new import_property_provider.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, "validateTokenKey");
    var import_shared_ini_file_loader = require_dist_cjs13();
    var import_fs2 = require("fs");
    var { writeFile } = import_fs2.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, "writeSSOTokenToFile");
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new import_property_provider.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new import_property_provider.TokenProviderError(
          `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
          false
        );
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new import_property_provider.TokenProviderError(
            `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
            false
          );
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new import_property_provider.TokenProviderError(
          `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
          false
        );
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    }, "fromSso");
    var fromStatic = /* @__PURE__ */ __name(({ token, logger: logger2 }) => async () => {
      logger2 == null ? void 0 : logger2.debug("@aws-sdk/token-providers - fromStatic");
      if (!token || !token.token) {
        throw new import_property_provider.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    }, "fromStatic");
    var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider.memoize)(
      (0, import_property_provider.chain)(fromSso(init), async () => {
        throw new import_property_provider.TokenProviderError("Could not load token from any providers", false);
      }),
      (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
      (token) => token.expiration !== void 0
    ), "nodeProvider");
  }
});

// ../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __esm2 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var loadSso_exports = {};
    __export2(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient
    });
    var import_client_sso;
    var init_loadSso = __esm2({
      "src/loadSso.ts"() {
        "use strict";
        import_client_sso = require_dist_cjs44();
      }
    });
    var src_exports = {};
    __export2(src_exports, {
      fromSSO: () => fromSSO,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile
    });
    module2.exports = __toCommonJS2(src_exports);
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var import_token_providers = require_dist_cjs46();
    var import_property_provider = require_dist_cjs12();
    var import_shared_ini_file_loader = require_dist_cjs13();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      clientConfig,
      profile,
      logger: logger2
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, import_token_providers.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new import_property_provider.CredentialsProviderError(e.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      } else {
        try {
          token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(
        Object.assign({}, clientConfig ?? {}, {
          region: (clientConfig == null ? void 0 : clientConfig.region) ?? ssoRegion
        })
      );
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new GetRoleCredentialsCommand2({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
          })
        );
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(e, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new import_property_provider.CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };
    }, "resolveSSOCredentials");
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger2) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(
            ", "
          )}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger: logger2 }
        );
      }
      return profile;
    }, "validateSsoProfile");
    var fromSSO = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile == null ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new import_property_provider.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new import_property_provider.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
          profile,
          init.logger
        );
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new import_property_provider.CredentialsProviderError(
          'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
          { tryNextLink: false, logger: init.logger }
        );
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          profile: profileName
        });
      }
    }, "fromSSO");
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider4 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.resolveStsAuthConfig = exports.defaultSTSHttpAuthSchemeProvider = exports.defaultSTSHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var STSClient_1 = require_STSClient();
    var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sts",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithSAML": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
    var resolveStsAuthConfig = (input) => ({
      ...input,
      stsClientCtor: STSClient_1.STSClient
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, exports.resolveStsAuthConfig)(config);
      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
      return {
        ...config_1
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.commonParams = exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
    exports.commonParams = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/@aws-sdk/client-sts/package.json
var require_package4 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sts",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.614.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/credential-provider-node": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "stringEquals";
    var e = "sigv4";
    var f = "sts";
    var g = "us-east-1";
    var h = "endpoint";
    var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var j = "tree";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e, "signingName": f, "signingRegion": g }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = void 0;
    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
    var resolveHttpAuthRuntimeConfig = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
    exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs43();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs32();
    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
      };
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs8();
    var config_resolver_1 = require_dist_cjs11();
    var core_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var middleware_content_length_1 = require_dist_cjs34();
    var middleware_endpoint_1 = require_dist_cjs18();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs32();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var STSClient2 = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
          httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
          identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new core_1.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    exports.STSClient = STSClient2;
  }
});

// ../../node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "../../node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AssumeRoleCommand: () => AssumeRoleCommand,
      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
      AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
      AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
      AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
      ClientInputEndpointParameters: () => import_EndpointParameters9.ClientInputEndpointParameters,
      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
      DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
      ExpiredTokenException: () => ExpiredTokenException,
      GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: () => GetCallerIdentityCommand,
      GetFederationTokenCommand: () => GetFederationTokenCommand,
      GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
      GetSessionTokenCommand: () => GetSessionTokenCommand,
      GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
      IDPCommunicationErrorException: () => IDPCommunicationErrorException,
      IDPRejectedClaimException: () => IDPRejectedClaimException,
      InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
      InvalidIdentityTokenException: () => InvalidIdentityTokenException,
      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
      RegionDisabledException: () => RegionDisabledException,
      STS: () => STS,
      STSServiceException: () => STSServiceException,
      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
    });
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_STSClient(), module2.exports);
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_serde2 = require_dist_cjs17();
    var import_EndpointParameters = require_EndpointParameters();
    var import_smithy_client5 = require_dist_cjs32();
    var _STSServiceException = class _STSServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException2.prototype);
      }
    };
    __name(_STSServiceException, "STSServiceException");
    var STSServiceException = _STSServiceException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _MalformedPolicyDocumentException = class _MalformedPolicyDocumentException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException2.prototype);
      }
    };
    __name(_MalformedPolicyDocumentException, "MalformedPolicyDocumentException");
    var MalformedPolicyDocumentException = _MalformedPolicyDocumentException;
    var _PackedPolicyTooLargeException = class _PackedPolicyTooLargeException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException2.prototype);
      }
    };
    __name(_PackedPolicyTooLargeException, "PackedPolicyTooLargeException");
    var PackedPolicyTooLargeException = _PackedPolicyTooLargeException;
    var _RegionDisabledException = class _RegionDisabledException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException2.prototype);
      }
    };
    __name(_RegionDisabledException, "RegionDisabledException");
    var RegionDisabledException = _RegionDisabledException;
    var _IDPRejectedClaimException = class _IDPRejectedClaimException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException2.prototype);
      }
    };
    __name(_IDPRejectedClaimException, "IDPRejectedClaimException");
    var IDPRejectedClaimException = _IDPRejectedClaimException;
    var _InvalidIdentityTokenException = class _InvalidIdentityTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException2.prototype);
      }
    };
    __name(_InvalidIdentityTokenException, "InvalidIdentityTokenException");
    var InvalidIdentityTokenException = _InvalidIdentityTokenException;
    var _IDPCommunicationErrorException = class _IDPCommunicationErrorException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException2.prototype);
      }
    };
    __name(_IDPCommunicationErrorException, "IDPCommunicationErrorException");
    var IDPCommunicationErrorException = _IDPCommunicationErrorException;
    var _InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException2.prototype);
      }
    };
    __name(_InvalidAuthorizationMessageException, "InvalidAuthorizationMessageException");
    var InvalidAuthorizationMessageException = _InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client5.SENSITIVE_STRING }
    }), "CredentialsFilterSensitiveLog");
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleResponseFilterSensitiveLog");
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: import_smithy_client5.SENSITIVE_STRING }
    }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client5.SENSITIVE_STRING }
    }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetFederationTokenResponseFilterSensitiveLog");
    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetSessionTokenResponseFilterSensitiveLog");
    var import_core2 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_protocol_http5 = require_dist_cjs2();
    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleCommand");
    var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithSAMLCommand");
    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithWebIdentityCommand");
    var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DecodeAuthorizationMessageCommand");
    var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetAccessKeyInfoCommand");
    var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCallerIdentityCommand");
    var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetFederationTokenCommand");
    var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSessionTokenCommand");
    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleCommand");
    var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithSAMLCommand");
    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithWebIdentityCommand");
    var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DecodeAuthorizationMessageCommand");
    var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetAccessKeyInfoCommand");
    var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCallerIdentityCommand");
    var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetFederationTokenCommand");
    var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSessionTokenCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ExpiredTokenExceptionRes");
    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_IDPCommunicationErrorExceptionRes");
    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_IDPRejectedClaimExceptionRes");
    var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAuthorizationMessageExceptionRes");
    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidIdentityTokenExceptionRes");
    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_MalformedPolicyDocumentExceptionRes");
    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_PackedPolicyTooLargeExceptionRes");
    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_RegionDisabledExceptionRes");
    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b, _c, _d;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_AssumeRoleRequest");
    var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_SAMLA] != null) {
        entries[_SAMLA] = input[_SAMLA];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithSAMLRequest");
    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithWebIdentityRequest");
    var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EM] != null) {
        entries[_EM] = input[_EM];
      }
      return entries;
    }, "se_DecodeAuthorizationMessageRequest");
    var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
      }
      return entries;
    }, "se_GetAccessKeyInfoRequest");
    var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_GetCallerIdentityRequest");
    var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b;
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetFederationTokenRequest");
    var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      return entries;
    }, "se_GetSessionTokenRequest");
    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_policyDescriptorListType");
    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    }, "se_PolicyDescriptorType");
    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAro] != null) {
        entries[_PAro] = input[_PAro];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ProvidedContext");
    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ProvidedContextsListType");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_Tag");
    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_tagKeyListType");
    var se_tagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_tagListType");
    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client5.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client5.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_AssumedRoleUser");
    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client5.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client5.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleResponse");
    var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client5.strictParseInt32)(output[_PPS]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client5.expectString)(output[_S]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client5.expectString)(output[_ST]);
      }
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client5.expectString)(output[_I]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client5.expectString)(output[_Au]);
      }
      if (output[_NQ] != null) {
        contents[_NQ] = (0, import_smithy_client5.expectString)(output[_NQ]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client5.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithSAMLResponse");
    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client5.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client5.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client5.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client5.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client5.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithWebIdentityResponse");
    var de_Credentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client5.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client5.expectString)(output[_SAK]);
      }
      if (output[_STe] != null) {
        contents[_STe] = (0, import_smithy_client5.expectString)(output[_STe]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseRfc3339DateTimeWithOffset)(output[_E]));
      }
      return contents;
    }, "de_Credentials");
    var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client5.expectString)(output[_DM]);
      }
      return contents;
    }, "de_DecodeAuthorizationMessageResponse");
    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_ExpiredTokenException");
    var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_FUI] != null) {
        contents[_FUI] = (0, import_smithy_client5.expectString)(output[_FUI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client5.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_FederatedUser");
    var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client5.expectString)(output[_Ac]);
      }
      return contents;
    }, "de_GetAccessKeyInfoResponse");
    var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = (0, import_smithy_client5.expectString)(output[_UI]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client5.expectString)(output[_Ac]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client5.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_GetCallerIdentityResponse");
    var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_FU] != null) {
        contents[_FU] = de_FederatedUser(output[_FU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client5.strictParseInt32)(output[_PPS]);
      }
      return contents;
    }, "de_GetFederationTokenResponse");
    var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      return contents;
    }, "de_GetSessionTokenResponse");
    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPCommunicationErrorException");
    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPRejectedClaimException");
    var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidAuthorizationMessageException");
    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidIdentityTokenException");
    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_MalformedPolicyDocumentException");
    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_PackedPolicyTooLargeException");
    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_RegionDisabledException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(STSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http5.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2011-06-15";
    var _A = "Action";
    var _AKI = "AccessKeyId";
    var _AR = "AssumeRole";
    var _ARI = "AssumedRoleId";
    var _ARU = "AssumedRoleUser";
    var _ARWSAML = "AssumeRoleWithSAML";
    var _ARWWI = "AssumeRoleWithWebIdentity";
    var _Ac = "Account";
    var _Ar = "Arn";
    var _Au = "Audience";
    var _C = "Credentials";
    var _CA = "ContextAssertion";
    var _DAM = "DecodeAuthorizationMessage";
    var _DM = "DecodedMessage";
    var _DS = "DurationSeconds";
    var _E = "Expiration";
    var _EI = "ExternalId";
    var _EM = "EncodedMessage";
    var _FU = "FederatedUser";
    var _FUI = "FederatedUserId";
    var _GAKI = "GetAccessKeyInfo";
    var _GCI = "GetCallerIdentity";
    var _GFT = "GetFederationToken";
    var _GST = "GetSessionToken";
    var _I = "Issuer";
    var _K = "Key";
    var _N = "Name";
    var _NQ = "NameQualifier";
    var _P = "Policy";
    var _PA = "PolicyArns";
    var _PAr = "PrincipalArn";
    var _PAro = "ProviderArn";
    var _PC = "ProvidedContexts";
    var _PI = "ProviderId";
    var _PPS = "PackedPolicySize";
    var _Pr = "Provider";
    var _RA = "RoleArn";
    var _RSN = "RoleSessionName";
    var _S = "Subject";
    var _SAK = "SecretAccessKey";
    var _SAMLA = "SAMLAssertion";
    var _SFWIT = "SubjectFromWebIdentityToken";
    var _SI = "SourceIdentity";
    var _SN = "SerialNumber";
    var _ST = "SubjectType";
    var _STe = "SessionToken";
    var _T = "Tags";
    var _TC = "TokenCode";
    var _TTK = "TransitiveTagKeys";
    var _UI = "UserId";
    var _V = "Version";
    var _Va = "Value";
    var _WIT = "WebIdentityToken";
    var _a = "arn";
    var _m = "message";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client5.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client5.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a2;
      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _AssumeRoleCommand = class _AssumeRoleCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
    __name(_AssumeRoleCommand, "AssumeRoleCommand");
    var AssumeRoleCommand = _AssumeRoleCommand;
    var import_EndpointParameters2 = require_EndpointParameters();
    var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters2.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    };
    __name(_AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
    var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;
    var import_EndpointParameters3 = require_EndpointParameters();
    var _AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters3.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
    __name(_AssumeRoleWithWebIdentityCommand, "AssumeRoleWithWebIdentityCommand");
    var AssumeRoleWithWebIdentityCommand = _AssumeRoleWithWebIdentityCommand;
    var import_EndpointParameters4 = require_EndpointParameters();
    var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters4.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(void 0, void 0).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    };
    __name(_DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
    var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;
    var import_EndpointParameters5 = require_EndpointParameters();
    var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters5.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(void 0, void 0).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    };
    __name(_GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
    var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;
    var import_EndpointParameters6 = require_EndpointParameters();
    var _GetCallerIdentityCommand = class _GetCallerIdentityCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters6.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(void 0, void 0).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    };
    __name(_GetCallerIdentityCommand, "GetCallerIdentityCommand");
    var GetCallerIdentityCommand = _GetCallerIdentityCommand;
    var import_EndpointParameters7 = require_EndpointParameters();
    var _GetFederationTokenCommand = class _GetFederationTokenCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters7.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(void 0, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    };
    __name(_GetFederationTokenCommand, "GetFederationTokenCommand");
    var GetFederationTokenCommand = _GetFederationTokenCommand;
    var import_EndpointParameters8 = require_EndpointParameters();
    var _GetSessionTokenCommand = class _GetSessionTokenCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...import_EndpointParameters8.commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(void 0, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    };
    __name(_GetSessionTokenCommand, "GetSessionTokenCommand");
    var GetSessionTokenCommand = _GetSessionTokenCommand;
    var import_STSClient = require_STSClient();
    var commands = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    var _STS = class _STS extends import_STSClient.STSClient {
    };
    __name(_STS, "STS");
    var STS = _STS;
    (0, import_smithy_client5.createAggregatedClient)(commands, STS);
    var import_EndpointParameters9 = require_EndpointParameters();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
      var _a2;
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      (_a2 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null ? void 0 : _a2.call(
        credentialProviderLogger,
        "@aws-sdk/client-sts::resolveRegion",
        "accepting first of:",
        `${region} (provider)`,
        `${parentRegion} (parent client)`,
        `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`
      );
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    }, "resolveRegion");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        var _a2, _b, _c;
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const {
            logger: logger2 = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          stsClient = new stsClientCtor({
            // A hack to make sts client uses the credential in current closure.
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler,
            logger: logger2
          });
        }
        const { Credentials: Credentials2 } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          credentialScope: Credentials2.CredentialScope
        };
      };
    }, "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        var _a2, _b, _c;
        if (!stsClient) {
          const {
            logger: logger2 = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          stsClient = new stsClientCtor({
            region: resolvedRegion,
            requestHandler,
            logger: logger2
          });
        }
        const { Credentials: Credentials2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          credentialScope: Credentials2.CredentialScope
        };
      };
    }, "getDefaultRoleAssumerWithWebIdentity");
    var import_STSClient2 = require_STSClient();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      var _a2;
      if (!customizations)
        return baseCtor;
      else
        return _a2 = class extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        }, __name(_a2, "CustomizableSTSClient"), _a2;
    }, "getCustomizableStsClientCtor");
    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    }), "decorateDefaultCredentialProvider");
  }
});

// ../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromProcess: () => fromProcess
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs13();
    var import_property_provider = require_dist_cjs12();
    var import_child_process = require("child_process");
    var import_util = require("util");
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope }
      };
    }, "getValidatedProcessCredentials");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger2) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data);
          } catch (error) {
            throw new import_property_provider.CredentialsProviderError(error.message, { logger: logger2 });
          }
        } else {
          throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger: logger2 });
        }
      } else {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger: logger2
        });
      }
    }, "resolveProcessCredentials");
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProcessCredentials((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init.logger);
    }, "fromProcess");
  }
});

// ../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var fromWebToken2 = (init) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() => __importStar2(require_dist_cjs48()));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: init.parentClientConfig
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken2;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs12();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile2 = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
    exports.fromTokenFile = fromTokenFile2;
  }
});

// ../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_fromTokenFile(), module2.exports);
    __reExport(src_exports, require_fromWebToken(), module2.exports);
  }
});

// ../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromIni: () => fromIni
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs13();
    var import_property_provider = require_dist_cjs12();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger2) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs38()));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs37()));
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return (0, import_property_provider.chain)(fromHttp(options ?? {}), fromContainerMetadata(options));
        },
        Ec2InstanceMetadata: async (options) => {
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs37()));
          return fromInstanceMetadata(options);
        },
        Environment: async (options) => {
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs36()));
          return fromEnv(options);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger: logger2 }
        );
      }
    }, "resolveCredentialSource");
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger: logger2 } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger: logger2 }) || isCredentialSourceProfile(arg, { profile, logger: logger2 }));
    }, "isAssumeRoleProfile");
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, "isAssumeRoleWithSourceProfile");
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, "isCredentialSourceProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      var _a, _b;
      (_a = options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM2(require_dist_cjs48()));
        options.roleAssumer = getDefaultRoleAssumer(
          {
            ...options.clientConfig,
            credentialProviderLogger: options.logger,
            parentClientConfig: options == null ? void 0 : options.parentClientConfig
          },
          options.clientPlugins
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new import_property_provider.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "),
          { logger: options.logger }
        );
      }
      (_b = options.logger) == null ? void 0 : _b.debug(
        `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`
      );
      const sourceCredsProvider = source_profile ? resolveProfileData(
        source_profile,
        {
          ...profiles,
          [source_profile]: {
            ...profiles[source_profile],
            // This assigns the role_arn of the "root" profile
            // to the credential_source profile so this recursive call knows
            // what role to assume.
            role_arn: data.role_arn ?? profiles[source_profile].role_arn
          }
        },
        options,
        {
          ...visitedProfiles,
          [source_profile]: true
        }
      ) : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new import_property_provider.CredentialsProviderError(
            `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
            { logger: options.logger, tryNextLink: false }
          );
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    }, "resolveAssumeRoleCredentials");
    var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM2(require_dist_cjs49())).then(
      ({ fromProcess }) => fromProcess({
        ...options,
        profile
      })()
    ), "resolveProcessCredentials");
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, options = {}) => {
      const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
      return fromSSO({
        profile,
        logger: options.logger
      })();
    }, "resolveSsoCredentials");
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1, "isStaticCredsProfile");
    var resolveStaticCredentials = /* @__PURE__ */ __name((profile, options) => {
      var _a;
      (_a = options == null ? void 0 : options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      return Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        credentialScope: profile.aws_credential_scope
      });
    }, "resolveStaticCredentials");
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM2(require_dist_cjs50())).then(
      ({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig
      })()
    ), "resolveWebIdentityCredentials");
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, options);
      }
      throw new import_property_provider.CredentialsProviderError(
        `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
        { logger: options.logger }
      );
    }, "resolveProfileData");
    var fromIni = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProfileData((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init);
    }, "fromIni");
  }
});

// ../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_credential_provider_env = require_dist_cjs36();
    var import_shared_ini_file_loader = require_dist_cjs13();
    var import_property_provider = require_dist_cjs12();
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      var _a, _b;
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs37()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs38()));
        return (0, import_property_provider.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new import_property_provider.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      (_b = init.logger) == null ? void 0 : _b.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    }, "remoteProvider");
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider.memoize)(
      (0, import_property_provider.chain)(
        ...init.profile || process.env[import_shared_ini_file_loader.ENV_PROFILE] ? [] : [
          async () => {
            var _a;
            (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
            return (0, import_credential_provider_env.fromEnv)(init)();
          }
        ],
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            throw new import_property_provider.CredentialsProviderError(
              "Skipping SSO provider in default chain (inputs do not include SSO fields).",
              { logger: init.logger }
            );
          }
          const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
          return fromSSO(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
          const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs51()));
          return fromIni(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
          const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs49()));
          return fromProcess(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
          const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM2(require_dist_cjs50()));
          return fromTokenFile2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
          return (await remoteProvider(init))();
        },
        async () => {
          throw new import_property_provider.CredentialsProviderError("Could not load credentials from any providers", {
            tryNextLink: false,
            logger: init.logger
          });
        }
      ),
      credentialsTreatedAsExpired,
      credentialsWillNeedRefresh
    ), "defaultProvider");
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0, "credentialsWillNeedRefresh");
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, "credentialsTreatedAsExpired");
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://ssm.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2014-11-06",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSMHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSM",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "../../node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      WaiterState: () => WaiterState,
      checkExceptions: () => checkExceptions,
      createWaiter: () => createWaiter,
      waiterServiceDefaults: () => waiterServiceDefaults
    });
    module2.exports = __toCommonJS2(src_exports);
    var sleep = /* @__PURE__ */ __name((seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    }, "sleep");
    var waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState = /* @__PURE__ */ ((WaiterState2) => {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
      return WaiterState2;
    })(WaiterState || {});
    var checkExceptions = /* @__PURE__ */ __name((result) => {
      if (result.state === "ABORTED") {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Request was aborted"
          })}`
        );
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === "TIMEOUT") {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Waiter has timed out"
          })}`
        );
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== "SUCCESS") {
        throw new Error(`${JSON.stringify(result)}`);
      }
      return result;
    }, "checkExceptions");
    var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    }, "exponentialBackoffWithJitter");
    var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), "randomInRange");
    var runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client: client2, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client2, input);
      if (state !== "RETRY") {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController == null ? void 0 : abortController.signal) == null ? void 0 : _a.aborted) || (abortSignal == null ? void 0 : abortSignal.aborted)) {
          return {
            state: "ABORTED"
            /* ABORTED */
          };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return {
            state: "TIMEOUT"
            /* TIMEOUT */
          };
        }
        await sleep(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client2, input);
        if (state2 !== "RETRY") {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    }, "runPolling");
    var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    }, "validateWaiterOptions");
    var abortTimeout = /* @__PURE__ */ __name(async (abortSignal) => {
      return new Promise((resolve) => {
        const onAbort = /* @__PURE__ */ __name(() => resolve({
          state: "ABORTED"
          /* ABORTED */
        }), "onAbort");
        if (typeof abortSignal.addEventListener === "function") {
          abortSignal.addEventListener("abort", onAbort);
        } else {
          abortSignal.onabort = onAbort;
        }
      });
    }, "abortTimeout");
    var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
      const params = {
        ...waiterServiceDefaults,
        ...options
      };
      validateWaiterOptions(params);
      const exitConditions = [runPolling(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    }, "createWaiter");
  }
});

// ../../node_modules/@aws-sdk/client-ssm/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "../../node_modules/@aws-sdk/client-ssm/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AddTagsToResourceCommand: () => AddTagsToResourceCommand,
      AlreadyExistsException: () => AlreadyExistsException,
      AssociateOpsItemRelatedItemCommand: () => AssociateOpsItemRelatedItemCommand,
      AssociatedInstances: () => AssociatedInstances,
      AssociationAlreadyExists: () => AssociationAlreadyExists,
      AssociationComplianceSeverity: () => AssociationComplianceSeverity,
      AssociationDescriptionFilterSensitiveLog: () => AssociationDescriptionFilterSensitiveLog,
      AssociationDoesNotExist: () => AssociationDoesNotExist,
      AssociationExecutionDoesNotExist: () => AssociationExecutionDoesNotExist,
      AssociationExecutionFilterKey: () => AssociationExecutionFilterKey,
      AssociationExecutionTargetsFilterKey: () => AssociationExecutionTargetsFilterKey,
      AssociationFilterKey: () => AssociationFilterKey,
      AssociationFilterOperatorType: () => AssociationFilterOperatorType,
      AssociationLimitExceeded: () => AssociationLimitExceeded,
      AssociationStatusName: () => AssociationStatusName,
      AssociationSyncCompliance: () => AssociationSyncCompliance,
      AssociationVersionInfoFilterSensitiveLog: () => AssociationVersionInfoFilterSensitiveLog,
      AssociationVersionLimitExceeded: () => AssociationVersionLimitExceeded,
      AttachmentHashType: () => AttachmentHashType,
      AttachmentsSourceKey: () => AttachmentsSourceKey,
      AutomationDefinitionNotApprovedException: () => AutomationDefinitionNotApprovedException,
      AutomationDefinitionNotFoundException: () => AutomationDefinitionNotFoundException,
      AutomationDefinitionVersionNotFoundException: () => AutomationDefinitionVersionNotFoundException,
      AutomationExecutionFilterKey: () => AutomationExecutionFilterKey,
      AutomationExecutionLimitExceededException: () => AutomationExecutionLimitExceededException,
      AutomationExecutionNotFoundException: () => AutomationExecutionNotFoundException,
      AutomationExecutionStatus: () => AutomationExecutionStatus,
      AutomationStepNotFoundException: () => AutomationStepNotFoundException,
      AutomationSubtype: () => AutomationSubtype,
      AutomationType: () => AutomationType,
      BaselineOverrideFilterSensitiveLog: () => BaselineOverrideFilterSensitiveLog,
      CalendarState: () => CalendarState,
      CancelCommandCommand: () => CancelCommandCommand,
      CancelMaintenanceWindowExecutionCommand: () => CancelMaintenanceWindowExecutionCommand,
      CommandFilterKey: () => CommandFilterKey,
      CommandFilterSensitiveLog: () => CommandFilterSensitiveLog,
      CommandInvocationStatus: () => CommandInvocationStatus,
      CommandPluginStatus: () => CommandPluginStatus,
      CommandStatus: () => CommandStatus,
      ComplianceQueryOperatorType: () => ComplianceQueryOperatorType,
      ComplianceSeverity: () => ComplianceSeverity,
      ComplianceStatus: () => ComplianceStatus,
      ComplianceTypeCountLimitExceededException: () => ComplianceTypeCountLimitExceededException,
      ComplianceUploadType: () => ComplianceUploadType,
      ConnectionStatus: () => ConnectionStatus,
      CreateActivationCommand: () => CreateActivationCommand,
      CreateAssociationBatchCommand: () => CreateAssociationBatchCommand,
      CreateAssociationBatchRequestEntryFilterSensitiveLog: () => CreateAssociationBatchRequestEntryFilterSensitiveLog,
      CreateAssociationBatchRequestFilterSensitiveLog: () => CreateAssociationBatchRequestFilterSensitiveLog,
      CreateAssociationBatchResultFilterSensitiveLog: () => CreateAssociationBatchResultFilterSensitiveLog,
      CreateAssociationCommand: () => CreateAssociationCommand,
      CreateAssociationRequestFilterSensitiveLog: () => CreateAssociationRequestFilterSensitiveLog,
      CreateAssociationResultFilterSensitiveLog: () => CreateAssociationResultFilterSensitiveLog,
      CreateDocumentCommand: () => CreateDocumentCommand,
      CreateMaintenanceWindowCommand: () => CreateMaintenanceWindowCommand,
      CreateMaintenanceWindowRequestFilterSensitiveLog: () => CreateMaintenanceWindowRequestFilterSensitiveLog,
      CreateOpsItemCommand: () => CreateOpsItemCommand,
      CreateOpsMetadataCommand: () => CreateOpsMetadataCommand,
      CreatePatchBaselineCommand: () => CreatePatchBaselineCommand,
      CreatePatchBaselineRequestFilterSensitiveLog: () => CreatePatchBaselineRequestFilterSensitiveLog,
      CreateResourceDataSyncCommand: () => CreateResourceDataSyncCommand,
      CustomSchemaCountLimitExceededException: () => CustomSchemaCountLimitExceededException,
      DeleteActivationCommand: () => DeleteActivationCommand,
      DeleteAssociationCommand: () => DeleteAssociationCommand,
      DeleteDocumentCommand: () => DeleteDocumentCommand,
      DeleteInventoryCommand: () => DeleteInventoryCommand,
      DeleteMaintenanceWindowCommand: () => DeleteMaintenanceWindowCommand,
      DeleteOpsItemCommand: () => DeleteOpsItemCommand,
      DeleteOpsMetadataCommand: () => DeleteOpsMetadataCommand,
      DeleteParameterCommand: () => DeleteParameterCommand,
      DeleteParametersCommand: () => DeleteParametersCommand,
      DeletePatchBaselineCommand: () => DeletePatchBaselineCommand,
      DeleteResourceDataSyncCommand: () => DeleteResourceDataSyncCommand,
      DeleteResourcePolicyCommand: () => DeleteResourcePolicyCommand,
      DeregisterManagedInstanceCommand: () => DeregisterManagedInstanceCommand,
      DeregisterPatchBaselineForPatchGroupCommand: () => DeregisterPatchBaselineForPatchGroupCommand,
      DeregisterTargetFromMaintenanceWindowCommand: () => DeregisterTargetFromMaintenanceWindowCommand,
      DeregisterTaskFromMaintenanceWindowCommand: () => DeregisterTaskFromMaintenanceWindowCommand,
      DescribeActivationsCommand: () => DescribeActivationsCommand,
      DescribeActivationsFilterKeys: () => DescribeActivationsFilterKeys,
      DescribeAssociationCommand: () => DescribeAssociationCommand,
      DescribeAssociationExecutionTargetsCommand: () => DescribeAssociationExecutionTargetsCommand,
      DescribeAssociationExecutionsCommand: () => DescribeAssociationExecutionsCommand,
      DescribeAssociationResultFilterSensitiveLog: () => DescribeAssociationResultFilterSensitiveLog,
      DescribeAutomationExecutionsCommand: () => DescribeAutomationExecutionsCommand,
      DescribeAutomationStepExecutionsCommand: () => DescribeAutomationStepExecutionsCommand,
      DescribeAvailablePatchesCommand: () => DescribeAvailablePatchesCommand,
      DescribeDocumentCommand: () => DescribeDocumentCommand,
      DescribeDocumentPermissionCommand: () => DescribeDocumentPermissionCommand,
      DescribeEffectiveInstanceAssociationsCommand: () => DescribeEffectiveInstanceAssociationsCommand,
      DescribeEffectivePatchesForPatchBaselineCommand: () => DescribeEffectivePatchesForPatchBaselineCommand,
      DescribeInstanceAssociationsStatusCommand: () => DescribeInstanceAssociationsStatusCommand,
      DescribeInstanceInformationCommand: () => DescribeInstanceInformationCommand,
      DescribeInstanceInformationResultFilterSensitiveLog: () => DescribeInstanceInformationResultFilterSensitiveLog,
      DescribeInstancePatchStatesCommand: () => DescribeInstancePatchStatesCommand,
      DescribeInstancePatchStatesForPatchGroupCommand: () => DescribeInstancePatchStatesForPatchGroupCommand,
      DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog: () => DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog,
      DescribeInstancePatchStatesResultFilterSensitiveLog: () => DescribeInstancePatchStatesResultFilterSensitiveLog,
      DescribeInstancePatchesCommand: () => DescribeInstancePatchesCommand,
      DescribeInstancePropertiesCommand: () => DescribeInstancePropertiesCommand,
      DescribeInstancePropertiesResultFilterSensitiveLog: () => DescribeInstancePropertiesResultFilterSensitiveLog,
      DescribeInventoryDeletionsCommand: () => DescribeInventoryDeletionsCommand,
      DescribeMaintenanceWindowExecutionTaskInvocationsCommand: () => DescribeMaintenanceWindowExecutionTaskInvocationsCommand,
      DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog: () => DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog,
      DescribeMaintenanceWindowExecutionTasksCommand: () => DescribeMaintenanceWindowExecutionTasksCommand,
      DescribeMaintenanceWindowExecutionsCommand: () => DescribeMaintenanceWindowExecutionsCommand,
      DescribeMaintenanceWindowScheduleCommand: () => DescribeMaintenanceWindowScheduleCommand,
      DescribeMaintenanceWindowTargetsCommand: () => DescribeMaintenanceWindowTargetsCommand,
      DescribeMaintenanceWindowTargetsResultFilterSensitiveLog: () => DescribeMaintenanceWindowTargetsResultFilterSensitiveLog,
      DescribeMaintenanceWindowTasksCommand: () => DescribeMaintenanceWindowTasksCommand,
      DescribeMaintenanceWindowTasksResultFilterSensitiveLog: () => DescribeMaintenanceWindowTasksResultFilterSensitiveLog,
      DescribeMaintenanceWindowsCommand: () => DescribeMaintenanceWindowsCommand,
      DescribeMaintenanceWindowsForTargetCommand: () => DescribeMaintenanceWindowsForTargetCommand,
      DescribeMaintenanceWindowsResultFilterSensitiveLog: () => DescribeMaintenanceWindowsResultFilterSensitiveLog,
      DescribeOpsItemsCommand: () => DescribeOpsItemsCommand,
      DescribeParametersCommand: () => DescribeParametersCommand,
      DescribePatchBaselinesCommand: () => DescribePatchBaselinesCommand,
      DescribePatchGroupStateCommand: () => DescribePatchGroupStateCommand,
      DescribePatchGroupsCommand: () => DescribePatchGroupsCommand,
      DescribePatchPropertiesCommand: () => DescribePatchPropertiesCommand,
      DescribeSessionsCommand: () => DescribeSessionsCommand,
      DisassociateOpsItemRelatedItemCommand: () => DisassociateOpsItemRelatedItemCommand,
      DocumentAlreadyExists: () => DocumentAlreadyExists,
      DocumentFilterKey: () => DocumentFilterKey,
      DocumentFormat: () => DocumentFormat,
      DocumentHashType: () => DocumentHashType,
      DocumentLimitExceeded: () => DocumentLimitExceeded,
      DocumentMetadataEnum: () => DocumentMetadataEnum,
      DocumentParameterType: () => DocumentParameterType,
      DocumentPermissionLimit: () => DocumentPermissionLimit,
      DocumentPermissionType: () => DocumentPermissionType,
      DocumentReviewAction: () => DocumentReviewAction,
      DocumentReviewCommentType: () => DocumentReviewCommentType,
      DocumentStatus: () => DocumentStatus,
      DocumentType: () => DocumentType,
      DocumentVersionLimitExceeded: () => DocumentVersionLimitExceeded,
      DoesNotExistException: () => DoesNotExistException,
      DuplicateDocumentContent: () => DuplicateDocumentContent,
      DuplicateDocumentVersionName: () => DuplicateDocumentVersionName,
      DuplicateInstanceId: () => DuplicateInstanceId,
      ExecutionMode: () => ExecutionMode,
      ExternalAlarmState: () => ExternalAlarmState,
      FailedCreateAssociationFilterSensitiveLog: () => FailedCreateAssociationFilterSensitiveLog,
      Fault: () => Fault,
      FeatureNotAvailableException: () => FeatureNotAvailableException,
      GetAutomationExecutionCommand: () => GetAutomationExecutionCommand,
      GetCalendarStateCommand: () => GetCalendarStateCommand,
      GetCommandInvocationCommand: () => GetCommandInvocationCommand,
      GetConnectionStatusCommand: () => GetConnectionStatusCommand,
      GetDefaultPatchBaselineCommand: () => GetDefaultPatchBaselineCommand,
      GetDeployablePatchSnapshotForInstanceCommand: () => GetDeployablePatchSnapshotForInstanceCommand,
      GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog: () => GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog,
      GetDocumentCommand: () => GetDocumentCommand,
      GetInventoryCommand: () => GetInventoryCommand,
      GetInventorySchemaCommand: () => GetInventorySchemaCommand,
      GetMaintenanceWindowCommand: () => GetMaintenanceWindowCommand,
      GetMaintenanceWindowExecutionCommand: () => GetMaintenanceWindowExecutionCommand,
      GetMaintenanceWindowExecutionTaskCommand: () => GetMaintenanceWindowExecutionTaskCommand,
      GetMaintenanceWindowExecutionTaskInvocationCommand: () => GetMaintenanceWindowExecutionTaskInvocationCommand,
      GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog: () => GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog,
      GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog: () => GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog,
      GetMaintenanceWindowResultFilterSensitiveLog: () => GetMaintenanceWindowResultFilterSensitiveLog,
      GetMaintenanceWindowTaskCommand: () => GetMaintenanceWindowTaskCommand,
      GetMaintenanceWindowTaskResultFilterSensitiveLog: () => GetMaintenanceWindowTaskResultFilterSensitiveLog,
      GetOpsItemCommand: () => GetOpsItemCommand,
      GetOpsMetadataCommand: () => GetOpsMetadataCommand,
      GetOpsSummaryCommand: () => GetOpsSummaryCommand,
      GetParameterCommand: () => GetParameterCommand2,
      GetParameterHistoryCommand: () => GetParameterHistoryCommand,
      GetParameterHistoryResultFilterSensitiveLog: () => GetParameterHistoryResultFilterSensitiveLog,
      GetParameterResultFilterSensitiveLog: () => GetParameterResultFilterSensitiveLog,
      GetParametersByPathCommand: () => GetParametersByPathCommand,
      GetParametersByPathResultFilterSensitiveLog: () => GetParametersByPathResultFilterSensitiveLog,
      GetParametersCommand: () => GetParametersCommand2,
      GetParametersResultFilterSensitiveLog: () => GetParametersResultFilterSensitiveLog,
      GetPatchBaselineCommand: () => GetPatchBaselineCommand,
      GetPatchBaselineForPatchGroupCommand: () => GetPatchBaselineForPatchGroupCommand,
      GetPatchBaselineResultFilterSensitiveLog: () => GetPatchBaselineResultFilterSensitiveLog,
      GetResourcePoliciesCommand: () => GetResourcePoliciesCommand,
      GetServiceSettingCommand: () => GetServiceSettingCommand,
      HierarchyLevelLimitExceededException: () => HierarchyLevelLimitExceededException,
      HierarchyTypeMismatchException: () => HierarchyTypeMismatchException,
      IdempotentParameterMismatch: () => IdempotentParameterMismatch,
      IncompatiblePolicyException: () => IncompatiblePolicyException,
      InstanceInformationFilterKey: () => InstanceInformationFilterKey,
      InstanceInformationFilterSensitiveLog: () => InstanceInformationFilterSensitiveLog,
      InstancePatchStateFilterSensitiveLog: () => InstancePatchStateFilterSensitiveLog,
      InstancePatchStateOperatorType: () => InstancePatchStateOperatorType,
      InstancePropertyFilterKey: () => InstancePropertyFilterKey,
      InstancePropertyFilterOperator: () => InstancePropertyFilterOperator,
      InstancePropertyFilterSensitiveLog: () => InstancePropertyFilterSensitiveLog,
      InternalServerError: () => InternalServerError,
      InvalidActivation: () => InvalidActivation,
      InvalidActivationId: () => InvalidActivationId,
      InvalidAggregatorException: () => InvalidAggregatorException,
      InvalidAllowedPatternException: () => InvalidAllowedPatternException,
      InvalidAssociation: () => InvalidAssociation,
      InvalidAssociationVersion: () => InvalidAssociationVersion,
      InvalidAutomationExecutionParametersException: () => InvalidAutomationExecutionParametersException,
      InvalidAutomationSignalException: () => InvalidAutomationSignalException,
      InvalidAutomationStatusUpdateException: () => InvalidAutomationStatusUpdateException,
      InvalidCommandId: () => InvalidCommandId,
      InvalidDeleteInventoryParametersException: () => InvalidDeleteInventoryParametersException,
      InvalidDeletionIdException: () => InvalidDeletionIdException,
      InvalidDocument: () => InvalidDocument,
      InvalidDocumentContent: () => InvalidDocumentContent,
      InvalidDocumentOperation: () => InvalidDocumentOperation,
      InvalidDocumentSchemaVersion: () => InvalidDocumentSchemaVersion,
      InvalidDocumentType: () => InvalidDocumentType,
      InvalidDocumentVersion: () => InvalidDocumentVersion,
      InvalidFilter: () => InvalidFilter,
      InvalidFilterKey: () => InvalidFilterKey,
      InvalidFilterOption: () => InvalidFilterOption,
      InvalidFilterValue: () => InvalidFilterValue,
      InvalidInstanceId: () => InvalidInstanceId,
      InvalidInstanceInformationFilterValue: () => InvalidInstanceInformationFilterValue,
      InvalidInstancePropertyFilterValue: () => InvalidInstancePropertyFilterValue,
      InvalidInventoryGroupException: () => InvalidInventoryGroupException,
      InvalidInventoryItemContextException: () => InvalidInventoryItemContextException,
      InvalidInventoryRequestException: () => InvalidInventoryRequestException,
      InvalidItemContentException: () => InvalidItemContentException,
      InvalidKeyId: () => InvalidKeyId,
      InvalidNextToken: () => InvalidNextToken,
      InvalidNotificationConfig: () => InvalidNotificationConfig,
      InvalidOptionException: () => InvalidOptionException,
      InvalidOutputFolder: () => InvalidOutputFolder,
      InvalidOutputLocation: () => InvalidOutputLocation,
      InvalidParameters: () => InvalidParameters,
      InvalidPermissionType: () => InvalidPermissionType,
      InvalidPluginName: () => InvalidPluginName,
      InvalidPolicyAttributeException: () => InvalidPolicyAttributeException,
      InvalidPolicyTypeException: () => InvalidPolicyTypeException,
      InvalidResourceId: () => InvalidResourceId,
      InvalidResourceType: () => InvalidResourceType,
      InvalidResultAttributeException: () => InvalidResultAttributeException,
      InvalidRole: () => InvalidRole,
      InvalidSchedule: () => InvalidSchedule,
      InvalidTag: () => InvalidTag,
      InvalidTarget: () => InvalidTarget,
      InvalidTargetMaps: () => InvalidTargetMaps,
      InvalidTypeNameException: () => InvalidTypeNameException,
      InvalidUpdate: () => InvalidUpdate,
      InventoryAttributeDataType: () => InventoryAttributeDataType,
      InventoryDeletionStatus: () => InventoryDeletionStatus,
      InventoryQueryOperatorType: () => InventoryQueryOperatorType,
      InventorySchemaDeleteOption: () => InventorySchemaDeleteOption,
      InvocationDoesNotExist: () => InvocationDoesNotExist,
      ItemContentMismatchException: () => ItemContentMismatchException,
      ItemSizeLimitExceededException: () => ItemSizeLimitExceededException,
      LabelParameterVersionCommand: () => LabelParameterVersionCommand,
      LastResourceDataSyncStatus: () => LastResourceDataSyncStatus,
      ListAssociationVersionsCommand: () => ListAssociationVersionsCommand,
      ListAssociationVersionsResultFilterSensitiveLog: () => ListAssociationVersionsResultFilterSensitiveLog,
      ListAssociationsCommand: () => ListAssociationsCommand,
      ListCommandInvocationsCommand: () => ListCommandInvocationsCommand,
      ListCommandsCommand: () => ListCommandsCommand,
      ListCommandsResultFilterSensitiveLog: () => ListCommandsResultFilterSensitiveLog,
      ListComplianceItemsCommand: () => ListComplianceItemsCommand,
      ListComplianceSummariesCommand: () => ListComplianceSummariesCommand,
      ListDocumentMetadataHistoryCommand: () => ListDocumentMetadataHistoryCommand,
      ListDocumentVersionsCommand: () => ListDocumentVersionsCommand,
      ListDocumentsCommand: () => ListDocumentsCommand,
      ListInventoryEntriesCommand: () => ListInventoryEntriesCommand,
      ListOpsItemEventsCommand: () => ListOpsItemEventsCommand,
      ListOpsItemRelatedItemsCommand: () => ListOpsItemRelatedItemsCommand,
      ListOpsMetadataCommand: () => ListOpsMetadataCommand,
      ListResourceComplianceSummariesCommand: () => ListResourceComplianceSummariesCommand,
      ListResourceDataSyncCommand: () => ListResourceDataSyncCommand,
      ListTagsForResourceCommand: () => ListTagsForResourceCommand,
      MaintenanceWindowExecutionStatus: () => MaintenanceWindowExecutionStatus,
      MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog: () => MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog,
      MaintenanceWindowIdentityFilterSensitiveLog: () => MaintenanceWindowIdentityFilterSensitiveLog,
      MaintenanceWindowLambdaParametersFilterSensitiveLog: () => MaintenanceWindowLambdaParametersFilterSensitiveLog,
      MaintenanceWindowResourceType: () => MaintenanceWindowResourceType,
      MaintenanceWindowRunCommandParametersFilterSensitiveLog: () => MaintenanceWindowRunCommandParametersFilterSensitiveLog,
      MaintenanceWindowStepFunctionsParametersFilterSensitiveLog: () => MaintenanceWindowStepFunctionsParametersFilterSensitiveLog,
      MaintenanceWindowTargetFilterSensitiveLog: () => MaintenanceWindowTargetFilterSensitiveLog,
      MaintenanceWindowTaskCutoffBehavior: () => MaintenanceWindowTaskCutoffBehavior,
      MaintenanceWindowTaskFilterSensitiveLog: () => MaintenanceWindowTaskFilterSensitiveLog,
      MaintenanceWindowTaskInvocationParametersFilterSensitiveLog: () => MaintenanceWindowTaskInvocationParametersFilterSensitiveLog,
      MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog: () => MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog,
      MaintenanceWindowTaskType: () => MaintenanceWindowTaskType,
      MalformedResourcePolicyDocumentException: () => MalformedResourcePolicyDocumentException,
      MaxDocumentSizeExceeded: () => MaxDocumentSizeExceeded,
      ModifyDocumentPermissionCommand: () => ModifyDocumentPermissionCommand,
      NotificationEvent: () => NotificationEvent,
      NotificationType: () => NotificationType,
      OperatingSystem: () => OperatingSystem,
      OpsFilterOperatorType: () => OpsFilterOperatorType,
      OpsItemAccessDeniedException: () => OpsItemAccessDeniedException,
      OpsItemAlreadyExistsException: () => OpsItemAlreadyExistsException,
      OpsItemConflictException: () => OpsItemConflictException,
      OpsItemDataType: () => OpsItemDataType,
      OpsItemEventFilterKey: () => OpsItemEventFilterKey,
      OpsItemEventFilterOperator: () => OpsItemEventFilterOperator,
      OpsItemFilterKey: () => OpsItemFilterKey,
      OpsItemFilterOperator: () => OpsItemFilterOperator,
      OpsItemInvalidParameterException: () => OpsItemInvalidParameterException,
      OpsItemLimitExceededException: () => OpsItemLimitExceededException,
      OpsItemNotFoundException: () => OpsItemNotFoundException,
      OpsItemRelatedItemAlreadyExistsException: () => OpsItemRelatedItemAlreadyExistsException,
      OpsItemRelatedItemAssociationNotFoundException: () => OpsItemRelatedItemAssociationNotFoundException,
      OpsItemRelatedItemsFilterKey: () => OpsItemRelatedItemsFilterKey,
      OpsItemRelatedItemsFilterOperator: () => OpsItemRelatedItemsFilterOperator,
      OpsItemStatus: () => OpsItemStatus,
      OpsMetadataAlreadyExistsException: () => OpsMetadataAlreadyExistsException,
      OpsMetadataInvalidArgumentException: () => OpsMetadataInvalidArgumentException,
      OpsMetadataKeyLimitExceededException: () => OpsMetadataKeyLimitExceededException,
      OpsMetadataLimitExceededException: () => OpsMetadataLimitExceededException,
      OpsMetadataNotFoundException: () => OpsMetadataNotFoundException,
      OpsMetadataTooManyUpdatesException: () => OpsMetadataTooManyUpdatesException,
      ParameterAlreadyExists: () => ParameterAlreadyExists,
      ParameterFilterSensitiveLog: () => ParameterFilterSensitiveLog,
      ParameterHistoryFilterSensitiveLog: () => ParameterHistoryFilterSensitiveLog,
      ParameterLimitExceeded: () => ParameterLimitExceeded,
      ParameterMaxVersionLimitExceeded: () => ParameterMaxVersionLimitExceeded,
      ParameterNotFound: () => ParameterNotFound,
      ParameterPatternMismatchException: () => ParameterPatternMismatchException,
      ParameterTier: () => ParameterTier,
      ParameterType: () => ParameterType,
      ParameterVersionLabelLimitExceeded: () => ParameterVersionLabelLimitExceeded,
      ParameterVersionNotFound: () => ParameterVersionNotFound,
      ParametersFilterKey: () => ParametersFilterKey,
      PatchAction: () => PatchAction,
      PatchComplianceDataState: () => PatchComplianceDataState,
      PatchComplianceLevel: () => PatchComplianceLevel,
      PatchDeploymentStatus: () => PatchDeploymentStatus,
      PatchFilterKey: () => PatchFilterKey,
      PatchOperationType: () => PatchOperationType,
      PatchProperty: () => PatchProperty,
      PatchSet: () => PatchSet,
      PatchSourceFilterSensitiveLog: () => PatchSourceFilterSensitiveLog,
      PingStatus: () => PingStatus,
      PlatformType: () => PlatformType,
      PoliciesLimitExceededException: () => PoliciesLimitExceededException,
      PutComplianceItemsCommand: () => PutComplianceItemsCommand,
      PutInventoryCommand: () => PutInventoryCommand,
      PutParameterCommand: () => PutParameterCommand,
      PutParameterRequestFilterSensitiveLog: () => PutParameterRequestFilterSensitiveLog,
      PutResourcePolicyCommand: () => PutResourcePolicyCommand,
      RebootOption: () => RebootOption,
      RegisterDefaultPatchBaselineCommand: () => RegisterDefaultPatchBaselineCommand,
      RegisterPatchBaselineForPatchGroupCommand: () => RegisterPatchBaselineForPatchGroupCommand,
      RegisterTargetWithMaintenanceWindowCommand: () => RegisterTargetWithMaintenanceWindowCommand,
      RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog: () => RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog,
      RegisterTaskWithMaintenanceWindowCommand: () => RegisterTaskWithMaintenanceWindowCommand,
      RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog: () => RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog,
      RemoveTagsFromResourceCommand: () => RemoveTagsFromResourceCommand,
      ResetServiceSettingCommand: () => ResetServiceSettingCommand,
      ResourceDataSyncAlreadyExistsException: () => ResourceDataSyncAlreadyExistsException,
      ResourceDataSyncConflictException: () => ResourceDataSyncConflictException,
      ResourceDataSyncCountExceededException: () => ResourceDataSyncCountExceededException,
      ResourceDataSyncInvalidConfigurationException: () => ResourceDataSyncInvalidConfigurationException,
      ResourceDataSyncNotFoundException: () => ResourceDataSyncNotFoundException,
      ResourceDataSyncS3Format: () => ResourceDataSyncS3Format,
      ResourceInUseException: () => ResourceInUseException,
      ResourceLimitExceededException: () => ResourceLimitExceededException,
      ResourceNotFoundException: () => ResourceNotFoundException,
      ResourcePolicyConflictException: () => ResourcePolicyConflictException,
      ResourcePolicyInvalidParameterException: () => ResourcePolicyInvalidParameterException,
      ResourcePolicyLimitExceededException: () => ResourcePolicyLimitExceededException,
      ResourcePolicyNotFoundException: () => ResourcePolicyNotFoundException,
      ResourceType: () => ResourceType,
      ResourceTypeForTagging: () => ResourceTypeForTagging,
      ResumeSessionCommand: () => ResumeSessionCommand,
      ReviewStatus: () => ReviewStatus,
      SSM: () => SSM,
      SSMClient: () => SSMClient2,
      SSMServiceException: () => SSMServiceException,
      SendAutomationSignalCommand: () => SendAutomationSignalCommand,
      SendCommandCommand: () => SendCommandCommand,
      SendCommandRequestFilterSensitiveLog: () => SendCommandRequestFilterSensitiveLog,
      SendCommandResultFilterSensitiveLog: () => SendCommandResultFilterSensitiveLog,
      ServiceSettingNotFound: () => ServiceSettingNotFound,
      SessionFilterKey: () => SessionFilterKey,
      SessionState: () => SessionState,
      SessionStatus: () => SessionStatus,
      SignalType: () => SignalType,
      SourceType: () => SourceType,
      StartAssociationsOnceCommand: () => StartAssociationsOnceCommand,
      StartAutomationExecutionCommand: () => StartAutomationExecutionCommand,
      StartChangeRequestExecutionCommand: () => StartChangeRequestExecutionCommand,
      StartSessionCommand: () => StartSessionCommand,
      StatusUnchanged: () => StatusUnchanged,
      StepExecutionFilterKey: () => StepExecutionFilterKey,
      StopAutomationExecutionCommand: () => StopAutomationExecutionCommand,
      StopType: () => StopType,
      SubTypeCountLimitExceededException: () => SubTypeCountLimitExceededException,
      TargetInUseException: () => TargetInUseException,
      TargetNotConnected: () => TargetNotConnected,
      TerminateSessionCommand: () => TerminateSessionCommand,
      TooManyTagsError: () => TooManyTagsError,
      TooManyUpdates: () => TooManyUpdates,
      TotalSizeLimitExceededException: () => TotalSizeLimitExceededException,
      UnlabelParameterVersionCommand: () => UnlabelParameterVersionCommand,
      UnsupportedCalendarException: () => UnsupportedCalendarException,
      UnsupportedFeatureRequiredException: () => UnsupportedFeatureRequiredException,
      UnsupportedInventoryItemContextException: () => UnsupportedInventoryItemContextException,
      UnsupportedInventorySchemaVersionException: () => UnsupportedInventorySchemaVersionException,
      UnsupportedOperatingSystem: () => UnsupportedOperatingSystem,
      UnsupportedParameterType: () => UnsupportedParameterType,
      UnsupportedPlatformType: () => UnsupportedPlatformType,
      UpdateAssociationCommand: () => UpdateAssociationCommand,
      UpdateAssociationRequestFilterSensitiveLog: () => UpdateAssociationRequestFilterSensitiveLog,
      UpdateAssociationResultFilterSensitiveLog: () => UpdateAssociationResultFilterSensitiveLog,
      UpdateAssociationStatusCommand: () => UpdateAssociationStatusCommand,
      UpdateAssociationStatusResultFilterSensitiveLog: () => UpdateAssociationStatusResultFilterSensitiveLog,
      UpdateDocumentCommand: () => UpdateDocumentCommand,
      UpdateDocumentDefaultVersionCommand: () => UpdateDocumentDefaultVersionCommand,
      UpdateDocumentMetadataCommand: () => UpdateDocumentMetadataCommand,
      UpdateMaintenanceWindowCommand: () => UpdateMaintenanceWindowCommand,
      UpdateMaintenanceWindowRequestFilterSensitiveLog: () => UpdateMaintenanceWindowRequestFilterSensitiveLog,
      UpdateMaintenanceWindowResultFilterSensitiveLog: () => UpdateMaintenanceWindowResultFilterSensitiveLog,
      UpdateMaintenanceWindowTargetCommand: () => UpdateMaintenanceWindowTargetCommand,
      UpdateMaintenanceWindowTargetRequestFilterSensitiveLog: () => UpdateMaintenanceWindowTargetRequestFilterSensitiveLog,
      UpdateMaintenanceWindowTargetResultFilterSensitiveLog: () => UpdateMaintenanceWindowTargetResultFilterSensitiveLog,
      UpdateMaintenanceWindowTaskCommand: () => UpdateMaintenanceWindowTaskCommand,
      UpdateMaintenanceWindowTaskRequestFilterSensitiveLog: () => UpdateMaintenanceWindowTaskRequestFilterSensitiveLog,
      UpdateMaintenanceWindowTaskResultFilterSensitiveLog: () => UpdateMaintenanceWindowTaskResultFilterSensitiveLog,
      UpdateManagedInstanceRoleCommand: () => UpdateManagedInstanceRoleCommand,
      UpdateOpsItemCommand: () => UpdateOpsItemCommand,
      UpdateOpsMetadataCommand: () => UpdateOpsMetadataCommand,
      UpdatePatchBaselineCommand: () => UpdatePatchBaselineCommand,
      UpdatePatchBaselineRequestFilterSensitiveLog: () => UpdatePatchBaselineRequestFilterSensitiveLog,
      UpdatePatchBaselineResultFilterSensitiveLog: () => UpdatePatchBaselineResultFilterSensitiveLog,
      UpdateResourceDataSyncCommand: () => UpdateResourceDataSyncCommand,
      UpdateServiceSettingCommand: () => UpdateServiceSettingCommand,
      __Client: () => import_smithy_client5.Client,
      paginateDescribeActivations: () => paginateDescribeActivations,
      paginateDescribeAssociationExecutionTargets: () => paginateDescribeAssociationExecutionTargets,
      paginateDescribeAssociationExecutions: () => paginateDescribeAssociationExecutions,
      paginateDescribeAutomationExecutions: () => paginateDescribeAutomationExecutions,
      paginateDescribeAutomationStepExecutions: () => paginateDescribeAutomationStepExecutions,
      paginateDescribeAvailablePatches: () => paginateDescribeAvailablePatches,
      paginateDescribeEffectiveInstanceAssociations: () => paginateDescribeEffectiveInstanceAssociations,
      paginateDescribeEffectivePatchesForPatchBaseline: () => paginateDescribeEffectivePatchesForPatchBaseline,
      paginateDescribeInstanceAssociationsStatus: () => paginateDescribeInstanceAssociationsStatus,
      paginateDescribeInstanceInformation: () => paginateDescribeInstanceInformation,
      paginateDescribeInstancePatchStates: () => paginateDescribeInstancePatchStates,
      paginateDescribeInstancePatchStatesForPatchGroup: () => paginateDescribeInstancePatchStatesForPatchGroup,
      paginateDescribeInstancePatches: () => paginateDescribeInstancePatches,
      paginateDescribeInstanceProperties: () => paginateDescribeInstanceProperties,
      paginateDescribeInventoryDeletions: () => paginateDescribeInventoryDeletions,
      paginateDescribeMaintenanceWindowExecutionTaskInvocations: () => paginateDescribeMaintenanceWindowExecutionTaskInvocations,
      paginateDescribeMaintenanceWindowExecutionTasks: () => paginateDescribeMaintenanceWindowExecutionTasks,
      paginateDescribeMaintenanceWindowExecutions: () => paginateDescribeMaintenanceWindowExecutions,
      paginateDescribeMaintenanceWindowSchedule: () => paginateDescribeMaintenanceWindowSchedule,
      paginateDescribeMaintenanceWindowTargets: () => paginateDescribeMaintenanceWindowTargets,
      paginateDescribeMaintenanceWindowTasks: () => paginateDescribeMaintenanceWindowTasks,
      paginateDescribeMaintenanceWindows: () => paginateDescribeMaintenanceWindows,
      paginateDescribeMaintenanceWindowsForTarget: () => paginateDescribeMaintenanceWindowsForTarget,
      paginateDescribeOpsItems: () => paginateDescribeOpsItems,
      paginateDescribeParameters: () => paginateDescribeParameters,
      paginateDescribePatchBaselines: () => paginateDescribePatchBaselines,
      paginateDescribePatchGroups: () => paginateDescribePatchGroups,
      paginateDescribePatchProperties: () => paginateDescribePatchProperties,
      paginateDescribeSessions: () => paginateDescribeSessions,
      paginateGetInventory: () => paginateGetInventory,
      paginateGetInventorySchema: () => paginateGetInventorySchema,
      paginateGetOpsSummary: () => paginateGetOpsSummary,
      paginateGetParameterHistory: () => paginateGetParameterHistory,
      paginateGetParametersByPath: () => paginateGetParametersByPath2,
      paginateGetResourcePolicies: () => paginateGetResourcePolicies,
      paginateListAssociationVersions: () => paginateListAssociationVersions,
      paginateListAssociations: () => paginateListAssociations,
      paginateListCommandInvocations: () => paginateListCommandInvocations,
      paginateListCommands: () => paginateListCommands,
      paginateListComplianceItems: () => paginateListComplianceItems,
      paginateListComplianceSummaries: () => paginateListComplianceSummaries,
      paginateListDocumentVersions: () => paginateListDocumentVersions,
      paginateListDocuments: () => paginateListDocuments,
      paginateListOpsItemEvents: () => paginateListOpsItemEvents,
      paginateListOpsItemRelatedItems: () => paginateListOpsItemRelatedItems,
      paginateListOpsMetadata: () => paginateListOpsMetadata,
      paginateListResourceComplianceSummaries: () => paginateListResourceComplianceSummaries,
      paginateListResourceDataSync: () => paginateListResourceDataSync,
      waitForCommandExecuted: () => waitForCommandExecuted,
      waitUntilCommandExecuted: () => waitUntilCommandExecuted
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs8();
    var import_config_resolver = require_dist_cjs11();
    var import_core2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_retry2 = require_dist_cjs33();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ssm"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig4();
    var import_region_config_resolver = require_dist_cjs43();
    var import_protocol_http5 = require_dist_cjs2();
    var import_smithy_client5 = require_dist_cjs32();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client5.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http5.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client5.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http5.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSMClient = class _SSMClient extends import_smithy_client5.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, import_middleware_endpoint2.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry2.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
          })
        );
        this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return import_httpAuthSchemeProvider.defaultSSMHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new import_core2.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    __name(_SSMClient, "SSMClient");
    var SSMClient2 = _SSMClient;
    var import_middleware_serde2 = require_dist_cjs17();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_uuid2 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var _SSMServiceException = class _SSMServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSMServiceException2.prototype);
      }
    };
    __name(_SSMServiceException, "SSMServiceException");
    var SSMServiceException = _SSMServiceException;
    var ResourceTypeForTagging = {
      ASSOCIATION: "Association",
      AUTOMATION: "Automation",
      DOCUMENT: "Document",
      MAINTENANCE_WINDOW: "MaintenanceWindow",
      MANAGED_INSTANCE: "ManagedInstance",
      OPSMETADATA: "OpsMetadata",
      OPS_ITEM: "OpsItem",
      PARAMETER: "Parameter",
      PATCH_BASELINE: "PatchBaseline"
    };
    var _InternalServerError = class _InternalServerError2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerError2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InternalServerError, "InternalServerError");
    var InternalServerError = _InternalServerError;
    var _InvalidResourceId = class _InvalidResourceId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidResourceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResourceId2.prototype);
      }
    };
    __name(_InvalidResourceId, "InvalidResourceId");
    var InvalidResourceId = _InvalidResourceId;
    var _InvalidResourceType = class _InvalidResourceType2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidResourceType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResourceType2.prototype);
      }
    };
    __name(_InvalidResourceType, "InvalidResourceType");
    var InvalidResourceType = _InvalidResourceType;
    var _TooManyTagsError = class _TooManyTagsError2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyTagsError",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyTagsError2.prototype);
      }
    };
    __name(_TooManyTagsError, "TooManyTagsError");
    var TooManyTagsError = _TooManyTagsError;
    var _TooManyUpdates = class _TooManyUpdates2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyUpdates",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyUpdates2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TooManyUpdates, "TooManyUpdates");
    var TooManyUpdates = _TooManyUpdates;
    var ExternalAlarmState = {
      ALARM: "ALARM",
      UNKNOWN: "UNKNOWN"
    };
    var _AlreadyExistsException = class _AlreadyExistsException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AlreadyExistsException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AlreadyExistsException, "AlreadyExistsException");
    var AlreadyExistsException = _AlreadyExistsException;
    var _OpsItemConflictException = class _OpsItemConflictException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemConflictException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemConflictException, "OpsItemConflictException");
    var OpsItemConflictException = _OpsItemConflictException;
    var _OpsItemInvalidParameterException = class _OpsItemInvalidParameterException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemInvalidParameterException2.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemInvalidParameterException, "OpsItemInvalidParameterException");
    var OpsItemInvalidParameterException = _OpsItemInvalidParameterException;
    var _OpsItemLimitExceededException = class _OpsItemLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemLimitExceededException2.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemLimitExceededException, "OpsItemLimitExceededException");
    var OpsItemLimitExceededException = _OpsItemLimitExceededException;
    var _OpsItemNotFoundException = class _OpsItemNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemNotFoundException, "OpsItemNotFoundException");
    var OpsItemNotFoundException = _OpsItemNotFoundException;
    var _OpsItemRelatedItemAlreadyExistsException = class _OpsItemRelatedItemAlreadyExistsException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemRelatedItemAlreadyExistsException2.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    __name(_OpsItemRelatedItemAlreadyExistsException, "OpsItemRelatedItemAlreadyExistsException");
    var OpsItemRelatedItemAlreadyExistsException = _OpsItemRelatedItemAlreadyExistsException;
    var _DuplicateInstanceId = class _DuplicateInstanceId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DuplicateInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateInstanceId2.prototype);
      }
    };
    __name(_DuplicateInstanceId, "DuplicateInstanceId");
    var DuplicateInstanceId = _DuplicateInstanceId;
    var _InvalidCommandId = class _InvalidCommandId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidCommandId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCommandId2.prototype);
      }
    };
    __name(_InvalidCommandId, "InvalidCommandId");
    var InvalidCommandId = _InvalidCommandId;
    var _InvalidInstanceId = class _InvalidInstanceId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInstanceId2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidInstanceId, "InvalidInstanceId");
    var InvalidInstanceId = _InvalidInstanceId;
    var _DoesNotExistException = class _DoesNotExistException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DoesNotExistException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DoesNotExistException, "DoesNotExistException");
    var DoesNotExistException = _DoesNotExistException;
    var _InvalidParameters = class _InvalidParameters2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidParameters",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameters2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidParameters, "InvalidParameters");
    var InvalidParameters = _InvalidParameters;
    var _AssociationAlreadyExists = class _AssociationAlreadyExists2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociationAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationAlreadyExists2.prototype);
      }
    };
    __name(_AssociationAlreadyExists, "AssociationAlreadyExists");
    var AssociationAlreadyExists = _AssociationAlreadyExists;
    var _AssociationLimitExceeded = class _AssociationLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociationLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationLimitExceeded2.prototype);
      }
    };
    __name(_AssociationLimitExceeded, "AssociationLimitExceeded");
    var AssociationLimitExceeded = _AssociationLimitExceeded;
    var AssociationComplianceSeverity = {
      Critical: "CRITICAL",
      High: "HIGH",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    var AssociationSyncCompliance = {
      Auto: "AUTO",
      Manual: "MANUAL"
    };
    var AssociationStatusName = {
      Failed: "Failed",
      Pending: "Pending",
      Success: "Success"
    };
    var _InvalidDocument = class _InvalidDocument2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocument",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocument2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocument, "InvalidDocument");
    var InvalidDocument = _InvalidDocument;
    var _InvalidDocumentVersion = class _InvalidDocumentVersion2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocumentVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentVersion2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocumentVersion, "InvalidDocumentVersion");
    var InvalidDocumentVersion = _InvalidDocumentVersion;
    var _InvalidOutputLocation = class _InvalidOutputLocation2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidOutputLocation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOutputLocation2.prototype);
      }
    };
    __name(_InvalidOutputLocation, "InvalidOutputLocation");
    var InvalidOutputLocation = _InvalidOutputLocation;
    var _InvalidSchedule = class _InvalidSchedule2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidSchedule",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSchedule2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidSchedule, "InvalidSchedule");
    var InvalidSchedule = _InvalidSchedule;
    var _InvalidTag = class _InvalidTag2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidTag",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTag";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTag2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidTag, "InvalidTag");
    var InvalidTag = _InvalidTag;
    var _InvalidTarget = class _InvalidTarget2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidTarget",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTarget2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidTarget, "InvalidTarget");
    var InvalidTarget = _InvalidTarget;
    var _InvalidTargetMaps = class _InvalidTargetMaps2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidTargetMaps",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTargetMaps2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidTargetMaps, "InvalidTargetMaps");
    var InvalidTargetMaps = _InvalidTargetMaps;
    var _UnsupportedPlatformType = class _UnsupportedPlatformType2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedPlatformType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedPlatformType2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedPlatformType, "UnsupportedPlatformType");
    var UnsupportedPlatformType = _UnsupportedPlatformType;
    var Fault = {
      Client: "Client",
      Server: "Server",
      Unknown: "Unknown"
    };
    var AttachmentsSourceKey = {
      AttachmentReference: "AttachmentReference",
      S3FileUrl: "S3FileUrl",
      SourceUrl: "SourceUrl"
    };
    var DocumentFormat = {
      JSON: "JSON",
      TEXT: "TEXT",
      YAML: "YAML"
    };
    var DocumentType = {
      ApplicationConfiguration: "ApplicationConfiguration",
      ApplicationConfigurationSchema: "ApplicationConfigurationSchema",
      Automation: "Automation",
      ChangeCalendar: "ChangeCalendar",
      ChangeTemplate: "Automation.ChangeTemplate",
      CloudFormation: "CloudFormation",
      Command: "Command",
      ConformancePackTemplate: "ConformancePackTemplate",
      DeploymentStrategy: "DeploymentStrategy",
      Package: "Package",
      Policy: "Policy",
      ProblemAnalysis: "ProblemAnalysis",
      ProblemAnalysisTemplate: "ProblemAnalysisTemplate",
      QuickSetup: "QuickSetup",
      Session: "Session"
    };
    var DocumentHashType = {
      SHA1: "Sha1",
      SHA256: "Sha256"
    };
    var DocumentParameterType = {
      String: "String",
      StringList: "StringList"
    };
    var PlatformType = {
      LINUX: "Linux",
      MACOS: "MacOS",
      WINDOWS: "Windows"
    };
    var ReviewStatus = {
      APPROVED: "APPROVED",
      NOT_REVIEWED: "NOT_REVIEWED",
      PENDING: "PENDING",
      REJECTED: "REJECTED"
    };
    var DocumentStatus = {
      Active: "Active",
      Creating: "Creating",
      Deleting: "Deleting",
      Failed: "Failed",
      Updating: "Updating"
    };
    var _DocumentAlreadyExists = class _DocumentAlreadyExists2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DocumentAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentAlreadyExists2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DocumentAlreadyExists, "DocumentAlreadyExists");
    var DocumentAlreadyExists = _DocumentAlreadyExists;
    var _DocumentLimitExceeded = class _DocumentLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DocumentLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentLimitExceeded2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DocumentLimitExceeded, "DocumentLimitExceeded");
    var DocumentLimitExceeded = _DocumentLimitExceeded;
    var _InvalidDocumentContent = class _InvalidDocumentContent2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentContent2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocumentContent, "InvalidDocumentContent");
    var InvalidDocumentContent = _InvalidDocumentContent;
    var _InvalidDocumentSchemaVersion = class _InvalidDocumentSchemaVersion2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocumentSchemaVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentSchemaVersion2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocumentSchemaVersion, "InvalidDocumentSchemaVersion");
    var InvalidDocumentSchemaVersion = _InvalidDocumentSchemaVersion;
    var _MaxDocumentSizeExceeded = class _MaxDocumentSizeExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MaxDocumentSizeExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MaxDocumentSizeExceeded2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_MaxDocumentSizeExceeded, "MaxDocumentSizeExceeded");
    var MaxDocumentSizeExceeded = _MaxDocumentSizeExceeded;
    var _IdempotentParameterMismatch = class _IdempotentParameterMismatch2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IdempotentParameterMismatch2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_IdempotentParameterMismatch, "IdempotentParameterMismatch");
    var IdempotentParameterMismatch = _IdempotentParameterMismatch;
    var _ResourceLimitExceededException = class _ResourceLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceLimitExceededException, "ResourceLimitExceededException");
    var ResourceLimitExceededException = _ResourceLimitExceededException;
    var OpsItemDataType = {
      SEARCHABLE_STRING: "SearchableString",
      STRING: "String"
    };
    var _OpsItemAccessDeniedException = class _OpsItemAccessDeniedException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemAccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemAccessDeniedException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemAccessDeniedException, "OpsItemAccessDeniedException");
    var OpsItemAccessDeniedException = _OpsItemAccessDeniedException;
    var _OpsItemAlreadyExistsException = class _OpsItemAlreadyExistsException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemAlreadyExistsException2.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    __name(_OpsItemAlreadyExistsException, "OpsItemAlreadyExistsException");
    var OpsItemAlreadyExistsException = _OpsItemAlreadyExistsException;
    var _OpsMetadataAlreadyExistsException = class _OpsMetadataAlreadyExistsException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataAlreadyExistsException2.prototype);
      }
    };
    __name(_OpsMetadataAlreadyExistsException, "OpsMetadataAlreadyExistsException");
    var OpsMetadataAlreadyExistsException = _OpsMetadataAlreadyExistsException;
    var _OpsMetadataInvalidArgumentException = class _OpsMetadataInvalidArgumentException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataInvalidArgumentException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataInvalidArgumentException2.prototype);
      }
    };
    __name(_OpsMetadataInvalidArgumentException, "OpsMetadataInvalidArgumentException");
    var OpsMetadataInvalidArgumentException = _OpsMetadataInvalidArgumentException;
    var _OpsMetadataLimitExceededException = class _OpsMetadataLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataLimitExceededException2.prototype);
      }
    };
    __name(_OpsMetadataLimitExceededException, "OpsMetadataLimitExceededException");
    var OpsMetadataLimitExceededException = _OpsMetadataLimitExceededException;
    var _OpsMetadataTooManyUpdatesException = class _OpsMetadataTooManyUpdatesException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataTooManyUpdatesException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataTooManyUpdatesException2.prototype);
      }
    };
    __name(_OpsMetadataTooManyUpdatesException, "OpsMetadataTooManyUpdatesException");
    var OpsMetadataTooManyUpdatesException = _OpsMetadataTooManyUpdatesException;
    var PatchComplianceLevel = {
      Critical: "CRITICAL",
      High: "HIGH",
      Informational: "INFORMATIONAL",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    var PatchFilterKey = {
      AdvisoryId: "ADVISORY_ID",
      Arch: "ARCH",
      BugzillaId: "BUGZILLA_ID",
      CVEId: "CVE_ID",
      Classification: "CLASSIFICATION",
      Epoch: "EPOCH",
      MsrcSeverity: "MSRC_SEVERITY",
      Name: "NAME",
      PatchId: "PATCH_ID",
      PatchSet: "PATCH_SET",
      Priority: "PRIORITY",
      Product: "PRODUCT",
      ProductFamily: "PRODUCT_FAMILY",
      Release: "RELEASE",
      Repository: "REPOSITORY",
      Section: "SECTION",
      Security: "SECURITY",
      Severity: "SEVERITY",
      Version: "VERSION"
    };
    var OperatingSystem = {
      AlmaLinux: "ALMA_LINUX",
      AmazonLinux: "AMAZON_LINUX",
      AmazonLinux2: "AMAZON_LINUX_2",
      AmazonLinux2022: "AMAZON_LINUX_2022",
      AmazonLinux2023: "AMAZON_LINUX_2023",
      CentOS: "CENTOS",
      Debian: "DEBIAN",
      MacOS: "MACOS",
      OracleLinux: "ORACLE_LINUX",
      Raspbian: "RASPBIAN",
      RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX",
      Rocky_Linux: "ROCKY_LINUX",
      Suse: "SUSE",
      Ubuntu: "UBUNTU",
      Windows: "WINDOWS"
    };
    var PatchAction = {
      AllowAsDependency: "ALLOW_AS_DEPENDENCY",
      Block: "BLOCK"
    };
    var ResourceDataSyncS3Format = {
      JSON_SERDE: "JsonSerDe"
    };
    var _ResourceDataSyncAlreadyExistsException = class _ResourceDataSyncAlreadyExistsException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceDataSyncAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncAlreadyExistsException2.prototype);
        this.SyncName = opts.SyncName;
      }
    };
    __name(_ResourceDataSyncAlreadyExistsException, "ResourceDataSyncAlreadyExistsException");
    var ResourceDataSyncAlreadyExistsException = _ResourceDataSyncAlreadyExistsException;
    var _ResourceDataSyncCountExceededException = class _ResourceDataSyncCountExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceDataSyncCountExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncCountExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceDataSyncCountExceededException, "ResourceDataSyncCountExceededException");
    var ResourceDataSyncCountExceededException = _ResourceDataSyncCountExceededException;
    var _ResourceDataSyncInvalidConfigurationException = class _ResourceDataSyncInvalidConfigurationException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceDataSyncInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncInvalidConfigurationException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceDataSyncInvalidConfigurationException, "ResourceDataSyncInvalidConfigurationException");
    var ResourceDataSyncInvalidConfigurationException = _ResourceDataSyncInvalidConfigurationException;
    var _InvalidActivation = class _InvalidActivation2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidActivation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidActivation2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidActivation, "InvalidActivation");
    var InvalidActivation = _InvalidActivation;
    var _InvalidActivationId = class _InvalidActivationId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidActivationId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidActivationId2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidActivationId, "InvalidActivationId");
    var InvalidActivationId = _InvalidActivationId;
    var _AssociationDoesNotExist = class _AssociationDoesNotExist2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationDoesNotExist2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AssociationDoesNotExist, "AssociationDoesNotExist");
    var AssociationDoesNotExist = _AssociationDoesNotExist;
    var _AssociatedInstances = class _AssociatedInstances2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociatedInstances",
          $fault: "client",
          ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociatedInstances2.prototype);
      }
    };
    __name(_AssociatedInstances, "AssociatedInstances");
    var AssociatedInstances = _AssociatedInstances;
    var _InvalidDocumentOperation = class _InvalidDocumentOperation2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocumentOperation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentOperation2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocumentOperation, "InvalidDocumentOperation");
    var InvalidDocumentOperation = _InvalidDocumentOperation;
    var InventorySchemaDeleteOption = {
      DELETE_SCHEMA: "DeleteSchema",
      DISABLE_SCHEMA: "DisableSchema"
    };
    var _InvalidDeleteInventoryParametersException = class _InvalidDeleteInventoryParametersException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDeleteInventoryParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDeleteInventoryParametersException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDeleteInventoryParametersException, "InvalidDeleteInventoryParametersException");
    var InvalidDeleteInventoryParametersException = _InvalidDeleteInventoryParametersException;
    var _InvalidInventoryRequestException = class _InvalidInventoryRequestException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInventoryRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryRequestException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidInventoryRequestException, "InvalidInventoryRequestException");
    var InvalidInventoryRequestException = _InvalidInventoryRequestException;
    var _InvalidOptionException = class _InvalidOptionException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidOptionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOptionException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidOptionException, "InvalidOptionException");
    var InvalidOptionException = _InvalidOptionException;
    var _InvalidTypeNameException = class _InvalidTypeNameException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidTypeNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTypeNameException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidTypeNameException, "InvalidTypeNameException");
    var InvalidTypeNameException = _InvalidTypeNameException;
    var _OpsMetadataNotFoundException = class _OpsMetadataNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataNotFoundException2.prototype);
      }
    };
    __name(_OpsMetadataNotFoundException, "OpsMetadataNotFoundException");
    var OpsMetadataNotFoundException = _OpsMetadataNotFoundException;
    var _ParameterNotFound = class _ParameterNotFound2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterNotFound2.prototype);
      }
    };
    __name(_ParameterNotFound, "ParameterNotFound");
    var ParameterNotFound = _ParameterNotFound;
    var _ResourceInUseException = class _ResourceInUseException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceInUseException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceInUseException, "ResourceInUseException");
    var ResourceInUseException = _ResourceInUseException;
    var _ResourceDataSyncNotFoundException = class _ResourceDataSyncNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceDataSyncNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncNotFoundException2.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
      }
    };
    __name(_ResourceDataSyncNotFoundException, "ResourceDataSyncNotFoundException");
    var ResourceDataSyncNotFoundException = _ResourceDataSyncNotFoundException;
    var _MalformedResourcePolicyDocumentException = class _MalformedResourcePolicyDocumentException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MalformedResourcePolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedResourcePolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedResourcePolicyDocumentException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_MalformedResourcePolicyDocumentException, "MalformedResourcePolicyDocumentException");
    var MalformedResourcePolicyDocumentException = _MalformedResourcePolicyDocumentException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _ResourcePolicyConflictException = class _ResourcePolicyConflictException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourcePolicyConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyConflictException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourcePolicyConflictException, "ResourcePolicyConflictException");
    var ResourcePolicyConflictException = _ResourcePolicyConflictException;
    var _ResourcePolicyInvalidParameterException = class _ResourcePolicyInvalidParameterException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourcePolicyInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyInvalidParameterException2.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    __name(_ResourcePolicyInvalidParameterException, "ResourcePolicyInvalidParameterException");
    var ResourcePolicyInvalidParameterException = _ResourcePolicyInvalidParameterException;
    var _ResourcePolicyNotFoundException = class _ResourcePolicyNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourcePolicyNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourcePolicyNotFoundException, "ResourcePolicyNotFoundException");
    var ResourcePolicyNotFoundException = _ResourcePolicyNotFoundException;
    var _TargetInUseException = class _TargetInUseException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TargetInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TargetInUseException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TargetInUseException, "TargetInUseException");
    var TargetInUseException = _TargetInUseException;
    var DescribeActivationsFilterKeys = {
      ACTIVATION_IDS: "ActivationIds",
      DEFAULT_INSTANCE_NAME: "DefaultInstanceName",
      IAM_ROLE: "IamRole"
    };
    var _InvalidFilter = class _InvalidFilter2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidFilter",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilter2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidFilter, "InvalidFilter");
    var InvalidFilter = _InvalidFilter;
    var _InvalidNextToken = class _InvalidNextToken2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidNextToken",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidNextToken2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidNextToken, "InvalidNextToken");
    var InvalidNextToken = _InvalidNextToken;
    var _InvalidAssociationVersion = class _InvalidAssociationVersion2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAssociationVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAssociationVersion2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAssociationVersion, "InvalidAssociationVersion");
    var InvalidAssociationVersion = _InvalidAssociationVersion;
    var AssociationExecutionFilterKey = {
      CreatedTime: "CreatedTime",
      ExecutionId: "ExecutionId",
      Status: "Status"
    };
    var AssociationFilterOperatorType = {
      Equal: "EQUAL",
      GreaterThan: "GREATER_THAN",
      LessThan: "LESS_THAN"
    };
    var _AssociationExecutionDoesNotExist = class _AssociationExecutionDoesNotExist2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociationExecutionDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationExecutionDoesNotExist2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AssociationExecutionDoesNotExist, "AssociationExecutionDoesNotExist");
    var AssociationExecutionDoesNotExist = _AssociationExecutionDoesNotExist;
    var AssociationExecutionTargetsFilterKey = {
      ResourceId: "ResourceId",
      ResourceType: "ResourceType",
      Status: "Status"
    };
    var AutomationExecutionFilterKey = {
      AUTOMATION_SUBTYPE: "AutomationSubtype",
      AUTOMATION_TYPE: "AutomationType",
      CURRENT_ACTION: "CurrentAction",
      DOCUMENT_NAME_PREFIX: "DocumentNamePrefix",
      EXECUTION_ID: "ExecutionId",
      EXECUTION_STATUS: "ExecutionStatus",
      OPS_ITEM_ID: "OpsItemId",
      PARENT_EXECUTION_ID: "ParentExecutionId",
      START_TIME_AFTER: "StartTimeAfter",
      START_TIME_BEFORE: "StartTimeBefore",
      TAG_KEY: "TagKey",
      TARGET_RESOURCE_GROUP: "TargetResourceGroup"
    };
    var AutomationExecutionStatus = {
      APPROVED: "Approved",
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
      CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
      COMPLETED_WITH_FAILURE: "CompletedWithFailure",
      COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
      EXITED: "Exited",
      FAILED: "Failed",
      INPROGRESS: "InProgress",
      PENDING: "Pending",
      PENDING_APPROVAL: "PendingApproval",
      PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
      REJECTED: "Rejected",
      RUNBOOK_INPROGRESS: "RunbookInProgress",
      SCHEDULED: "Scheduled",
      SUCCESS: "Success",
      TIMEDOUT: "TimedOut",
      WAITING: "Waiting"
    };
    var AutomationSubtype = {
      ChangeRequest: "ChangeRequest"
    };
    var AutomationType = {
      CrossAccount: "CrossAccount",
      Local: "Local"
    };
    var ExecutionMode = {
      Auto: "Auto",
      Interactive: "Interactive"
    };
    var _InvalidFilterKey = class _InvalidFilterKey2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidFilterKey",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterKey2.prototype);
      }
    };
    __name(_InvalidFilterKey, "InvalidFilterKey");
    var InvalidFilterKey = _InvalidFilterKey;
    var _InvalidFilterValue = class _InvalidFilterValue2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterValue2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidFilterValue, "InvalidFilterValue");
    var InvalidFilterValue = _InvalidFilterValue;
    var _AutomationExecutionNotFoundException = class _AutomationExecutionNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationExecutionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationExecutionNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationExecutionNotFoundException, "AutomationExecutionNotFoundException");
    var AutomationExecutionNotFoundException = _AutomationExecutionNotFoundException;
    var StepExecutionFilterKey = {
      ACTION: "Action",
      PARENT_STEP_EXECUTION_ID: "ParentStepExecutionId",
      PARENT_STEP_ITERATION: "ParentStepIteration",
      PARENT_STEP_ITERATOR_VALUE: "ParentStepIteratorValue",
      START_TIME_AFTER: "StartTimeAfter",
      START_TIME_BEFORE: "StartTimeBefore",
      STEP_EXECUTION_ID: "StepExecutionId",
      STEP_EXECUTION_STATUS: "StepExecutionStatus",
      STEP_NAME: "StepName"
    };
    var DocumentPermissionType = {
      SHARE: "Share"
    };
    var _InvalidPermissionType = class _InvalidPermissionType2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidPermissionType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPermissionType2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidPermissionType, "InvalidPermissionType");
    var InvalidPermissionType = _InvalidPermissionType;
    var PatchDeploymentStatus = {
      Approved: "APPROVED",
      ExplicitApproved: "EXPLICIT_APPROVED",
      ExplicitRejected: "EXPLICIT_REJECTED",
      PendingApproval: "PENDING_APPROVAL"
    };
    var _UnsupportedOperatingSystem = class _UnsupportedOperatingSystem2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedOperatingSystem",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedOperatingSystem2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedOperatingSystem, "UnsupportedOperatingSystem");
    var UnsupportedOperatingSystem = _UnsupportedOperatingSystem;
    var InstanceInformationFilterKey = {
      ACTIVATION_IDS: "ActivationIds",
      AGENT_VERSION: "AgentVersion",
      ASSOCIATION_STATUS: "AssociationStatus",
      IAM_ROLE: "IamRole",
      INSTANCE_IDS: "InstanceIds",
      PING_STATUS: "PingStatus",
      PLATFORM_TYPES: "PlatformTypes",
      RESOURCE_TYPE: "ResourceType"
    };
    var PingStatus = {
      CONNECTION_LOST: "ConnectionLost",
      INACTIVE: "Inactive",
      ONLINE: "Online"
    };
    var ResourceType = {
      EC2_INSTANCE: "EC2Instance",
      MANAGED_INSTANCE: "ManagedInstance"
    };
    var SourceType = {
      AWS_EC2_INSTANCE: "AWS::EC2::Instance",
      AWS_IOT_THING: "AWS::IoT::Thing",
      AWS_SSM_MANAGEDINSTANCE: "AWS::SSM::ManagedInstance"
    };
    var _InvalidInstanceInformationFilterValue = class _InvalidInstanceInformationFilterValue2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInstanceInformationFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInstanceInformationFilterValue2.prototype);
      }
    };
    __name(_InvalidInstanceInformationFilterValue, "InvalidInstanceInformationFilterValue");
    var InvalidInstanceInformationFilterValue = _InvalidInstanceInformationFilterValue;
    var PatchComplianceDataState = {
      Failed: "FAILED",
      Installed: "INSTALLED",
      InstalledOther: "INSTALLED_OTHER",
      InstalledPendingReboot: "INSTALLED_PENDING_REBOOT",
      InstalledRejected: "INSTALLED_REJECTED",
      Missing: "MISSING",
      NotApplicable: "NOT_APPLICABLE"
    };
    var PatchOperationType = {
      INSTALL: "Install",
      SCAN: "Scan"
    };
    var RebootOption = {
      NO_REBOOT: "NoReboot",
      REBOOT_IF_NEEDED: "RebootIfNeeded"
    };
    var InstancePatchStateOperatorType = {
      EQUAL: "Equal",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var InstancePropertyFilterOperator = {
      BEGIN_WITH: "BeginWith",
      EQUAL: "Equal",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var InstancePropertyFilterKey = {
      ACTIVATION_IDS: "ActivationIds",
      AGENT_VERSION: "AgentVersion",
      ASSOCIATION_STATUS: "AssociationStatus",
      DOCUMENT_NAME: "DocumentName",
      IAM_ROLE: "IamRole",
      INSTANCE_IDS: "InstanceIds",
      PING_STATUS: "PingStatus",
      PLATFORM_TYPES: "PlatformTypes",
      RESOURCE_TYPE: "ResourceType"
    };
    var _InvalidInstancePropertyFilterValue = class _InvalidInstancePropertyFilterValue2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInstancePropertyFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstancePropertyFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInstancePropertyFilterValue2.prototype);
      }
    };
    __name(_InvalidInstancePropertyFilterValue, "InvalidInstancePropertyFilterValue");
    var InvalidInstancePropertyFilterValue = _InvalidInstancePropertyFilterValue;
    var InventoryDeletionStatus = {
      COMPLETE: "Complete",
      IN_PROGRESS: "InProgress"
    };
    var _InvalidDeletionIdException = class _InvalidDeletionIdException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDeletionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDeletionIdException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDeletionIdException, "InvalidDeletionIdException");
    var InvalidDeletionIdException = _InvalidDeletionIdException;
    var MaintenanceWindowExecutionStatus = {
      Cancelled: "CANCELLED",
      Cancelling: "CANCELLING",
      Failed: "FAILED",
      InProgress: "IN_PROGRESS",
      Pending: "PENDING",
      SkippedOverlapping: "SKIPPED_OVERLAPPING",
      Success: "SUCCESS",
      TimedOut: "TIMED_OUT"
    };
    var MaintenanceWindowTaskType = {
      Automation: "AUTOMATION",
      Lambda: "LAMBDA",
      RunCommand: "RUN_COMMAND",
      StepFunctions: "STEP_FUNCTIONS"
    };
    var MaintenanceWindowResourceType = {
      Instance: "INSTANCE",
      ResourceGroup: "RESOURCE_GROUP"
    };
    var CreateAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateAssociationRequestFilterSensitiveLog");
    var AssociationDescriptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "AssociationDescriptionFilterSensitiveLog");
    var CreateAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription)
      }
    }), "CreateAssociationResultFilterSensitiveLog");
    var CreateAssociationBatchRequestEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateAssociationBatchRequestEntryFilterSensitiveLog");
    var CreateAssociationBatchRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Entries && {
        Entries: obj.Entries.map((item) => CreateAssociationBatchRequestEntryFilterSensitiveLog(item))
      }
    }), "CreateAssociationBatchRequestFilterSensitiveLog");
    var FailedCreateAssociationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Entry && { Entry: CreateAssociationBatchRequestEntryFilterSensitiveLog(obj.Entry) }
    }), "FailedCreateAssociationFilterSensitiveLog");
    var CreateAssociationBatchResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Successful && { Successful: obj.Successful.map((item) => AssociationDescriptionFilterSensitiveLog(item)) },
      ...obj.Failed && { Failed: obj.Failed.map((item) => FailedCreateAssociationFilterSensitiveLog(item)) }
    }), "CreateAssociationBatchResultFilterSensitiveLog");
    var CreateMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateMaintenanceWindowRequestFilterSensitiveLog");
    var PatchSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: import_smithy_client5.SENSITIVE_STRING }
    }), "PatchSourceFilterSensitiveLog");
    var CreatePatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }
    }), "CreatePatchBaselineRequestFilterSensitiveLog");
    var DescribeAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription)
      }
    }), "DescribeAssociationResultFilterSensitiveLog");
    var InstanceInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.IPAddress && { IPAddress: import_smithy_client5.SENSITIVE_STRING }
    }), "InstanceInformationFilterSensitiveLog");
    var DescribeInstanceInformationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstanceInformationList && {
        InstanceInformationList: obj.InstanceInformationList.map((item) => InstanceInformationFilterSensitiveLog(item))
      }
    }), "DescribeInstanceInformationResultFilterSensitiveLog");
    var InstancePatchStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING }
    }), "InstancePatchStateFilterSensitiveLog");
    var DescribeInstancePatchStatesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item))
      }
    }), "DescribeInstancePatchStatesResultFilterSensitiveLog");
    var DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item))
      }
    }), "DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog");
    var InstancePropertyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.IPAddress && { IPAddress: import_smithy_client5.SENSITIVE_STRING }
    }), "InstancePropertyFilterSensitiveLog");
    var DescribeInstancePropertiesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstanceProperties && {
        InstanceProperties: obj.InstanceProperties.map((item) => InstancePropertyFilterSensitiveLog(item))
      }
    }), "DescribeInstancePropertiesResultFilterSensitiveLog");
    var MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog");
    var DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WindowExecutionTaskInvocationIdentities && {
        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map(
          (item) => MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog(item)
        )
      }
    }), "DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog");
    var MaintenanceWindowIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowIdentityFilterSensitiveLog");
    var DescribeMaintenanceWindowsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WindowIdentities && {
        WindowIdentities: obj.WindowIdentities.map((item) => MaintenanceWindowIdentityFilterSensitiveLog(item))
      }
    }), "DescribeMaintenanceWindowsResultFilterSensitiveLog");
    var MaintenanceWindowTaskCutoffBehavior = {
      CancelTask: "CANCEL_TASK",
      ContinueTask: "CONTINUE_TASK"
    };
    var OpsItemFilterKey = {
      ACCOUNT_ID: "AccountId",
      ACTUAL_END_TIME: "ActualEndTime",
      ACTUAL_START_TIME: "ActualStartTime",
      AUTOMATION_ID: "AutomationId",
      CATEGORY: "Category",
      CHANGE_REQUEST_APPROVER_ARN: "ChangeRequestByApproverArn",
      CHANGE_REQUEST_APPROVER_NAME: "ChangeRequestByApproverName",
      CHANGE_REQUEST_REQUESTER_ARN: "ChangeRequestByRequesterArn",
      CHANGE_REQUEST_REQUESTER_NAME: "ChangeRequestByRequesterName",
      CHANGE_REQUEST_TARGETS_RESOURCE_GROUP: "ChangeRequestByTargetsResourceGroup",
      CHANGE_REQUEST_TEMPLATE: "ChangeRequestByTemplate",
      CREATED_BY: "CreatedBy",
      CREATED_TIME: "CreatedTime",
      INSIGHT_TYPE: "InsightByType",
      LAST_MODIFIED_TIME: "LastModifiedTime",
      OPERATIONAL_DATA: "OperationalData",
      OPERATIONAL_DATA_KEY: "OperationalDataKey",
      OPERATIONAL_DATA_VALUE: "OperationalDataValue",
      OPSITEM_ID: "OpsItemId",
      OPSITEM_TYPE: "OpsItemType",
      PLANNED_END_TIME: "PlannedEndTime",
      PLANNED_START_TIME: "PlannedStartTime",
      PRIORITY: "Priority",
      RESOURCE_ID: "ResourceId",
      SEVERITY: "Severity",
      SOURCE: "Source",
      STATUS: "Status",
      TITLE: "Title"
    };
    var OpsItemFilterOperator = {
      CONTAINS: "Contains",
      EQUAL: "Equal",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan"
    };
    var OpsItemStatus = {
      APPROVED: "Approved",
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
      CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
      CLOSED: "Closed",
      COMPLETED_WITH_FAILURE: "CompletedWithFailure",
      COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      OPEN: "Open",
      PENDING: "Pending",
      PENDING_APPROVAL: "PendingApproval",
      PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
      REJECTED: "Rejected",
      RESOLVED: "Resolved",
      RUNBOOK_IN_PROGRESS: "RunbookInProgress",
      SCHEDULED: "Scheduled",
      TIMED_OUT: "TimedOut"
    };
    var ParametersFilterKey = {
      KEY_ID: "KeyId",
      NAME: "Name",
      TYPE: "Type"
    };
    var ParameterTier = {
      ADVANCED: "Advanced",
      INTELLIGENT_TIERING: "Intelligent-Tiering",
      STANDARD: "Standard"
    };
    var ParameterType = {
      SECURE_STRING: "SecureString",
      STRING: "String",
      STRING_LIST: "StringList"
    };
    var _InvalidFilterOption = class _InvalidFilterOption2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidFilterOption",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterOption2.prototype);
      }
    };
    __name(_InvalidFilterOption, "InvalidFilterOption");
    var InvalidFilterOption = _InvalidFilterOption;
    var PatchSet = {
      Application: "APPLICATION",
      Os: "OS"
    };
    var PatchProperty = {
      PatchClassification: "CLASSIFICATION",
      PatchMsrcSeverity: "MSRC_SEVERITY",
      PatchPriority: "PRIORITY",
      PatchProductFamily: "PRODUCT_FAMILY",
      PatchSeverity: "SEVERITY",
      Product: "PRODUCT"
    };
    var SessionFilterKey = {
      INVOKED_AFTER: "InvokedAfter",
      INVOKED_BEFORE: "InvokedBefore",
      OWNER: "Owner",
      SESSION_ID: "SessionId",
      STATUS: "Status",
      TARGET_ID: "Target"
    };
    var SessionState = {
      ACTIVE: "Active",
      HISTORY: "History"
    };
    var SessionStatus = {
      CONNECTED: "Connected",
      CONNECTING: "Connecting",
      DISCONNECTED: "Disconnected",
      FAILED: "Failed",
      TERMINATED: "Terminated",
      TERMINATING: "Terminating"
    };
    var _OpsItemRelatedItemAssociationNotFoundException = class _OpsItemRelatedItemAssociationNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAssociationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemRelatedItemAssociationNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OpsItemRelatedItemAssociationNotFoundException, "OpsItemRelatedItemAssociationNotFoundException");
    var OpsItemRelatedItemAssociationNotFoundException = _OpsItemRelatedItemAssociationNotFoundException;
    var CalendarState = {
      CLOSED: "CLOSED",
      OPEN: "OPEN"
    };
    var _InvalidDocumentType = class _InvalidDocumentType2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidDocumentType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentType2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidDocumentType, "InvalidDocumentType");
    var InvalidDocumentType = _InvalidDocumentType;
    var _UnsupportedCalendarException = class _UnsupportedCalendarException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedCalendarException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedCalendarException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedCalendarException, "UnsupportedCalendarException");
    var UnsupportedCalendarException = _UnsupportedCalendarException;
    var CommandInvocationStatus = {
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      DELAYED: "Delayed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    var _InvalidPluginName = class _InvalidPluginName2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidPluginName",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPluginName2.prototype);
      }
    };
    __name(_InvalidPluginName, "InvalidPluginName");
    var InvalidPluginName = _InvalidPluginName;
    var _InvocationDoesNotExist = class _InvocationDoesNotExist2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvocationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvocationDoesNotExist2.prototype);
      }
    };
    __name(_InvocationDoesNotExist, "InvocationDoesNotExist");
    var InvocationDoesNotExist = _InvocationDoesNotExist;
    var ConnectionStatus = {
      CONNECTED: "connected",
      NOT_CONNECTED: "notconnected"
    };
    var _UnsupportedFeatureRequiredException = class _UnsupportedFeatureRequiredException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedFeatureRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedFeatureRequiredException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedFeatureRequiredException, "UnsupportedFeatureRequiredException");
    var UnsupportedFeatureRequiredException = _UnsupportedFeatureRequiredException;
    var AttachmentHashType = {
      SHA256: "Sha256"
    };
    var InventoryQueryOperatorType = {
      BEGIN_WITH: "BeginWith",
      EQUAL: "Equal",
      EXISTS: "Exists",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var _InvalidAggregatorException = class _InvalidAggregatorException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAggregatorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAggregatorException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAggregatorException, "InvalidAggregatorException");
    var InvalidAggregatorException = _InvalidAggregatorException;
    var _InvalidInventoryGroupException = class _InvalidInventoryGroupException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInventoryGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryGroupException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidInventoryGroupException, "InvalidInventoryGroupException");
    var InvalidInventoryGroupException = _InvalidInventoryGroupException;
    var _InvalidResultAttributeException = class _InvalidResultAttributeException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidResultAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResultAttributeException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidResultAttributeException, "InvalidResultAttributeException");
    var InvalidResultAttributeException = _InvalidResultAttributeException;
    var InventoryAttributeDataType = {
      NUMBER: "number",
      STRING: "string"
    };
    var NotificationEvent = {
      ALL: "All",
      CANCELLED: "Cancelled",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    var NotificationType = {
      Command: "Command",
      Invocation: "Invocation"
    };
    var OpsFilterOperatorType = {
      BEGIN_WITH: "BeginWith",
      EQUAL: "Equal",
      EXISTS: "Exists",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var _InvalidKeyId = class _InvalidKeyId2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidKeyId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidKeyId2.prototype);
      }
    };
    __name(_InvalidKeyId, "InvalidKeyId");
    var InvalidKeyId = _InvalidKeyId;
    var _ParameterVersionNotFound = class _ParameterVersionNotFound2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterVersionNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterVersionNotFound2.prototype);
      }
    };
    __name(_ParameterVersionNotFound, "ParameterVersionNotFound");
    var ParameterVersionNotFound = _ParameterVersionNotFound;
    var _ServiceSettingNotFound = class _ServiceSettingNotFound2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceSettingNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceSettingNotFound2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ServiceSettingNotFound, "ServiceSettingNotFound");
    var ServiceSettingNotFound = _ServiceSettingNotFound;
    var _ParameterVersionLabelLimitExceeded = class _ParameterVersionLabelLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterVersionLabelLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterVersionLabelLimitExceeded2.prototype);
      }
    };
    __name(_ParameterVersionLabelLimitExceeded, "ParameterVersionLabelLimitExceeded");
    var ParameterVersionLabelLimitExceeded = _ParameterVersionLabelLimitExceeded;
    var AssociationFilterKey = {
      AssociationId: "AssociationId",
      AssociationName: "AssociationName",
      InstanceId: "InstanceId",
      LastExecutedAfter: "LastExecutedAfter",
      LastExecutedBefore: "LastExecutedBefore",
      Name: "Name",
      ResourceGroupName: "ResourceGroupName",
      Status: "AssociationStatusName"
    };
    var CommandFilterKey = {
      DOCUMENT_NAME: "DocumentName",
      EXECUTION_STAGE: "ExecutionStage",
      INVOKED_AFTER: "InvokedAfter",
      INVOKED_BEFORE: "InvokedBefore",
      STATUS: "Status"
    };
    var CommandPluginStatus = {
      CANCELLED: "Cancelled",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    var CommandStatus = {
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    var ComplianceQueryOperatorType = {
      BeginWith: "BEGIN_WITH",
      Equal: "EQUAL",
      GreaterThan: "GREATER_THAN",
      LessThan: "LESS_THAN",
      NotEqual: "NOT_EQUAL"
    };
    var ComplianceSeverity = {
      Critical: "CRITICAL",
      High: "HIGH",
      Informational: "INFORMATIONAL",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    var ComplianceStatus = {
      Compliant: "COMPLIANT",
      NonCompliant: "NON_COMPLIANT"
    };
    var DocumentMetadataEnum = {
      DocumentReviews: "DocumentReviews"
    };
    var DocumentReviewCommentType = {
      Comment: "Comment"
    };
    var DocumentFilterKey = {
      DocumentType: "DocumentType",
      Name: "Name",
      Owner: "Owner",
      PlatformTypes: "PlatformTypes"
    };
    var OpsItemEventFilterKey = {
      OPSITEM_ID: "OpsItemId"
    };
    var OpsItemEventFilterOperator = {
      EQUAL: "Equal"
    };
    var OpsItemRelatedItemsFilterKey = {
      ASSOCIATION_ID: "AssociationId",
      RESOURCE_TYPE: "ResourceType",
      RESOURCE_URI: "ResourceUri"
    };
    var OpsItemRelatedItemsFilterOperator = {
      EQUAL: "Equal"
    };
    var LastResourceDataSyncStatus = {
      FAILED: "Failed",
      INPROGRESS: "InProgress",
      SUCCESSFUL: "Successful"
    };
    var _DocumentPermissionLimit = class _DocumentPermissionLimit2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DocumentPermissionLimit",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentPermissionLimit2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DocumentPermissionLimit, "DocumentPermissionLimit");
    var DocumentPermissionLimit = _DocumentPermissionLimit;
    var _ComplianceTypeCountLimitExceededException = class _ComplianceTypeCountLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ComplianceTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ComplianceTypeCountLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ComplianceTypeCountLimitExceededException, "ComplianceTypeCountLimitExceededException");
    var ComplianceTypeCountLimitExceededException = _ComplianceTypeCountLimitExceededException;
    var _InvalidItemContentException = class _InvalidItemContentException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidItemContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidItemContentException2.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(_InvalidItemContentException, "InvalidItemContentException");
    var InvalidItemContentException = _InvalidItemContentException;
    var _ItemSizeLimitExceededException = class _ItemSizeLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ItemSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemSizeLimitExceededException2.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(_ItemSizeLimitExceededException, "ItemSizeLimitExceededException");
    var ItemSizeLimitExceededException = _ItemSizeLimitExceededException;
    var ComplianceUploadType = {
      Complete: "COMPLETE",
      Partial: "PARTIAL"
    };
    var _TotalSizeLimitExceededException = class _TotalSizeLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TotalSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TotalSizeLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TotalSizeLimitExceededException, "TotalSizeLimitExceededException");
    var TotalSizeLimitExceededException = _TotalSizeLimitExceededException;
    var _CustomSchemaCountLimitExceededException = class _CustomSchemaCountLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "CustomSchemaCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CustomSchemaCountLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_CustomSchemaCountLimitExceededException, "CustomSchemaCountLimitExceededException");
    var CustomSchemaCountLimitExceededException = _CustomSchemaCountLimitExceededException;
    var _InvalidInventoryItemContextException = class _InvalidInventoryItemContextException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryItemContextException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidInventoryItemContextException, "InvalidInventoryItemContextException");
    var InvalidInventoryItemContextException = _InvalidInventoryItemContextException;
    var _ItemContentMismatchException = class _ItemContentMismatchException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ItemContentMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemContentMismatchException2.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(_ItemContentMismatchException, "ItemContentMismatchException");
    var ItemContentMismatchException = _ItemContentMismatchException;
    var _SubTypeCountLimitExceededException = class _SubTypeCountLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SubTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SubTypeCountLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_SubTypeCountLimitExceededException, "SubTypeCountLimitExceededException");
    var SubTypeCountLimitExceededException = _SubTypeCountLimitExceededException;
    var _UnsupportedInventoryItemContextException = class _UnsupportedInventoryItemContextException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedInventoryItemContextException2.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedInventoryItemContextException, "UnsupportedInventoryItemContextException");
    var UnsupportedInventoryItemContextException = _UnsupportedInventoryItemContextException;
    var _UnsupportedInventorySchemaVersionException = class _UnsupportedInventorySchemaVersionException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedInventorySchemaVersionException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedInventorySchemaVersionException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_UnsupportedInventorySchemaVersionException, "UnsupportedInventorySchemaVersionException");
    var UnsupportedInventorySchemaVersionException = _UnsupportedInventorySchemaVersionException;
    var _HierarchyLevelLimitExceededException = class _HierarchyLevelLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "HierarchyLevelLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HierarchyLevelLimitExceededException2.prototype);
      }
    };
    __name(_HierarchyLevelLimitExceededException, "HierarchyLevelLimitExceededException");
    var HierarchyLevelLimitExceededException = _HierarchyLevelLimitExceededException;
    var _HierarchyTypeMismatchException = class _HierarchyTypeMismatchException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "HierarchyTypeMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HierarchyTypeMismatchException2.prototype);
      }
    };
    __name(_HierarchyTypeMismatchException, "HierarchyTypeMismatchException");
    var HierarchyTypeMismatchException = _HierarchyTypeMismatchException;
    var _IncompatiblePolicyException = class _IncompatiblePolicyException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IncompatiblePolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IncompatiblePolicyException2.prototype);
      }
    };
    __name(_IncompatiblePolicyException, "IncompatiblePolicyException");
    var IncompatiblePolicyException = _IncompatiblePolicyException;
    var _InvalidAllowedPatternException = class _InvalidAllowedPatternException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAllowedPatternException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAllowedPatternException2.prototype);
      }
    };
    __name(_InvalidAllowedPatternException, "InvalidAllowedPatternException");
    var InvalidAllowedPatternException = _InvalidAllowedPatternException;
    var _InvalidPolicyAttributeException = class _InvalidPolicyAttributeException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidPolicyAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPolicyAttributeException2.prototype);
      }
    };
    __name(_InvalidPolicyAttributeException, "InvalidPolicyAttributeException");
    var InvalidPolicyAttributeException = _InvalidPolicyAttributeException;
    var _InvalidPolicyTypeException = class _InvalidPolicyTypeException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidPolicyTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPolicyTypeException2.prototype);
      }
    };
    __name(_InvalidPolicyTypeException, "InvalidPolicyTypeException");
    var InvalidPolicyTypeException = _InvalidPolicyTypeException;
    var _ParameterAlreadyExists = class _ParameterAlreadyExists2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterAlreadyExists2.prototype);
      }
    };
    __name(_ParameterAlreadyExists, "ParameterAlreadyExists");
    var ParameterAlreadyExists = _ParameterAlreadyExists;
    var _ParameterLimitExceeded = class _ParameterLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterLimitExceeded2.prototype);
      }
    };
    __name(_ParameterLimitExceeded, "ParameterLimitExceeded");
    var ParameterLimitExceeded = _ParameterLimitExceeded;
    var _ParameterMaxVersionLimitExceeded = class _ParameterMaxVersionLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterMaxVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterMaxVersionLimitExceeded2.prototype);
      }
    };
    __name(_ParameterMaxVersionLimitExceeded, "ParameterMaxVersionLimitExceeded");
    var ParameterMaxVersionLimitExceeded = _ParameterMaxVersionLimitExceeded;
    var _ParameterPatternMismatchException = class _ParameterPatternMismatchException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ParameterPatternMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterPatternMismatchException2.prototype);
      }
    };
    __name(_ParameterPatternMismatchException, "ParameterPatternMismatchException");
    var ParameterPatternMismatchException = _ParameterPatternMismatchException;
    var _PoliciesLimitExceededException = class _PoliciesLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PoliciesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PoliciesLimitExceededException2.prototype);
      }
    };
    __name(_PoliciesLimitExceededException, "PoliciesLimitExceededException");
    var PoliciesLimitExceededException = _PoliciesLimitExceededException;
    var _UnsupportedParameterType = class _UnsupportedParameterType2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedParameterType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedParameterType2.prototype);
      }
    };
    __name(_UnsupportedParameterType, "UnsupportedParameterType");
    var UnsupportedParameterType = _UnsupportedParameterType;
    var _ResourcePolicyLimitExceededException = class _ResourcePolicyLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourcePolicyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyLimitExceededException2.prototype);
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    __name(_ResourcePolicyLimitExceededException, "ResourcePolicyLimitExceededException");
    var ResourcePolicyLimitExceededException = _ResourcePolicyLimitExceededException;
    var _FeatureNotAvailableException = class _FeatureNotAvailableException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "FeatureNotAvailableException",
          $fault: "client",
          ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _FeatureNotAvailableException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_FeatureNotAvailableException, "FeatureNotAvailableException");
    var FeatureNotAvailableException = _FeatureNotAvailableException;
    var _AutomationStepNotFoundException = class _AutomationStepNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationStepNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationStepNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationStepNotFoundException, "AutomationStepNotFoundException");
    var AutomationStepNotFoundException = _AutomationStepNotFoundException;
    var _InvalidAutomationSignalException = class _InvalidAutomationSignalException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAutomationSignalException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationSignalException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAutomationSignalException, "InvalidAutomationSignalException");
    var InvalidAutomationSignalException = _InvalidAutomationSignalException;
    var SignalType = {
      APPROVE: "Approve",
      REJECT: "Reject",
      RESUME: "Resume",
      START_STEP: "StartStep",
      STOP_STEP: "StopStep"
    };
    var _InvalidNotificationConfig = class _InvalidNotificationConfig2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidNotificationConfig",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidNotificationConfig2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidNotificationConfig, "InvalidNotificationConfig");
    var InvalidNotificationConfig = _InvalidNotificationConfig;
    var _InvalidOutputFolder = class _InvalidOutputFolder2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidOutputFolder",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOutputFolder2.prototype);
      }
    };
    __name(_InvalidOutputFolder, "InvalidOutputFolder");
    var InvalidOutputFolder = _InvalidOutputFolder;
    var _InvalidRole = class _InvalidRole2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRole",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRole2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidRole, "InvalidRole");
    var InvalidRole = _InvalidRole;
    var _InvalidAssociation = class _InvalidAssociation2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAssociation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAssociation2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAssociation, "InvalidAssociation");
    var InvalidAssociation = _InvalidAssociation;
    var _AutomationDefinitionNotFoundException = class _AutomationDefinitionNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationDefinitionNotFoundException, "AutomationDefinitionNotFoundException");
    var AutomationDefinitionNotFoundException = _AutomationDefinitionNotFoundException;
    var _AutomationDefinitionVersionNotFoundException = class _AutomationDefinitionVersionNotFoundException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationDefinitionVersionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionVersionNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationDefinitionVersionNotFoundException, "AutomationDefinitionVersionNotFoundException");
    var AutomationDefinitionVersionNotFoundException = _AutomationDefinitionVersionNotFoundException;
    var _AutomationExecutionLimitExceededException = class _AutomationExecutionLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationExecutionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationExecutionLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationExecutionLimitExceededException, "AutomationExecutionLimitExceededException");
    var AutomationExecutionLimitExceededException = _AutomationExecutionLimitExceededException;
    var _InvalidAutomationExecutionParametersException = class _InvalidAutomationExecutionParametersException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAutomationExecutionParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationExecutionParametersException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAutomationExecutionParametersException, "InvalidAutomationExecutionParametersException");
    var InvalidAutomationExecutionParametersException = _InvalidAutomationExecutionParametersException;
    var MaintenanceWindowTargetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowTargetFilterSensitiveLog");
    var DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Targets && { Targets: obj.Targets.map((item) => MaintenanceWindowTargetFilterSensitiveLog(item)) }
    }), "DescribeMaintenanceWindowTargetsResultFilterSensitiveLog");
    var MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Values && { Values: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog");
    var MaintenanceWindowTaskFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowTaskFilterSensitiveLog");
    var DescribeMaintenanceWindowTasksResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Tasks && { Tasks: obj.Tasks.map((item) => MaintenanceWindowTaskFilterSensitiveLog(item)) }
    }), "DescribeMaintenanceWindowTasksResultFilterSensitiveLog");
    var BaselineOverrideFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }
    }), "BaselineOverrideFilterSensitiveLog");
    var GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog");
    var GetMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "GetMaintenanceWindowResultFilterSensitiveLog");
    var GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING }
    }), "GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog");
    var GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING }
    }), "GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog");
    var MaintenanceWindowLambdaParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Payload && { Payload: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowLambdaParametersFilterSensitiveLog");
    var MaintenanceWindowRunCommandParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowRunCommandParametersFilterSensitiveLog");
    var MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Input && { Input: import_smithy_client5.SENSITIVE_STRING }
    }), "MaintenanceWindowStepFunctionsParametersFilterSensitiveLog");
    var MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.RunCommand && { RunCommand: MaintenanceWindowRunCommandParametersFilterSensitiveLog(obj.RunCommand) },
      ...obj.StepFunctions && {
        StepFunctions: MaintenanceWindowStepFunctionsParametersFilterSensitiveLog(obj.StepFunctions)
      },
      ...obj.Lambda && { Lambda: MaintenanceWindowLambdaParametersFilterSensitiveLog(obj.Lambda) }
    }), "MaintenanceWindowTaskInvocationParametersFilterSensitiveLog");
    var GetMaintenanceWindowTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "GetMaintenanceWindowTaskResultFilterSensitiveLog");
    var ParameterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: import_smithy_client5.SENSITIVE_STRING }
    }), "ParameterFilterSensitiveLog");
    var GetParameterResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameter && { Parameter: ParameterFilterSensitiveLog(obj.Parameter) }
    }), "GetParameterResultFilterSensitiveLog");
    var ParameterHistoryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: import_smithy_client5.SENSITIVE_STRING }
    }), "ParameterHistoryFilterSensitiveLog");
    var GetParameterHistoryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterHistoryFilterSensitiveLog(item)) }
    }), "GetParameterHistoryResultFilterSensitiveLog");
    var GetParametersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }
    }), "GetParametersResultFilterSensitiveLog");
    var GetParametersByPathResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }
    }), "GetParametersByPathResultFilterSensitiveLog");
    var GetPatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }
    }), "GetPatchBaselineResultFilterSensitiveLog");
    var AssociationVersionInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "AssociationVersionInfoFilterSensitiveLog");
    var ListAssociationVersionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationVersions && {
        AssociationVersions: obj.AssociationVersions.map((item) => AssociationVersionInfoFilterSensitiveLog(item))
      }
    }), "ListAssociationVersionsResultFilterSensitiveLog");
    var CommandFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "CommandFilterSensitiveLog");
    var ListCommandsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Commands && { Commands: obj.Commands.map((item) => CommandFilterSensitiveLog(item)) }
    }), "ListCommandsResultFilterSensitiveLog");
    var PutParameterRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: import_smithy_client5.SENSITIVE_STRING }
    }), "PutParameterRequestFilterSensitiveLog");
    var RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog");
    var RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog");
    var SendCommandRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "SendCommandRequestFilterSensitiveLog");
    var SendCommandResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Command && { Command: CommandFilterSensitiveLog(obj.Command) }
    }), "SendCommandResultFilterSensitiveLog");
    var _AutomationDefinitionNotApprovedException = class _AutomationDefinitionNotApprovedException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotApprovedException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionNotApprovedException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AutomationDefinitionNotApprovedException, "AutomationDefinitionNotApprovedException");
    var AutomationDefinitionNotApprovedException = _AutomationDefinitionNotApprovedException;
    var _TargetNotConnected = class _TargetNotConnected2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TargetNotConnected",
          $fault: "client",
          ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TargetNotConnected2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TargetNotConnected, "TargetNotConnected");
    var TargetNotConnected = _TargetNotConnected;
    var _InvalidAutomationStatusUpdateException = class _InvalidAutomationStatusUpdateException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAutomationStatusUpdateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationStatusUpdateException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidAutomationStatusUpdateException, "InvalidAutomationStatusUpdateException");
    var InvalidAutomationStatusUpdateException = _InvalidAutomationStatusUpdateException;
    var StopType = {
      CANCEL: "Cancel",
      COMPLETE: "Complete"
    };
    var _AssociationVersionLimitExceeded = class _AssociationVersionLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AssociationVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationVersionLimitExceeded2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AssociationVersionLimitExceeded, "AssociationVersionLimitExceeded");
    var AssociationVersionLimitExceeded = _AssociationVersionLimitExceeded;
    var _InvalidUpdate = class _InvalidUpdate2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidUpdate",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidUpdate2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidUpdate, "InvalidUpdate");
    var InvalidUpdate = _InvalidUpdate;
    var _StatusUnchanged = class _StatusUnchanged2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StatusUnchanged",
          $fault: "client",
          ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StatusUnchanged2.prototype);
      }
    };
    __name(_StatusUnchanged, "StatusUnchanged");
    var StatusUnchanged = _StatusUnchanged;
    var _DocumentVersionLimitExceeded = class _DocumentVersionLimitExceeded2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DocumentVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentVersionLimitExceeded2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DocumentVersionLimitExceeded, "DocumentVersionLimitExceeded");
    var DocumentVersionLimitExceeded = _DocumentVersionLimitExceeded;
    var _DuplicateDocumentContent = class _DuplicateDocumentContent2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DuplicateDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateDocumentContent2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DuplicateDocumentContent, "DuplicateDocumentContent");
    var DuplicateDocumentContent = _DuplicateDocumentContent;
    var _DuplicateDocumentVersionName = class _DuplicateDocumentVersionName2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DuplicateDocumentVersionName",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateDocumentVersionName2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_DuplicateDocumentVersionName, "DuplicateDocumentVersionName");
    var DuplicateDocumentVersionName = _DuplicateDocumentVersionName;
    var DocumentReviewAction = {
      Approve: "Approve",
      Reject: "Reject",
      SendForReview: "SendForReview",
      UpdateReview: "UpdateReview"
    };
    var _OpsMetadataKeyLimitExceededException = class _OpsMetadataKeyLimitExceededException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OpsMetadataKeyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataKeyLimitExceededException2.prototype);
      }
    };
    __name(_OpsMetadataKeyLimitExceededException, "OpsMetadataKeyLimitExceededException");
    var OpsMetadataKeyLimitExceededException = _OpsMetadataKeyLimitExceededException;
    var _ResourceDataSyncConflictException = class _ResourceDataSyncConflictException2 extends SSMServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceDataSyncConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncConflictException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceDataSyncConflictException, "ResourceDataSyncConflictException");
    var ResourceDataSyncConflictException = _ResourceDataSyncConflictException;
    var UpdateAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateAssociationRequestFilterSensitiveLog");
    var UpdateAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription)
      }
    }), "UpdateAssociationResultFilterSensitiveLog");
    var UpdateAssociationStatusResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription)
      }
    }), "UpdateAssociationStatusResultFilterSensitiveLog");
    var UpdateMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowRequestFilterSensitiveLog");
    var UpdateMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowResultFilterSensitiveLog");
    var UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTargetRequestFilterSensitiveLog");
    var UpdateMaintenanceWindowTargetResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: import_smithy_client5.SENSITIVE_STRING },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTargetResultFilterSensitiveLog");
    var UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTaskRequestFilterSensitiveLog");
    var UpdateMaintenanceWindowTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: import_smithy_client5.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: import_smithy_client5.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTaskResultFilterSensitiveLog");
    var UpdatePatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }
    }), "UpdatePatchBaselineRequestFilterSensitiveLog");
    var UpdatePatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }
    }), "UpdatePatchBaselineResultFilterSensitiveLog");
    var se_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("AddTagsToResource");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AddTagsToResourceCommand");
    var se_AssociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("AssociateOpsItemRelatedItem");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssociateOpsItemRelatedItemCommand");
    var se_CancelCommandCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CancelCommand");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CancelCommandCommand");
    var se_CancelMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CancelMaintenanceWindowExecution");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CancelMaintenanceWindowExecutionCommand");
    var se_CreateActivationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateActivation");
      let body;
      body = JSON.stringify(se_CreateActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateActivationCommand");
    var se_CreateAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateAssociation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateAssociationCommand");
    var se_CreateAssociationBatchCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateAssociationBatch");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateAssociationBatchCommand");
    var se_CreateDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateDocument");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateDocumentCommand");
    var se_CreateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateMaintenanceWindow");
      let body;
      body = JSON.stringify(se_CreateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateMaintenanceWindowCommand");
    var se_CreateOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateOpsItem");
      let body;
      body = JSON.stringify(se_CreateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateOpsItemCommand");
    var se_CreateOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateOpsMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateOpsMetadataCommand");
    var se_CreatePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreatePatchBaseline");
      let body;
      body = JSON.stringify(se_CreatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreatePatchBaselineCommand");
    var se_CreateResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateResourceDataSync");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateResourceDataSyncCommand");
    var se_DeleteActivationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteActivation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteActivationCommand");
    var se_DeleteAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteAssociation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteAssociationCommand");
    var se_DeleteDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteDocument");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteDocumentCommand");
    var se_DeleteInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteInventory");
      let body;
      body = JSON.stringify(se_DeleteInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteInventoryCommand");
    var se_DeleteMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteMaintenanceWindow");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteMaintenanceWindowCommand");
    var se_DeleteOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteOpsItem");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteOpsItemCommand");
    var se_DeleteOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteOpsMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteOpsMetadataCommand");
    var se_DeleteParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteParameter");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteParameterCommand");
    var se_DeleteParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteParameters");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteParametersCommand");
    var se_DeletePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeletePatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeletePatchBaselineCommand");
    var se_DeleteResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteResourceDataSync");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteResourceDataSyncCommand");
    var se_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteResourcePolicy");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteResourcePolicyCommand");
    var se_DeregisterManagedInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeregisterManagedInstance");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeregisterManagedInstanceCommand");
    var se_DeregisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeregisterPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeregisterPatchBaselineForPatchGroupCommand");
    var se_DeregisterTargetFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeregisterTargetFromMaintenanceWindow");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeregisterTargetFromMaintenanceWindowCommand");
    var se_DeregisterTaskFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeregisterTaskFromMaintenanceWindow");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeregisterTaskFromMaintenanceWindowCommand");
    var se_DescribeActivationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeActivations");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeActivationsCommand");
    var se_DescribeAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAssociation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAssociationCommand");
    var se_DescribeAssociationExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAssociationExecutions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAssociationExecutionsCommand");
    var se_DescribeAssociationExecutionTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAssociationExecutionTargets");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAssociationExecutionTargetsCommand");
    var se_DescribeAutomationExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAutomationExecutions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAutomationExecutionsCommand");
    var se_DescribeAutomationStepExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAutomationStepExecutions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAutomationStepExecutionsCommand");
    var se_DescribeAvailablePatchesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeAvailablePatches");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAvailablePatchesCommand");
    var se_DescribeDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeDocument");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeDocumentCommand");
    var se_DescribeDocumentPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeDocumentPermission");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeDocumentPermissionCommand");
    var se_DescribeEffectiveInstanceAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeEffectiveInstanceAssociations");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeEffectiveInstanceAssociationsCommand");
    var se_DescribeEffectivePatchesForPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeEffectivePatchesForPatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeEffectivePatchesForPatchBaselineCommand");
    var se_DescribeInstanceAssociationsStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstanceAssociationsStatus");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstanceAssociationsStatusCommand");
    var se_DescribeInstanceInformationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstanceInformation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstanceInformationCommand");
    var se_DescribeInstancePatchesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatches");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstancePatchesCommand");
    var se_DescribeInstancePatchStatesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatchStates");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstancePatchStatesCommand");
    var se_DescribeInstancePatchStatesForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatchStatesForPatchGroup");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstancePatchStatesForPatchGroupCommand");
    var se_DescribeInstancePropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInstanceProperties");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInstancePropertiesCommand");
    var se_DescribeInventoryDeletionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeInventoryDeletions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeInventoryDeletionsCommand");
    var se_DescribeMaintenanceWindowExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowExecutionsCommand");
    var se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTaskInvocations");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    var se_DescribeMaintenanceWindowExecutionTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTasks");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowExecutionTasksCommand");
    var se_DescribeMaintenanceWindowsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindows");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowsCommand");
    var se_DescribeMaintenanceWindowScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowSchedule");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowScheduleCommand");
    var se_DescribeMaintenanceWindowsForTargetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowsForTarget");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowsForTargetCommand");
    var se_DescribeMaintenanceWindowTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowTargets");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowTargetsCommand");
    var se_DescribeMaintenanceWindowTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowTasks");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeMaintenanceWindowTasksCommand");
    var se_DescribeOpsItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeOpsItems");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeOpsItemsCommand");
    var se_DescribeParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeParameters");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeParametersCommand");
    var se_DescribePatchBaselinesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribePatchBaselines");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribePatchBaselinesCommand");
    var se_DescribePatchGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribePatchGroups");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribePatchGroupsCommand");
    var se_DescribePatchGroupStateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribePatchGroupState");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribePatchGroupStateCommand");
    var se_DescribePatchPropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribePatchProperties");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribePatchPropertiesCommand");
    var se_DescribeSessionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeSessions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeSessionsCommand");
    var se_DisassociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DisassociateOpsItemRelatedItem");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DisassociateOpsItemRelatedItemCommand");
    var se_GetAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetAutomationExecution");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetAutomationExecutionCommand");
    var se_GetCalendarStateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetCalendarState");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCalendarStateCommand");
    var se_GetCommandInvocationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetCommandInvocation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCommandInvocationCommand");
    var se_GetConnectionStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetConnectionStatus");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetConnectionStatusCommand");
    var se_GetDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetDefaultPatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetDefaultPatchBaselineCommand");
    var se_GetDeployablePatchSnapshotForInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetDeployablePatchSnapshotForInstance");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetDeployablePatchSnapshotForInstanceCommand");
    var se_GetDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetDocument");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetDocumentCommand");
    var se_GetInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetInventory");
      let body;
      body = JSON.stringify(se_GetInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetInventoryCommand");
    var se_GetInventorySchemaCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetInventorySchema");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetInventorySchemaCommand");
    var se_GetMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindow");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetMaintenanceWindowCommand");
    var se_GetMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecution");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetMaintenanceWindowExecutionCommand");
    var se_GetMaintenanceWindowExecutionTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecutionTask");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetMaintenanceWindowExecutionTaskCommand");
    var se_GetMaintenanceWindowExecutionTaskInvocationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecutionTaskInvocation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetMaintenanceWindowExecutionTaskInvocationCommand");
    var se_GetMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowTask");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetMaintenanceWindowTaskCommand");
    var se_GetOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetOpsItem");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetOpsItemCommand");
    var se_GetOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetOpsMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetOpsMetadataCommand");
    var se_GetOpsSummaryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetOpsSummary");
      let body;
      body = JSON.stringify(se_GetOpsSummaryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetOpsSummaryCommand");
    var se_GetParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetParameter");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetParameterCommand");
    var se_GetParameterHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetParameterHistory");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetParameterHistoryCommand");
    var se_GetParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetParameters");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetParametersCommand");
    var se_GetParametersByPathCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetParametersByPath");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetParametersByPathCommand");
    var se_GetPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetPatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetPatchBaselineCommand");
    var se_GetPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetPatchBaselineForPatchGroupCommand");
    var se_GetResourcePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetResourcePolicies");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetResourcePoliciesCommand");
    var se_GetServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetServiceSetting");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetServiceSettingCommand");
    var se_LabelParameterVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("LabelParameterVersion");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_LabelParameterVersionCommand");
    var se_ListAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListAssociations");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListAssociationsCommand");
    var se_ListAssociationVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListAssociationVersions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListAssociationVersionsCommand");
    var se_ListCommandInvocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListCommandInvocations");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListCommandInvocationsCommand");
    var se_ListCommandsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListCommands");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListCommandsCommand");
    var se_ListComplianceItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListComplianceItems");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListComplianceItemsCommand");
    var se_ListComplianceSummariesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListComplianceSummaries");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListComplianceSummariesCommand");
    var se_ListDocumentMetadataHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListDocumentMetadataHistory");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListDocumentMetadataHistoryCommand");
    var se_ListDocumentsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListDocuments");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListDocumentsCommand");
    var se_ListDocumentVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListDocumentVersions");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListDocumentVersionsCommand");
    var se_ListInventoryEntriesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListInventoryEntries");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListInventoryEntriesCommand");
    var se_ListOpsItemEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListOpsItemEvents");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListOpsItemEventsCommand");
    var se_ListOpsItemRelatedItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListOpsItemRelatedItems");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListOpsItemRelatedItemsCommand");
    var se_ListOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListOpsMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListOpsMetadataCommand");
    var se_ListResourceComplianceSummariesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListResourceComplianceSummaries");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListResourceComplianceSummariesCommand");
    var se_ListResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListResourceDataSync");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListResourceDataSyncCommand");
    var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListTagsForResource");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTagsForResourceCommand");
    var se_ModifyDocumentPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ModifyDocumentPermission");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ModifyDocumentPermissionCommand");
    var se_PutComplianceItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutComplianceItems");
      let body;
      body = JSON.stringify(se_PutComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PutComplianceItemsCommand");
    var se_PutInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutInventory");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PutInventoryCommand");
    var se_PutParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutParameter");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PutParameterCommand");
    var se_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutResourcePolicy");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PutResourcePolicyCommand");
    var se_RegisterDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RegisterDefaultPatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterDefaultPatchBaselineCommand");
    var se_RegisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RegisterPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterPatchBaselineForPatchGroupCommand");
    var se_RegisterTargetWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RegisterTargetWithMaintenanceWindow");
      let body;
      body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterTargetWithMaintenanceWindowCommand");
    var se_RegisterTaskWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RegisterTaskWithMaintenanceWindow");
      let body;
      body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterTaskWithMaintenanceWindowCommand");
    var se_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RemoveTagsFromResource");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RemoveTagsFromResourceCommand");
    var se_ResetServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ResetServiceSetting");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ResetServiceSettingCommand");
    var se_ResumeSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ResumeSession");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ResumeSessionCommand");
    var se_SendAutomationSignalCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("SendAutomationSignal");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SendAutomationSignalCommand");
    var se_SendCommandCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("SendCommand");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SendCommandCommand");
    var se_StartAssociationsOnceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("StartAssociationsOnce");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StartAssociationsOnceCommand");
    var se_StartAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("StartAutomationExecution");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StartAutomationExecutionCommand");
    var se_StartChangeRequestExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("StartChangeRequestExecution");
      let body;
      body = JSON.stringify(se_StartChangeRequestExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StartChangeRequestExecutionCommand");
    var se_StartSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("StartSession");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StartSessionCommand");
    var se_StopAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("StopAutomationExecution");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StopAutomationExecutionCommand");
    var se_TerminateSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("TerminateSession");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_TerminateSessionCommand");
    var se_UnlabelParameterVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UnlabelParameterVersion");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UnlabelParameterVersionCommand");
    var se_UpdateAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateAssociation");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateAssociationCommand");
    var se_UpdateAssociationStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateAssociationStatus");
      let body;
      body = JSON.stringify(se_UpdateAssociationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateAssociationStatusCommand");
    var se_UpdateDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateDocument");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateDocumentCommand");
    var se_UpdateDocumentDefaultVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateDocumentDefaultVersion");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateDocumentDefaultVersionCommand");
    var se_UpdateDocumentMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateDocumentMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateDocumentMetadataCommand");
    var se_UpdateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindow");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateMaintenanceWindowCommand");
    var se_UpdateMaintenanceWindowTargetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindowTarget");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateMaintenanceWindowTargetCommand");
    var se_UpdateMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindowTask");
      let body;
      body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateMaintenanceWindowTaskCommand");
    var se_UpdateManagedInstanceRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateManagedInstanceRole");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateManagedInstanceRoleCommand");
    var se_UpdateOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateOpsItem");
      let body;
      body = JSON.stringify(se_UpdateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateOpsItemCommand");
    var se_UpdateOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateOpsMetadata");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateOpsMetadataCommand");
    var se_UpdatePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdatePatchBaseline");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdatePatchBaselineCommand");
    var se_UpdateResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateResourceDataSync");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateResourceDataSyncCommand");
    var se_UpdateServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateServiceSetting");
      let body;
      body = JSON.stringify((0, import_smithy_client5._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateServiceSettingCommand");
    var de_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AddTagsToResourceCommand");
    var de_AssociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssociateOpsItemRelatedItemCommand");
    var de_CancelCommandCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CancelCommandCommand");
    var de_CancelMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CancelMaintenanceWindowExecutionCommand");
    var de_CreateActivationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateActivationCommand");
    var de_CreateAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateAssociationCommand");
    var de_CreateAssociationBatchCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateAssociationBatchResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateAssociationBatchCommand");
    var de_CreateDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateDocumentCommand");
    var de_CreateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateMaintenanceWindowCommand");
    var de_CreateOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateOpsItemCommand");
    var de_CreateOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateOpsMetadataCommand");
    var de_CreatePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreatePatchBaselineCommand");
    var de_CreateResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateResourceDataSyncCommand");
    var de_DeleteActivationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteActivationCommand");
    var de_DeleteAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteAssociationCommand");
    var de_DeleteDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteDocumentCommand");
    var de_DeleteInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteInventoryCommand");
    var de_DeleteMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteMaintenanceWindowCommand");
    var de_DeleteOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteOpsItemCommand");
    var de_DeleteOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteOpsMetadataCommand");
    var de_DeleteParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteParameterCommand");
    var de_DeleteParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteParametersCommand");
    var de_DeletePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeletePatchBaselineCommand");
    var de_DeleteResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteResourceDataSyncCommand");
    var de_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteResourcePolicyCommand");
    var de_DeregisterManagedInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeregisterManagedInstanceCommand");
    var de_DeregisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeregisterPatchBaselineForPatchGroupCommand");
    var de_DeregisterTargetFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeregisterTargetFromMaintenanceWindowCommand");
    var de_DeregisterTaskFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeregisterTaskFromMaintenanceWindowCommand");
    var de_DescribeActivationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeActivationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeActivationsCommand");
    var de_DescribeAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAssociationCommand");
    var de_DescribeAssociationExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAssociationExecutionsCommand");
    var de_DescribeAssociationExecutionTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationExecutionTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAssociationExecutionTargetsCommand");
    var de_DescribeAutomationExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAutomationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAutomationExecutionsCommand");
    var de_DescribeAutomationStepExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAutomationStepExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAutomationStepExecutionsCommand");
    var de_DescribeAvailablePatchesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAvailablePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAvailablePatchesCommand");
    var de_DescribeDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeDocumentCommand");
    var de_DescribeDocumentPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeDocumentPermissionCommand");
    var de_DescribeEffectiveInstanceAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeEffectiveInstanceAssociationsCommand");
    var de_DescribeEffectivePatchesForPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeEffectivePatchesForPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeEffectivePatchesForPatchBaselineCommand");
    var de_DescribeInstanceAssociationsStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstanceAssociationsStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstanceAssociationsStatusCommand");
    var de_DescribeInstanceInformationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstanceInformationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstanceInformationCommand");
    var de_DescribeInstancePatchesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstancePatchesCommand");
    var de_DescribeInstancePatchStatesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchStatesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstancePatchStatesCommand");
    var de_DescribeInstancePatchStatesForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchStatesForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstancePatchStatesForPatchGroupCommand");
    var de_DescribeInstancePropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePropertiesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInstancePropertiesCommand");
    var de_DescribeInventoryDeletionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeInventoryDeletionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeInventoryDeletionsCommand");
    var de_DescribeMaintenanceWindowExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowExecutionsCommand");
    var de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    var de_DescribeMaintenanceWindowExecutionTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowExecutionTasksCommand");
    var de_DescribeMaintenanceWindowsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowsCommand");
    var de_DescribeMaintenanceWindowScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowScheduleCommand");
    var de_DescribeMaintenanceWindowsForTargetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowsForTargetCommand");
    var de_DescribeMaintenanceWindowTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowTargetsCommand");
    var de_DescribeMaintenanceWindowTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeMaintenanceWindowTasksCommand");
    var de_DescribeOpsItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeOpsItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeOpsItemsCommand");
    var de_DescribeParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeParametersCommand");
    var de_DescribePatchBaselinesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribePatchBaselinesCommand");
    var de_DescribePatchGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribePatchGroupsCommand");
    var de_DescribePatchGroupStateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribePatchGroupStateCommand");
    var de_DescribePatchPropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribePatchPropertiesCommand");
    var de_DescribeSessionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeSessionsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeSessionsCommand");
    var de_DisassociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DisassociateOpsItemRelatedItemCommand");
    var de_GetAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetAutomationExecutionCommand");
    var de_GetCalendarStateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCalendarStateCommand");
    var de_GetCommandInvocationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCommandInvocationCommand");
    var de_GetConnectionStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetConnectionStatusCommand");
    var de_GetDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetDefaultPatchBaselineCommand");
    var de_GetDeployablePatchSnapshotForInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetDeployablePatchSnapshotForInstanceCommand");
    var de_GetDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetDocumentCommand");
    var de_GetInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetInventoryCommand");
    var de_GetInventorySchemaCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetInventorySchemaCommand");
    var de_GetMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetMaintenanceWindowCommand");
    var de_GetMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetMaintenanceWindowExecutionCommand");
    var de_GetMaintenanceWindowExecutionTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetMaintenanceWindowExecutionTaskCommand");
    var de_GetMaintenanceWindowExecutionTaskInvocationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetMaintenanceWindowExecutionTaskInvocationCommand");
    var de_GetMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetMaintenanceWindowTaskCommand");
    var de_GetOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetOpsItemCommand");
    var de_GetOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetOpsMetadataCommand");
    var de_GetOpsSummaryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetOpsSummaryCommand");
    var de_GetParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetParameterCommand");
    var de_GetParameterHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetParameterHistoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetParameterHistoryCommand");
    var de_GetParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetParametersCommand");
    var de_GetParametersByPathCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetParametersByPathResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetParametersByPathCommand");
    var de_GetPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetPatchBaselineCommand");
    var de_GetPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetPatchBaselineForPatchGroupCommand");
    var de_GetResourcePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetResourcePoliciesCommand");
    var de_GetServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetServiceSettingCommand");
    var de_LabelParameterVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_LabelParameterVersionCommand");
    var de_ListAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListAssociationsCommand");
    var de_ListAssociationVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListAssociationVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListAssociationVersionsCommand");
    var de_ListCommandInvocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListCommandInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListCommandInvocationsCommand");
    var de_ListCommandsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListCommandsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListCommandsCommand");
    var de_ListComplianceItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListComplianceItemsCommand");
    var de_ListComplianceSummariesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListComplianceSummariesCommand");
    var de_ListDocumentMetadataHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListDocumentMetadataHistoryResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListDocumentMetadataHistoryCommand");
    var de_ListDocumentsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListDocumentsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListDocumentsCommand");
    var de_ListDocumentVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListDocumentVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListDocumentVersionsCommand");
    var de_ListInventoryEntriesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListInventoryEntriesCommand");
    var de_ListOpsItemEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListOpsItemEventsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListOpsItemEventsCommand");
    var de_ListOpsItemRelatedItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListOpsItemRelatedItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListOpsItemRelatedItemsCommand");
    var de_ListOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListOpsMetadataCommand");
    var de_ListResourceComplianceSummariesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListResourceComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListResourceComplianceSummariesCommand");
    var de_ListResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListResourceDataSyncCommand");
    var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTagsForResourceCommand");
    var de_ModifyDocumentPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ModifyDocumentPermissionCommand");
    var de_PutComplianceItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PutComplianceItemsCommand");
    var de_PutInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PutInventoryCommand");
    var de_PutParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PutParameterCommand");
    var de_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PutResourcePolicyCommand");
    var de_RegisterDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterDefaultPatchBaselineCommand");
    var de_RegisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterPatchBaselineForPatchGroupCommand");
    var de_RegisterTargetWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterTargetWithMaintenanceWindowCommand");
    var de_RegisterTaskWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterTaskWithMaintenanceWindowCommand");
    var de_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RemoveTagsFromResourceCommand");
    var de_ResetServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ResetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ResetServiceSettingCommand");
    var de_ResumeSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ResumeSessionCommand");
    var de_SendAutomationSignalCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SendAutomationSignalCommand");
    var de_SendCommandCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_SendCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SendCommandCommand");
    var de_StartAssociationsOnceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StartAssociationsOnceCommand");
    var de_StartAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StartAutomationExecutionCommand");
    var de_StartChangeRequestExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StartChangeRequestExecutionCommand");
    var de_StartSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StartSessionCommand");
    var de_StopAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StopAutomationExecutionCommand");
    var de_TerminateSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_TerminateSessionCommand");
    var de_UnlabelParameterVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UnlabelParameterVersionCommand");
    var de_UpdateAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateAssociationCommand");
    var de_UpdateAssociationStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateAssociationStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateAssociationStatusCommand");
    var de_UpdateDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateDocumentCommand");
    var de_UpdateDocumentDefaultVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateDocumentDefaultVersionCommand");
    var de_UpdateDocumentMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateDocumentMetadataCommand");
    var de_UpdateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateMaintenanceWindowCommand");
    var de_UpdateMaintenanceWindowTargetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateMaintenanceWindowTargetCommand");
    var de_UpdateMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateMaintenanceWindowTaskCommand");
    var de_UpdateManagedInstanceRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateManagedInstanceRoleCommand");
    var de_UpdateOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateOpsItemCommand");
    var de_UpdateOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateOpsMetadataCommand");
    var de_UpdatePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdatePatchBaselineCommand");
    var de_UpdateResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateResourceDataSyncCommand");
    var de_UpdateServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client5._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateServiceSettingCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
          throw await de_TooManyTagsErrorRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        case "OpsItemConflictException":
        case "com.amazonaws.ssm#OpsItemConflictException":
          throw await de_OpsItemConflictExceptionRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
          throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
          throw await de_AssociationAlreadyExistsRes(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await de_AssociationLimitExceededRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
          throw await de_InvalidTagRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
          throw await de_DocumentAlreadyExistsRes(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await de_DocumentLimitExceededRes(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await de_InvalidDocumentContentRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
          throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
          throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
          throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
          throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
          throw await de_InvalidActivationRes(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
          throw await de_InvalidActivationIdRes(parsedOutput, context);
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
          throw await de_AssociatedInstancesRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
          throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
          throw await de_InvalidInventoryRequestExceptionRes(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
          throw await de_InvalidOptionExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        case "MalformedResourcePolicyDocumentException":
        case "com.amazonaws.ssm#MalformedResourcePolicyDocumentException":
          throw await de_MalformedResourcePolicyDocumentExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ssm#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
          throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        case "ResourcePolicyNotFoundException":
        case "com.amazonaws.ssm#ResourcePolicyNotFoundException":
          throw await de_ResourcePolicyNotFoundExceptionRes(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
          throw await de_TargetInUseExceptionRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await de_InvalidAssociationVersionRes(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
          throw await de_AssociationExecutionDoesNotExistRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await de_InvalidPermissionTypeRes(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
          throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput, context);
        case "InvalidInstancePropertyFilterValue":
        case "com.amazonaws.ssm#InvalidInstancePropertyFilterValue":
          throw await de_InvalidInstancePropertyFilterValueRes(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
          throw await de_InvalidDeletionIdExceptionRes(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await de_InvalidFilterOptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
          throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
          throw await de_InvalidDocumentTypeRes(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
          throw await de_UnsupportedCalendarExceptionRes(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
          throw await de_InvalidPluginNameRes(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
          throw await de_InvocationDoesNotExistRes(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
          throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
          throw await de_InvalidInventoryGroupExceptionRes(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
          throw await de_InvalidResultAttributeExceptionRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
          throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
          throw await de_DocumentPermissionLimitRes(parsedOutput, context);
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
          throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await de_InvalidItemContentExceptionRes(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
          throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
          throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
          throw await de_ItemContentMismatchExceptionRes(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
          throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
          throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
          throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput, context);
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
          throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
          throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
          throw await de_IncompatiblePolicyExceptionRes(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
          throw await de_InvalidAllowedPatternExceptionRes(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
          throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
          throw await de_InvalidPolicyTypeExceptionRes(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
          throw await de_ParameterAlreadyExistsRes(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
          throw await de_ParameterLimitExceededRes(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
          throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
          throw await de_ParameterPatternMismatchExceptionRes(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
          throw await de_PoliciesLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
          throw await de_UnsupportedParameterTypeRes(parsedOutput, context);
        case "ResourcePolicyLimitExceededException":
        case "com.amazonaws.ssm#ResourcePolicyLimitExceededException":
          throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
          throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
          throw await de_FeatureNotAvailableExceptionRes(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
          throw await de_AutomationStepNotFoundExceptionRes(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
          throw await de_InvalidAutomationSignalExceptionRes(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
          throw await de_InvalidNotificationConfigRes(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
          throw await de_InvalidOutputFolderRes(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
          throw await de_InvalidRoleRes(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
          throw await de_InvalidAssociationRes(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
          throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
          throw await de_TargetNotConnectedRes(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
          throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
          throw await de_AssociationVersionLimitExceededRes(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
          throw await de_InvalidUpdateRes(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
          throw await de_StatusUnchangedRes(parsedOutput, context);
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
          throw await de_DocumentVersionLimitExceededRes(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
          throw await de_DuplicateDocumentContentRes(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
          throw await de_DuplicateDocumentVersionNameRes(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
          throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
          throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_AlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AlreadyExistsExceptionRes");
    var de_AssociatedInstancesRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociatedInstancesRes");
    var de_AssociationAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociationAlreadyExistsRes");
    var de_AssociationDoesNotExistRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociationDoesNotExistRes");
    var de_AssociationExecutionDoesNotExistRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociationExecutionDoesNotExistRes");
    var de_AssociationLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociationLimitExceededRes");
    var de_AssociationVersionLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AssociationVersionLimitExceededRes");
    var de_AutomationDefinitionNotApprovedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationDefinitionNotApprovedExceptionRes");
    var de_AutomationDefinitionNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationDefinitionNotFoundExceptionRes");
    var de_AutomationDefinitionVersionNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationDefinitionVersionNotFoundExceptionRes");
    var de_AutomationExecutionLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationExecutionLimitExceededExceptionRes");
    var de_AutomationExecutionNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationExecutionNotFoundExceptionRes");
    var de_AutomationStepNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AutomationStepNotFoundExceptionRes");
    var de_ComplianceTypeCountLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ComplianceTypeCountLimitExceededExceptionRes");
    var de_CustomSchemaCountLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_CustomSchemaCountLimitExceededExceptionRes");
    var de_DocumentAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DocumentAlreadyExistsRes");
    var de_DocumentLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DocumentLimitExceededRes");
    var de_DocumentPermissionLimitRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DocumentPermissionLimitRes");
    var de_DocumentVersionLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DocumentVersionLimitExceededRes");
    var de_DoesNotExistExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DoesNotExistExceptionRes");
    var de_DuplicateDocumentContentRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DuplicateDocumentContentRes");
    var de_DuplicateDocumentVersionNameRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DuplicateDocumentVersionNameRes");
    var de_DuplicateInstanceIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_DuplicateInstanceIdRes");
    var de_FeatureNotAvailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_FeatureNotAvailableExceptionRes");
    var de_HierarchyLevelLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_HierarchyLevelLimitExceededExceptionRes");
    var de_HierarchyTypeMismatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_HierarchyTypeMismatchExceptionRes");
    var de_IdempotentParameterMismatchRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_IdempotentParameterMismatchRes");
    var de_IncompatiblePolicyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_IncompatiblePolicyExceptionRes");
    var de_InternalServerErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InternalServerErrorRes");
    var de_InvalidActivationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidActivationRes");
    var de_InvalidActivationIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidActivationIdRes");
    var de_InvalidAggregatorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAggregatorExceptionRes");
    var de_InvalidAllowedPatternExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAllowedPatternExceptionRes");
    var de_InvalidAssociationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAssociationRes");
    var de_InvalidAssociationVersionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAssociationVersionRes");
    var de_InvalidAutomationExecutionParametersExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAutomationExecutionParametersExceptionRes");
    var de_InvalidAutomationSignalExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAutomationSignalExceptionRes");
    var de_InvalidAutomationStatusUpdateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidAutomationStatusUpdateExceptionRes");
    var de_InvalidCommandIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidCommandIdRes");
    var de_InvalidDeleteInventoryParametersExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDeleteInventoryParametersExceptionRes");
    var de_InvalidDeletionIdExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDeletionIdExceptionRes");
    var de_InvalidDocumentRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentRes");
    var de_InvalidDocumentContentRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentContentRes");
    var de_InvalidDocumentOperationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentOperationRes");
    var de_InvalidDocumentSchemaVersionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentSchemaVersionRes");
    var de_InvalidDocumentTypeRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentTypeRes");
    var de_InvalidDocumentVersionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidDocumentVersionRes");
    var de_InvalidFilterRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidFilterRes");
    var de_InvalidFilterKeyRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidFilterKeyRes");
    var de_InvalidFilterOptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidFilterOptionRes");
    var de_InvalidFilterValueRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidFilterValueRes");
    var de_InvalidInstanceIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInstanceIdRes");
    var de_InvalidInstanceInformationFilterValueRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInstanceInformationFilterValueRes");
    var de_InvalidInstancePropertyFilterValueRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInstancePropertyFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInstancePropertyFilterValueRes");
    var de_InvalidInventoryGroupExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInventoryGroupExceptionRes");
    var de_InvalidInventoryItemContextExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInventoryItemContextExceptionRes");
    var de_InvalidInventoryRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidInventoryRequestExceptionRes");
    var de_InvalidItemContentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidItemContentExceptionRes");
    var de_InvalidKeyIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidKeyIdRes");
    var de_InvalidNextTokenRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidNextTokenRes");
    var de_InvalidNotificationConfigRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidNotificationConfigRes");
    var de_InvalidOptionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidOptionExceptionRes");
    var de_InvalidOutputFolderRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidOutputFolderRes");
    var de_InvalidOutputLocationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidOutputLocationRes");
    var de_InvalidParametersRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidParametersRes");
    var de_InvalidPermissionTypeRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidPermissionTypeRes");
    var de_InvalidPluginNameRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidPluginNameRes");
    var de_InvalidPolicyAttributeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidPolicyAttributeExceptionRes");
    var de_InvalidPolicyTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidPolicyTypeExceptionRes");
    var de_InvalidResourceIdRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidResourceIdRes");
    var de_InvalidResourceTypeRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidResourceTypeRes");
    var de_InvalidResultAttributeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidResultAttributeExceptionRes");
    var de_InvalidRoleRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidRoleRes");
    var de_InvalidScheduleRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidScheduleRes");
    var de_InvalidTagRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidTagRes");
    var de_InvalidTargetRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidTargetRes");
    var de_InvalidTargetMapsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidTargetMapsRes");
    var de_InvalidTypeNameExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidTypeNameExceptionRes");
    var de_InvalidUpdateRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidUpdateRes");
    var de_InvocationDoesNotExistRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvocationDoesNotExistRes");
    var de_ItemContentMismatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ItemContentMismatchExceptionRes");
    var de_ItemSizeLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ItemSizeLimitExceededExceptionRes");
    var de_MalformedResourcePolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new MalformedResourcePolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_MalformedResourcePolicyDocumentExceptionRes");
    var de_MaxDocumentSizeExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_MaxDocumentSizeExceededRes");
    var de_OpsItemAccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemAccessDeniedExceptionRes");
    var de_OpsItemAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemAlreadyExistsExceptionRes");
    var de_OpsItemConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemConflictExceptionRes");
    var de_OpsItemInvalidParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemInvalidParameterExceptionRes");
    var de_OpsItemLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemLimitExceededExceptionRes");
    var de_OpsItemNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemNotFoundExceptionRes");
    var de_OpsItemRelatedItemAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemRelatedItemAlreadyExistsExceptionRes");
    var de_OpsItemRelatedItemAssociationNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsItemRelatedItemAssociationNotFoundExceptionRes");
    var de_OpsMetadataAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataAlreadyExistsExceptionRes");
    var de_OpsMetadataInvalidArgumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataInvalidArgumentExceptionRes");
    var de_OpsMetadataKeyLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataKeyLimitExceededExceptionRes");
    var de_OpsMetadataLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataLimitExceededExceptionRes");
    var de_OpsMetadataNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataNotFoundExceptionRes");
    var de_OpsMetadataTooManyUpdatesExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OpsMetadataTooManyUpdatesExceptionRes");
    var de_ParameterAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterAlreadyExistsRes");
    var de_ParameterLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterLimitExceededRes");
    var de_ParameterMaxVersionLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterMaxVersionLimitExceededRes");
    var de_ParameterNotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterNotFoundRes");
    var de_ParameterPatternMismatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterPatternMismatchExceptionRes");
    var de_ParameterVersionLabelLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterVersionLabelLimitExceededRes");
    var de_ParameterVersionNotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ParameterVersionNotFoundRes");
    var de_PoliciesLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_PoliciesLimitExceededExceptionRes");
    var de_ResourceDataSyncAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceDataSyncAlreadyExistsExceptionRes");
    var de_ResourceDataSyncConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceDataSyncConflictExceptionRes");
    var de_ResourceDataSyncCountExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceDataSyncCountExceededExceptionRes");
    var de_ResourceDataSyncInvalidConfigurationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceDataSyncInvalidConfigurationExceptionRes");
    var de_ResourceDataSyncNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceDataSyncNotFoundExceptionRes");
    var de_ResourceInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceInUseExceptionRes");
    var de_ResourceLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceLimitExceededExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_ResourcePolicyConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourcePolicyConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourcePolicyConflictExceptionRes");
    var de_ResourcePolicyInvalidParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourcePolicyInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourcePolicyInvalidParameterExceptionRes");
    var de_ResourcePolicyLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourcePolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourcePolicyLimitExceededExceptionRes");
    var de_ResourcePolicyNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ResourcePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourcePolicyNotFoundExceptionRes");
    var de_ServiceSettingNotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ServiceSettingNotFoundRes");
    var de_StatusUnchangedRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_StatusUnchangedRes");
    var de_SubTypeCountLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_SubTypeCountLimitExceededExceptionRes");
    var de_TargetInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TargetInUseExceptionRes");
    var de_TargetNotConnectedRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TargetNotConnectedRes");
    var de_TooManyTagsErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TooManyTagsErrorRes");
    var de_TooManyUpdatesRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TooManyUpdatesRes");
    var de_TotalSizeLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TotalSizeLimitExceededExceptionRes");
    var de_UnsupportedCalendarExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedCalendarExceptionRes");
    var de_UnsupportedFeatureRequiredExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedFeatureRequiredExceptionRes");
    var de_UnsupportedInventoryItemContextExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedInventoryItemContextExceptionRes");
    var de_UnsupportedInventorySchemaVersionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedInventorySchemaVersionExceptionRes");
    var de_UnsupportedOperatingSystemRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedOperatingSystemRes");
    var de_UnsupportedParameterTypeRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedParameterTypeRes");
    var de_UnsupportedPlatformTypeRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client5._json)(body);
      const exception = new UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UnsupportedPlatformTypeRes");
    var se_AssociationStatus = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AdditionalInfo: [],
        Date: (_) => _.getTime() / 1e3,
        Message: [],
        Name: []
      });
    }, "se_AssociationStatus");
    var se_ComplianceExecutionSummary = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ExecutionId: [],
        ExecutionTime: (_) => _.getTime() / 1e3,
        ExecutionType: []
      });
    }, "se_ComplianceExecutionSummary");
    var se_CreateActivationRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        DefaultInstanceName: [],
        Description: [],
        ExpirationDate: (_) => _.getTime() / 1e3,
        IamRole: [],
        RegistrationLimit: [],
        RegistrationMetadata: import_smithy_client5._json,
        Tags: import_smithy_client5._json
      });
    }, "se_CreateActivationRequest");
    var se_CreateMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AllowUnassociatedTargets: [],
        ClientToken: [true, (_) => _ ?? (0, import_uuid2.v4)()],
        Cutoff: [],
        Description: [],
        Duration: [],
        EndDate: [],
        Name: [],
        Schedule: [],
        ScheduleOffset: [],
        ScheduleTimezone: [],
        StartDate: [],
        Tags: import_smithy_client5._json
      });
    }, "se_CreateMaintenanceWindowRequest");
    var se_CreateOpsItemRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AccountId: [],
        ActualEndTime: (_) => _.getTime() / 1e3,
        ActualStartTime: (_) => _.getTime() / 1e3,
        Category: [],
        Description: [],
        Notifications: import_smithy_client5._json,
        OperationalData: import_smithy_client5._json,
        OpsItemType: [],
        PlannedEndTime: (_) => _.getTime() / 1e3,
        PlannedStartTime: (_) => _.getTime() / 1e3,
        Priority: [],
        RelatedOpsItems: import_smithy_client5._json,
        Severity: [],
        Source: [],
        Tags: import_smithy_client5._json,
        Title: []
      });
    }, "se_CreateOpsItemRequest");
    var se_CreatePatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ApprovalRules: import_smithy_client5._json,
        ApprovedPatches: import_smithy_client5._json,
        ApprovedPatchesComplianceLevel: [],
        ApprovedPatchesEnableNonSecurity: [],
        ClientToken: [true, (_) => _ ?? (0, import_uuid2.v4)()],
        Description: [],
        GlobalFilters: import_smithy_client5._json,
        Name: [],
        OperatingSystem: [],
        RejectedPatches: import_smithy_client5._json,
        RejectedPatchesAction: [],
        Sources: import_smithy_client5._json,
        Tags: import_smithy_client5._json
      });
    }, "se_CreatePatchBaselineRequest");
    var se_DeleteInventoryRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, import_uuid2.v4)()],
        DryRun: [],
        SchemaDeleteOption: [],
        TypeName: []
      });
    }, "se_DeleteInventoryRequest");
    var se_GetInventoryRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_, context),
        Filters: import_smithy_client5._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: import_smithy_client5._json
      });
    }, "se_GetInventoryRequest");
    var se_GetOpsSummaryRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        Aggregators: (_) => se_OpsAggregatorList(_, context),
        Filters: import_smithy_client5._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: import_smithy_client5._json,
        SyncName: []
      });
    }, "se_GetOpsSummaryRequest");
    var se_InventoryAggregator = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_, context),
        Expression: [],
        Groups: import_smithy_client5._json
      });
    }, "se_InventoryAggregator");
    var se_InventoryAggregatorList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_InventoryAggregator(entry, context);
      });
    }, "se_InventoryAggregatorList");
    var se_MaintenanceWindowLambdaParameters = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ClientContext: [],
        Payload: context.base64Encoder,
        Qualifier: []
      });
    }, "se_MaintenanceWindowLambdaParameters");
    var se_MaintenanceWindowTaskInvocationParameters = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        Automation: import_smithy_client5._json,
        Lambda: (_) => se_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: import_smithy_client5._json,
        StepFunctions: import_smithy_client5._json
      });
    }, "se_MaintenanceWindowTaskInvocationParameters");
    var se_OpsAggregator = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AggregatorType: [],
        Aggregators: (_) => se_OpsAggregatorList(_, context),
        AttributeName: [],
        Filters: import_smithy_client5._json,
        TypeName: [],
        Values: import_smithy_client5._json
      });
    }, "se_OpsAggregator");
    var se_OpsAggregatorList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_OpsAggregator(entry, context);
      });
    }, "se_OpsAggregatorList");
    var se_PutComplianceItemsRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ComplianceType: [],
        ExecutionSummary: (_) => se_ComplianceExecutionSummary(_, context),
        ItemContentHash: [],
        Items: import_smithy_client5._json,
        ResourceId: [],
        ResourceType: [],
        UploadType: []
      });
    }, "se_PutComplianceItemsRequest");
    var se_RegisterTargetWithMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, import_uuid2.v4)()],
        Description: [],
        Name: [],
        OwnerInformation: [],
        ResourceType: [],
        Targets: import_smithy_client5._json,
        WindowId: []
      });
    }, "se_RegisterTargetWithMaintenanceWindowRequest");
    var se_RegisterTaskWithMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AlarmConfiguration: import_smithy_client5._json,
        ClientToken: [true, (_) => _ ?? (0, import_uuid2.v4)()],
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: import_smithy_client5._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        ServiceRoleArn: [],
        Targets: import_smithy_client5._json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: import_smithy_client5._json,
        TaskType: [],
        WindowId: []
      });
    }, "se_RegisterTaskWithMaintenanceWindowRequest");
    var se_StartChangeRequestExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AutoApprove: [],
        ChangeDetails: [],
        ChangeRequestName: [],
        ClientToken: [],
        DocumentName: [],
        DocumentVersion: [],
        Parameters: import_smithy_client5._json,
        Runbooks: import_smithy_client5._json,
        ScheduledEndTime: (_) => _.getTime() / 1e3,
        ScheduledTime: (_) => _.getTime() / 1e3,
        Tags: import_smithy_client5._json
      });
    }, "se_StartChangeRequestExecutionRequest");
    var se_UpdateAssociationStatusRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AssociationStatus: (_) => se_AssociationStatus(_, context),
        InstanceId: [],
        Name: []
      });
    }, "se_UpdateAssociationStatusRequest");
    var se_UpdateMaintenanceWindowTaskRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        AlarmConfiguration: import_smithy_client5._json,
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: import_smithy_client5._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        Replace: [],
        ServiceRoleArn: [],
        Targets: import_smithy_client5._json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: import_smithy_client5._json,
        WindowId: [],
        WindowTaskId: []
      });
    }, "se_UpdateMaintenanceWindowTaskRequest");
    var se_UpdateOpsItemRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        ActualEndTime: (_) => _.getTime() / 1e3,
        ActualStartTime: (_) => _.getTime() / 1e3,
        Category: [],
        Description: [],
        Notifications: import_smithy_client5._json,
        OperationalData: import_smithy_client5._json,
        OperationalDataToDelete: import_smithy_client5._json,
        OpsItemArn: [],
        OpsItemId: [],
        PlannedEndTime: (_) => _.getTime() / 1e3,
        PlannedStartTime: (_) => _.getTime() / 1e3,
        Priority: [],
        RelatedOpsItems: import_smithy_client5._json,
        Severity: [],
        Status: [],
        Title: []
      });
    }, "se_UpdateOpsItemRequest");
    var de_Activation = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActivationId: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DefaultInstanceName: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        ExpirationDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Expired: import_smithy_client5.expectBoolean,
        IamRole: import_smithy_client5.expectString,
        RegistrationLimit: import_smithy_client5.expectInt32,
        RegistrationsCount: import_smithy_client5.expectInt32,
        Tags: import_smithy_client5._json
      });
    }, "de_Activation");
    var de_ActivationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Activation(entry, context);
      });
      return retVal;
    }, "de_ActivationList");
    var de_Association = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationId: import_smithy_client5.expectString,
        AssociationName: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        Duration: import_smithy_client5.expectInt32,
        InstanceId: import_smithy_client5.expectString,
        LastExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        Overview: import_smithy_client5._json,
        ScheduleExpression: import_smithy_client5.expectString,
        ScheduleOffset: import_smithy_client5.expectInt32,
        TargetMaps: import_smithy_client5._json,
        Targets: import_smithy_client5._json
      });
    }, "de_Association");
    var de_AssociationDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        ApplyOnlyAtCronInterval: import_smithy_client5.expectBoolean,
        AssociationId: import_smithy_client5.expectString,
        AssociationName: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        AutomationTargetParameterName: import_smithy_client5.expectString,
        CalendarNames: import_smithy_client5._json,
        ComplianceSeverity: import_smithy_client5.expectString,
        Date: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DocumentVersion: import_smithy_client5.expectString,
        Duration: import_smithy_client5.expectInt32,
        InstanceId: import_smithy_client5.expectString,
        LastExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastSuccessfulExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastUpdateAssociationDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        OutputLocation: import_smithy_client5._json,
        Overview: import_smithy_client5._json,
        Parameters: import_smithy_client5._json,
        ScheduleExpression: import_smithy_client5.expectString,
        ScheduleOffset: import_smithy_client5.expectInt32,
        Status: (_) => de_AssociationStatus(_, context),
        SyncCompliance: import_smithy_client5.expectString,
        TargetLocations: import_smithy_client5._json,
        TargetMaps: import_smithy_client5._json,
        Targets: import_smithy_client5._json,
        TriggeredAlarms: import_smithy_client5._json
      });
    }, "de_AssociationDescription");
    var de_AssociationDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationDescription(entry, context);
      });
      return retVal;
    }, "de_AssociationDescriptionList");
    var de_AssociationExecution = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        AssociationId: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        CreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DetailedStatus: import_smithy_client5.expectString,
        ExecutionId: import_smithy_client5.expectString,
        LastExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ResourceCountByStatus: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        TriggeredAlarms: import_smithy_client5._json
      });
    }, "de_AssociationExecution");
    var de_AssociationExecutionsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationExecution(entry, context);
      });
      return retVal;
    }, "de_AssociationExecutionsList");
    var de_AssociationExecutionTarget = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationId: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        DetailedStatus: import_smithy_client5.expectString,
        ExecutionId: import_smithy_client5.expectString,
        LastExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        OutputSource: import_smithy_client5._json,
        ResourceId: import_smithy_client5.expectString,
        ResourceType: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString
      });
    }, "de_AssociationExecutionTarget");
    var de_AssociationExecutionTargetsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationExecutionTarget(entry, context);
      });
      return retVal;
    }, "de_AssociationExecutionTargetsList");
    var de_AssociationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Association(entry, context);
      });
      return retVal;
    }, "de_AssociationList");
    var de_AssociationStatus = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AdditionalInfo: import_smithy_client5.expectString,
        Date: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Message: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString
      });
    }, "de_AssociationStatus");
    var de_AssociationVersionInfo = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ApplyOnlyAtCronInterval: import_smithy_client5.expectBoolean,
        AssociationId: import_smithy_client5.expectString,
        AssociationName: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        CalendarNames: import_smithy_client5._json,
        ComplianceSeverity: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DocumentVersion: import_smithy_client5.expectString,
        Duration: import_smithy_client5.expectInt32,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        OutputLocation: import_smithy_client5._json,
        Parameters: import_smithy_client5._json,
        ScheduleExpression: import_smithy_client5.expectString,
        ScheduleOffset: import_smithy_client5.expectInt32,
        SyncCompliance: import_smithy_client5.expectString,
        TargetLocations: import_smithy_client5._json,
        TargetMaps: import_smithy_client5._json,
        Targets: import_smithy_client5._json
      });
    }, "de_AssociationVersionInfo");
    var de_AssociationVersionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationVersionInfo(entry, context);
      });
      return retVal;
    }, "de_AssociationVersionList");
    var de_AutomationExecution = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        AssociationId: import_smithy_client5.expectString,
        AutomationExecutionId: import_smithy_client5.expectString,
        AutomationExecutionStatus: import_smithy_client5.expectString,
        AutomationSubtype: import_smithy_client5.expectString,
        ChangeRequestName: import_smithy_client5.expectString,
        CurrentAction: import_smithy_client5.expectString,
        CurrentStepName: import_smithy_client5.expectString,
        DocumentName: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        ExecutedBy: import_smithy_client5.expectString,
        ExecutionEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        FailureMessage: import_smithy_client5.expectString,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Mode: import_smithy_client5.expectString,
        OpsItemId: import_smithy_client5.expectString,
        Outputs: import_smithy_client5._json,
        Parameters: import_smithy_client5._json,
        ParentAutomationExecutionId: import_smithy_client5.expectString,
        ProgressCounters: import_smithy_client5._json,
        ResolvedTargets: import_smithy_client5._json,
        Runbooks: import_smithy_client5._json,
        ScheduledTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        StepExecutions: (_) => de_StepExecutionList(_, context),
        StepExecutionsTruncated: import_smithy_client5.expectBoolean,
        Target: import_smithy_client5.expectString,
        TargetLocations: import_smithy_client5._json,
        TargetMaps: import_smithy_client5._json,
        TargetParameterName: import_smithy_client5.expectString,
        Targets: import_smithy_client5._json,
        TriggeredAlarms: import_smithy_client5._json,
        Variables: import_smithy_client5._json
      });
    }, "de_AutomationExecution");
    var de_AutomationExecutionMetadata = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        AssociationId: import_smithy_client5.expectString,
        AutomationExecutionId: import_smithy_client5.expectString,
        AutomationExecutionStatus: import_smithy_client5.expectString,
        AutomationSubtype: import_smithy_client5.expectString,
        AutomationType: import_smithy_client5.expectString,
        ChangeRequestName: import_smithy_client5.expectString,
        CurrentAction: import_smithy_client5.expectString,
        CurrentStepName: import_smithy_client5.expectString,
        DocumentName: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        ExecutedBy: import_smithy_client5.expectString,
        ExecutionEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        FailureMessage: import_smithy_client5.expectString,
        LogFile: import_smithy_client5.expectString,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Mode: import_smithy_client5.expectString,
        OpsItemId: import_smithy_client5.expectString,
        Outputs: import_smithy_client5._json,
        ParentAutomationExecutionId: import_smithy_client5.expectString,
        ResolvedTargets: import_smithy_client5._json,
        Runbooks: import_smithy_client5._json,
        ScheduledTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Target: import_smithy_client5.expectString,
        TargetMaps: import_smithy_client5._json,
        TargetParameterName: import_smithy_client5.expectString,
        Targets: import_smithy_client5._json,
        TriggeredAlarms: import_smithy_client5._json
      });
    }, "de_AutomationExecutionMetadata");
    var de_AutomationExecutionMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AutomationExecutionMetadata(entry, context);
      });
      return retVal;
    }, "de_AutomationExecutionMetadataList");
    var de_Command = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        CloudWatchOutputConfig: import_smithy_client5._json,
        CommandId: import_smithy_client5.expectString,
        Comment: import_smithy_client5.expectString,
        CompletedCount: import_smithy_client5.expectInt32,
        DeliveryTimedOutCount: import_smithy_client5.expectInt32,
        DocumentName: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        ErrorCount: import_smithy_client5.expectInt32,
        ExpiresAfter: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        InstanceIds: import_smithy_client5._json,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        NotificationConfig: import_smithy_client5._json,
        OutputS3BucketName: import_smithy_client5.expectString,
        OutputS3KeyPrefix: import_smithy_client5.expectString,
        OutputS3Region: import_smithy_client5.expectString,
        Parameters: import_smithy_client5._json,
        RequestedDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ServiceRole: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TargetCount: import_smithy_client5.expectInt32,
        Targets: import_smithy_client5._json,
        TimeoutSeconds: import_smithy_client5.expectInt32,
        TriggeredAlarms: import_smithy_client5._json
      });
    }, "de_Command");
    var de_CommandInvocation = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CloudWatchOutputConfig: import_smithy_client5._json,
        CommandId: import_smithy_client5.expectString,
        CommandPlugins: (_) => de_CommandPluginList(_, context),
        Comment: import_smithy_client5.expectString,
        DocumentName: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        InstanceId: import_smithy_client5.expectString,
        InstanceName: import_smithy_client5.expectString,
        NotificationConfig: import_smithy_client5._json,
        RequestedDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ServiceRole: import_smithy_client5.expectString,
        StandardErrorUrl: import_smithy_client5.expectString,
        StandardOutputUrl: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TraceOutput: import_smithy_client5.expectString
      });
    }, "de_CommandInvocation");
    var de_CommandInvocationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CommandInvocation(entry, context);
      });
      return retVal;
    }, "de_CommandInvocationList");
    var de_CommandList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Command(entry, context);
      });
      return retVal;
    }, "de_CommandList");
    var de_CommandPlugin = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Name: import_smithy_client5.expectString,
        Output: import_smithy_client5.expectString,
        OutputS3BucketName: import_smithy_client5.expectString,
        OutputS3KeyPrefix: import_smithy_client5.expectString,
        OutputS3Region: import_smithy_client5.expectString,
        ResponseCode: import_smithy_client5.expectInt32,
        ResponseFinishDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ResponseStartDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        StandardErrorUrl: import_smithy_client5.expectString,
        StandardOutputUrl: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString
      });
    }, "de_CommandPlugin");
    var de_CommandPluginList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CommandPlugin(entry, context);
      });
      return retVal;
    }, "de_CommandPluginList");
    var de_ComplianceExecutionSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ExecutionId: import_smithy_client5.expectString,
        ExecutionTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionType: import_smithy_client5.expectString
      });
    }, "de_ComplianceExecutionSummary");
    var de_ComplianceItem = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ComplianceType: import_smithy_client5.expectString,
        Details: import_smithy_client5._json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),
        Id: import_smithy_client5.expectString,
        ResourceId: import_smithy_client5.expectString,
        ResourceType: import_smithy_client5.expectString,
        Severity: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        Title: import_smithy_client5.expectString
      });
    }, "de_ComplianceItem");
    var de_ComplianceItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ComplianceItem(entry, context);
      });
      return retVal;
    }, "de_ComplianceItemList");
    var de_CreateAssociationBatchResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Failed: import_smithy_client5._json,
        Successful: (_) => de_AssociationDescriptionList(_, context)
      });
    }, "de_CreateAssociationBatchResult");
    var de_CreateAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    }, "de_CreateAssociationResult");
    var de_CreateDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        DocumentDescription: (_) => de_DocumentDescription(_, context)
      });
    }, "de_CreateDocumentResult");
    var de_DescribeActivationsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActivationList: (_) => de_ActivationList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeActivationsResult");
    var de_DescribeAssociationExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationExecutions: (_) => de_AssociationExecutionsList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeAssociationExecutionsResult");
    var de_DescribeAssociationExecutionTargetsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationExecutionTargets: (_) => de_AssociationExecutionTargetsList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeAssociationExecutionTargetsResult");
    var de_DescribeAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    }, "de_DescribeAssociationResult");
    var de_DescribeAutomationExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AutomationExecutionMetadataList: (_) => de_AutomationExecutionMetadataList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeAutomationExecutionsResult");
    var de_DescribeAutomationStepExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        StepExecutions: (_) => de_StepExecutionList(_, context)
      });
    }, "de_DescribeAutomationStepExecutionsResult");
    var de_DescribeAvailablePatchesResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Patches: (_) => de_PatchList(_, context)
      });
    }, "de_DescribeAvailablePatchesResult");
    var de_DescribeDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Document: (_) => de_DocumentDescription(_, context)
      });
    }, "de_DescribeDocumentResult");
    var de_DescribeEffectivePatchesForPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        EffectivePatches: (_) => de_EffectivePatchList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeEffectivePatchesForPatchBaselineResult");
    var de_DescribeInstanceAssociationsStatusResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InstanceAssociationStatusInfos: (_) => de_InstanceAssociationStatusInfos(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInstanceAssociationsStatusResult");
    var de_DescribeInstanceInformationResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InstanceInformationList: (_) => de_InstanceInformationList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInstanceInformationResult");
    var de_DescribeInstancePatchesResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Patches: (_) => de_PatchComplianceDataList(_, context)
      });
    }, "de_DescribeInstancePatchesResult");
    var de_DescribeInstancePatchStatesForPatchGroupResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InstancePatchStates: (_) => de_InstancePatchStatesList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInstancePatchStatesForPatchGroupResult");
    var de_DescribeInstancePatchStatesResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InstancePatchStates: (_) => de_InstancePatchStateList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInstancePatchStatesResult");
    var de_DescribeInstancePropertiesResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InstanceProperties: (_) => de_InstanceProperties(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInstancePropertiesResult");
    var de_DescribeInventoryDeletionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InventoryDeletions: (_) => de_InventoryDeletionsList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_DescribeInventoryDeletionsResult");
    var de_DescribeMaintenanceWindowExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        WindowExecutions: (_) => de_MaintenanceWindowExecutionList(_, context)
      });
    }, "de_DescribeMaintenanceWindowExecutionsResult");
    var de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        WindowExecutionTaskInvocationIdentities: (_) => de_MaintenanceWindowExecutionTaskInvocationIdentityList(_, context)
      });
    }, "de_DescribeMaintenanceWindowExecutionTaskInvocationsResult");
    var de_DescribeMaintenanceWindowExecutionTasksResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        WindowExecutionTaskIdentities: (_) => de_MaintenanceWindowExecutionTaskIdentityList(_, context)
      });
    }, "de_DescribeMaintenanceWindowExecutionTasksResult");
    var de_DescribeOpsItemsResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        OpsItemSummaries: (_) => de_OpsItemSummaries(_, context)
      });
    }, "de_DescribeOpsItemsResponse");
    var de_DescribeParametersResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Parameters: (_) => de_ParameterMetadataList(_, context)
      });
    }, "de_DescribeParametersResult");
    var de_DescribeSessionsResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Sessions: (_) => de_SessionList(_, context)
      });
    }, "de_DescribeSessionsResponse");
    var de_DocumentDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ApprovedVersion: import_smithy_client5.expectString,
        AttachmentsInformation: import_smithy_client5._json,
        Author: import_smithy_client5.expectString,
        Category: import_smithy_client5._json,
        CategoryEnum: import_smithy_client5._json,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DefaultVersion: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        DisplayName: import_smithy_client5.expectString,
        DocumentFormat: import_smithy_client5.expectString,
        DocumentType: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        Hash: import_smithy_client5.expectString,
        HashType: import_smithy_client5.expectString,
        LatestVersion: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Owner: import_smithy_client5.expectString,
        Parameters: import_smithy_client5._json,
        PendingReviewVersion: import_smithy_client5.expectString,
        PlatformTypes: import_smithy_client5._json,
        Requires: import_smithy_client5._json,
        ReviewInformation: (_) => de_ReviewInformationList(_, context),
        ReviewStatus: import_smithy_client5.expectString,
        SchemaVersion: import_smithy_client5.expectString,
        Sha1: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusInformation: import_smithy_client5.expectString,
        Tags: import_smithy_client5._json,
        TargetType: import_smithy_client5.expectString,
        VersionName: import_smithy_client5.expectString
      });
    }, "de_DocumentDescription");
    var de_DocumentIdentifier = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Author: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DisplayName: import_smithy_client5.expectString,
        DocumentFormat: import_smithy_client5.expectString,
        DocumentType: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Owner: import_smithy_client5.expectString,
        PlatformTypes: import_smithy_client5._json,
        Requires: import_smithy_client5._json,
        ReviewStatus: import_smithy_client5.expectString,
        SchemaVersion: import_smithy_client5.expectString,
        Tags: import_smithy_client5._json,
        TargetType: import_smithy_client5.expectString,
        VersionName: import_smithy_client5.expectString
      });
    }, "de_DocumentIdentifier");
    var de_DocumentIdentifierList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentIdentifier(entry, context);
      });
      return retVal;
    }, "de_DocumentIdentifierList");
    var de_DocumentMetadataResponseInfo = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ReviewerResponse: (_) => de_DocumentReviewerResponseList(_, context)
      });
    }, "de_DocumentMetadataResponseInfo");
    var de_DocumentReviewerResponseList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentReviewerResponseSource(entry, context);
      });
      return retVal;
    }, "de_DocumentReviewerResponseList");
    var de_DocumentReviewerResponseSource = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Comment: import_smithy_client5._json,
        CreateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ReviewStatus: import_smithy_client5.expectString,
        Reviewer: import_smithy_client5.expectString,
        UpdatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_)))
      });
    }, "de_DocumentReviewerResponseSource");
    var de_DocumentVersionInfo = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DisplayName: import_smithy_client5.expectString,
        DocumentFormat: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        IsDefaultVersion: import_smithy_client5.expectBoolean,
        Name: import_smithy_client5.expectString,
        ReviewStatus: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusInformation: import_smithy_client5.expectString,
        VersionName: import_smithy_client5.expectString
      });
    }, "de_DocumentVersionInfo");
    var de_DocumentVersionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentVersionInfo(entry, context);
      });
      return retVal;
    }, "de_DocumentVersionList");
    var de_EffectivePatch = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Patch: (_) => de_Patch(_, context),
        PatchStatus: (_) => de_PatchStatus(_, context)
      });
    }, "de_EffectivePatch");
    var de_EffectivePatchList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_EffectivePatch(entry, context);
      });
      return retVal;
    }, "de_EffectivePatchList");
    var de_GetAutomationExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AutomationExecution: (_) => de_AutomationExecution(_, context)
      });
    }, "de_GetAutomationExecutionResult");
    var de_GetDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AttachmentsContent: import_smithy_client5._json,
        Content: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DisplayName: import_smithy_client5.expectString,
        DocumentFormat: import_smithy_client5.expectString,
        DocumentType: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Requires: import_smithy_client5._json,
        ReviewStatus: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        StatusInformation: import_smithy_client5.expectString,
        VersionName: import_smithy_client5.expectString
      });
    }, "de_GetDocumentResult");
    var de_GetMaintenanceWindowExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TaskIds: import_smithy_client5._json,
        WindowExecutionId: import_smithy_client5.expectString
      });
    }, "de_GetMaintenanceWindowExecutionResult");
    var de_GetMaintenanceWindowExecutionTaskInvocationResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionId: import_smithy_client5.expectString,
        InvocationId: import_smithy_client5.expectString,
        OwnerInformation: import_smithy_client5.expectString,
        Parameters: import_smithy_client5.expectString,
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TaskExecutionId: import_smithy_client5.expectString,
        TaskType: import_smithy_client5.expectString,
        WindowExecutionId: import_smithy_client5.expectString,
        WindowTargetId: import_smithy_client5.expectString
      });
    }, "de_GetMaintenanceWindowExecutionTaskInvocationResult");
    var de_GetMaintenanceWindowExecutionTaskResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Priority: import_smithy_client5.expectInt32,
        ServiceRole: import_smithy_client5.expectString,
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TaskArn: import_smithy_client5.expectString,
        TaskExecutionId: import_smithy_client5.expectString,
        TaskParameters: import_smithy_client5._json,
        TriggeredAlarms: import_smithy_client5._json,
        Type: import_smithy_client5.expectString,
        WindowExecutionId: import_smithy_client5.expectString
      });
    }, "de_GetMaintenanceWindowExecutionTaskResult");
    var de_GetMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AllowUnassociatedTargets: import_smithy_client5.expectBoolean,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Cutoff: import_smithy_client5.expectInt32,
        Description: import_smithy_client5.expectString,
        Duration: import_smithy_client5.expectInt32,
        Enabled: import_smithy_client5.expectBoolean,
        EndDate: import_smithy_client5.expectString,
        ModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        NextExecutionTime: import_smithy_client5.expectString,
        Schedule: import_smithy_client5.expectString,
        ScheduleOffset: import_smithy_client5.expectInt32,
        ScheduleTimezone: import_smithy_client5.expectString,
        StartDate: import_smithy_client5.expectString,
        WindowId: import_smithy_client5.expectString
      });
    }, "de_GetMaintenanceWindowResult");
    var de_GetMaintenanceWindowTaskResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        CutoffBehavior: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        LoggingInfo: import_smithy_client5._json,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Priority: import_smithy_client5.expectInt32,
        ServiceRoleArn: import_smithy_client5.expectString,
        Targets: import_smithy_client5._json,
        TaskArn: import_smithy_client5.expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: import_smithy_client5._json,
        TaskType: import_smithy_client5.expectString,
        WindowId: import_smithy_client5.expectString,
        WindowTaskId: import_smithy_client5.expectString
      });
    }, "de_GetMaintenanceWindowTaskResult");
    var de_GetOpsItemResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        OpsItem: (_) => de_OpsItem(_, context)
      });
    }, "de_GetOpsItemResponse");
    var de_GetParameterHistoryResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Parameters: (_) => de_ParameterHistoryList(_, context)
      });
    }, "de_GetParameterHistoryResult");
    var de_GetParameterResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Parameter: (_) => de_Parameter(_, context)
      });
    }, "de_GetParameterResult");
    var de_GetParametersByPathResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Parameters: (_) => de_ParameterList(_, context)
      });
    }, "de_GetParametersByPathResult");
    var de_GetParametersResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        InvalidParameters: import_smithy_client5._json,
        Parameters: (_) => de_ParameterList(_, context)
      });
    }, "de_GetParametersResult");
    var de_GetPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ApprovalRules: import_smithy_client5._json,
        ApprovedPatches: import_smithy_client5._json,
        ApprovedPatchesComplianceLevel: import_smithy_client5.expectString,
        ApprovedPatchesEnableNonSecurity: import_smithy_client5.expectBoolean,
        BaselineId: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Description: import_smithy_client5.expectString,
        GlobalFilters: import_smithy_client5._json,
        ModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        OperatingSystem: import_smithy_client5.expectString,
        PatchGroups: import_smithy_client5._json,
        RejectedPatches: import_smithy_client5._json,
        RejectedPatchesAction: import_smithy_client5.expectString,
        Sources: import_smithy_client5._json
      });
    }, "de_GetPatchBaselineResult");
    var de_GetServiceSettingResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ServiceSetting: (_) => de_ServiceSetting(_, context)
      });
    }, "de_GetServiceSettingResult");
    var de_InstanceAssociationStatusInfo = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationId: import_smithy_client5.expectString,
        AssociationName: import_smithy_client5.expectString,
        AssociationVersion: import_smithy_client5.expectString,
        DetailedStatus: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        ErrorCode: import_smithy_client5.expectString,
        ExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionSummary: import_smithy_client5.expectString,
        InstanceId: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        OutputUrl: import_smithy_client5._json,
        Status: import_smithy_client5.expectString
      });
    }, "de_InstanceAssociationStatusInfo");
    var de_InstanceAssociationStatusInfos = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstanceAssociationStatusInfo(entry, context);
      });
      return retVal;
    }, "de_InstanceAssociationStatusInfos");
    var de_InstanceInformation = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActivationId: import_smithy_client5.expectString,
        AgentVersion: import_smithy_client5.expectString,
        AssociationOverview: import_smithy_client5._json,
        AssociationStatus: import_smithy_client5.expectString,
        ComputerName: import_smithy_client5.expectString,
        IPAddress: import_smithy_client5.expectString,
        IamRole: import_smithy_client5.expectString,
        InstanceId: import_smithy_client5.expectString,
        IsLatestVersion: import_smithy_client5.expectBoolean,
        LastAssociationExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastPingDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastSuccessfulAssociationExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        PingStatus: import_smithy_client5.expectString,
        PlatformName: import_smithy_client5.expectString,
        PlatformType: import_smithy_client5.expectString,
        PlatformVersion: import_smithy_client5.expectString,
        RegistrationDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ResourceType: import_smithy_client5.expectString,
        SourceId: import_smithy_client5.expectString,
        SourceType: import_smithy_client5.expectString
      });
    }, "de_InstanceInformation");
    var de_InstanceInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstanceInformation(entry, context);
      });
      return retVal;
    }, "de_InstanceInformationList");
    var de_InstancePatchState = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        BaselineId: import_smithy_client5.expectString,
        CriticalNonCompliantCount: import_smithy_client5.expectInt32,
        FailedCount: import_smithy_client5.expectInt32,
        InstallOverrideList: import_smithy_client5.expectString,
        InstalledCount: import_smithy_client5.expectInt32,
        InstalledOtherCount: import_smithy_client5.expectInt32,
        InstalledPendingRebootCount: import_smithy_client5.expectInt32,
        InstalledRejectedCount: import_smithy_client5.expectInt32,
        InstanceId: import_smithy_client5.expectString,
        LastNoRebootInstallOperationTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        MissingCount: import_smithy_client5.expectInt32,
        NotApplicableCount: import_smithy_client5.expectInt32,
        Operation: import_smithy_client5.expectString,
        OperationEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        OperationStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        OtherNonCompliantCount: import_smithy_client5.expectInt32,
        OwnerInformation: import_smithy_client5.expectString,
        PatchGroup: import_smithy_client5.expectString,
        RebootOption: import_smithy_client5.expectString,
        SecurityNonCompliantCount: import_smithy_client5.expectInt32,
        SnapshotId: import_smithy_client5.expectString,
        UnreportedNotApplicableCount: import_smithy_client5.expectInt32
      });
    }, "de_InstancePatchState");
    var de_InstancePatchStateList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstancePatchState(entry, context);
      });
      return retVal;
    }, "de_InstancePatchStateList");
    var de_InstancePatchStatesList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstancePatchState(entry, context);
      });
      return retVal;
    }, "de_InstancePatchStatesList");
    var de_InstanceProperties = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstanceProperty(entry, context);
      });
      return retVal;
    }, "de_InstanceProperties");
    var de_InstanceProperty = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActivationId: import_smithy_client5.expectString,
        AgentVersion: import_smithy_client5.expectString,
        Architecture: import_smithy_client5.expectString,
        AssociationOverview: import_smithy_client5._json,
        AssociationStatus: import_smithy_client5.expectString,
        ComputerName: import_smithy_client5.expectString,
        IPAddress: import_smithy_client5.expectString,
        IamRole: import_smithy_client5.expectString,
        InstanceId: import_smithy_client5.expectString,
        InstanceRole: import_smithy_client5.expectString,
        InstanceState: import_smithy_client5.expectString,
        InstanceType: import_smithy_client5.expectString,
        KeyName: import_smithy_client5.expectString,
        LastAssociationExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastPingDateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastSuccessfulAssociationExecutionDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LaunchTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        PingStatus: import_smithy_client5.expectString,
        PlatformName: import_smithy_client5.expectString,
        PlatformType: import_smithy_client5.expectString,
        PlatformVersion: import_smithy_client5.expectString,
        RegistrationDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ResourceType: import_smithy_client5.expectString,
        SourceId: import_smithy_client5.expectString,
        SourceType: import_smithy_client5.expectString
      });
    }, "de_InstanceProperty");
    var de_InventoryDeletionsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InventoryDeletionStatusItem(entry, context);
      });
      return retVal;
    }, "de_InventoryDeletionsList");
    var de_InventoryDeletionStatusItem = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        DeletionId: import_smithy_client5.expectString,
        DeletionStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        DeletionSummary: import_smithy_client5._json,
        LastStatus: import_smithy_client5.expectString,
        LastStatusMessage: import_smithy_client5.expectString,
        LastStatusUpdateTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        TypeName: import_smithy_client5.expectString
      });
    }, "de_InventoryDeletionStatusItem");
    var de_ListAssociationsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Associations: (_) => de_AssociationList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListAssociationsResult");
    var de_ListAssociationVersionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationVersions: (_) => de_AssociationVersionList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListAssociationVersionsResult");
    var de_ListCommandInvocationsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CommandInvocations: (_) => de_CommandInvocationList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListCommandInvocationsResult");
    var de_ListCommandsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Commands: (_) => de_CommandList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListCommandsResult");
    var de_ListComplianceItemsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ComplianceItems: (_) => de_ComplianceItemList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListComplianceItemsResult");
    var de_ListDocumentMetadataHistoryResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Author: import_smithy_client5.expectString,
        DocumentVersion: import_smithy_client5.expectString,
        Metadata: (_) => de_DocumentMetadataResponseInfo(_, context),
        Name: import_smithy_client5.expectString,
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListDocumentMetadataHistoryResponse");
    var de_ListDocumentsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        DocumentIdentifiers: (_) => de_DocumentIdentifierList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListDocumentsResult");
    var de_ListDocumentVersionsResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        DocumentVersions: (_) => de_DocumentVersionList(_, context),
        NextToken: import_smithy_client5.expectString
      });
    }, "de_ListDocumentVersionsResult");
    var de_ListOpsItemEventsResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Summaries: (_) => de_OpsItemEventSummaries(_, context)
      });
    }, "de_ListOpsItemEventsResponse");
    var de_ListOpsItemRelatedItemsResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        Summaries: (_) => de_OpsItemRelatedItemSummaries(_, context)
      });
    }, "de_ListOpsItemRelatedItemsResponse");
    var de_ListOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        OpsMetadataList: (_) => de_OpsMetadataList(_, context)
      });
    }, "de_ListOpsMetadataResult");
    var de_ListResourceComplianceSummariesResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        ResourceComplianceSummaryItems: (_) => de_ResourceComplianceSummaryItemList(_, context)
      });
    }, "de_ListResourceComplianceSummariesResult");
    var de_ListResourceDataSyncResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        NextToken: import_smithy_client5.expectString,
        ResourceDataSyncItems: (_) => de_ResourceDataSyncItemList(_, context)
      });
    }, "de_ListResourceDataSyncResult");
    var de_MaintenanceWindowExecution = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        WindowExecutionId: import_smithy_client5.expectString,
        WindowId: import_smithy_client5.expectString
      });
    }, "de_MaintenanceWindowExecution");
    var de_MaintenanceWindowExecutionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecution(entry, context);
      });
      return retVal;
    }, "de_MaintenanceWindowExecutionList");
    var de_MaintenanceWindowExecutionTaskIdentity = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TaskArn: import_smithy_client5.expectString,
        TaskExecutionId: import_smithy_client5.expectString,
        TaskType: import_smithy_client5.expectString,
        TriggeredAlarms: import_smithy_client5._json,
        WindowExecutionId: import_smithy_client5.expectString
      });
    }, "de_MaintenanceWindowExecutionTaskIdentity");
    var de_MaintenanceWindowExecutionTaskIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecutionTaskIdentity(entry, context);
      });
      return retVal;
    }, "de_MaintenanceWindowExecutionTaskIdentityList");
    var de_MaintenanceWindowExecutionTaskInvocationIdentity = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        EndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionId: import_smithy_client5.expectString,
        InvocationId: import_smithy_client5.expectString,
        OwnerInformation: import_smithy_client5.expectString,
        Parameters: import_smithy_client5.expectString,
        StartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        StatusDetails: import_smithy_client5.expectString,
        TaskExecutionId: import_smithy_client5.expectString,
        TaskType: import_smithy_client5.expectString,
        WindowExecutionId: import_smithy_client5.expectString,
        WindowTargetId: import_smithy_client5.expectString
      });
    }, "de_MaintenanceWindowExecutionTaskInvocationIdentity");
    var de_MaintenanceWindowExecutionTaskInvocationIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
      });
      return retVal;
    }, "de_MaintenanceWindowExecutionTaskInvocationIdentityList");
    var de_MaintenanceWindowLambdaParameters = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ClientContext: import_smithy_client5.expectString,
        Payload: context.base64Decoder,
        Qualifier: import_smithy_client5.expectString
      });
    }, "de_MaintenanceWindowLambdaParameters");
    var de_MaintenanceWindowTaskInvocationParameters = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Automation: import_smithy_client5._json,
        Lambda: (_) => de_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: import_smithy_client5._json,
        StepFunctions: import_smithy_client5._json
      });
    }, "de_MaintenanceWindowTaskInvocationParameters");
    var de_OpsItem = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActualEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ActualStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Category: import_smithy_client5.expectString,
        CreatedBy: import_smithy_client5.expectString,
        CreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Description: import_smithy_client5.expectString,
        LastModifiedBy: import_smithy_client5.expectString,
        LastModifiedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Notifications: import_smithy_client5._json,
        OperationalData: import_smithy_client5._json,
        OpsItemArn: import_smithy_client5.expectString,
        OpsItemId: import_smithy_client5.expectString,
        OpsItemType: import_smithy_client5.expectString,
        PlannedEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        PlannedStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Priority: import_smithy_client5.expectInt32,
        RelatedOpsItems: import_smithy_client5._json,
        Severity: import_smithy_client5.expectString,
        Source: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        Title: import_smithy_client5.expectString,
        Version: import_smithy_client5.expectString
      });
    }, "de_OpsItem");
    var de_OpsItemEventSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemEventSummary(entry, context);
      });
      return retVal;
    }, "de_OpsItemEventSummaries");
    var de_OpsItemEventSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CreatedBy: import_smithy_client5._json,
        CreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Detail: import_smithy_client5.expectString,
        DetailType: import_smithy_client5.expectString,
        EventId: import_smithy_client5.expectString,
        OpsItemId: import_smithy_client5.expectString,
        Source: import_smithy_client5.expectString
      });
    }, "de_OpsItemEventSummary");
    var de_OpsItemRelatedItemSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemRelatedItemSummary(entry, context);
      });
      return retVal;
    }, "de_OpsItemRelatedItemSummaries");
    var de_OpsItemRelatedItemSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationId: import_smithy_client5.expectString,
        AssociationType: import_smithy_client5.expectString,
        CreatedBy: import_smithy_client5._json,
        CreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedBy: import_smithy_client5._json,
        LastModifiedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        OpsItemId: import_smithy_client5.expectString,
        ResourceType: import_smithy_client5.expectString,
        ResourceUri: import_smithy_client5.expectString
      });
    }, "de_OpsItemRelatedItemSummary");
    var de_OpsItemSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemSummary(entry, context);
      });
      return retVal;
    }, "de_OpsItemSummaries");
    var de_OpsItemSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ActualEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ActualStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Category: import_smithy_client5.expectString,
        CreatedBy: import_smithy_client5.expectString,
        CreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedBy: import_smithy_client5.expectString,
        LastModifiedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        OperationalData: import_smithy_client5._json,
        OpsItemId: import_smithy_client5.expectString,
        OpsItemType: import_smithy_client5.expectString,
        PlannedEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        PlannedStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Priority: import_smithy_client5.expectInt32,
        Severity: import_smithy_client5.expectString,
        Source: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString,
        Title: import_smithy_client5.expectString
      });
    }, "de_OpsItemSummary");
    var de_OpsMetadata = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CreationDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedUser: import_smithy_client5.expectString,
        OpsMetadataArn: import_smithy_client5.expectString,
        ResourceId: import_smithy_client5.expectString
      });
    }, "de_OpsMetadata");
    var de_OpsMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsMetadata(entry, context);
      });
      return retVal;
    }, "de_OpsMetadataList");
    var de_Parameter = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ARN: import_smithy_client5.expectString,
        DataType: import_smithy_client5.expectString,
        LastModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        Selector: import_smithy_client5.expectString,
        SourceResult: import_smithy_client5.expectString,
        Type: import_smithy_client5.expectString,
        Value: import_smithy_client5.expectString,
        Version: import_smithy_client5.expectLong
      });
    }, "de_Parameter");
    var de_ParameterHistory = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AllowedPattern: import_smithy_client5.expectString,
        DataType: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        KeyId: import_smithy_client5.expectString,
        Labels: import_smithy_client5._json,
        LastModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedUser: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Policies: import_smithy_client5._json,
        Tier: import_smithy_client5.expectString,
        Type: import_smithy_client5.expectString,
        Value: import_smithy_client5.expectString,
        Version: import_smithy_client5.expectLong
      });
    }, "de_ParameterHistory");
    var de_ParameterHistoryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ParameterHistory(entry, context);
      });
      return retVal;
    }, "de_ParameterHistoryList");
    var de_ParameterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Parameter(entry, context);
      });
      return retVal;
    }, "de_ParameterList");
    var de_ParameterMetadata = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ARN: import_smithy_client5.expectString,
        AllowedPattern: import_smithy_client5.expectString,
        DataType: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        KeyId: import_smithy_client5.expectString,
        LastModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedUser: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Policies: import_smithy_client5._json,
        Tier: import_smithy_client5.expectString,
        Type: import_smithy_client5.expectString,
        Version: import_smithy_client5.expectLong
      });
    }, "de_ParameterMetadata");
    var de_ParameterMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ParameterMetadata(entry, context);
      });
      return retVal;
    }, "de_ParameterMetadataList");
    var de_Patch = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AdvisoryIds: import_smithy_client5._json,
        Arch: import_smithy_client5.expectString,
        BugzillaIds: import_smithy_client5._json,
        CVEIds: import_smithy_client5._json,
        Classification: import_smithy_client5.expectString,
        ContentUrl: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        Epoch: import_smithy_client5.expectInt32,
        Id: import_smithy_client5.expectString,
        KbNumber: import_smithy_client5.expectString,
        Language: import_smithy_client5.expectString,
        MsrcNumber: import_smithy_client5.expectString,
        MsrcSeverity: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Product: import_smithy_client5.expectString,
        ProductFamily: import_smithy_client5.expectString,
        Release: import_smithy_client5.expectString,
        ReleaseDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Repository: import_smithy_client5.expectString,
        Severity: import_smithy_client5.expectString,
        Title: import_smithy_client5.expectString,
        Vendor: import_smithy_client5.expectString,
        Version: import_smithy_client5.expectString
      });
    }, "de_Patch");
    var de_PatchComplianceData = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        CVEIds: import_smithy_client5.expectString,
        Classification: import_smithy_client5.expectString,
        InstalledTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        KBId: import_smithy_client5.expectString,
        Severity: import_smithy_client5.expectString,
        State: import_smithy_client5.expectString,
        Title: import_smithy_client5.expectString
      });
    }, "de_PatchComplianceData");
    var de_PatchComplianceDataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PatchComplianceData(entry, context);
      });
      return retVal;
    }, "de_PatchComplianceDataList");
    var de_PatchList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Patch(entry, context);
      });
      return retVal;
    }, "de_PatchList");
    var de_PatchStatus = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ApprovalDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ComplianceLevel: import_smithy_client5.expectString,
        DeploymentStatus: import_smithy_client5.expectString
      });
    }, "de_PatchStatus");
    var de_ResetServiceSettingResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ServiceSetting: (_) => de_ServiceSetting(_, context)
      });
    }, "de_ResetServiceSettingResult");
    var de_ResourceComplianceSummaryItem = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ComplianceType: import_smithy_client5.expectString,
        CompliantSummary: import_smithy_client5._json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),
        NonCompliantSummary: import_smithy_client5._json,
        OverallSeverity: import_smithy_client5.expectString,
        ResourceId: import_smithy_client5.expectString,
        ResourceType: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString
      });
    }, "de_ResourceComplianceSummaryItem");
    var de_ResourceComplianceSummaryItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceComplianceSummaryItem(entry, context);
      });
      return retVal;
    }, "de_ResourceComplianceSummaryItemList");
    var de_ResourceDataSyncItem = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        LastStatus: import_smithy_client5.expectString,
        LastSuccessfulSyncTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastSyncStatusMessage: import_smithy_client5.expectString,
        LastSyncTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        S3Destination: import_smithy_client5._json,
        SyncCreatedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        SyncLastModifiedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        SyncName: import_smithy_client5.expectString,
        SyncSource: import_smithy_client5._json,
        SyncType: import_smithy_client5.expectString
      });
    }, "de_ResourceDataSyncItem");
    var de_ResourceDataSyncItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceDataSyncItem(entry, context);
      });
      return retVal;
    }, "de_ResourceDataSyncItemList");
    var de_ReviewInformation = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ReviewedTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Reviewer: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString
      });
    }, "de_ReviewInformation");
    var de_ReviewInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReviewInformation(entry, context);
      });
      return retVal;
    }, "de_ReviewInformationList");
    var de_SendCommandResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Command: (_) => de_Command(_, context)
      });
    }, "de_SendCommandResult");
    var de_ServiceSetting = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ARN: import_smithy_client5.expectString,
        LastModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        LastModifiedUser: import_smithy_client5.expectString,
        SettingId: import_smithy_client5.expectString,
        SettingValue: import_smithy_client5.expectString,
        Status: import_smithy_client5.expectString
      });
    }, "de_ServiceSetting");
    var de_Session = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Details: import_smithy_client5.expectString,
        DocumentName: import_smithy_client5.expectString,
        EndDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        MaxSessionDuration: import_smithy_client5.expectString,
        OutputUrl: import_smithy_client5._json,
        Owner: import_smithy_client5.expectString,
        Reason: import_smithy_client5.expectString,
        SessionId: import_smithy_client5.expectString,
        StartDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Status: import_smithy_client5.expectString,
        Target: import_smithy_client5.expectString
      });
    }, "de_Session");
    var de_SessionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Session(entry, context);
      });
      return retVal;
    }, "de_SessionList");
    var de_StepExecution = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        Action: import_smithy_client5.expectString,
        ExecutionEndTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        FailureDetails: import_smithy_client5._json,
        FailureMessage: import_smithy_client5.expectString,
        Inputs: import_smithy_client5._json,
        IsCritical: import_smithy_client5.expectBoolean,
        IsEnd: import_smithy_client5.expectBoolean,
        MaxAttempts: import_smithy_client5.expectInt32,
        NextStep: import_smithy_client5.expectString,
        OnFailure: import_smithy_client5.expectString,
        Outputs: import_smithy_client5._json,
        OverriddenParameters: import_smithy_client5._json,
        ParentStepDetails: import_smithy_client5._json,
        Response: import_smithy_client5.expectString,
        ResponseCode: import_smithy_client5.expectString,
        StepExecutionId: import_smithy_client5.expectString,
        StepName: import_smithy_client5.expectString,
        StepStatus: import_smithy_client5.expectString,
        TargetLocation: import_smithy_client5._json,
        Targets: import_smithy_client5._json,
        TimeoutSeconds: import_smithy_client5.expectLong,
        TriggeredAlarms: import_smithy_client5._json,
        ValidNextSteps: import_smithy_client5._json
      });
    }, "de_StepExecution");
    var de_StepExecutionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_StepExecution(entry, context);
      });
      return retVal;
    }, "de_StepExecutionList");
    var de_UpdateAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    }, "de_UpdateAssociationResult");
    var de_UpdateAssociationStatusResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    }, "de_UpdateAssociationStatusResult");
    var de_UpdateDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        DocumentDescription: (_) => de_DocumentDescription(_, context)
      });
    }, "de_UpdateDocumentResult");
    var de_UpdateMaintenanceWindowTaskResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        AlarmConfiguration: import_smithy_client5._json,
        CutoffBehavior: import_smithy_client5.expectString,
        Description: import_smithy_client5.expectString,
        LoggingInfo: import_smithy_client5._json,
        MaxConcurrency: import_smithy_client5.expectString,
        MaxErrors: import_smithy_client5.expectString,
        Name: import_smithy_client5.expectString,
        Priority: import_smithy_client5.expectInt32,
        ServiceRoleArn: import_smithy_client5.expectString,
        Targets: import_smithy_client5._json,
        TaskArn: import_smithy_client5.expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: import_smithy_client5._json,
        WindowId: import_smithy_client5.expectString,
        WindowTaskId: import_smithy_client5.expectString
      });
    }, "de_UpdateMaintenanceWindowTaskResult");
    var de_UpdatePatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        ApprovalRules: import_smithy_client5._json,
        ApprovedPatches: import_smithy_client5._json,
        ApprovedPatchesComplianceLevel: import_smithy_client5.expectString,
        ApprovedPatchesEnableNonSecurity: import_smithy_client5.expectBoolean,
        BaselineId: import_smithy_client5.expectString,
        CreatedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Description: import_smithy_client5.expectString,
        GlobalFilters: import_smithy_client5._json,
        ModifiedDate: (_) => (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseEpochTimestamp)((0, import_smithy_client5.expectNumber)(_))),
        Name: import_smithy_client5.expectString,
        OperatingSystem: import_smithy_client5.expectString,
        RejectedPatches: import_smithy_client5._json,
        RejectedPatchesAction: import_smithy_client5.expectString,
        Sources: import_smithy_client5._json
      });
    }, "de_UpdatePatchBaselineResult");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(SSMServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http5.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    function sharedHeaders(operation) {
      return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonSSM.${operation}`
      };
    }
    __name(sharedHeaders, "sharedHeaders");
    var _AddTagsToResourceCommand = class _AddTagsToResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "AddTagsToResource", {}).n("SSMClient", "AddTagsToResourceCommand").f(void 0, void 0).ser(se_AddTagsToResourceCommand).de(de_AddTagsToResourceCommand).build() {
    };
    __name(_AddTagsToResourceCommand, "AddTagsToResourceCommand");
    var AddTagsToResourceCommand = _AddTagsToResourceCommand;
    var _AssociateOpsItemRelatedItemCommand = class _AssociateOpsItemRelatedItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "AssociateOpsItemRelatedItem", {}).n("SSMClient", "AssociateOpsItemRelatedItemCommand").f(void 0, void 0).ser(se_AssociateOpsItemRelatedItemCommand).de(de_AssociateOpsItemRelatedItemCommand).build() {
    };
    __name(_AssociateOpsItemRelatedItemCommand, "AssociateOpsItemRelatedItemCommand");
    var AssociateOpsItemRelatedItemCommand = _AssociateOpsItemRelatedItemCommand;
    var _CancelCommandCommand = class _CancelCommandCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CancelCommand", {}).n("SSMClient", "CancelCommandCommand").f(void 0, void 0).ser(se_CancelCommandCommand).de(de_CancelCommandCommand).build() {
    };
    __name(_CancelCommandCommand, "CancelCommandCommand");
    var CancelCommandCommand = _CancelCommandCommand;
    var _CancelMaintenanceWindowExecutionCommand = class _CancelMaintenanceWindowExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CancelMaintenanceWindowExecution", {}).n("SSMClient", "CancelMaintenanceWindowExecutionCommand").f(void 0, void 0).ser(se_CancelMaintenanceWindowExecutionCommand).de(de_CancelMaintenanceWindowExecutionCommand).build() {
    };
    __name(_CancelMaintenanceWindowExecutionCommand, "CancelMaintenanceWindowExecutionCommand");
    var CancelMaintenanceWindowExecutionCommand = _CancelMaintenanceWindowExecutionCommand;
    var _CreateActivationCommand = class _CreateActivationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateActivation", {}).n("SSMClient", "CreateActivationCommand").f(void 0, void 0).ser(se_CreateActivationCommand).de(de_CreateActivationCommand).build() {
    };
    __name(_CreateActivationCommand, "CreateActivationCommand");
    var CreateActivationCommand = _CreateActivationCommand;
    var _CreateAssociationBatchCommand = class _CreateAssociationBatchCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateAssociationBatch", {}).n("SSMClient", "CreateAssociationBatchCommand").f(CreateAssociationBatchRequestFilterSensitiveLog, CreateAssociationBatchResultFilterSensitiveLog).ser(se_CreateAssociationBatchCommand).de(de_CreateAssociationBatchCommand).build() {
    };
    __name(_CreateAssociationBatchCommand, "CreateAssociationBatchCommand");
    var CreateAssociationBatchCommand = _CreateAssociationBatchCommand;
    var _CreateAssociationCommand = class _CreateAssociationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateAssociation", {}).n("SSMClient", "CreateAssociationCommand").f(CreateAssociationRequestFilterSensitiveLog, CreateAssociationResultFilterSensitiveLog).ser(se_CreateAssociationCommand).de(de_CreateAssociationCommand).build() {
    };
    __name(_CreateAssociationCommand, "CreateAssociationCommand");
    var CreateAssociationCommand = _CreateAssociationCommand;
    var _CreateDocumentCommand = class _CreateDocumentCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateDocument", {}).n("SSMClient", "CreateDocumentCommand").f(void 0, void 0).ser(se_CreateDocumentCommand).de(de_CreateDocumentCommand).build() {
    };
    __name(_CreateDocumentCommand, "CreateDocumentCommand");
    var CreateDocumentCommand = _CreateDocumentCommand;
    var _CreateMaintenanceWindowCommand = class _CreateMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateMaintenanceWindow", {}).n("SSMClient", "CreateMaintenanceWindowCommand").f(CreateMaintenanceWindowRequestFilterSensitiveLog, void 0).ser(se_CreateMaintenanceWindowCommand).de(de_CreateMaintenanceWindowCommand).build() {
    };
    __name(_CreateMaintenanceWindowCommand, "CreateMaintenanceWindowCommand");
    var CreateMaintenanceWindowCommand = _CreateMaintenanceWindowCommand;
    var _CreateOpsItemCommand = class _CreateOpsItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateOpsItem", {}).n("SSMClient", "CreateOpsItemCommand").f(void 0, void 0).ser(se_CreateOpsItemCommand).de(de_CreateOpsItemCommand).build() {
    };
    __name(_CreateOpsItemCommand, "CreateOpsItemCommand");
    var CreateOpsItemCommand = _CreateOpsItemCommand;
    var _CreateOpsMetadataCommand = class _CreateOpsMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateOpsMetadata", {}).n("SSMClient", "CreateOpsMetadataCommand").f(void 0, void 0).ser(se_CreateOpsMetadataCommand).de(de_CreateOpsMetadataCommand).build() {
    };
    __name(_CreateOpsMetadataCommand, "CreateOpsMetadataCommand");
    var CreateOpsMetadataCommand = _CreateOpsMetadataCommand;
    var _CreatePatchBaselineCommand = class _CreatePatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreatePatchBaseline", {}).n("SSMClient", "CreatePatchBaselineCommand").f(CreatePatchBaselineRequestFilterSensitiveLog, void 0).ser(se_CreatePatchBaselineCommand).de(de_CreatePatchBaselineCommand).build() {
    };
    __name(_CreatePatchBaselineCommand, "CreatePatchBaselineCommand");
    var CreatePatchBaselineCommand = _CreatePatchBaselineCommand;
    var _CreateResourceDataSyncCommand = class _CreateResourceDataSyncCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "CreateResourceDataSync", {}).n("SSMClient", "CreateResourceDataSyncCommand").f(void 0, void 0).ser(se_CreateResourceDataSyncCommand).de(de_CreateResourceDataSyncCommand).build() {
    };
    __name(_CreateResourceDataSyncCommand, "CreateResourceDataSyncCommand");
    var CreateResourceDataSyncCommand = _CreateResourceDataSyncCommand;
    var _DeleteActivationCommand = class _DeleteActivationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteActivation", {}).n("SSMClient", "DeleteActivationCommand").f(void 0, void 0).ser(se_DeleteActivationCommand).de(de_DeleteActivationCommand).build() {
    };
    __name(_DeleteActivationCommand, "DeleteActivationCommand");
    var DeleteActivationCommand = _DeleteActivationCommand;
    var _DeleteAssociationCommand = class _DeleteAssociationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteAssociation", {}).n("SSMClient", "DeleteAssociationCommand").f(void 0, void 0).ser(se_DeleteAssociationCommand).de(de_DeleteAssociationCommand).build() {
    };
    __name(_DeleteAssociationCommand, "DeleteAssociationCommand");
    var DeleteAssociationCommand = _DeleteAssociationCommand;
    var _DeleteDocumentCommand = class _DeleteDocumentCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteDocument", {}).n("SSMClient", "DeleteDocumentCommand").f(void 0, void 0).ser(se_DeleteDocumentCommand).de(de_DeleteDocumentCommand).build() {
    };
    __name(_DeleteDocumentCommand, "DeleteDocumentCommand");
    var DeleteDocumentCommand = _DeleteDocumentCommand;
    var _DeleteInventoryCommand = class _DeleteInventoryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteInventory", {}).n("SSMClient", "DeleteInventoryCommand").f(void 0, void 0).ser(se_DeleteInventoryCommand).de(de_DeleteInventoryCommand).build() {
    };
    __name(_DeleteInventoryCommand, "DeleteInventoryCommand");
    var DeleteInventoryCommand = _DeleteInventoryCommand;
    var _DeleteMaintenanceWindowCommand = class _DeleteMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteMaintenanceWindow", {}).n("SSMClient", "DeleteMaintenanceWindowCommand").f(void 0, void 0).ser(se_DeleteMaintenanceWindowCommand).de(de_DeleteMaintenanceWindowCommand).build() {
    };
    __name(_DeleteMaintenanceWindowCommand, "DeleteMaintenanceWindowCommand");
    var DeleteMaintenanceWindowCommand = _DeleteMaintenanceWindowCommand;
    var _DeleteOpsItemCommand = class _DeleteOpsItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteOpsItem", {}).n("SSMClient", "DeleteOpsItemCommand").f(void 0, void 0).ser(se_DeleteOpsItemCommand).de(de_DeleteOpsItemCommand).build() {
    };
    __name(_DeleteOpsItemCommand, "DeleteOpsItemCommand");
    var DeleteOpsItemCommand = _DeleteOpsItemCommand;
    var _DeleteOpsMetadataCommand = class _DeleteOpsMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteOpsMetadata", {}).n("SSMClient", "DeleteOpsMetadataCommand").f(void 0, void 0).ser(se_DeleteOpsMetadataCommand).de(de_DeleteOpsMetadataCommand).build() {
    };
    __name(_DeleteOpsMetadataCommand, "DeleteOpsMetadataCommand");
    var DeleteOpsMetadataCommand = _DeleteOpsMetadataCommand;
    var _DeleteParameterCommand = class _DeleteParameterCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteParameter", {}).n("SSMClient", "DeleteParameterCommand").f(void 0, void 0).ser(se_DeleteParameterCommand).de(de_DeleteParameterCommand).build() {
    };
    __name(_DeleteParameterCommand, "DeleteParameterCommand");
    var DeleteParameterCommand = _DeleteParameterCommand;
    var _DeleteParametersCommand = class _DeleteParametersCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteParameters", {}).n("SSMClient", "DeleteParametersCommand").f(void 0, void 0).ser(se_DeleteParametersCommand).de(de_DeleteParametersCommand).build() {
    };
    __name(_DeleteParametersCommand, "DeleteParametersCommand");
    var DeleteParametersCommand = _DeleteParametersCommand;
    var _DeletePatchBaselineCommand = class _DeletePatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeletePatchBaseline", {}).n("SSMClient", "DeletePatchBaselineCommand").f(void 0, void 0).ser(se_DeletePatchBaselineCommand).de(de_DeletePatchBaselineCommand).build() {
    };
    __name(_DeletePatchBaselineCommand, "DeletePatchBaselineCommand");
    var DeletePatchBaselineCommand = _DeletePatchBaselineCommand;
    var _DeleteResourceDataSyncCommand = class _DeleteResourceDataSyncCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteResourceDataSync", {}).n("SSMClient", "DeleteResourceDataSyncCommand").f(void 0, void 0).ser(se_DeleteResourceDataSyncCommand).de(de_DeleteResourceDataSyncCommand).build() {
    };
    __name(_DeleteResourceDataSyncCommand, "DeleteResourceDataSyncCommand");
    var DeleteResourceDataSyncCommand = _DeleteResourceDataSyncCommand;
    var _DeleteResourcePolicyCommand = class _DeleteResourcePolicyCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeleteResourcePolicy", {}).n("SSMClient", "DeleteResourcePolicyCommand").f(void 0, void 0).ser(se_DeleteResourcePolicyCommand).de(de_DeleteResourcePolicyCommand).build() {
    };
    __name(_DeleteResourcePolicyCommand, "DeleteResourcePolicyCommand");
    var DeleteResourcePolicyCommand = _DeleteResourcePolicyCommand;
    var _DeregisterManagedInstanceCommand = class _DeregisterManagedInstanceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeregisterManagedInstance", {}).n("SSMClient", "DeregisterManagedInstanceCommand").f(void 0, void 0).ser(se_DeregisterManagedInstanceCommand).de(de_DeregisterManagedInstanceCommand).build() {
    };
    __name(_DeregisterManagedInstanceCommand, "DeregisterManagedInstanceCommand");
    var DeregisterManagedInstanceCommand = _DeregisterManagedInstanceCommand;
    var _DeregisterPatchBaselineForPatchGroupCommand = class _DeregisterPatchBaselineForPatchGroupCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeregisterPatchBaselineForPatchGroup", {}).n("SSMClient", "DeregisterPatchBaselineForPatchGroupCommand").f(void 0, void 0).ser(se_DeregisterPatchBaselineForPatchGroupCommand).de(de_DeregisterPatchBaselineForPatchGroupCommand).build() {
    };
    __name(_DeregisterPatchBaselineForPatchGroupCommand, "DeregisterPatchBaselineForPatchGroupCommand");
    var DeregisterPatchBaselineForPatchGroupCommand = _DeregisterPatchBaselineForPatchGroupCommand;
    var _DeregisterTargetFromMaintenanceWindowCommand = class _DeregisterTargetFromMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeregisterTargetFromMaintenanceWindow", {}).n("SSMClient", "DeregisterTargetFromMaintenanceWindowCommand").f(void 0, void 0).ser(se_DeregisterTargetFromMaintenanceWindowCommand).de(de_DeregisterTargetFromMaintenanceWindowCommand).build() {
    };
    __name(_DeregisterTargetFromMaintenanceWindowCommand, "DeregisterTargetFromMaintenanceWindowCommand");
    var DeregisterTargetFromMaintenanceWindowCommand = _DeregisterTargetFromMaintenanceWindowCommand;
    var _DeregisterTaskFromMaintenanceWindowCommand = class _DeregisterTaskFromMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DeregisterTaskFromMaintenanceWindow", {}).n("SSMClient", "DeregisterTaskFromMaintenanceWindowCommand").f(void 0, void 0).ser(se_DeregisterTaskFromMaintenanceWindowCommand).de(de_DeregisterTaskFromMaintenanceWindowCommand).build() {
    };
    __name(_DeregisterTaskFromMaintenanceWindowCommand, "DeregisterTaskFromMaintenanceWindowCommand");
    var DeregisterTaskFromMaintenanceWindowCommand = _DeregisterTaskFromMaintenanceWindowCommand;
    var _DescribeActivationsCommand = class _DescribeActivationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeActivations", {}).n("SSMClient", "DescribeActivationsCommand").f(void 0, void 0).ser(se_DescribeActivationsCommand).de(de_DescribeActivationsCommand).build() {
    };
    __name(_DescribeActivationsCommand, "DescribeActivationsCommand");
    var DescribeActivationsCommand = _DescribeActivationsCommand;
    var _DescribeAssociationCommand = class _DescribeAssociationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAssociation", {}).n("SSMClient", "DescribeAssociationCommand").f(void 0, DescribeAssociationResultFilterSensitiveLog).ser(se_DescribeAssociationCommand).de(de_DescribeAssociationCommand).build() {
    };
    __name(_DescribeAssociationCommand, "DescribeAssociationCommand");
    var DescribeAssociationCommand = _DescribeAssociationCommand;
    var _DescribeAssociationExecutionsCommand = class _DescribeAssociationExecutionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAssociationExecutions", {}).n("SSMClient", "DescribeAssociationExecutionsCommand").f(void 0, void 0).ser(se_DescribeAssociationExecutionsCommand).de(de_DescribeAssociationExecutionsCommand).build() {
    };
    __name(_DescribeAssociationExecutionsCommand, "DescribeAssociationExecutionsCommand");
    var DescribeAssociationExecutionsCommand = _DescribeAssociationExecutionsCommand;
    var _DescribeAssociationExecutionTargetsCommand = class _DescribeAssociationExecutionTargetsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAssociationExecutionTargets", {}).n("SSMClient", "DescribeAssociationExecutionTargetsCommand").f(void 0, void 0).ser(se_DescribeAssociationExecutionTargetsCommand).de(de_DescribeAssociationExecutionTargetsCommand).build() {
    };
    __name(_DescribeAssociationExecutionTargetsCommand, "DescribeAssociationExecutionTargetsCommand");
    var DescribeAssociationExecutionTargetsCommand = _DescribeAssociationExecutionTargetsCommand;
    var _DescribeAutomationExecutionsCommand = class _DescribeAutomationExecutionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAutomationExecutions", {}).n("SSMClient", "DescribeAutomationExecutionsCommand").f(void 0, void 0).ser(se_DescribeAutomationExecutionsCommand).de(de_DescribeAutomationExecutionsCommand).build() {
    };
    __name(_DescribeAutomationExecutionsCommand, "DescribeAutomationExecutionsCommand");
    var DescribeAutomationExecutionsCommand = _DescribeAutomationExecutionsCommand;
    var _DescribeAutomationStepExecutionsCommand = class _DescribeAutomationStepExecutionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAutomationStepExecutions", {}).n("SSMClient", "DescribeAutomationStepExecutionsCommand").f(void 0, void 0).ser(se_DescribeAutomationStepExecutionsCommand).de(de_DescribeAutomationStepExecutionsCommand).build() {
    };
    __name(_DescribeAutomationStepExecutionsCommand, "DescribeAutomationStepExecutionsCommand");
    var DescribeAutomationStepExecutionsCommand = _DescribeAutomationStepExecutionsCommand;
    var _DescribeAvailablePatchesCommand = class _DescribeAvailablePatchesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeAvailablePatches", {}).n("SSMClient", "DescribeAvailablePatchesCommand").f(void 0, void 0).ser(se_DescribeAvailablePatchesCommand).de(de_DescribeAvailablePatchesCommand).build() {
    };
    __name(_DescribeAvailablePatchesCommand, "DescribeAvailablePatchesCommand");
    var DescribeAvailablePatchesCommand = _DescribeAvailablePatchesCommand;
    var _DescribeDocumentCommand = class _DescribeDocumentCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeDocument", {}).n("SSMClient", "DescribeDocumentCommand").f(void 0, void 0).ser(se_DescribeDocumentCommand).de(de_DescribeDocumentCommand).build() {
    };
    __name(_DescribeDocumentCommand, "DescribeDocumentCommand");
    var DescribeDocumentCommand = _DescribeDocumentCommand;
    var _DescribeDocumentPermissionCommand = class _DescribeDocumentPermissionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeDocumentPermission", {}).n("SSMClient", "DescribeDocumentPermissionCommand").f(void 0, void 0).ser(se_DescribeDocumentPermissionCommand).de(de_DescribeDocumentPermissionCommand).build() {
    };
    __name(_DescribeDocumentPermissionCommand, "DescribeDocumentPermissionCommand");
    var DescribeDocumentPermissionCommand = _DescribeDocumentPermissionCommand;
    var _DescribeEffectiveInstanceAssociationsCommand = class _DescribeEffectiveInstanceAssociationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeEffectiveInstanceAssociations", {}).n("SSMClient", "DescribeEffectiveInstanceAssociationsCommand").f(void 0, void 0).ser(se_DescribeEffectiveInstanceAssociationsCommand).de(de_DescribeEffectiveInstanceAssociationsCommand).build() {
    };
    __name(_DescribeEffectiveInstanceAssociationsCommand, "DescribeEffectiveInstanceAssociationsCommand");
    var DescribeEffectiveInstanceAssociationsCommand = _DescribeEffectiveInstanceAssociationsCommand;
    var _DescribeEffectivePatchesForPatchBaselineCommand = class _DescribeEffectivePatchesForPatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeEffectivePatchesForPatchBaseline", {}).n("SSMClient", "DescribeEffectivePatchesForPatchBaselineCommand").f(void 0, void 0).ser(se_DescribeEffectivePatchesForPatchBaselineCommand).de(de_DescribeEffectivePatchesForPatchBaselineCommand).build() {
    };
    __name(_DescribeEffectivePatchesForPatchBaselineCommand, "DescribeEffectivePatchesForPatchBaselineCommand");
    var DescribeEffectivePatchesForPatchBaselineCommand = _DescribeEffectivePatchesForPatchBaselineCommand;
    var _DescribeInstanceAssociationsStatusCommand = class _DescribeInstanceAssociationsStatusCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstanceAssociationsStatus", {}).n("SSMClient", "DescribeInstanceAssociationsStatusCommand").f(void 0, void 0).ser(se_DescribeInstanceAssociationsStatusCommand).de(de_DescribeInstanceAssociationsStatusCommand).build() {
    };
    __name(_DescribeInstanceAssociationsStatusCommand, "DescribeInstanceAssociationsStatusCommand");
    var DescribeInstanceAssociationsStatusCommand = _DescribeInstanceAssociationsStatusCommand;
    var _DescribeInstanceInformationCommand = class _DescribeInstanceInformationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstanceInformation", {}).n("SSMClient", "DescribeInstanceInformationCommand").f(void 0, DescribeInstanceInformationResultFilterSensitiveLog).ser(se_DescribeInstanceInformationCommand).de(de_DescribeInstanceInformationCommand).build() {
    };
    __name(_DescribeInstanceInformationCommand, "DescribeInstanceInformationCommand");
    var DescribeInstanceInformationCommand = _DescribeInstanceInformationCommand;
    var _DescribeInstancePatchesCommand = class _DescribeInstancePatchesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstancePatches", {}).n("SSMClient", "DescribeInstancePatchesCommand").f(void 0, void 0).ser(se_DescribeInstancePatchesCommand).de(de_DescribeInstancePatchesCommand).build() {
    };
    __name(_DescribeInstancePatchesCommand, "DescribeInstancePatchesCommand");
    var DescribeInstancePatchesCommand = _DescribeInstancePatchesCommand;
    var _DescribeInstancePatchStatesCommand = class _DescribeInstancePatchStatesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstancePatchStates", {}).n("SSMClient", "DescribeInstancePatchStatesCommand").f(void 0, DescribeInstancePatchStatesResultFilterSensitiveLog).ser(se_DescribeInstancePatchStatesCommand).de(de_DescribeInstancePatchStatesCommand).build() {
    };
    __name(_DescribeInstancePatchStatesCommand, "DescribeInstancePatchStatesCommand");
    var DescribeInstancePatchStatesCommand = _DescribeInstancePatchStatesCommand;
    var _DescribeInstancePatchStatesForPatchGroupCommand = class _DescribeInstancePatchStatesForPatchGroupCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstancePatchStatesForPatchGroup", {}).n("SSMClient", "DescribeInstancePatchStatesForPatchGroupCommand").f(void 0, DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog).ser(se_DescribeInstancePatchStatesForPatchGroupCommand).de(de_DescribeInstancePatchStatesForPatchGroupCommand).build() {
    };
    __name(_DescribeInstancePatchStatesForPatchGroupCommand, "DescribeInstancePatchStatesForPatchGroupCommand");
    var DescribeInstancePatchStatesForPatchGroupCommand = _DescribeInstancePatchStatesForPatchGroupCommand;
    var _DescribeInstancePropertiesCommand = class _DescribeInstancePropertiesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInstanceProperties", {}).n("SSMClient", "DescribeInstancePropertiesCommand").f(void 0, DescribeInstancePropertiesResultFilterSensitiveLog).ser(se_DescribeInstancePropertiesCommand).de(de_DescribeInstancePropertiesCommand).build() {
    };
    __name(_DescribeInstancePropertiesCommand, "DescribeInstancePropertiesCommand");
    var DescribeInstancePropertiesCommand = _DescribeInstancePropertiesCommand;
    var _DescribeInventoryDeletionsCommand = class _DescribeInventoryDeletionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeInventoryDeletions", {}).n("SSMClient", "DescribeInventoryDeletionsCommand").f(void 0, void 0).ser(se_DescribeInventoryDeletionsCommand).de(de_DescribeInventoryDeletionsCommand).build() {
    };
    __name(_DescribeInventoryDeletionsCommand, "DescribeInventoryDeletionsCommand");
    var DescribeInventoryDeletionsCommand = _DescribeInventoryDeletionsCommand;
    var _DescribeMaintenanceWindowExecutionsCommand = class _DescribeMaintenanceWindowExecutionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowExecutions", {}).n("SSMClient", "DescribeMaintenanceWindowExecutionsCommand").f(void 0, void 0).ser(se_DescribeMaintenanceWindowExecutionsCommand).de(de_DescribeMaintenanceWindowExecutionsCommand).build() {
    };
    __name(_DescribeMaintenanceWindowExecutionsCommand, "DescribeMaintenanceWindowExecutionsCommand");
    var DescribeMaintenanceWindowExecutionsCommand = _DescribeMaintenanceWindowExecutionsCommand;
    var _DescribeMaintenanceWindowExecutionTaskInvocationsCommand = class _DescribeMaintenanceWindowExecutionTaskInvocationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowExecutionTaskInvocations", {}).n("SSMClient", "DescribeMaintenanceWindowExecutionTaskInvocationsCommand").f(void 0, DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog).ser(se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand).de(de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand).build() {
    };
    __name(_DescribeMaintenanceWindowExecutionTaskInvocationsCommand, "DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand = _DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var _DescribeMaintenanceWindowExecutionTasksCommand = class _DescribeMaintenanceWindowExecutionTasksCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowExecutionTasks", {}).n("SSMClient", "DescribeMaintenanceWindowExecutionTasksCommand").f(void 0, void 0).ser(se_DescribeMaintenanceWindowExecutionTasksCommand).de(de_DescribeMaintenanceWindowExecutionTasksCommand).build() {
    };
    __name(_DescribeMaintenanceWindowExecutionTasksCommand, "DescribeMaintenanceWindowExecutionTasksCommand");
    var DescribeMaintenanceWindowExecutionTasksCommand = _DescribeMaintenanceWindowExecutionTasksCommand;
    var _DescribeMaintenanceWindowScheduleCommand = class _DescribeMaintenanceWindowScheduleCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowSchedule", {}).n("SSMClient", "DescribeMaintenanceWindowScheduleCommand").f(void 0, void 0).ser(se_DescribeMaintenanceWindowScheduleCommand).de(de_DescribeMaintenanceWindowScheduleCommand).build() {
    };
    __name(_DescribeMaintenanceWindowScheduleCommand, "DescribeMaintenanceWindowScheduleCommand");
    var DescribeMaintenanceWindowScheduleCommand = _DescribeMaintenanceWindowScheduleCommand;
    var _DescribeMaintenanceWindowsCommand = class _DescribeMaintenanceWindowsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindows", {}).n("SSMClient", "DescribeMaintenanceWindowsCommand").f(void 0, DescribeMaintenanceWindowsResultFilterSensitiveLog).ser(se_DescribeMaintenanceWindowsCommand).de(de_DescribeMaintenanceWindowsCommand).build() {
    };
    __name(_DescribeMaintenanceWindowsCommand, "DescribeMaintenanceWindowsCommand");
    var DescribeMaintenanceWindowsCommand = _DescribeMaintenanceWindowsCommand;
    var _DescribeMaintenanceWindowsForTargetCommand = class _DescribeMaintenanceWindowsForTargetCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowsForTarget", {}).n("SSMClient", "DescribeMaintenanceWindowsForTargetCommand").f(void 0, void 0).ser(se_DescribeMaintenanceWindowsForTargetCommand).de(de_DescribeMaintenanceWindowsForTargetCommand).build() {
    };
    __name(_DescribeMaintenanceWindowsForTargetCommand, "DescribeMaintenanceWindowsForTargetCommand");
    var DescribeMaintenanceWindowsForTargetCommand = _DescribeMaintenanceWindowsForTargetCommand;
    var _DescribeMaintenanceWindowTargetsCommand = class _DescribeMaintenanceWindowTargetsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowTargets", {}).n("SSMClient", "DescribeMaintenanceWindowTargetsCommand").f(void 0, DescribeMaintenanceWindowTargetsResultFilterSensitiveLog).ser(se_DescribeMaintenanceWindowTargetsCommand).de(de_DescribeMaintenanceWindowTargetsCommand).build() {
    };
    __name(_DescribeMaintenanceWindowTargetsCommand, "DescribeMaintenanceWindowTargetsCommand");
    var DescribeMaintenanceWindowTargetsCommand = _DescribeMaintenanceWindowTargetsCommand;
    var _DescribeMaintenanceWindowTasksCommand = class _DescribeMaintenanceWindowTasksCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeMaintenanceWindowTasks", {}).n("SSMClient", "DescribeMaintenanceWindowTasksCommand").f(void 0, DescribeMaintenanceWindowTasksResultFilterSensitiveLog).ser(se_DescribeMaintenanceWindowTasksCommand).de(de_DescribeMaintenanceWindowTasksCommand).build() {
    };
    __name(_DescribeMaintenanceWindowTasksCommand, "DescribeMaintenanceWindowTasksCommand");
    var DescribeMaintenanceWindowTasksCommand = _DescribeMaintenanceWindowTasksCommand;
    var _DescribeOpsItemsCommand = class _DescribeOpsItemsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeOpsItems", {}).n("SSMClient", "DescribeOpsItemsCommand").f(void 0, void 0).ser(se_DescribeOpsItemsCommand).de(de_DescribeOpsItemsCommand).build() {
    };
    __name(_DescribeOpsItemsCommand, "DescribeOpsItemsCommand");
    var DescribeOpsItemsCommand = _DescribeOpsItemsCommand;
    var _DescribeParametersCommand = class _DescribeParametersCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeParameters", {}).n("SSMClient", "DescribeParametersCommand").f(void 0, void 0).ser(se_DescribeParametersCommand).de(de_DescribeParametersCommand).build() {
    };
    __name(_DescribeParametersCommand, "DescribeParametersCommand");
    var DescribeParametersCommand = _DescribeParametersCommand;
    var _DescribePatchBaselinesCommand = class _DescribePatchBaselinesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribePatchBaselines", {}).n("SSMClient", "DescribePatchBaselinesCommand").f(void 0, void 0).ser(se_DescribePatchBaselinesCommand).de(de_DescribePatchBaselinesCommand).build() {
    };
    __name(_DescribePatchBaselinesCommand, "DescribePatchBaselinesCommand");
    var DescribePatchBaselinesCommand = _DescribePatchBaselinesCommand;
    var _DescribePatchGroupsCommand = class _DescribePatchGroupsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribePatchGroups", {}).n("SSMClient", "DescribePatchGroupsCommand").f(void 0, void 0).ser(se_DescribePatchGroupsCommand).de(de_DescribePatchGroupsCommand).build() {
    };
    __name(_DescribePatchGroupsCommand, "DescribePatchGroupsCommand");
    var DescribePatchGroupsCommand = _DescribePatchGroupsCommand;
    var _DescribePatchGroupStateCommand = class _DescribePatchGroupStateCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribePatchGroupState", {}).n("SSMClient", "DescribePatchGroupStateCommand").f(void 0, void 0).ser(se_DescribePatchGroupStateCommand).de(de_DescribePatchGroupStateCommand).build() {
    };
    __name(_DescribePatchGroupStateCommand, "DescribePatchGroupStateCommand");
    var DescribePatchGroupStateCommand = _DescribePatchGroupStateCommand;
    var _DescribePatchPropertiesCommand = class _DescribePatchPropertiesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribePatchProperties", {}).n("SSMClient", "DescribePatchPropertiesCommand").f(void 0, void 0).ser(se_DescribePatchPropertiesCommand).de(de_DescribePatchPropertiesCommand).build() {
    };
    __name(_DescribePatchPropertiesCommand, "DescribePatchPropertiesCommand");
    var DescribePatchPropertiesCommand = _DescribePatchPropertiesCommand;
    var _DescribeSessionsCommand = class _DescribeSessionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DescribeSessions", {}).n("SSMClient", "DescribeSessionsCommand").f(void 0, void 0).ser(se_DescribeSessionsCommand).de(de_DescribeSessionsCommand).build() {
    };
    __name(_DescribeSessionsCommand, "DescribeSessionsCommand");
    var DescribeSessionsCommand = _DescribeSessionsCommand;
    var _DisassociateOpsItemRelatedItemCommand = class _DisassociateOpsItemRelatedItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "DisassociateOpsItemRelatedItem", {}).n("SSMClient", "DisassociateOpsItemRelatedItemCommand").f(void 0, void 0).ser(se_DisassociateOpsItemRelatedItemCommand).de(de_DisassociateOpsItemRelatedItemCommand).build() {
    };
    __name(_DisassociateOpsItemRelatedItemCommand, "DisassociateOpsItemRelatedItemCommand");
    var DisassociateOpsItemRelatedItemCommand = _DisassociateOpsItemRelatedItemCommand;
    var _GetAutomationExecutionCommand = class _GetAutomationExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetAutomationExecution", {}).n("SSMClient", "GetAutomationExecutionCommand").f(void 0, void 0).ser(se_GetAutomationExecutionCommand).de(de_GetAutomationExecutionCommand).build() {
    };
    __name(_GetAutomationExecutionCommand, "GetAutomationExecutionCommand");
    var GetAutomationExecutionCommand = _GetAutomationExecutionCommand;
    var _GetCalendarStateCommand = class _GetCalendarStateCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetCalendarState", {}).n("SSMClient", "GetCalendarStateCommand").f(void 0, void 0).ser(se_GetCalendarStateCommand).de(de_GetCalendarStateCommand).build() {
    };
    __name(_GetCalendarStateCommand, "GetCalendarStateCommand");
    var GetCalendarStateCommand = _GetCalendarStateCommand;
    var _GetCommandInvocationCommand = class _GetCommandInvocationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetCommandInvocation", {}).n("SSMClient", "GetCommandInvocationCommand").f(void 0, void 0).ser(se_GetCommandInvocationCommand).de(de_GetCommandInvocationCommand).build() {
    };
    __name(_GetCommandInvocationCommand, "GetCommandInvocationCommand");
    var GetCommandInvocationCommand = _GetCommandInvocationCommand;
    var _GetConnectionStatusCommand = class _GetConnectionStatusCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetConnectionStatus", {}).n("SSMClient", "GetConnectionStatusCommand").f(void 0, void 0).ser(se_GetConnectionStatusCommand).de(de_GetConnectionStatusCommand).build() {
    };
    __name(_GetConnectionStatusCommand, "GetConnectionStatusCommand");
    var GetConnectionStatusCommand = _GetConnectionStatusCommand;
    var _GetDefaultPatchBaselineCommand = class _GetDefaultPatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetDefaultPatchBaseline", {}).n("SSMClient", "GetDefaultPatchBaselineCommand").f(void 0, void 0).ser(se_GetDefaultPatchBaselineCommand).de(de_GetDefaultPatchBaselineCommand).build() {
    };
    __name(_GetDefaultPatchBaselineCommand, "GetDefaultPatchBaselineCommand");
    var GetDefaultPatchBaselineCommand = _GetDefaultPatchBaselineCommand;
    var _GetDeployablePatchSnapshotForInstanceCommand = class _GetDeployablePatchSnapshotForInstanceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetDeployablePatchSnapshotForInstance", {}).n("SSMClient", "GetDeployablePatchSnapshotForInstanceCommand").f(GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog, void 0).ser(se_GetDeployablePatchSnapshotForInstanceCommand).de(de_GetDeployablePatchSnapshotForInstanceCommand).build() {
    };
    __name(_GetDeployablePatchSnapshotForInstanceCommand, "GetDeployablePatchSnapshotForInstanceCommand");
    var GetDeployablePatchSnapshotForInstanceCommand = _GetDeployablePatchSnapshotForInstanceCommand;
    var _GetDocumentCommand = class _GetDocumentCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetDocument", {}).n("SSMClient", "GetDocumentCommand").f(void 0, void 0).ser(se_GetDocumentCommand).de(de_GetDocumentCommand).build() {
    };
    __name(_GetDocumentCommand, "GetDocumentCommand");
    var GetDocumentCommand = _GetDocumentCommand;
    var _GetInventoryCommand = class _GetInventoryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetInventory", {}).n("SSMClient", "GetInventoryCommand").f(void 0, void 0).ser(se_GetInventoryCommand).de(de_GetInventoryCommand).build() {
    };
    __name(_GetInventoryCommand, "GetInventoryCommand");
    var GetInventoryCommand = _GetInventoryCommand;
    var _GetInventorySchemaCommand = class _GetInventorySchemaCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetInventorySchema", {}).n("SSMClient", "GetInventorySchemaCommand").f(void 0, void 0).ser(se_GetInventorySchemaCommand).de(de_GetInventorySchemaCommand).build() {
    };
    __name(_GetInventorySchemaCommand, "GetInventorySchemaCommand");
    var GetInventorySchemaCommand = _GetInventorySchemaCommand;
    var _GetMaintenanceWindowCommand = class _GetMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetMaintenanceWindow", {}).n("SSMClient", "GetMaintenanceWindowCommand").f(void 0, GetMaintenanceWindowResultFilterSensitiveLog).ser(se_GetMaintenanceWindowCommand).de(de_GetMaintenanceWindowCommand).build() {
    };
    __name(_GetMaintenanceWindowCommand, "GetMaintenanceWindowCommand");
    var GetMaintenanceWindowCommand = _GetMaintenanceWindowCommand;
    var _GetMaintenanceWindowExecutionCommand = class _GetMaintenanceWindowExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetMaintenanceWindowExecution", {}).n("SSMClient", "GetMaintenanceWindowExecutionCommand").f(void 0, void 0).ser(se_GetMaintenanceWindowExecutionCommand).de(de_GetMaintenanceWindowExecutionCommand).build() {
    };
    __name(_GetMaintenanceWindowExecutionCommand, "GetMaintenanceWindowExecutionCommand");
    var GetMaintenanceWindowExecutionCommand = _GetMaintenanceWindowExecutionCommand;
    var _GetMaintenanceWindowExecutionTaskCommand = class _GetMaintenanceWindowExecutionTaskCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetMaintenanceWindowExecutionTask", {}).n("SSMClient", "GetMaintenanceWindowExecutionTaskCommand").f(void 0, GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog).ser(se_GetMaintenanceWindowExecutionTaskCommand).de(de_GetMaintenanceWindowExecutionTaskCommand).build() {
    };
    __name(_GetMaintenanceWindowExecutionTaskCommand, "GetMaintenanceWindowExecutionTaskCommand");
    var GetMaintenanceWindowExecutionTaskCommand = _GetMaintenanceWindowExecutionTaskCommand;
    var _GetMaintenanceWindowExecutionTaskInvocationCommand = class _GetMaintenanceWindowExecutionTaskInvocationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetMaintenanceWindowExecutionTaskInvocation", {}).n("SSMClient", "GetMaintenanceWindowExecutionTaskInvocationCommand").f(void 0, GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog).ser(se_GetMaintenanceWindowExecutionTaskInvocationCommand).de(de_GetMaintenanceWindowExecutionTaskInvocationCommand).build() {
    };
    __name(_GetMaintenanceWindowExecutionTaskInvocationCommand, "GetMaintenanceWindowExecutionTaskInvocationCommand");
    var GetMaintenanceWindowExecutionTaskInvocationCommand = _GetMaintenanceWindowExecutionTaskInvocationCommand;
    var _GetMaintenanceWindowTaskCommand = class _GetMaintenanceWindowTaskCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetMaintenanceWindowTask", {}).n("SSMClient", "GetMaintenanceWindowTaskCommand").f(void 0, GetMaintenanceWindowTaskResultFilterSensitiveLog).ser(se_GetMaintenanceWindowTaskCommand).de(de_GetMaintenanceWindowTaskCommand).build() {
    };
    __name(_GetMaintenanceWindowTaskCommand, "GetMaintenanceWindowTaskCommand");
    var GetMaintenanceWindowTaskCommand = _GetMaintenanceWindowTaskCommand;
    var _GetOpsItemCommand = class _GetOpsItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetOpsItem", {}).n("SSMClient", "GetOpsItemCommand").f(void 0, void 0).ser(se_GetOpsItemCommand).de(de_GetOpsItemCommand).build() {
    };
    __name(_GetOpsItemCommand, "GetOpsItemCommand");
    var GetOpsItemCommand = _GetOpsItemCommand;
    var _GetOpsMetadataCommand = class _GetOpsMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetOpsMetadata", {}).n("SSMClient", "GetOpsMetadataCommand").f(void 0, void 0).ser(se_GetOpsMetadataCommand).de(de_GetOpsMetadataCommand).build() {
    };
    __name(_GetOpsMetadataCommand, "GetOpsMetadataCommand");
    var GetOpsMetadataCommand = _GetOpsMetadataCommand;
    var _GetOpsSummaryCommand = class _GetOpsSummaryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetOpsSummary", {}).n("SSMClient", "GetOpsSummaryCommand").f(void 0, void 0).ser(se_GetOpsSummaryCommand).de(de_GetOpsSummaryCommand).build() {
    };
    __name(_GetOpsSummaryCommand, "GetOpsSummaryCommand");
    var GetOpsSummaryCommand = _GetOpsSummaryCommand;
    var _GetParameterCommand = class _GetParameterCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetParameter", {}).n("SSMClient", "GetParameterCommand").f(void 0, GetParameterResultFilterSensitiveLog).ser(se_GetParameterCommand).de(de_GetParameterCommand).build() {
    };
    __name(_GetParameterCommand, "GetParameterCommand");
    var GetParameterCommand2 = _GetParameterCommand;
    var _GetParameterHistoryCommand = class _GetParameterHistoryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetParameterHistory", {}).n("SSMClient", "GetParameterHistoryCommand").f(void 0, GetParameterHistoryResultFilterSensitiveLog).ser(se_GetParameterHistoryCommand).de(de_GetParameterHistoryCommand).build() {
    };
    __name(_GetParameterHistoryCommand, "GetParameterHistoryCommand");
    var GetParameterHistoryCommand = _GetParameterHistoryCommand;
    var _GetParametersByPathCommand = class _GetParametersByPathCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetParametersByPath", {}).n("SSMClient", "GetParametersByPathCommand").f(void 0, GetParametersByPathResultFilterSensitiveLog).ser(se_GetParametersByPathCommand).de(de_GetParametersByPathCommand).build() {
    };
    __name(_GetParametersByPathCommand, "GetParametersByPathCommand");
    var GetParametersByPathCommand = _GetParametersByPathCommand;
    var _GetParametersCommand = class _GetParametersCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetParameters", {}).n("SSMClient", "GetParametersCommand").f(void 0, GetParametersResultFilterSensitiveLog).ser(se_GetParametersCommand).de(de_GetParametersCommand).build() {
    };
    __name(_GetParametersCommand, "GetParametersCommand");
    var GetParametersCommand2 = _GetParametersCommand;
    var _GetPatchBaselineCommand = class _GetPatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetPatchBaseline", {}).n("SSMClient", "GetPatchBaselineCommand").f(void 0, GetPatchBaselineResultFilterSensitiveLog).ser(se_GetPatchBaselineCommand).de(de_GetPatchBaselineCommand).build() {
    };
    __name(_GetPatchBaselineCommand, "GetPatchBaselineCommand");
    var GetPatchBaselineCommand = _GetPatchBaselineCommand;
    var _GetPatchBaselineForPatchGroupCommand = class _GetPatchBaselineForPatchGroupCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetPatchBaselineForPatchGroup", {}).n("SSMClient", "GetPatchBaselineForPatchGroupCommand").f(void 0, void 0).ser(se_GetPatchBaselineForPatchGroupCommand).de(de_GetPatchBaselineForPatchGroupCommand).build() {
    };
    __name(_GetPatchBaselineForPatchGroupCommand, "GetPatchBaselineForPatchGroupCommand");
    var GetPatchBaselineForPatchGroupCommand = _GetPatchBaselineForPatchGroupCommand;
    var _GetResourcePoliciesCommand = class _GetResourcePoliciesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetResourcePolicies", {}).n("SSMClient", "GetResourcePoliciesCommand").f(void 0, void 0).ser(se_GetResourcePoliciesCommand).de(de_GetResourcePoliciesCommand).build() {
    };
    __name(_GetResourcePoliciesCommand, "GetResourcePoliciesCommand");
    var GetResourcePoliciesCommand = _GetResourcePoliciesCommand;
    var _GetServiceSettingCommand = class _GetServiceSettingCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "GetServiceSetting", {}).n("SSMClient", "GetServiceSettingCommand").f(void 0, void 0).ser(se_GetServiceSettingCommand).de(de_GetServiceSettingCommand).build() {
    };
    __name(_GetServiceSettingCommand, "GetServiceSettingCommand");
    var GetServiceSettingCommand = _GetServiceSettingCommand;
    var _LabelParameterVersionCommand = class _LabelParameterVersionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "LabelParameterVersion", {}).n("SSMClient", "LabelParameterVersionCommand").f(void 0, void 0).ser(se_LabelParameterVersionCommand).de(de_LabelParameterVersionCommand).build() {
    };
    __name(_LabelParameterVersionCommand, "LabelParameterVersionCommand");
    var LabelParameterVersionCommand = _LabelParameterVersionCommand;
    var _ListAssociationsCommand = class _ListAssociationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListAssociations", {}).n("SSMClient", "ListAssociationsCommand").f(void 0, void 0).ser(se_ListAssociationsCommand).de(de_ListAssociationsCommand).build() {
    };
    __name(_ListAssociationsCommand, "ListAssociationsCommand");
    var ListAssociationsCommand = _ListAssociationsCommand;
    var _ListAssociationVersionsCommand = class _ListAssociationVersionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListAssociationVersions", {}).n("SSMClient", "ListAssociationVersionsCommand").f(void 0, ListAssociationVersionsResultFilterSensitiveLog).ser(se_ListAssociationVersionsCommand).de(de_ListAssociationVersionsCommand).build() {
    };
    __name(_ListAssociationVersionsCommand, "ListAssociationVersionsCommand");
    var ListAssociationVersionsCommand = _ListAssociationVersionsCommand;
    var _ListCommandInvocationsCommand = class _ListCommandInvocationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListCommandInvocations", {}).n("SSMClient", "ListCommandInvocationsCommand").f(void 0, void 0).ser(se_ListCommandInvocationsCommand).de(de_ListCommandInvocationsCommand).build() {
    };
    __name(_ListCommandInvocationsCommand, "ListCommandInvocationsCommand");
    var ListCommandInvocationsCommand = _ListCommandInvocationsCommand;
    var _ListCommandsCommand = class _ListCommandsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListCommands", {}).n("SSMClient", "ListCommandsCommand").f(void 0, ListCommandsResultFilterSensitiveLog).ser(se_ListCommandsCommand).de(de_ListCommandsCommand).build() {
    };
    __name(_ListCommandsCommand, "ListCommandsCommand");
    var ListCommandsCommand = _ListCommandsCommand;
    var _ListComplianceItemsCommand = class _ListComplianceItemsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListComplianceItems", {}).n("SSMClient", "ListComplianceItemsCommand").f(void 0, void 0).ser(se_ListComplianceItemsCommand).de(de_ListComplianceItemsCommand).build() {
    };
    __name(_ListComplianceItemsCommand, "ListComplianceItemsCommand");
    var ListComplianceItemsCommand = _ListComplianceItemsCommand;
    var _ListComplianceSummariesCommand = class _ListComplianceSummariesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListComplianceSummaries", {}).n("SSMClient", "ListComplianceSummariesCommand").f(void 0, void 0).ser(se_ListComplianceSummariesCommand).de(de_ListComplianceSummariesCommand).build() {
    };
    __name(_ListComplianceSummariesCommand, "ListComplianceSummariesCommand");
    var ListComplianceSummariesCommand = _ListComplianceSummariesCommand;
    var _ListDocumentMetadataHistoryCommand = class _ListDocumentMetadataHistoryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListDocumentMetadataHistory", {}).n("SSMClient", "ListDocumentMetadataHistoryCommand").f(void 0, void 0).ser(se_ListDocumentMetadataHistoryCommand).de(de_ListDocumentMetadataHistoryCommand).build() {
    };
    __name(_ListDocumentMetadataHistoryCommand, "ListDocumentMetadataHistoryCommand");
    var ListDocumentMetadataHistoryCommand = _ListDocumentMetadataHistoryCommand;
    var _ListDocumentsCommand = class _ListDocumentsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListDocuments", {}).n("SSMClient", "ListDocumentsCommand").f(void 0, void 0).ser(se_ListDocumentsCommand).de(de_ListDocumentsCommand).build() {
    };
    __name(_ListDocumentsCommand, "ListDocumentsCommand");
    var ListDocumentsCommand = _ListDocumentsCommand;
    var _ListDocumentVersionsCommand = class _ListDocumentVersionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListDocumentVersions", {}).n("SSMClient", "ListDocumentVersionsCommand").f(void 0, void 0).ser(se_ListDocumentVersionsCommand).de(de_ListDocumentVersionsCommand).build() {
    };
    __name(_ListDocumentVersionsCommand, "ListDocumentVersionsCommand");
    var ListDocumentVersionsCommand = _ListDocumentVersionsCommand;
    var _ListInventoryEntriesCommand = class _ListInventoryEntriesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListInventoryEntries", {}).n("SSMClient", "ListInventoryEntriesCommand").f(void 0, void 0).ser(se_ListInventoryEntriesCommand).de(de_ListInventoryEntriesCommand).build() {
    };
    __name(_ListInventoryEntriesCommand, "ListInventoryEntriesCommand");
    var ListInventoryEntriesCommand = _ListInventoryEntriesCommand;
    var _ListOpsItemEventsCommand = class _ListOpsItemEventsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListOpsItemEvents", {}).n("SSMClient", "ListOpsItemEventsCommand").f(void 0, void 0).ser(se_ListOpsItemEventsCommand).de(de_ListOpsItemEventsCommand).build() {
    };
    __name(_ListOpsItemEventsCommand, "ListOpsItemEventsCommand");
    var ListOpsItemEventsCommand = _ListOpsItemEventsCommand;
    var _ListOpsItemRelatedItemsCommand = class _ListOpsItemRelatedItemsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListOpsItemRelatedItems", {}).n("SSMClient", "ListOpsItemRelatedItemsCommand").f(void 0, void 0).ser(se_ListOpsItemRelatedItemsCommand).de(de_ListOpsItemRelatedItemsCommand).build() {
    };
    __name(_ListOpsItemRelatedItemsCommand, "ListOpsItemRelatedItemsCommand");
    var ListOpsItemRelatedItemsCommand = _ListOpsItemRelatedItemsCommand;
    var _ListOpsMetadataCommand = class _ListOpsMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListOpsMetadata", {}).n("SSMClient", "ListOpsMetadataCommand").f(void 0, void 0).ser(se_ListOpsMetadataCommand).de(de_ListOpsMetadataCommand).build() {
    };
    __name(_ListOpsMetadataCommand, "ListOpsMetadataCommand");
    var ListOpsMetadataCommand = _ListOpsMetadataCommand;
    var _ListResourceComplianceSummariesCommand = class _ListResourceComplianceSummariesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListResourceComplianceSummaries", {}).n("SSMClient", "ListResourceComplianceSummariesCommand").f(void 0, void 0).ser(se_ListResourceComplianceSummariesCommand).de(de_ListResourceComplianceSummariesCommand).build() {
    };
    __name(_ListResourceComplianceSummariesCommand, "ListResourceComplianceSummariesCommand");
    var ListResourceComplianceSummariesCommand = _ListResourceComplianceSummariesCommand;
    var _ListResourceDataSyncCommand = class _ListResourceDataSyncCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListResourceDataSync", {}).n("SSMClient", "ListResourceDataSyncCommand").f(void 0, void 0).ser(se_ListResourceDataSyncCommand).de(de_ListResourceDataSyncCommand).build() {
    };
    __name(_ListResourceDataSyncCommand, "ListResourceDataSyncCommand");
    var ListResourceDataSyncCommand = _ListResourceDataSyncCommand;
    var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ListTagsForResource", {}).n("SSMClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    };
    __name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
    var ListTagsForResourceCommand = _ListTagsForResourceCommand;
    var _ModifyDocumentPermissionCommand = class _ModifyDocumentPermissionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ModifyDocumentPermission", {}).n("SSMClient", "ModifyDocumentPermissionCommand").f(void 0, void 0).ser(se_ModifyDocumentPermissionCommand).de(de_ModifyDocumentPermissionCommand).build() {
    };
    __name(_ModifyDocumentPermissionCommand, "ModifyDocumentPermissionCommand");
    var ModifyDocumentPermissionCommand = _ModifyDocumentPermissionCommand;
    var _PutComplianceItemsCommand = class _PutComplianceItemsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "PutComplianceItems", {}).n("SSMClient", "PutComplianceItemsCommand").f(void 0, void 0).ser(se_PutComplianceItemsCommand).de(de_PutComplianceItemsCommand).build() {
    };
    __name(_PutComplianceItemsCommand, "PutComplianceItemsCommand");
    var PutComplianceItemsCommand = _PutComplianceItemsCommand;
    var _PutInventoryCommand = class _PutInventoryCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "PutInventory", {}).n("SSMClient", "PutInventoryCommand").f(void 0, void 0).ser(se_PutInventoryCommand).de(de_PutInventoryCommand).build() {
    };
    __name(_PutInventoryCommand, "PutInventoryCommand");
    var PutInventoryCommand = _PutInventoryCommand;
    var _PutParameterCommand = class _PutParameterCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "PutParameter", {}).n("SSMClient", "PutParameterCommand").f(PutParameterRequestFilterSensitiveLog, void 0).ser(se_PutParameterCommand).de(de_PutParameterCommand).build() {
    };
    __name(_PutParameterCommand, "PutParameterCommand");
    var PutParameterCommand = _PutParameterCommand;
    var _PutResourcePolicyCommand = class _PutResourcePolicyCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "PutResourcePolicy", {}).n("SSMClient", "PutResourcePolicyCommand").f(void 0, void 0).ser(se_PutResourcePolicyCommand).de(de_PutResourcePolicyCommand).build() {
    };
    __name(_PutResourcePolicyCommand, "PutResourcePolicyCommand");
    var PutResourcePolicyCommand = _PutResourcePolicyCommand;
    var _RegisterDefaultPatchBaselineCommand = class _RegisterDefaultPatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "RegisterDefaultPatchBaseline", {}).n("SSMClient", "RegisterDefaultPatchBaselineCommand").f(void 0, void 0).ser(se_RegisterDefaultPatchBaselineCommand).de(de_RegisterDefaultPatchBaselineCommand).build() {
    };
    __name(_RegisterDefaultPatchBaselineCommand, "RegisterDefaultPatchBaselineCommand");
    var RegisterDefaultPatchBaselineCommand = _RegisterDefaultPatchBaselineCommand;
    var _RegisterPatchBaselineForPatchGroupCommand = class _RegisterPatchBaselineForPatchGroupCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "RegisterPatchBaselineForPatchGroup", {}).n("SSMClient", "RegisterPatchBaselineForPatchGroupCommand").f(void 0, void 0).ser(se_RegisterPatchBaselineForPatchGroupCommand).de(de_RegisterPatchBaselineForPatchGroupCommand).build() {
    };
    __name(_RegisterPatchBaselineForPatchGroupCommand, "RegisterPatchBaselineForPatchGroupCommand");
    var RegisterPatchBaselineForPatchGroupCommand = _RegisterPatchBaselineForPatchGroupCommand;
    var _RegisterTargetWithMaintenanceWindowCommand = class _RegisterTargetWithMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "RegisterTargetWithMaintenanceWindow", {}).n("SSMClient", "RegisterTargetWithMaintenanceWindowCommand").f(RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog, void 0).ser(se_RegisterTargetWithMaintenanceWindowCommand).de(de_RegisterTargetWithMaintenanceWindowCommand).build() {
    };
    __name(_RegisterTargetWithMaintenanceWindowCommand, "RegisterTargetWithMaintenanceWindowCommand");
    var RegisterTargetWithMaintenanceWindowCommand = _RegisterTargetWithMaintenanceWindowCommand;
    var _RegisterTaskWithMaintenanceWindowCommand = class _RegisterTaskWithMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "RegisterTaskWithMaintenanceWindow", {}).n("SSMClient", "RegisterTaskWithMaintenanceWindowCommand").f(RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog, void 0).ser(se_RegisterTaskWithMaintenanceWindowCommand).de(de_RegisterTaskWithMaintenanceWindowCommand).build() {
    };
    __name(_RegisterTaskWithMaintenanceWindowCommand, "RegisterTaskWithMaintenanceWindowCommand");
    var RegisterTaskWithMaintenanceWindowCommand = _RegisterTaskWithMaintenanceWindowCommand;
    var _RemoveTagsFromResourceCommand = class _RemoveTagsFromResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "RemoveTagsFromResource", {}).n("SSMClient", "RemoveTagsFromResourceCommand").f(void 0, void 0).ser(se_RemoveTagsFromResourceCommand).de(de_RemoveTagsFromResourceCommand).build() {
    };
    __name(_RemoveTagsFromResourceCommand, "RemoveTagsFromResourceCommand");
    var RemoveTagsFromResourceCommand = _RemoveTagsFromResourceCommand;
    var _ResetServiceSettingCommand = class _ResetServiceSettingCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ResetServiceSetting", {}).n("SSMClient", "ResetServiceSettingCommand").f(void 0, void 0).ser(se_ResetServiceSettingCommand).de(de_ResetServiceSettingCommand).build() {
    };
    __name(_ResetServiceSettingCommand, "ResetServiceSettingCommand");
    var ResetServiceSettingCommand = _ResetServiceSettingCommand;
    var _ResumeSessionCommand = class _ResumeSessionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "ResumeSession", {}).n("SSMClient", "ResumeSessionCommand").f(void 0, void 0).ser(se_ResumeSessionCommand).de(de_ResumeSessionCommand).build() {
    };
    __name(_ResumeSessionCommand, "ResumeSessionCommand");
    var ResumeSessionCommand = _ResumeSessionCommand;
    var _SendAutomationSignalCommand = class _SendAutomationSignalCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "SendAutomationSignal", {}).n("SSMClient", "SendAutomationSignalCommand").f(void 0, void 0).ser(se_SendAutomationSignalCommand).de(de_SendAutomationSignalCommand).build() {
    };
    __name(_SendAutomationSignalCommand, "SendAutomationSignalCommand");
    var SendAutomationSignalCommand = _SendAutomationSignalCommand;
    var _SendCommandCommand = class _SendCommandCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "SendCommand", {}).n("SSMClient", "SendCommandCommand").f(SendCommandRequestFilterSensitiveLog, SendCommandResultFilterSensitiveLog).ser(se_SendCommandCommand).de(de_SendCommandCommand).build() {
    };
    __name(_SendCommandCommand, "SendCommandCommand");
    var SendCommandCommand = _SendCommandCommand;
    var _StartAssociationsOnceCommand = class _StartAssociationsOnceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "StartAssociationsOnce", {}).n("SSMClient", "StartAssociationsOnceCommand").f(void 0, void 0).ser(se_StartAssociationsOnceCommand).de(de_StartAssociationsOnceCommand).build() {
    };
    __name(_StartAssociationsOnceCommand, "StartAssociationsOnceCommand");
    var StartAssociationsOnceCommand = _StartAssociationsOnceCommand;
    var _StartAutomationExecutionCommand = class _StartAutomationExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "StartAutomationExecution", {}).n("SSMClient", "StartAutomationExecutionCommand").f(void 0, void 0).ser(se_StartAutomationExecutionCommand).de(de_StartAutomationExecutionCommand).build() {
    };
    __name(_StartAutomationExecutionCommand, "StartAutomationExecutionCommand");
    var StartAutomationExecutionCommand = _StartAutomationExecutionCommand;
    var _StartChangeRequestExecutionCommand = class _StartChangeRequestExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "StartChangeRequestExecution", {}).n("SSMClient", "StartChangeRequestExecutionCommand").f(void 0, void 0).ser(se_StartChangeRequestExecutionCommand).de(de_StartChangeRequestExecutionCommand).build() {
    };
    __name(_StartChangeRequestExecutionCommand, "StartChangeRequestExecutionCommand");
    var StartChangeRequestExecutionCommand = _StartChangeRequestExecutionCommand;
    var _StartSessionCommand = class _StartSessionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "StartSession", {}).n("SSMClient", "StartSessionCommand").f(void 0, void 0).ser(se_StartSessionCommand).de(de_StartSessionCommand).build() {
    };
    __name(_StartSessionCommand, "StartSessionCommand");
    var StartSessionCommand = _StartSessionCommand;
    var _StopAutomationExecutionCommand = class _StopAutomationExecutionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "StopAutomationExecution", {}).n("SSMClient", "StopAutomationExecutionCommand").f(void 0, void 0).ser(se_StopAutomationExecutionCommand).de(de_StopAutomationExecutionCommand).build() {
    };
    __name(_StopAutomationExecutionCommand, "StopAutomationExecutionCommand");
    var StopAutomationExecutionCommand = _StopAutomationExecutionCommand;
    var _TerminateSessionCommand = class _TerminateSessionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "TerminateSession", {}).n("SSMClient", "TerminateSessionCommand").f(void 0, void 0).ser(se_TerminateSessionCommand).de(de_TerminateSessionCommand).build() {
    };
    __name(_TerminateSessionCommand, "TerminateSessionCommand");
    var TerminateSessionCommand = _TerminateSessionCommand;
    var _UnlabelParameterVersionCommand = class _UnlabelParameterVersionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UnlabelParameterVersion", {}).n("SSMClient", "UnlabelParameterVersionCommand").f(void 0, void 0).ser(se_UnlabelParameterVersionCommand).de(de_UnlabelParameterVersionCommand).build() {
    };
    __name(_UnlabelParameterVersionCommand, "UnlabelParameterVersionCommand");
    var UnlabelParameterVersionCommand = _UnlabelParameterVersionCommand;
    var _UpdateAssociationCommand = class _UpdateAssociationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateAssociation", {}).n("SSMClient", "UpdateAssociationCommand").f(UpdateAssociationRequestFilterSensitiveLog, UpdateAssociationResultFilterSensitiveLog).ser(se_UpdateAssociationCommand).de(de_UpdateAssociationCommand).build() {
    };
    __name(_UpdateAssociationCommand, "UpdateAssociationCommand");
    var UpdateAssociationCommand = _UpdateAssociationCommand;
    var _UpdateAssociationStatusCommand = class _UpdateAssociationStatusCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateAssociationStatus", {}).n("SSMClient", "UpdateAssociationStatusCommand").f(void 0, UpdateAssociationStatusResultFilterSensitiveLog).ser(se_UpdateAssociationStatusCommand).de(de_UpdateAssociationStatusCommand).build() {
    };
    __name(_UpdateAssociationStatusCommand, "UpdateAssociationStatusCommand");
    var UpdateAssociationStatusCommand = _UpdateAssociationStatusCommand;
    var _UpdateDocumentCommand = class _UpdateDocumentCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateDocument", {}).n("SSMClient", "UpdateDocumentCommand").f(void 0, void 0).ser(se_UpdateDocumentCommand).de(de_UpdateDocumentCommand).build() {
    };
    __name(_UpdateDocumentCommand, "UpdateDocumentCommand");
    var UpdateDocumentCommand = _UpdateDocumentCommand;
    var _UpdateDocumentDefaultVersionCommand = class _UpdateDocumentDefaultVersionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateDocumentDefaultVersion", {}).n("SSMClient", "UpdateDocumentDefaultVersionCommand").f(void 0, void 0).ser(se_UpdateDocumentDefaultVersionCommand).de(de_UpdateDocumentDefaultVersionCommand).build() {
    };
    __name(_UpdateDocumentDefaultVersionCommand, "UpdateDocumentDefaultVersionCommand");
    var UpdateDocumentDefaultVersionCommand = _UpdateDocumentDefaultVersionCommand;
    var _UpdateDocumentMetadataCommand = class _UpdateDocumentMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateDocumentMetadata", {}).n("SSMClient", "UpdateDocumentMetadataCommand").f(void 0, void 0).ser(se_UpdateDocumentMetadataCommand).de(de_UpdateDocumentMetadataCommand).build() {
    };
    __name(_UpdateDocumentMetadataCommand, "UpdateDocumentMetadataCommand");
    var UpdateDocumentMetadataCommand = _UpdateDocumentMetadataCommand;
    var _UpdateMaintenanceWindowCommand = class _UpdateMaintenanceWindowCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateMaintenanceWindow", {}).n("SSMClient", "UpdateMaintenanceWindowCommand").f(UpdateMaintenanceWindowRequestFilterSensitiveLog, UpdateMaintenanceWindowResultFilterSensitiveLog).ser(se_UpdateMaintenanceWindowCommand).de(de_UpdateMaintenanceWindowCommand).build() {
    };
    __name(_UpdateMaintenanceWindowCommand, "UpdateMaintenanceWindowCommand");
    var UpdateMaintenanceWindowCommand = _UpdateMaintenanceWindowCommand;
    var _UpdateMaintenanceWindowTargetCommand = class _UpdateMaintenanceWindowTargetCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateMaintenanceWindowTarget", {}).n("SSMClient", "UpdateMaintenanceWindowTargetCommand").f(UpdateMaintenanceWindowTargetRequestFilterSensitiveLog, UpdateMaintenanceWindowTargetResultFilterSensitiveLog).ser(se_UpdateMaintenanceWindowTargetCommand).de(de_UpdateMaintenanceWindowTargetCommand).build() {
    };
    __name(_UpdateMaintenanceWindowTargetCommand, "UpdateMaintenanceWindowTargetCommand");
    var UpdateMaintenanceWindowTargetCommand = _UpdateMaintenanceWindowTargetCommand;
    var _UpdateMaintenanceWindowTaskCommand = class _UpdateMaintenanceWindowTaskCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateMaintenanceWindowTask", {}).n("SSMClient", "UpdateMaintenanceWindowTaskCommand").f(UpdateMaintenanceWindowTaskRequestFilterSensitiveLog, UpdateMaintenanceWindowTaskResultFilterSensitiveLog).ser(se_UpdateMaintenanceWindowTaskCommand).de(de_UpdateMaintenanceWindowTaskCommand).build() {
    };
    __name(_UpdateMaintenanceWindowTaskCommand, "UpdateMaintenanceWindowTaskCommand");
    var UpdateMaintenanceWindowTaskCommand = _UpdateMaintenanceWindowTaskCommand;
    var _UpdateManagedInstanceRoleCommand = class _UpdateManagedInstanceRoleCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateManagedInstanceRole", {}).n("SSMClient", "UpdateManagedInstanceRoleCommand").f(void 0, void 0).ser(se_UpdateManagedInstanceRoleCommand).de(de_UpdateManagedInstanceRoleCommand).build() {
    };
    __name(_UpdateManagedInstanceRoleCommand, "UpdateManagedInstanceRoleCommand");
    var UpdateManagedInstanceRoleCommand = _UpdateManagedInstanceRoleCommand;
    var _UpdateOpsItemCommand = class _UpdateOpsItemCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateOpsItem", {}).n("SSMClient", "UpdateOpsItemCommand").f(void 0, void 0).ser(se_UpdateOpsItemCommand).de(de_UpdateOpsItemCommand).build() {
    };
    __name(_UpdateOpsItemCommand, "UpdateOpsItemCommand");
    var UpdateOpsItemCommand = _UpdateOpsItemCommand;
    var _UpdateOpsMetadataCommand = class _UpdateOpsMetadataCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateOpsMetadata", {}).n("SSMClient", "UpdateOpsMetadataCommand").f(void 0, void 0).ser(se_UpdateOpsMetadataCommand).de(de_UpdateOpsMetadataCommand).build() {
    };
    __name(_UpdateOpsMetadataCommand, "UpdateOpsMetadataCommand");
    var UpdateOpsMetadataCommand = _UpdateOpsMetadataCommand;
    var _UpdatePatchBaselineCommand = class _UpdatePatchBaselineCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdatePatchBaseline", {}).n("SSMClient", "UpdatePatchBaselineCommand").f(UpdatePatchBaselineRequestFilterSensitiveLog, UpdatePatchBaselineResultFilterSensitiveLog).ser(se_UpdatePatchBaselineCommand).de(de_UpdatePatchBaselineCommand).build() {
    };
    __name(_UpdatePatchBaselineCommand, "UpdatePatchBaselineCommand");
    var UpdatePatchBaselineCommand = _UpdatePatchBaselineCommand;
    var _UpdateResourceDataSyncCommand = class _UpdateResourceDataSyncCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateResourceDataSync", {}).n("SSMClient", "UpdateResourceDataSyncCommand").f(void 0, void 0).ser(se_UpdateResourceDataSyncCommand).de(de_UpdateResourceDataSyncCommand).build() {
    };
    __name(_UpdateResourceDataSyncCommand, "UpdateResourceDataSyncCommand");
    var UpdateResourceDataSyncCommand = _UpdateResourceDataSyncCommand;
    var _UpdateServiceSettingCommand = class _UpdateServiceSettingCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AmazonSSM", "UpdateServiceSetting", {}).n("SSMClient", "UpdateServiceSettingCommand").f(void 0, void 0).ser(se_UpdateServiceSettingCommand).de(de_UpdateServiceSettingCommand).build() {
    };
    __name(_UpdateServiceSettingCommand, "UpdateServiceSettingCommand");
    var UpdateServiceSettingCommand = _UpdateServiceSettingCommand;
    var commands = {
      AddTagsToResourceCommand,
      AssociateOpsItemRelatedItemCommand,
      CancelCommandCommand,
      CancelMaintenanceWindowExecutionCommand,
      CreateActivationCommand,
      CreateAssociationCommand,
      CreateAssociationBatchCommand,
      CreateDocumentCommand,
      CreateMaintenanceWindowCommand,
      CreateOpsItemCommand,
      CreateOpsMetadataCommand,
      CreatePatchBaselineCommand,
      CreateResourceDataSyncCommand,
      DeleteActivationCommand,
      DeleteAssociationCommand,
      DeleteDocumentCommand,
      DeleteInventoryCommand,
      DeleteMaintenanceWindowCommand,
      DeleteOpsItemCommand,
      DeleteOpsMetadataCommand,
      DeleteParameterCommand,
      DeleteParametersCommand,
      DeletePatchBaselineCommand,
      DeleteResourceDataSyncCommand,
      DeleteResourcePolicyCommand,
      DeregisterManagedInstanceCommand,
      DeregisterPatchBaselineForPatchGroupCommand,
      DeregisterTargetFromMaintenanceWindowCommand,
      DeregisterTaskFromMaintenanceWindowCommand,
      DescribeActivationsCommand,
      DescribeAssociationCommand,
      DescribeAssociationExecutionsCommand,
      DescribeAssociationExecutionTargetsCommand,
      DescribeAutomationExecutionsCommand,
      DescribeAutomationStepExecutionsCommand,
      DescribeAvailablePatchesCommand,
      DescribeDocumentCommand,
      DescribeDocumentPermissionCommand,
      DescribeEffectiveInstanceAssociationsCommand,
      DescribeEffectivePatchesForPatchBaselineCommand,
      DescribeInstanceAssociationsStatusCommand,
      DescribeInstanceInformationCommand,
      DescribeInstancePatchesCommand,
      DescribeInstancePatchStatesCommand,
      DescribeInstancePatchStatesForPatchGroupCommand,
      DescribeInstancePropertiesCommand,
      DescribeInventoryDeletionsCommand,
      DescribeMaintenanceWindowExecutionsCommand,
      DescribeMaintenanceWindowExecutionTaskInvocationsCommand,
      DescribeMaintenanceWindowExecutionTasksCommand,
      DescribeMaintenanceWindowsCommand,
      DescribeMaintenanceWindowScheduleCommand,
      DescribeMaintenanceWindowsForTargetCommand,
      DescribeMaintenanceWindowTargetsCommand,
      DescribeMaintenanceWindowTasksCommand,
      DescribeOpsItemsCommand,
      DescribeParametersCommand,
      DescribePatchBaselinesCommand,
      DescribePatchGroupsCommand,
      DescribePatchGroupStateCommand,
      DescribePatchPropertiesCommand,
      DescribeSessionsCommand,
      DisassociateOpsItemRelatedItemCommand,
      GetAutomationExecutionCommand,
      GetCalendarStateCommand,
      GetCommandInvocationCommand,
      GetConnectionStatusCommand,
      GetDefaultPatchBaselineCommand,
      GetDeployablePatchSnapshotForInstanceCommand,
      GetDocumentCommand,
      GetInventoryCommand,
      GetInventorySchemaCommand,
      GetMaintenanceWindowCommand,
      GetMaintenanceWindowExecutionCommand,
      GetMaintenanceWindowExecutionTaskCommand,
      GetMaintenanceWindowExecutionTaskInvocationCommand,
      GetMaintenanceWindowTaskCommand,
      GetOpsItemCommand,
      GetOpsMetadataCommand,
      GetOpsSummaryCommand,
      GetParameterCommand: GetParameterCommand2,
      GetParameterHistoryCommand,
      GetParametersCommand: GetParametersCommand2,
      GetParametersByPathCommand,
      GetPatchBaselineCommand,
      GetPatchBaselineForPatchGroupCommand,
      GetResourcePoliciesCommand,
      GetServiceSettingCommand,
      LabelParameterVersionCommand,
      ListAssociationsCommand,
      ListAssociationVersionsCommand,
      ListCommandInvocationsCommand,
      ListCommandsCommand,
      ListComplianceItemsCommand,
      ListComplianceSummariesCommand,
      ListDocumentMetadataHistoryCommand,
      ListDocumentsCommand,
      ListDocumentVersionsCommand,
      ListInventoryEntriesCommand,
      ListOpsItemEventsCommand,
      ListOpsItemRelatedItemsCommand,
      ListOpsMetadataCommand,
      ListResourceComplianceSummariesCommand,
      ListResourceDataSyncCommand,
      ListTagsForResourceCommand,
      ModifyDocumentPermissionCommand,
      PutComplianceItemsCommand,
      PutInventoryCommand,
      PutParameterCommand,
      PutResourcePolicyCommand,
      RegisterDefaultPatchBaselineCommand,
      RegisterPatchBaselineForPatchGroupCommand,
      RegisterTargetWithMaintenanceWindowCommand,
      RegisterTaskWithMaintenanceWindowCommand,
      RemoveTagsFromResourceCommand,
      ResetServiceSettingCommand,
      ResumeSessionCommand,
      SendAutomationSignalCommand,
      SendCommandCommand,
      StartAssociationsOnceCommand,
      StartAutomationExecutionCommand,
      StartChangeRequestExecutionCommand,
      StartSessionCommand,
      StopAutomationExecutionCommand,
      TerminateSessionCommand,
      UnlabelParameterVersionCommand,
      UpdateAssociationCommand,
      UpdateAssociationStatusCommand,
      UpdateDocumentCommand,
      UpdateDocumentDefaultVersionCommand,
      UpdateDocumentMetadataCommand,
      UpdateMaintenanceWindowCommand,
      UpdateMaintenanceWindowTargetCommand,
      UpdateMaintenanceWindowTaskCommand,
      UpdateManagedInstanceRoleCommand,
      UpdateOpsItemCommand,
      UpdateOpsMetadataCommand,
      UpdatePatchBaselineCommand,
      UpdateResourceDataSyncCommand,
      UpdateServiceSettingCommand
    };
    var _SSM = class _SSM extends SSMClient2 {
    };
    __name(_SSM, "SSM");
    var SSM = _SSM;
    (0, import_smithy_client5.createAggregatedClient)(commands, SSM);
    var paginateDescribeActivations = (0, import_core2.createPaginator)(SSMClient2, DescribeActivationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeAssociationExecutionTargets = (0, import_core2.createPaginator)(SSMClient2, DescribeAssociationExecutionTargetsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeAssociationExecutions = (0, import_core2.createPaginator)(SSMClient2, DescribeAssociationExecutionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeAutomationExecutions = (0, import_core2.createPaginator)(SSMClient2, DescribeAutomationExecutionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeAutomationStepExecutions = (0, import_core2.createPaginator)(SSMClient2, DescribeAutomationStepExecutionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeAvailablePatches = (0, import_core2.createPaginator)(SSMClient2, DescribeAvailablePatchesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeEffectiveInstanceAssociations = (0, import_core2.createPaginator)(SSMClient2, DescribeEffectiveInstanceAssociationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeEffectivePatchesForPatchBaseline = (0, import_core2.createPaginator)(SSMClient2, DescribeEffectivePatchesForPatchBaselineCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstanceAssociationsStatus = (0, import_core2.createPaginator)(SSMClient2, DescribeInstanceAssociationsStatusCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstanceInformation = (0, import_core2.createPaginator)(SSMClient2, DescribeInstanceInformationCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstancePatchStatesForPatchGroup = (0, import_core2.createPaginator)(SSMClient2, DescribeInstancePatchStatesForPatchGroupCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstancePatchStates = (0, import_core2.createPaginator)(SSMClient2, DescribeInstancePatchStatesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstancePatches = (0, import_core2.createPaginator)(SSMClient2, DescribeInstancePatchesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInstanceProperties = (0, import_core2.createPaginator)(SSMClient2, DescribeInstancePropertiesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeInventoryDeletions = (0, import_core2.createPaginator)(SSMClient2, DescribeInventoryDeletionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowExecutionTaskInvocations = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowExecutionTaskInvocationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowExecutionTasks = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowExecutionTasksCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowExecutions = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowExecutionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowSchedule = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowScheduleCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowTargets = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowTargetsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowTasks = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowTasksCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindowsForTarget = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowsForTargetCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeMaintenanceWindows = (0, import_core2.createPaginator)(SSMClient2, DescribeMaintenanceWindowsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeOpsItems = (0, import_core2.createPaginator)(SSMClient2, DescribeOpsItemsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeParameters = (0, import_core2.createPaginator)(SSMClient2, DescribeParametersCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribePatchBaselines = (0, import_core2.createPaginator)(SSMClient2, DescribePatchBaselinesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribePatchGroups = (0, import_core2.createPaginator)(SSMClient2, DescribePatchGroupsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribePatchProperties = (0, import_core2.createPaginator)(SSMClient2, DescribePatchPropertiesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeSessions = (0, import_core2.createPaginator)(SSMClient2, DescribeSessionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetInventory = (0, import_core2.createPaginator)(SSMClient2, GetInventoryCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetInventorySchema = (0, import_core2.createPaginator)(SSMClient2, GetInventorySchemaCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetOpsSummary = (0, import_core2.createPaginator)(SSMClient2, GetOpsSummaryCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetParameterHistory = (0, import_core2.createPaginator)(SSMClient2, GetParameterHistoryCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetParametersByPath2 = (0, import_core2.createPaginator)(SSMClient2, GetParametersByPathCommand, "NextToken", "NextToken", "MaxResults");
    var paginateGetResourcePolicies = (0, import_core2.createPaginator)(SSMClient2, GetResourcePoliciesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListAssociationVersions = (0, import_core2.createPaginator)(SSMClient2, ListAssociationVersionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListAssociations = (0, import_core2.createPaginator)(SSMClient2, ListAssociationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListCommandInvocations = (0, import_core2.createPaginator)(SSMClient2, ListCommandInvocationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListCommands = (0, import_core2.createPaginator)(SSMClient2, ListCommandsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListComplianceItems = (0, import_core2.createPaginator)(SSMClient2, ListComplianceItemsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListComplianceSummaries = (0, import_core2.createPaginator)(SSMClient2, ListComplianceSummariesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListDocumentVersions = (0, import_core2.createPaginator)(SSMClient2, ListDocumentVersionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListDocuments = (0, import_core2.createPaginator)(SSMClient2, ListDocumentsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListOpsItemEvents = (0, import_core2.createPaginator)(SSMClient2, ListOpsItemEventsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListOpsItemRelatedItems = (0, import_core2.createPaginator)(SSMClient2, ListOpsItemRelatedItemsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListOpsMetadata = (0, import_core2.createPaginator)(SSMClient2, ListOpsMetadataCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListResourceComplianceSummaries = (0, import_core2.createPaginator)(SSMClient2, ListResourceComplianceSummariesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListResourceDataSync = (0, import_core2.createPaginator)(SSMClient2, ListResourceDataSyncCommand, "NextToken", "NextToken", "MaxResults");
    var import_util_waiter = require_dist_cjs53();
    var checkState = /* @__PURE__ */ __name(async (client2, input) => {
      let reason;
      try {
        const result = await client2.send(new GetCommandInvocationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Pending") {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "InProgress") {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Delayed") {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Success") {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Cancelled") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "TimedOut") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Failed") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Cancelling") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForCommandExecuted = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    }, "waitForCommandExecuted");
    var waitUntilCommandExecuted = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilCommandExecuted");
  }
});

// ../../node_modules/@azure/abort-controller/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/@azure/abort-controller/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var listenersMap = /* @__PURE__ */ new WeakMap();
    var abortedMap = /* @__PURE__ */ new WeakMap();
    var AbortSignal = class _AbortSignal {
      constructor() {
        this.onabort = null;
        listenersMap.set(this, []);
        abortedMap.set(this, false);
      }
      /**
       * Status of whether aborted or not.
       *
       * @readonly
       */
      get aborted() {
        if (!abortedMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        return abortedMap.get(this);
      }
      /**
       * Creates a new AbortSignal instance that will never be aborted.
       *
       * @readonly
       */
      static get none() {
        return new _AbortSignal();
      }
      /**
       * Added new "abort" event listener, only support "abort" event.
       *
       * @param _type - Only support "abort" event
       * @param listener - The listener to be added
       */
      addEventListener(_type, listener) {
        if (!listenersMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        const listeners = listenersMap.get(this);
        listeners.push(listener);
      }
      /**
       * Remove "abort" event listener, only support "abort" event.
       *
       * @param _type - Only support "abort" event
       * @param listener - The listener to be removed
       */
      removeEventListener(_type, listener) {
        if (!listenersMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        const listeners = listenersMap.get(this);
        const index = listeners.indexOf(listener);
        if (index > -1) {
          listeners.splice(index, 1);
        }
      }
      /**
       * Dispatches a synthetic event to the AbortSignal.
       */
      dispatchEvent(_event) {
        throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
      }
    };
    function abortSignal(signal) {
      if (signal.aborted) {
        return;
      }
      if (signal.onabort) {
        signal.onabort.call(signal);
      }
      const listeners = listenersMap.get(signal);
      if (listeners) {
        listeners.slice().forEach((listener) => {
          listener.call(signal, { type: "abort" });
        });
      }
      abortedMap.set(signal, true);
    }
    var AbortError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
    var AbortController2 = class {
      // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
      constructor(parentSignals) {
        this._signal = new AbortSignal();
        if (!parentSignals) {
          return;
        }
        if (!Array.isArray(parentSignals)) {
          parentSignals = arguments;
        }
        for (const parentSignal of parentSignals) {
          if (parentSignal.aborted) {
            this.abort();
          } else {
            parentSignal.addEventListener("abort", () => {
              this.abort();
            });
          }
        }
      }
      /**
       * The AbortSignal associated with this controller that will signal aborted
       * when the abort method is called on this controller.
       *
       * @readonly
       */
      get signal() {
        return this._signal;
      }
      /**
       * Signal that any operations passed this controller's associated abort signal
       * to cancel any remaining work and throw an `AbortError`.
       */
      abort() {
        abortSignal(this._signal);
      }
      /**
       * Creates a new AbortSignal instance that will abort after the provided ms.
       * @param ms - Elapsed time in milliseconds to trigger an abort.
       */
      static timeout(ms) {
        const signal = new AbortSignal();
        const timer = setTimeout(abortSignal, ms, signal);
        if (typeof timer.unref === "function") {
          timer.unref();
        }
        return signal;
      }
    };
    exports.AbortController = AbortController2;
    exports.AbortError = AbortError;
    exports.AbortSignal = AbortSignal;
  }
});

// ../../node_modules/@azure/logger/dist/commonjs/log.js
var require_log = __commonJS({
  "../../node_modules/@azure/logger/dist/commonjs/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.log = log;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var node_os_1 = require("node:os");
    var node_util_1 = tslib_1.__importDefault(require("node:util"));
    var process2 = tslib_1.__importStar(require("node:process"));
    function log(message, ...args) {
      process2.stderr.write(`${node_util_1.default.format(message, ...args)}${node_os_1.EOL}`);
    }
  }
});

// ../../node_modules/@azure/logger/dist/commonjs/debug.js
var require_debug = __commonJS({
  "../../node_modules/@azure/logger/dist/commonjs/debug.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var log_js_1 = require_log();
    var debugEnvVariable = typeof process !== "undefined" && process.env && process.env.DEBUG || void 0;
    var enabledString;
    var enabledNamespaces = [];
    var skippedNamespaces = [];
    var debuggers = [];
    if (debugEnvVariable) {
      enable(debugEnvVariable);
    }
    var debugObj = Object.assign((namespace) => {
      return createDebugger(namespace);
    }, {
      enable,
      enabled,
      disable,
      log: log_js_1.log
    });
    function enable(namespaces) {
      enabledString = namespaces;
      enabledNamespaces = [];
      skippedNamespaces = [];
      const wildcard = /\*/g;
      const namespaceList = namespaces.split(",").map((ns) => ns.trim().replace(wildcard, ".*?"));
      for (const ns of namespaceList) {
        if (ns.startsWith("-")) {
          skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));
        } else {
          enabledNamespaces.push(new RegExp(`^${ns}$`));
        }
      }
      for (const instance of debuggers) {
        instance.enabled = enabled(instance.namespace);
      }
    }
    function enabled(namespace) {
      if (namespace.endsWith("*")) {
        return true;
      }
      for (const skipped of skippedNamespaces) {
        if (skipped.test(namespace)) {
          return false;
        }
      }
      for (const enabledNamespace of enabledNamespaces) {
        if (enabledNamespace.test(namespace)) {
          return true;
        }
      }
      return false;
    }
    function disable() {
      const result = enabledString || "";
      enable("");
      return result;
    }
    function createDebugger(namespace) {
      const newDebugger = Object.assign(debug, {
        enabled: enabled(namespace),
        destroy,
        log: debugObj.log,
        namespace,
        extend
      });
      function debug(...args) {
        if (!newDebugger.enabled) {
          return;
        }
        if (args.length > 0) {
          args[0] = `${namespace} ${args[0]}`;
        }
        newDebugger.log(...args);
      }
      debuggers.push(newDebugger);
      return newDebugger;
    }
    function destroy() {
      const index = debuggers.indexOf(this);
      if (index >= 0) {
        debuggers.splice(index, 1);
        return true;
      }
      return false;
    }
    function extend(namespace) {
      const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
      newDebugger.log = this.log;
      return newDebugger;
    }
    exports.default = debugObj;
  }
});

// ../../node_modules/@azure/logger/dist/commonjs/index.js
var require_commonjs = __commonJS({
  "../../node_modules/@azure/logger/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AzureLogger = void 0;
    exports.setLogLevel = setLogLevel;
    exports.getLogLevel = getLogLevel;
    exports.createClientLogger = createClientLogger;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var debug_js_1 = tslib_1.__importDefault(require_debug());
    var registeredLoggers = /* @__PURE__ */ new Set();
    var logLevelFromEnv = typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL || void 0;
    var azureLogLevel;
    exports.AzureLogger = (0, debug_js_1.default)("azure");
    exports.AzureLogger.log = (...args) => {
      debug_js_1.default.log(...args);
    };
    var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
    if (logLevelFromEnv) {
      if (isAzureLogLevel(logLevelFromEnv)) {
        setLogLevel(logLevelFromEnv);
      } else {
        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
      }
    }
    function setLogLevel(level) {
      if (level && !isAzureLogLevel(level)) {
        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
      }
      azureLogLevel = level;
      const enabledNamespaces = [];
      for (const logger2 of registeredLoggers) {
        if (shouldEnable(logger2)) {
          enabledNamespaces.push(logger2.namespace);
        }
      }
      debug_js_1.default.enable(enabledNamespaces.join(","));
    }
    function getLogLevel() {
      return azureLogLevel;
    }
    var levelMap = {
      verbose: 400,
      info: 300,
      warning: 200,
      error: 100
    };
    function createClientLogger(namespace) {
      const clientRootLogger = exports.AzureLogger.extend(namespace);
      patchLogMethod(exports.AzureLogger, clientRootLogger);
      return {
        error: createLogger(clientRootLogger, "error"),
        warning: createLogger(clientRootLogger, "warning"),
        info: createLogger(clientRootLogger, "info"),
        verbose: createLogger(clientRootLogger, "verbose")
      };
    }
    function patchLogMethod(parent, child) {
      child.log = (...args) => {
        parent.log(...args);
      };
    }
    function createLogger(parent, level) {
      const logger2 = Object.assign(parent.extend(level), {
        level
      });
      patchLogMethod(parent, logger2);
      if (shouldEnable(logger2)) {
        const enabledNamespaces = debug_js_1.default.disable();
        debug_js_1.default.enable(enabledNamespaces + "," + logger2.namespace);
      }
      registeredLoggers.add(logger2);
      return logger2;
    }
    function shouldEnable(logger2) {
      return Boolean(azureLogLevel && levelMap[logger2.level] <= levelMap[azureLogLevel]);
    }
    function isAzureLogLevel(logLevel) {
      return AZURE_LOG_LEVELS.includes(logLevel);
    }
  }
});

// ../../node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/commonjs/AbortError.js
var require_AbortError = __commonJS({
  "../../node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/commonjs/AbortError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbortError = void 0;
    var AbortError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
    exports.AbortError = AbortError;
  }
});

// ../../node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/commonjs/index.js
var require_commonjs2 = __commonJS({
  "../../node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbortError = void 0;
    var AbortError_js_1 = require_AbortError();
    Object.defineProperty(exports, "AbortError", { enumerable: true, get: function() {
      return AbortError_js_1.AbortError;
    } });
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js
var require_createAbortablePromise = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAbortablePromise = createAbortablePromise;
    var abort_controller_1 = require_commonjs2();
    function createAbortablePromise(buildPromise, options) {
      const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
      return new Promise((resolve, reject) => {
        function rejectOnAbort() {
          reject(new abort_controller_1.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
        }
        function removeListeners() {
          abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", onAbort);
        }
        function onAbort() {
          cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
          removeListeners();
          rejectOnAbort();
        }
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
          return rejectOnAbort();
        }
        try {
          buildPromise((x) => {
            removeListeners();
            resolve(x);
          }, (x) => {
            removeListeners();
            reject(x);
          });
        } catch (err) {
          reject(err);
        }
        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", onAbort);
      });
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/delay.js
var require_delay = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = delay;
    var createAbortablePromise_js_1 = require_createAbortablePromise();
    var StandardAbortMessage = "The delay was aborted.";
    function delay(timeInMs, options) {
      let token;
      const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
      return (0, createAbortablePromise_js_1.createAbortablePromise)((resolve) => {
        token = setTimeout(resolve, timeInMs);
      }, {
        cleanupBeforeAbort: () => clearTimeout(token),
        abortSignal,
        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage
      });
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/aborterUtils.js
var require_aborterUtils = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/aborterUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cancelablePromiseRace = cancelablePromiseRace;
    async function cancelablePromiseRace(abortablePromiseBuilders, options) {
      var _a, _b;
      const aborter = new AbortController();
      function abortHandler() {
        aborter.abort();
      }
      (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", abortHandler);
      try {
        return await Promise.race(abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })));
      } finally {
        aborter.abort();
        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener("abort", abortHandler);
      }
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/random.js
var require_random = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRandomIntegerInclusive = getRandomIntegerInclusive;
    function getRandomIntegerInclusive(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      const offset = Math.floor(Math.random() * (max - min + 1));
      return offset + min;
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/object.js
var require_object = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = isObject;
    function isObject(input) {
      return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/error.js
var require_error = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isError = isError;
    exports.getErrorMessage = getErrorMessage;
    var object_js_1 = require_object();
    function isError(e) {
      if ((0, object_js_1.isObject)(e)) {
        const hasName = typeof e.name === "string";
        const hasMessage = typeof e.message === "string";
        return hasName && hasMessage;
      }
      return false;
    }
    function getErrorMessage(e) {
      if (isError(e)) {
        return e.message;
      } else {
        let stringified;
        try {
          if (typeof e === "object" && e) {
            stringified = JSON.stringify(e);
          } else {
            stringified = String(e);
          }
        } catch (err) {
          stringified = "[unable to stringify input]";
        }
        return `Unknown error ${stringified}`;
      }
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/sha256.js
var require_sha256 = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeSha256Hmac = computeSha256Hmac;
    exports.computeSha256Hash = computeSha256Hash;
    var crypto_1 = require("crypto");
    async function computeSha256Hmac(key, stringToSign, encoding) {
      const decodedKey = Buffer.from(key, "base64");
      return (0, crypto_1.createHmac)("sha256", decodedKey).update(stringToSign).digest(encoding);
    }
    async function computeSha256Hash(content, encoding) {
      return (0, crypto_1.createHash)("sha256").update(content).digest(encoding);
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/typeGuards.js
var require_typeGuards = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/typeGuards.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isDefined = isDefined;
    exports.isObjectWithProperties = isObjectWithProperties;
    exports.objectHasProperty = objectHasProperty;
    function isDefined(thing) {
      return typeof thing !== "undefined" && thing !== null;
    }
    function isObjectWithProperties(thing, properties) {
      if (!isDefined(thing) || typeof thing !== "object") {
        return false;
      }
      for (const property of properties) {
        if (!objectHasProperty(thing, property)) {
          return false;
        }
      }
      return true;
    }
    function objectHasProperty(thing, property) {
      return isDefined(thing) && typeof thing === "object" && property in thing;
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/uuidUtils.js
var require_uuidUtils = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/uuidUtils.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomUUID = randomUUID;
    var crypto_1 = require("crypto");
    var uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === "function" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : crypto_1.randomUUID;
    function randomUUID() {
      return uuidFunction();
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/checkEnvironment.js
var require_checkEnvironment = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/checkEnvironment.js"(exports) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReactNative = exports.isNodeRuntime = exports.isNode = exports.isNodeLike = exports.isBun = exports.isDeno = exports.isWebWorker = exports.isBrowser = void 0;
    exports.isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    exports.isWebWorker = typeof self === "object" && typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
    exports.isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    exports.isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
    exports.isNodeLike = typeof globalThis.process !== "undefined" && Boolean(globalThis.process.version) && Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);
    exports.isNode = exports.isNodeLike;
    exports.isNodeRuntime = exports.isNodeLike && !exports.isBun && !exports.isDeno;
    exports.isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/bytesEncoding.js
var require_bytesEncoding = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/bytesEncoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint8ArrayToString = uint8ArrayToString;
    exports.stringToUint8Array = stringToUint8Array;
    function uint8ArrayToString(bytes, format) {
      return Buffer.from(bytes).toString(format);
    }
    function stringToUint8Array(value, format) {
      return Buffer.from(value, format);
    }
  }
});

// ../../node_modules/@azure/core-util/dist/commonjs/index.js
var require_commonjs3 = __commonJS({
  "../../node_modules/@azure/core-util/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringToUint8Array = exports.uint8ArrayToString = exports.isWebWorker = exports.isReactNative = exports.isDeno = exports.isNodeRuntime = exports.isNodeLike = exports.isNode = exports.isBun = exports.isBrowser = exports.randomUUID = exports.objectHasProperty = exports.isObjectWithProperties = exports.isDefined = exports.computeSha256Hmac = exports.computeSha256Hash = exports.getErrorMessage = exports.isError = exports.isObject = exports.getRandomIntegerInclusive = exports.createAbortablePromise = exports.cancelablePromiseRace = exports.delay = void 0;
    var delay_js_1 = require_delay();
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return delay_js_1.delay;
    } });
    var aborterUtils_js_1 = require_aborterUtils();
    Object.defineProperty(exports, "cancelablePromiseRace", { enumerable: true, get: function() {
      return aborterUtils_js_1.cancelablePromiseRace;
    } });
    var createAbortablePromise_js_1 = require_createAbortablePromise();
    Object.defineProperty(exports, "createAbortablePromise", { enumerable: true, get: function() {
      return createAbortablePromise_js_1.createAbortablePromise;
    } });
    var random_js_1 = require_random();
    Object.defineProperty(exports, "getRandomIntegerInclusive", { enumerable: true, get: function() {
      return random_js_1.getRandomIntegerInclusive;
    } });
    var object_js_1 = require_object();
    Object.defineProperty(exports, "isObject", { enumerable: true, get: function() {
      return object_js_1.isObject;
    } });
    var error_js_1 = require_error();
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return error_js_1.isError;
    } });
    Object.defineProperty(exports, "getErrorMessage", { enumerable: true, get: function() {
      return error_js_1.getErrorMessage;
    } });
    var sha256_js_1 = require_sha256();
    Object.defineProperty(exports, "computeSha256Hash", { enumerable: true, get: function() {
      return sha256_js_1.computeSha256Hash;
    } });
    Object.defineProperty(exports, "computeSha256Hmac", { enumerable: true, get: function() {
      return sha256_js_1.computeSha256Hmac;
    } });
    var typeGuards_js_1 = require_typeGuards();
    Object.defineProperty(exports, "isDefined", { enumerable: true, get: function() {
      return typeGuards_js_1.isDefined;
    } });
    Object.defineProperty(exports, "isObjectWithProperties", { enumerable: true, get: function() {
      return typeGuards_js_1.isObjectWithProperties;
    } });
    Object.defineProperty(exports, "objectHasProperty", { enumerable: true, get: function() {
      return typeGuards_js_1.objectHasProperty;
    } });
    var uuidUtils_js_1 = require_uuidUtils();
    Object.defineProperty(exports, "randomUUID", { enumerable: true, get: function() {
      return uuidUtils_js_1.randomUUID;
    } });
    var checkEnvironment_js_1 = require_checkEnvironment();
    Object.defineProperty(exports, "isBrowser", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isBrowser;
    } });
    Object.defineProperty(exports, "isBun", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isBun;
    } });
    Object.defineProperty(exports, "isNode", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isNode;
    } });
    Object.defineProperty(exports, "isNodeLike", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isNodeLike;
    } });
    Object.defineProperty(exports, "isNodeRuntime", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isNodeRuntime;
    } });
    Object.defineProperty(exports, "isDeno", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isDeno;
    } });
    Object.defineProperty(exports, "isReactNative", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isReactNative;
    } });
    Object.defineProperty(exports, "isWebWorker", { enumerable: true, get: function() {
      return checkEnvironment_js_1.isWebWorker;
    } });
    var bytesEncoding_js_1 = require_bytesEncoding();
    Object.defineProperty(exports, "uint8ArrayToString", { enumerable: true, get: function() {
      return bytesEncoding_js_1.uint8ArrayToString;
    } });
    Object.defineProperty(exports, "stringToUint8Array", { enumerable: true, get: function() {
      return bytesEncoding_js_1.stringToUint8Array;
    } });
  }
});

// ../../node_modules/@azure/core-amqp/node_modules/@azure/abort-controller/dist/commonjs/AbortError.js
var require_AbortError2 = __commonJS({
  "../../node_modules/@azure/core-amqp/node_modules/@azure/abort-controller/dist/commonjs/AbortError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbortError = void 0;
    var AbortError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
    exports.AbortError = AbortError;
  }
});

// ../../node_modules/@azure/core-amqp/node_modules/@azure/abort-controller/dist/commonjs/index.js
var require_commonjs4 = __commonJS({
  "../../node_modules/@azure/core-amqp/node_modules/@azure/abort-controller/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbortError = void 0;
    var AbortError_js_1 = require_AbortError2();
    Object.defineProperty(exports, "AbortError", { enumerable: true, get: function() {
      return AbortError_js_1.AbortError;
    } });
  }
});

// ../../node_modules/rhea/lib/errors.js
var require_errors = __commonJS({
  "../../node_modules/rhea/lib/errors.js"(exports, module2) {
    "use strict";
    var util = require("util");
    function ProtocolError(message) {
      Error.captureStackTrace(this, ProtocolError);
      this.message = message;
      this.name = "ProtocolError";
    }
    util.inherits(ProtocolError, Error);
    function TypeError2(message) {
      Error.captureStackTrace(this, TypeError2);
      this.message = message;
      this.name = "TypeError";
    }
    util.inherits(TypeError2, ProtocolError);
    function ConnectionError(message, condition, connection) {
      Error.captureStackTrace(this, ConnectionError);
      this.message = message;
      this.name = "ConnectionError";
      this.condition = condition;
      this.description = message;
      Object.defineProperty(this, "connection", { value: connection });
    }
    util.inherits(ConnectionError, Error);
    ConnectionError.prototype.toJSON = function() {
      return {
        type: this.name,
        code: this.condition,
        message: this.description
      };
    };
    module2.exports = {
      ProtocolError,
      TypeError: TypeError2,
      ConnectionError
    };
  }
});

// ../../node_modules/rhea/lib/util.js
var require_util2 = __commonJS({
  "../../node_modules/rhea/lib/util.js"(exports, module2) {
    "use strict";
    var errors = require_errors();
    var util = {};
    util.allocate_buffer = function(size) {
      return Buffer.alloc ? Buffer.alloc(size) : new Buffer(size);
    };
    util.generate_uuid = function() {
      return util.uuid_to_string(util.uuid4());
    };
    util.uuid4 = function() {
      var bytes = util.allocate_buffer(16);
      for (var i = 0; i < bytes.length; i++) {
        bytes[i] = Math.random() * 255 | 0;
      }
      bytes[7] &= 15;
      bytes[7] |= 64;
      bytes[8] &= 63;
      bytes[8] |= 128;
      return bytes;
    };
    util.uuid_to_string = function(buffer) {
      if (buffer.length === 16) {
        var chunks = [buffer.slice(0, 4), buffer.slice(4, 6), buffer.slice(6, 8), buffer.slice(8, 10), buffer.slice(10, 16)];
        return chunks.map(function(b) {
          return b.toString("hex");
        }).join("-");
      } else {
        throw new errors.TypeError("Not a UUID, expecting 16 byte buffer");
      }
    };
    var parse_uuid = /^([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/;
    util.string_to_uuid = function(uuid_string) {
      var parts = parse_uuid.exec(uuid_string.toLowerCase());
      if (parts) {
        return Buffer.from(parts.slice(1).join(""), "hex");
      } else {
        throw new errors.TypeError("Not a valid UUID string: " + uuid_string);
      }
    };
    util.clone = function(o) {
      var copy = Object.create(o.prototype || {});
      var names = Object.getOwnPropertyNames(o);
      for (var i = 0; i < names.length; i++) {
        var key = names[i];
        copy[key] = o[key];
      }
      return copy;
    };
    util.and = function(f, g) {
      if (g === void 0)
        return f;
      return function(o) {
        return f(o) && g(o);
      };
    };
    util.is_sender = function(o) {
      return o.is_sender();
    };
    util.is_receiver = function(o) {
      return o.is_receiver();
    };
    util.sender_filter = function(filter) {
      return util.and(util.is_sender, filter);
    };
    util.receiver_filter = function(filter) {
      return util.and(util.is_receiver, filter);
    };
    util.is_defined = function(field) {
      return field !== void 0 && field !== null;
    };
    module2.exports = util;
  }
});

// ../../node_modules/rhea/lib/types.js
var require_types = __commonJS({
  "../../node_modules/rhea/lib/types.js"(exports, module2) {
    "use strict";
    var errors = require_errors();
    var util = require_util2();
    var CAT_FIXED = 1;
    var CAT_VARIABLE = 2;
    var CAT_COMPOUND = 3;
    var CAT_ARRAY = 4;
    function Typed(type, value, code, descriptor) {
      this.type = type;
      this.value = value;
      if (code) {
        this.array_constructor = { "typecode": code };
        if (descriptor) {
          this.array_constructor.descriptor = descriptor;
        }
      }
    }
    Typed.prototype.toString = function() {
      return this.value ? this.value.toString() : null;
    };
    Typed.prototype.toLocaleString = function() {
      return this.value ? this.value.toLocaleString() : null;
    };
    Typed.prototype.valueOf = function() {
      return this.value;
    };
    Typed.prototype.toJSON = function() {
      return this.value && this.value.toJSON ? this.value.toJSON() : this.value;
    };
    Typed.prototype.toRheaTyped = function() {
      return this;
    };
    function TypeDesc(name, typecode, props, empty_value) {
      this.name = name;
      this.typecode = typecode;
      var subcategory = typecode >>> 4;
      switch (subcategory) {
        case 4:
          this.width = 0;
          this.category = CAT_FIXED;
          break;
        case 5:
          this.width = 1;
          this.category = CAT_FIXED;
          break;
        case 6:
          this.width = 2;
          this.category = CAT_FIXED;
          break;
        case 7:
          this.width = 4;
          this.category = CAT_FIXED;
          break;
        case 8:
          this.width = 8;
          this.category = CAT_FIXED;
          break;
        case 9:
          this.width = 16;
          this.category = CAT_FIXED;
          break;
        case 10:
          this.width = 1;
          this.category = CAT_VARIABLE;
          break;
        case 11:
          this.width = 4;
          this.category = CAT_VARIABLE;
          break;
        case 12:
          this.width = 1;
          this.category = CAT_COMPOUND;
          break;
        case 13:
          this.width = 4;
          this.category = CAT_COMPOUND;
          break;
        case 14:
          this.width = 1;
          this.category = CAT_ARRAY;
          break;
        case 15:
          this.width = 4;
          this.category = CAT_ARRAY;
          break;
        default:
          break;
      }
      if (props) {
        if (props.read) {
          this.read = props.read;
        }
        if (props.write) {
          this.write = props.write;
        }
        if (props.encoding) {
          this.encoding = props.encoding;
        }
      }
      var t = this;
      if (subcategory === 4) {
        this.create = function() {
          return new Typed(t, empty_value);
        };
      } else if (subcategory === 14 || subcategory === 15) {
        this.create = function(v, code, descriptor) {
          return new Typed(t, v, code, descriptor);
        };
      } else {
        this.create = function(v) {
          return new Typed(t, v);
        };
      }
    }
    TypeDesc.prototype.toString = function() {
      return this.name + "#" + hex(this.typecode);
    };
    function hex(i) {
      return Number(i).toString(16);
    }
    var types = { "by_code": {} };
    Object.defineProperty(types, "MAX_UINT", { value: 4294967295, writable: false, configurable: false });
    Object.defineProperty(types, "MAX_USHORT", { value: 65535, writable: false, configurable: false });
    function define_type(name, typecode, annotations, empty_value) {
      var t = new TypeDesc(name, typecode, annotations, empty_value);
      t.create.typecode = t.typecode;
      types.by_code[t.typecode] = t;
      types[name] = t.create;
    }
    function buffer_uint8_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readUInt8(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeUInt8(value, offset);
        }
      };
    }
    function buffer_uint16be_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readUInt16BE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeUInt16BE(value, offset);
        }
      };
    }
    function buffer_uint32be_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readUInt32BE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeUInt32BE(value, offset);
        }
      };
    }
    function buffer_int8_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readInt8(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeInt8(value, offset);
        }
      };
    }
    function buffer_int16be_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readInt16BE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeInt16BE(value, offset);
        }
      };
    }
    function buffer_int32be_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readInt32BE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeInt32BE(value, offset);
        }
      };
    }
    function buffer_floatbe_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readFloatBE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeFloatBE(value, offset);
        }
      };
    }
    function buffer_doublebe_ops() {
      return {
        "read": function(buffer, offset) {
          return buffer.readDoubleBE(offset);
        },
        "write": function(buffer, value, offset) {
          buffer.writeDoubleBE(value, offset);
        }
      };
    }
    var MAX_UINT = 4294967296;
    var MIN_INT = -2147483647;
    function write_ulong(buffer, value, offset) {
      if (typeof value === "number" || value instanceof Number) {
        var hi = Math.floor(value / MAX_UINT);
        var lo = value % MAX_UINT;
        buffer.writeUInt32BE(hi, offset);
        buffer.writeUInt32BE(lo, offset + 4);
      } else {
        value.copy(buffer, offset);
      }
    }
    function read_ulong(buffer, offset) {
      var hi = buffer.readUInt32BE(offset);
      var lo = buffer.readUInt32BE(offset + 4);
      if (hi < 2097153) {
        return hi * MAX_UINT + lo;
      } else {
        return buffer.slice(offset, offset + 8);
      }
    }
    function write_long(buffer, value, offset) {
      if (typeof value === "number" || value instanceof Number) {
        var abs = Math.abs(value);
        var hi = Math.floor(abs / MAX_UINT);
        var lo = abs % MAX_UINT;
        buffer.writeInt32BE(hi, offset);
        buffer.writeUInt32BE(lo, offset + 4);
        if (value < 0) {
          var carry = 1;
          for (var i = 0; i < 8; i++) {
            var index = offset + (7 - i);
            var v = (buffer[index] ^ 255) + carry;
            buffer[index] = v & 255;
            carry = v >> 8;
          }
        }
      } else {
        value.copy(buffer, offset);
      }
    }
    function write_timestamp(buffer, value, offset) {
      if (typeof value === "object" && value !== null && typeof value.getTime === "function") {
        value = value.getTime();
      }
      return write_long(buffer, value, offset);
    }
    function read_long(buffer, offset) {
      var hi = buffer.readInt32BE(offset);
      var lo = buffer.readUInt32BE(offset + 4);
      if (hi < 2097153 && hi > -2097153) {
        return hi * MAX_UINT + lo;
      } else {
        return buffer.slice(offset, offset + 8);
      }
    }
    function read_timestamp(buffer, offset) {
      const l = read_long(buffer, offset);
      return new Date(l);
    }
    define_type("Null", 64, void 0, null);
    define_type("Boolean", 86, buffer_uint8_ops());
    define_type("True", 65, void 0, true);
    define_type("False", 66, void 0, false);
    define_type("Ubyte", 80, buffer_uint8_ops());
    define_type("Ushort", 96, buffer_uint16be_ops());
    define_type("Uint", 112, buffer_uint32be_ops());
    define_type("SmallUint", 82, buffer_uint8_ops());
    define_type("Uint0", 67, void 0, 0);
    define_type("Ulong", 128, { "write": write_ulong, "read": read_ulong });
    define_type("SmallUlong", 83, buffer_uint8_ops());
    define_type("Ulong0", 68, void 0, 0);
    define_type("Byte", 81, buffer_int8_ops());
    define_type("Short", 97, buffer_int16be_ops());
    define_type("Int", 113, buffer_int32be_ops());
    define_type("SmallInt", 84, buffer_int8_ops());
    define_type("Long", 129, { "write": write_long, "read": read_long });
    define_type("SmallLong", 85, buffer_int8_ops());
    define_type("Float", 114, buffer_floatbe_ops());
    define_type("Double", 130, buffer_doublebe_ops());
    define_type("Decimal32", 116);
    define_type("Decimal64", 132);
    define_type("Decimal128", 148);
    define_type("CharUTF32", 115, buffer_uint32be_ops());
    define_type("Timestamp", 131, { "write": write_timestamp, "read": read_timestamp });
    define_type("Uuid", 152);
    define_type("Vbin8", 160);
    define_type("Vbin32", 176);
    define_type("Str8", 161, { "encoding": "utf8" });
    define_type("Str32", 177, { "encoding": "utf8" });
    define_type("Sym8", 163, { "encoding": "ascii" });
    define_type("Sym32", 179, { "encoding": "ascii" });
    define_type("List0", 69, void 0, []);
    define_type("List8", 192);
    define_type("List32", 208);
    define_type("Map8", 193);
    define_type("Map32", 209);
    define_type("Array8", 224);
    define_type("Array32", 240);
    function is_one_of(o, typelist) {
      for (var i = 0; i < typelist.length; i++) {
        if (o.type.typecode === typelist[i].typecode)
          return true;
      }
      return false;
    }
    function buffer_zero(b, len, neg) {
      for (var i = 0; i < len && i < b.length; i++) {
        if (b[i] !== (neg ? 255 : 0))
          return false;
      }
      return true;
    }
    types.is_ulong = function(o) {
      return is_one_of(o, [types.Ulong, types.Ulong0, types.SmallUlong]);
    };
    types.is_string = function(o) {
      return is_one_of(o, [types.Str8, types.Str32]);
    };
    types.is_symbol = function(o) {
      return is_one_of(o, [types.Sym8, types.Sym32]);
    };
    types.is_list = function(o) {
      return is_one_of(o, [types.List0, types.List8, types.List32]);
    };
    types.is_map = function(o) {
      return is_one_of(o, [types.Map8, types.Map32]);
    };
    types.wrap_boolean = function(v) {
      return v ? types.True() : types.False();
    };
    types.wrap_ulong = function(l) {
      if (Buffer.isBuffer(l)) {
        if (buffer_zero(l, 8, false))
          return types.Ulong0();
        return buffer_zero(l, 7, false) ? types.SmallUlong(l[7]) : types.Ulong(l);
      } else {
        if (l === 0)
          return types.Ulong0();
        else
          return l > 255 ? types.Ulong(l) : types.SmallUlong(l);
      }
    };
    types.wrap_uint = function(l) {
      if (l === 0)
        return types.Uint0();
      else
        return l > 255 ? types.Uint(l) : types.SmallUint(l);
    };
    types.wrap_ushort = function(l) {
      return types.Ushort(l);
    };
    types.wrap_ubyte = function(l) {
      return types.Ubyte(l);
    };
    types.wrap_long = function(l) {
      if (Buffer.isBuffer(l)) {
        var negFlag = (l[0] & 128) !== 0;
        if (buffer_zero(l, 7, negFlag) && (l[7] & 128) === (negFlag ? 128 : 0)) {
          return types.SmallLong(negFlag ? -((l[7] ^ 255) + 1) : l[7]);
        }
        return types.Long(l);
      } else {
        return l > 127 || l < -128 ? types.Long(l) : types.SmallLong(l);
      }
    };
    types.wrap_int = function(l) {
      return l > 127 || l < -128 ? types.Int(l) : types.SmallInt(l);
    };
    types.wrap_short = function(l) {
      return types.Short(l);
    };
    types.wrap_byte = function(l) {
      return types.Byte(l);
    };
    types.wrap_float = function(l) {
      return types.Float(l);
    };
    types.wrap_double = function(l) {
      return types.Double(l);
    };
    types.wrap_timestamp = function(l) {
      return types.Timestamp(l);
    };
    types.wrap_char = function(v) {
      return types.CharUTF32(v);
    };
    types.wrap_uuid = function(v) {
      return types.Uuid(v);
    };
    types.wrap_binary = function(s) {
      return s.length > 255 ? types.Vbin32(s) : types.Vbin8(s);
    };
    types.wrap_string = function(s) {
      return Buffer.byteLength(s) > 255 ? types.Str32(s) : types.Str8(s);
    };
    types.wrap_symbol = function(s) {
      return Buffer.byteLength(s) > 255 ? types.Sym32(s) : types.Sym8(s);
    };
    types.wrap_list = function(l) {
      if (l.length === 0)
        return types.List0();
      var items = l.map(types.wrap);
      return types.List32(items);
    };
    types.wrap_set_as_list = function(l) {
      if (l.size === 0)
        return types.List0();
      var items = Array.from(l, types.wrap);
      return types.List32(items);
    };
    types.wrap_map = function(m, key_wrapper) {
      var items = [];
      for (var k in m) {
        items.push(key_wrapper ? key_wrapper(k) : types.wrap(k));
        items.push(types.wrap(m[k]));
      }
      return types.Map32(items);
    };
    types.wrap_map_as_map = function(m) {
      var items = [];
      for (var [k, v] of m) {
        items.push(types.wrap(k));
        items.push(types.wrap(v));
      }
      return types.Map32(items);
    };
    types.wrap_symbolic_map = function(m) {
      return types.wrap_map(m, types.wrap_symbol);
    };
    types.wrap_array = function(l, code, descriptors) {
      if (code) {
        return types.Array32(l, code, descriptors);
      } else {
        console.trace("An array must specify a type for its elements");
        throw new errors.TypeError("An array must specify a type for its elements");
      }
    };
    types.wrap = function(o) {
      var t = typeof o;
      if (t === "object" && o !== null && typeof o.toRheaTyped === "function") {
        return o.toRheaTyped();
      } else if (t === "string") {
        return types.wrap_string(o);
      } else if (t === "boolean") {
        return o ? types.True() : types.False();
      } else if (t === "number" || o instanceof Number) {
        if (isNaN(o)) {
          return types.Null();
        } else if (Math.floor(o) - o !== 0) {
          return types.Double(o);
        } else if (o > 0) {
          if (o < MAX_UINT) {
            return types.wrap_uint(o);
          } else {
            return types.wrap_ulong(o);
          }
        } else {
          if (o > MIN_INT) {
            return types.wrap_int(o);
          } else {
            return types.wrap_long(o);
          }
        }
      } else if (o instanceof Date) {
        return types.wrap_timestamp(o.getTime());
      } else if (o instanceof Buffer || o instanceof Uint8Array) {
        return types.wrap_binary(o);
      } else if (t === "undefined" || o === null) {
        return types.Null();
      } else if (Array.isArray(o)) {
        return types.wrap_list(o);
      } else if (o instanceof Map) {
        return types.wrap_map_as_map(o);
      } else if (o instanceof Set) {
        return types.wrap_set_as_list(o);
      } else {
        return types.wrap_map(o);
      }
    };
    types.wrap_described = function(value, descriptor) {
      var result = types.wrap(value);
      if (descriptor) {
        if (typeof descriptor === "string") {
          result = types.described(types.wrap_symbol(descriptor), result);
        } else if (typeof descriptor === "number" || descriptor instanceof Number) {
          result = types.described(types.wrap_ulong(descriptor), result);
        }
      }
      return result;
    };
    types.wrap_message_id = function(o) {
      var t = typeof o;
      if (t === "string") {
        return types.wrap_string(o);
      } else if (t === "number" || o instanceof Number) {
        return types.wrap_ulong(o);
      } else if (Buffer.isBuffer(o)) {
        return types.wrap_uuid(o);
      } else if (o instanceof Typed) {
        return o;
      } else {
        throw new errors.TypeError("invalid message id:" + o);
      }
    };
    function mapify(elements) {
      var result = {};
      for (var i = 0; i + 1 < elements.length; ) {
        result[elements[i++]] = elements[i++];
      }
      return result;
    }
    var by_descriptor = {};
    types.unwrap_map_simple = function(o) {
      return mapify(o.value.map(function(i) {
        return types.unwrap(i, true);
      }));
    };
    types.unwrap = function(o, leave_described) {
      if (o instanceof Typed) {
        if (o.descriptor) {
          var c = by_descriptor[o.descriptor.value];
          if (c) {
            return new c(o.value);
          } else if (leave_described) {
            return o;
          }
        }
        var u = types.unwrap(o.value, true);
        return types.is_map(o) ? mapify(u) : u;
      } else if (Array.isArray(o)) {
        return o.map(function(i) {
          return types.unwrap(i, true);
        });
      } else {
        return o;
      }
    };
    types.described_nc = function(descriptor, o) {
      if (descriptor.length) {
        o.descriptor = descriptor.shift();
        return types.described(descriptor, o);
      } else {
        o.descriptor = descriptor;
        return o;
      }
    };
    types.described = types.described_nc;
    function get_type(code) {
      var type = types.by_code[code];
      if (!type) {
        throw new errors.TypeError("Unrecognised typecode: " + hex(code));
      }
      return type;
    }
    types.Reader = function(buffer) {
      this.buffer = buffer;
      this.position = 0;
    };
    types.Reader.prototype.read_typecode = function() {
      return this.read_uint(1);
    };
    types.Reader.prototype.read_uint = function(width) {
      var current = this.position;
      this.position += width;
      if (width === 1) {
        return this.buffer.readUInt8(current);
      } else if (width === 2) {
        return this.buffer.readUInt16BE(current);
      } else if (width === 4) {
        return this.buffer.readUInt32BE(current);
      } else {
        throw new errors.TypeError("Unexpected width for uint " + width);
      }
    };
    types.Reader.prototype.read_fixed_width = function(type) {
      var current = this.position;
      this.position += type.width;
      if (type.read) {
        return type.read(this.buffer, current);
      } else {
        return this.buffer.slice(current, this.position);
      }
    };
    types.Reader.prototype.read_variable_width = function(type) {
      var size = this.read_uint(type.width);
      var slice = this.read_bytes(size);
      return type.encoding ? slice.toString(type.encoding) : slice;
    };
    types.Reader.prototype.read = function() {
      var constructor = this.read_constructor();
      var value = this.read_value(get_type(constructor.typecode));
      return constructor.descriptor ? types.described_nc(constructor.descriptor, value) : value;
    };
    types.Reader.prototype.read_constructor = function(descriptors) {
      var code = this.read_typecode();
      if (code === 0) {
        if (descriptors === void 0) {
          descriptors = [];
        }
        descriptors.push(this.read());
        return this.read_constructor(descriptors);
      } else {
        if (descriptors === void 0) {
          return { "typecode": code };
        } else if (descriptors.length === 1) {
          return { "typecode": code, "descriptor": descriptors[0] };
        } else {
          return { "typecode": code, "descriptor": descriptors[0], "descriptors": descriptors };
        }
      }
    };
    types.Reader.prototype.read_value = function(type) {
      if (type.width === 0) {
        return type.create();
      } else if (type.category === CAT_FIXED) {
        return type.create(this.read_fixed_width(type));
      } else if (type.category === CAT_VARIABLE) {
        return type.create(this.read_variable_width(type));
      } else if (type.category === CAT_COMPOUND) {
        return this.read_compound(type);
      } else if (type.category === CAT_ARRAY) {
        return this.read_array(type);
      } else {
        throw new errors.TypeError("Invalid category for type: " + type);
      }
    };
    types.Reader.prototype.read_array_items = function(n, type) {
      var items = [];
      while (items.length < n) {
        items.push(this.read_value(type));
      }
      return items;
    };
    types.Reader.prototype.read_n = function(n) {
      var items = new Array(n);
      for (var i = 0; i < n; i++) {
        items[i] = this.read();
      }
      return items;
    };
    types.Reader.prototype.read_size_count = function(width) {
      return { "size": this.read_uint(width), "count": this.read_uint(width) };
    };
    types.Reader.prototype.read_compound = function(type) {
      var limits = this.read_size_count(type.width);
      return type.create(this.read_n(limits.count));
    };
    types.Reader.prototype.read_array = function(type) {
      var limits = this.read_size_count(type.width);
      var constructor = this.read_constructor();
      return type.create(this.read_array_items(limits.count, get_type(constructor.typecode)), constructor.typecode, constructor.descriptor);
    };
    types.Reader.prototype.toString = function() {
      var s = "buffer@" + this.position;
      if (this.position)
        s += ": ";
      for (var i = this.position; i < this.buffer.length; i++) {
        if (i > 0)
          s += ",";
        s += "0x" + Number(this.buffer[i]).toString(16);
      }
      return s;
    };
    types.Reader.prototype.reset = function() {
      this.position = 0;
    };
    types.Reader.prototype.skip = function(bytes) {
      this.position += bytes;
    };
    types.Reader.prototype.read_bytes = function(bytes) {
      var current = this.position;
      this.position += bytes;
      return this.buffer.slice(current, this.position);
    };
    types.Reader.prototype.remaining = function() {
      return this.buffer.length - this.position;
    };
    types.Writer = function(buffer) {
      this.buffer = buffer ? buffer : util.allocate_buffer(1024);
      this.position = 0;
    };
    types.Writer.prototype.toBuffer = function() {
      return this.buffer.slice(0, this.position);
    };
    function max(a, b) {
      return a > b ? a : b;
    }
    types.Writer.prototype.ensure = function(length) {
      if (this.buffer.length < length) {
        var bigger = util.allocate_buffer(max(this.buffer.length * 2, length));
        this.buffer.copy(bigger);
        this.buffer = bigger;
      }
    };
    types.Writer.prototype.write_typecode = function(code) {
      this.write_uint(code, 1);
    };
    types.Writer.prototype.write_uint = function(value, width) {
      var current = this.position;
      this.ensure(this.position + width);
      this.position += width;
      if (width === 1) {
        return this.buffer.writeUInt8(value, current);
      } else if (width === 2) {
        return this.buffer.writeUInt16BE(value, current);
      } else if (width === 4) {
        return this.buffer.writeUInt32BE(value, current);
      } else {
        throw new errors.TypeError("Unexpected width for uint " + width);
      }
    };
    types.Writer.prototype.write_fixed_width = function(type, value) {
      var current = this.position;
      this.ensure(this.position + type.width);
      this.position += type.width;
      if (type.write) {
        type.write(this.buffer, value, current);
      } else if (value.copy) {
        value.copy(this.buffer, current);
      } else {
        throw new errors.TypeError("Cannot handle write for " + type);
      }
    };
    types.Writer.prototype.write_variable_width = function(type, value) {
      var source = type.encoding ? Buffer.from(value, type.encoding) : Buffer.from(value);
      this.write_uint(source.length, type.width);
      this.write_bytes(source);
    };
    types.Writer.prototype.write_bytes = function(source) {
      var current = this.position;
      this.ensure(this.position + source.length);
      this.position += source.length;
      source.copy(this.buffer, current);
    };
    types.Writer.prototype.write_constructor = function(typecode, descriptor) {
      if (descriptor) {
        this.write_typecode(0);
        this.write(descriptor);
      }
      this.write_typecode(typecode);
    };
    types.Writer.prototype.write = function(o) {
      if (o.type === void 0) {
        if (o.described) {
          this.write(o.described());
        } else {
          throw new errors.TypeError("Cannot write " + JSON.stringify(o));
        }
      } else {
        this.write_constructor(o.type.typecode, o.descriptor);
        this.write_value(o.type, o.value, o.array_constructor);
      }
    };
    types.Writer.prototype.write_value = function(type, value, constructor) {
      if (type.width === 0) {
        return;
      } else if (type.category === CAT_FIXED) {
        this.write_fixed_width(type, value);
      } else if (type.category === CAT_VARIABLE) {
        this.write_variable_width(type, value);
      } else if (type.category === CAT_COMPOUND) {
        this.write_compound(type, value);
      } else if (type.category === CAT_ARRAY) {
        this.write_array(type, value, constructor);
      } else {
        throw new errors.TypeError("Invalid category " + type.category + " for type: " + type);
      }
    };
    types.Writer.prototype.backfill_size = function(width, saved) {
      var gap = this.position - saved;
      this.position = saved;
      this.write_uint(gap - width, width);
      this.position += gap - width;
    };
    types.Writer.prototype.write_compound = function(type, value) {
      var saved = this.position;
      this.position += type.width;
      this.write_uint(value.length, type.width);
      for (var i = 0; i < value.length; i++) {
        if (value[i] === void 0 || value[i] === null) {
          this.write(types.Null());
        } else {
          this.write(value[i]);
        }
      }
      this.backfill_size(type.width, saved);
    };
    types.Writer.prototype.write_array = function(type, value, constructor) {
      var saved = this.position;
      this.position += type.width;
      this.write_uint(value.length, type.width);
      this.write_constructor(constructor.typecode, constructor.descriptor);
      var ctype = get_type(constructor.typecode);
      for (var i = 0; i < value.length; i++) {
        this.write_value(ctype, value[i]);
      }
      this.backfill_size(type.width, saved);
    };
    types.Writer.prototype.toString = function() {
      var s = "buffer@" + this.position;
      if (this.position)
        s += ": ";
      for (var i = 0; i < this.position; i++) {
        if (i > 0)
          s += ",";
        s += ("00" + Number(this.buffer[i]).toString(16)).slice(-2);
      }
      return s;
    };
    types.Writer.prototype.skip = function(bytes) {
      this.ensure(this.position + bytes);
      this.position += bytes;
    };
    types.Writer.prototype.clear = function() {
      this.buffer.fill(0);
      this.position = 0;
    };
    types.Writer.prototype.remaining = function() {
      return this.buffer.length - this.position;
    };
    function get_constructor(typename) {
      if (typename === "symbol") {
        return { typecode: types.Sym8.typecode };
      }
      throw new errors.TypeError("TODO: Array of type " + typename + " not yet supported");
    }
    function wrap_field(definition, instance) {
      if (instance !== void 0 && instance !== null) {
        if (Array.isArray(instance)) {
          if (!definition.multiple) {
            throw new errors.TypeError("Field " + definition.name + " does not support multiple values, got " + JSON.stringify(instance));
          }
          var constructor = get_constructor(definition.type);
          return types.wrap_array(instance, constructor.typecode, constructor.descriptor);
        } else if (definition.type === "*") {
          return instance;
        } else {
          var wrapper = types["wrap_" + definition.type];
          if (wrapper) {
            return wrapper(instance);
          } else {
            throw new errors.TypeError("No wrapper for field " + definition.name + " of type " + definition.type);
          }
        }
      } else if (definition.mandatory) {
        throw new errors.TypeError("Field " + definition.name + " is mandatory");
      } else {
        return types.Null();
      }
    }
    function get_accessors(index, field_definition) {
      var getter;
      if (field_definition.type === "*") {
        getter = function() {
          return this.value[index];
        };
      } else {
        getter = function() {
          return types.unwrap(this.value[index]);
        };
      }
      var setter = function(o) {
        this.value[index] = wrap_field(field_definition, o);
      };
      return { "get": getter, "set": setter, "enumerable": true, "configurable": false };
    }
    types.define_composite = function(def) {
      var c = function(fields) {
        this.value = fields ? fields : [];
      };
      c.descriptor = {
        numeric: def.code,
        symbolic: "amqp:" + def.name + ":list"
      };
      c.prototype.dispatch = function(target, frame) {
        target["on_" + def.name](frame);
      };
      for (var i = 0; i < def.fields.length; i++) {
        var f = def.fields[i];
        Object.defineProperty(c.prototype, f.name, get_accessors(i, f));
      }
      c.toString = function() {
        return def.name + "#" + Number(def.code).toString(16);
      };
      c.prototype.toJSON = function() {
        var o = {};
        for (var f2 in this) {
          if (f2 !== "value" && this[f2]) {
            o[f2] = this[f2];
          }
        }
        return o;
      };
      c.create = function(fields) {
        var o = new c();
        for (var f2 in fields) {
          o[f2] = fields[f2];
        }
        return o;
      };
      c.prototype.described = function() {
        return types.described_nc(types.wrap_ulong(c.descriptor.numeric), types.wrap_list(this.value));
      };
      return c;
    };
    function add_type(def) {
      var c = types.define_composite(def);
      types["wrap_" + def.name] = function(fields) {
        return c.create(fields).described();
      };
      by_descriptor[Number(c.descriptor.numeric).toString(10)] = c;
      by_descriptor[c.descriptor.symbolic] = c;
    }
    add_type({
      name: "error",
      code: 29,
      fields: [
        { name: "condition", type: "symbol", mandatory: true },
        { name: "description", type: "string" },
        { name: "info", type: "map" }
      ]
    });
    module2.exports = types;
  }
});

// ../../node_modules/rhea/lib/frames.js
var require_frames = __commonJS({
  "../../node_modules/rhea/lib/frames.js"(exports, module2) {
    "use strict";
    var types = require_types();
    var errors = require_errors();
    var frames = {};
    var by_descriptor = {};
    frames.read_header = function(buffer) {
      var offset = 4;
      var header = {};
      var name = buffer.toString("ascii", 0, offset);
      if (name !== "AMQP") {
        throw new errors.ProtocolError("Invalid protocol header for AMQP: " + buffer.toString("hex", 0, offset));
      }
      header.protocol_id = buffer.readUInt8(offset++);
      header.major = buffer.readUInt8(offset++);
      header.minor = buffer.readUInt8(offset++);
      header.revision = buffer.readUInt8(offset++);
      if (header.protocol_id === 0 && header.major === 0 && header.minor === 9 && header.revision === 1) {
        throw new errors.ProtocolError("Unsupported AMQP version: 0-9-1");
      }
      if (header.protocol_id === 1 && header.major === 1 && header.minor === 0 && header.revision === 10) {
        throw new errors.ProtocolError("Unsupported AMQP version: 0-10");
      }
      if (header.major !== 1 || header.minor !== 0) {
        throw new errors.ProtocolError("Unsupported AMQP version: " + JSON.stringify(header));
      }
      return header;
    };
    frames.write_header = function(buffer, header) {
      var offset = 4;
      buffer.write("AMQP", 0, offset, "ascii");
      buffer.writeUInt8(header.protocol_id, offset++);
      buffer.writeUInt8(header.major, offset++);
      buffer.writeUInt8(header.minor, offset++);
      buffer.writeUInt8(header.revision, offset++);
      return 8;
    };
    frames.TYPE_AMQP = 0;
    frames.TYPE_SASL = 1;
    frames.read_frame = function(buffer) {
      var reader = new types.Reader(buffer);
      var frame = {};
      frame.size = reader.read_uint(4);
      if (reader.remaining() < frame.size - 4) {
        return null;
      }
      var doff = reader.read_uint(1);
      if (doff < 2) {
        throw new errors.ProtocolError("Invalid data offset, must be at least 2 was " + doff);
      }
      frame.type = reader.read_uint(1);
      if (frame.type === frames.TYPE_AMQP) {
        frame.channel = reader.read_uint(2);
      } else if (frame.type === frames.TYPE_SASL) {
        reader.skip(2);
        frame.channel = 0;
      } else {
        throw new errors.ProtocolError("Unknown frame type " + frame.type);
      }
      if (doff > 1) {
        reader.skip(doff * 4 - 8);
      }
      if (reader.remaining()) {
        frame.performative = reader.read();
        var c = by_descriptor[frame.performative.descriptor.value];
        if (c) {
          frame.performative = new c(frame.performative.value);
        }
        if (reader.remaining()) {
          frame.payload = reader.read_bytes(reader.remaining());
        }
      }
      return frame;
    };
    frames.write_frame = function(frame) {
      var writer = new types.Writer();
      writer.skip(4);
      writer.write_uint(2, 1);
      writer.write_uint(frame.type, 1);
      if (frame.type === frames.TYPE_AMQP) {
        writer.write_uint(frame.channel, 2);
      } else if (frame.type === frames.TYPE_SASL) {
        writer.write_uint(0, 2);
      } else {
        throw new errors.ProtocolError("Unknown frame type " + frame.type);
      }
      if (frame.performative) {
        writer.write(frame.performative);
        if (frame.payload) {
          writer.write_bytes(frame.payload);
        }
      }
      var buffer = writer.toBuffer();
      buffer.writeUInt32BE(buffer.length, 0);
      return buffer;
    };
    frames.amqp_frame = function(channel, performative, payload) {
      return { "channel": channel || 0, "type": frames.TYPE_AMQP, "performative": performative, "payload": payload };
    };
    frames.sasl_frame = function(performative) {
      return { "channel": 0, "type": frames.TYPE_SASL, "performative": performative };
    };
    function define_frame(type, def) {
      var c = types.define_composite(def);
      frames[def.name] = c.create;
      by_descriptor[Number(c.descriptor.numeric).toString(10)] = c;
      by_descriptor[c.descriptor.symbolic] = c;
    }
    var open = {
      name: "open",
      code: 16,
      fields: [
        { name: "container_id", type: "string", mandatory: true },
        { name: "hostname", type: "string" },
        { name: "max_frame_size", type: "uint", default_value: 4294967295 },
        { name: "channel_max", type: "ushort", default_value: 65535 },
        { name: "idle_time_out", type: "uint" },
        { name: "outgoing_locales", type: "symbol", multiple: true },
        { name: "incoming_locales", type: "symbol", multiple: true },
        { name: "offered_capabilities", type: "symbol", multiple: true },
        { name: "desired_capabilities", type: "symbol", multiple: true },
        { name: "properties", type: "symbolic_map" }
      ]
    };
    var begin = {
      name: "begin",
      code: 17,
      fields: [
        { name: "remote_channel", type: "ushort" },
        { name: "next_outgoing_id", type: "uint", mandatory: true },
        { name: "incoming_window", type: "uint", mandatory: true },
        { name: "outgoing_window", type: "uint", mandatory: true },
        { name: "handle_max", type: "uint", default_value: "4294967295" },
        { name: "offered_capabilities", type: "symbol", multiple: true },
        { name: "desired_capabilities", type: "symbol", multiple: true },
        { name: "properties", type: "symbolic_map" }
      ]
    };
    var attach = {
      name: "attach",
      code: 18,
      fields: [
        { name: "name", type: "string", mandatory: true },
        { name: "handle", type: "uint", mandatory: true },
        { name: "role", type: "boolean", mandatory: true },
        { name: "snd_settle_mode", type: "ubyte", default_value: 2 },
        { name: "rcv_settle_mode", type: "ubyte", default_value: 0 },
        { name: "source", type: "*" },
        { name: "target", type: "*" },
        { name: "unsettled", type: "map" },
        { name: "incomplete_unsettled", type: "boolean", default_value: false },
        { name: "initial_delivery_count", type: "uint" },
        { name: "max_message_size", type: "ulong" },
        { name: "offered_capabilities", type: "symbol", multiple: true },
        { name: "desired_capabilities", type: "symbol", multiple: true },
        { name: "properties", type: "symbolic_map" }
      ]
    };
    var flow = {
      name: "flow",
      code: 19,
      fields: [
        { name: "next_incoming_id", type: "uint" },
        { name: "incoming_window", type: "uint", mandatory: true },
        { name: "next_outgoing_id", type: "uint", mandatory: true },
        { name: "outgoing_window", type: "uint", mandatory: true },
        { name: "handle", type: "uint" },
        { name: "delivery_count", type: "uint" },
        { name: "link_credit", type: "uint" },
        { name: "available", type: "uint" },
        { name: "drain", type: "boolean", default_value: false },
        { name: "echo", type: "boolean", default_value: false },
        { name: "properties", type: "symbolic_map" }
      ]
    };
    var transfer = {
      name: "transfer",
      code: 20,
      fields: [
        { name: "handle", type: "uint", mandatory: true },
        { name: "delivery_id", type: "uint" },
        { name: "delivery_tag", type: "binary" },
        { name: "message_format", type: "uint" },
        { name: "settled", type: "boolean" },
        { name: "more", type: "boolean", default_value: false },
        { name: "rcv_settle_mode", type: "ubyte" },
        { name: "state", type: "delivery_state" },
        { name: "resume", type: "boolean", default_value: false },
        { name: "aborted", type: "boolean", default_value: false },
        { name: "batchable", type: "boolean", default_value: false }
      ]
    };
    var disposition = {
      name: "disposition",
      code: 21,
      fields: [
        { name: "role", type: "boolean", mandatory: true },
        { name: "first", type: "uint", mandatory: true },
        { name: "last", type: "uint" },
        { name: "settled", type: "boolean", default_value: false },
        { name: "state", type: "*" },
        { name: "batchable", type: "boolean", default_value: false }
      ]
    };
    var detach = {
      name: "detach",
      code: 22,
      fields: [
        { name: "handle", type: "uint", mandatory: true },
        { name: "closed", type: "boolean", default_value: false },
        { name: "error", type: "error" }
      ]
    };
    var end = {
      name: "end",
      code: 23,
      fields: [
        { name: "error", type: "error" }
      ]
    };
    var close = {
      name: "close",
      code: 24,
      fields: [
        { name: "error", type: "error" }
      ]
    };
    define_frame(frames.TYPE_AMQP, open);
    define_frame(frames.TYPE_AMQP, begin);
    define_frame(frames.TYPE_AMQP, attach);
    define_frame(frames.TYPE_AMQP, flow);
    define_frame(frames.TYPE_AMQP, transfer);
    define_frame(frames.TYPE_AMQP, disposition);
    define_frame(frames.TYPE_AMQP, detach);
    define_frame(frames.TYPE_AMQP, end);
    define_frame(frames.TYPE_AMQP, close);
    var sasl_mechanisms = {
      name: "sasl_mechanisms",
      code: 64,
      fields: [
        { name: "sasl_server_mechanisms", type: "symbol", multiple: true, mandatory: true }
      ]
    };
    var sasl_init = {
      name: "sasl_init",
      code: 65,
      fields: [
        { name: "mechanism", type: "symbol", mandatory: true },
        { name: "initial_response", type: "binary" },
        { name: "hostname", type: "string" }
      ]
    };
    var sasl_challenge = {
      name: "sasl_challenge",
      code: 66,
      fields: [
        { name: "challenge", type: "binary", mandatory: true }
      ]
    };
    var sasl_response = {
      name: "sasl_response",
      code: 67,
      fields: [
        { name: "response", type: "binary", mandatory: true }
      ]
    };
    var sasl_outcome = {
      name: "sasl_outcome",
      code: 68,
      fields: [
        { name: "code", type: "ubyte", mandatory: true },
        { name: "additional_data", type: "binary" }
      ]
    };
    define_frame(frames.TYPE_SASL, sasl_mechanisms);
    define_frame(frames.TYPE_SASL, sasl_init);
    define_frame(frames.TYPE_SASL, sasl_challenge);
    define_frame(frames.TYPE_SASL, sasl_response);
    define_frame(frames.TYPE_SASL, sasl_outcome);
    module2.exports = frames;
  }
});

// ../../node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val2, options) {
      options = options || {};
      var type = typeof val2;
      if (type === "string" && val2.length > 0) {
        return parse2(val2);
      } else if (type === "number" && isFinite(val2)) {
        return options.long ? fmtLong(val2) : fmtShort(val2);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val2)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val2 = args[index];
              match = formatter.call(self2, val2);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val2) {
        if (val2 instanceof Error) {
          return val2.stack || val2.message;
        }
        return val2;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// ../../node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "../../node_modules/has-flag/index.js"(exports, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// ../../node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "../../node_modules/supports-color/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// ../../node_modules/debug/src/node.js
var require_node = __commonJS({
  "../../node_modules/debug/src/node.js"(exports, module2) {
    var tty = require("tty");
    var util = require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val2 = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val2)) {
        val2 = true;
      } else if (/^(no|off|false|disabled)$/i.test(val2)) {
        val2 = false;
      } else if (val2 === "null") {
        val2 = null;
      } else {
        val2 = Number(val2);
      }
      obj[prop] = val2;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// ../../node_modules/debug/src/index.js
var require_src = __commonJS({
  "../../node_modules/debug/src/index.js"(exports, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// ../../node_modules/rhea/lib/log.js
var require_log2 = __commonJS({
  "../../node_modules/rhea/lib/log.js"(exports, module2) {
    "use strict";
    var debug = require_src();
    if (debug.formatters) {
      debug.formatters.h = function(v) {
        return v.toString("hex");
      };
    }
    module2.exports = {
      "config": debug("rhea:config"),
      "frames": debug("rhea:frames"),
      "raw": debug("rhea:raw"),
      "reconnect": debug("rhea:reconnect"),
      "events": debug("rhea:events"),
      "message": debug("rhea:message"),
      "flow": debug("rhea:flow"),
      "io": debug("rhea:io")
    };
  }
});

// ../../node_modules/rhea/lib/transport.js
var require_transport = __commonJS({
  "../../node_modules/rhea/lib/transport.js"(exports, module2) {
    "use strict";
    var errors = require_errors();
    var frames = require_frames();
    var log = require_log2();
    var util = require_util2();
    var Transport = function(identifier, protocol_id, frame_type, handler) {
      this.identifier = identifier;
      this.protocol_id = protocol_id;
      this.frame_type = frame_type;
      this.handler = handler;
      this.pending = [];
      this.header_sent = void 0;
      this.header_received = void 0;
      this.write_complete = false;
      this.read_complete = false;
    };
    Transport.prototype.has_writes_pending = function() {
      return this.pending.length > 0 || !this.header_sent;
    };
    Transport.prototype.encode = function(frame) {
      this.pending.push(frame);
    };
    Transport.prototype.write = function(socket) {
      if (!this.header_sent) {
        var buffer = util.allocate_buffer(8);
        var header = { protocol_id: this.protocol_id, major: 1, minor: 0, revision: 0 };
        log.frames("[%s] -> %o", this.identifier, header);
        frames.write_header(buffer, header);
        socket.write(buffer);
        this.header_sent = header;
      }
      for (var i = 0; i < this.pending.length; i++) {
        var frame = this.pending[i];
        var buffer = frames.write_frame(frame);
        socket.write(buffer);
        if (frame.performative) {
          log.frames("[%s]:%s -> %s %j", this.identifier, frame.channel, frame.performative.constructor, frame.performative, frame.payload || "");
        } else {
          log.frames("[%s]:%s -> empty", this.identifier, frame.channel);
        }
        log.raw("[%s] SENT: %d %h", this.identifier, buffer.length, buffer);
      }
      this.pending = [];
    };
    Transport.prototype.peek_size = function(buffer) {
      log.frames("[%s] peek_size %o, %d", this.identifier, this.header_received, buffer.length);
      if (this.header_received && buffer.length >= 4) {
        return buffer.readUInt32BE();
      }
      return void 0;
    };
    Transport.prototype.read = function(buffer) {
      var offset = 0;
      if (!this.header_received) {
        if (buffer.length < 8) {
          return offset;
        } else {
          this.header_received = frames.read_header(buffer);
          log.frames("[%s] <- %o", this.identifier, this.header_received);
          if (this.header_received.protocol_id !== this.protocol_id) {
            if (this.protocol_id === 3 && this.header_received.protocol_id === 0) {
              throw new errors.ProtocolError("Expecting SASL layer");
            } else if (this.protocol_id === 0 && this.header_received.protocol_id === 3) {
              throw new errors.ProtocolError("SASL layer not enabled");
            } else {
              throw new errors.ProtocolError("Invalid AMQP protocol id " + this.header_received.protocol_id + " expecting: " + this.protocol_id);
            }
          }
          offset = 8;
        }
      }
      while (offset < buffer.length - 4 && !this.read_complete) {
        var frame_size = buffer.readUInt32BE(offset);
        log.io("[%s] got frame of size %d", this.identifier, frame_size);
        if (buffer.length < offset + frame_size) {
          log.io("[%s] incomplete frame; have only %d of %d", this.identifier, buffer.length - offset, frame_size);
          break;
        } else {
          var slice = buffer.slice(offset, offset + frame_size);
          log.raw("[%s] RECV: %d %h", this.identifier, slice.length, slice);
          var frame = frames.read_frame(slice);
          if (frame.performative) {
            log.frames("[%s]:%s <- %s %j", this.identifier, frame.channel, frame.performative.constructor, frame.performative, frame.payload || "");
          } else {
            log.frames("[%s]:%s <- empty", this.identifier, frame.channel);
          }
          if (frame.type !== this.frame_type) {
            throw new errors.ProtocolError("Invalid frame type: " + frame.type);
          }
          offset += frame_size;
          if (frame.performative) {
            frame.performative.dispatch(this.handler, frame);
          }
        }
      }
      return offset;
    };
    module2.exports = Transport;
  }
});

// ../../node_modules/rhea/lib/sasl.js
var require_sasl = __commonJS({
  "../../node_modules/rhea/lib/sasl.js"(exports, module2) {
    "use strict";
    var errors = require_errors();
    var frames = require_frames();
    var Transport = require_transport();
    var util = require_util2();
    var sasl_codes = {
      "OK": 0,
      "AUTH": 1,
      "SYS": 2,
      "SYS_PERM": 3,
      "SYS_TEMP": 4
    };
    var SASL_PROTOCOL_ID = 3;
    function extract(buffer) {
      var results = [];
      var start = 0;
      var i = 0;
      while (i < buffer.length) {
        if (buffer[i] === 0) {
          if (i > start)
            results.push(buffer.toString("utf8", start, i));
          else
            results.push(null);
          start = ++i;
        } else {
          ++i;
        }
      }
      if (i > start)
        results.push(buffer.toString("utf8", start, i));
      else
        results.push(null);
      return results;
    }
    var PlainServer = function(callback) {
      this.callback = callback;
      this.outcome = void 0;
      this.username = void 0;
    };
    PlainServer.prototype.start = function(response, hostname) {
      var fields = extract(response);
      if (fields.length !== 3) {
        return Promise.reject("Unexpected response in PLAIN, got " + fields.length + " fields, expected 3");
      }
      var self2 = this;
      return Promise.resolve(this.callback(fields[1], fields[2], hostname)).then(function(result) {
        if (result) {
          self2.outcome = true;
          self2.username = fields[1];
        } else {
          self2.outcome = false;
        }
      });
    };
    var PlainClient = function(username, password) {
      this.username = username;
      this.password = password;
    };
    PlainClient.prototype.start = function(callback) {
      var response = util.allocate_buffer(1 + this.username.length + 1 + this.password.length);
      response.writeUInt8(0, 0);
      response.write(this.username, 1);
      response.writeUInt8(0, 1 + this.username.length);
      response.write(this.password, 1 + this.username.length + 1);
      callback(void 0, response);
    };
    var AnonymousServer = function() {
      this.outcome = void 0;
      this.username = void 0;
    };
    AnonymousServer.prototype.start = function(response) {
      this.outcome = true;
      this.username = response ? response.toString("utf8") : "anonymous";
    };
    var AnonymousClient = function(name) {
      this.username = name ? name : "anonymous";
    };
    AnonymousClient.prototype.start = function(callback) {
      var response = util.allocate_buffer(1 + this.username.length);
      response.writeUInt8(0, 0);
      response.write(this.username, 1);
      callback(void 0, response);
    };
    var ExternalServer = function() {
      this.outcome = void 0;
      this.username = void 0;
    };
    ExternalServer.prototype.start = function() {
      this.outcome = true;
    };
    var ExternalClient = function() {
      this.username = void 0;
    };
    ExternalClient.prototype.start = function(callback) {
      callback(void 0, "");
    };
    ExternalClient.prototype.step = function(callback) {
      callback(void 0, "");
    };
    var XOAuth2Client = function(username, token) {
      this.username = username;
      this.token = token;
    };
    XOAuth2Client.prototype.start = function(callback) {
      var response = util.allocate_buffer(this.username.length + this.token.length + 5 + 12 + 3);
      var count = 0;
      response.write("user=", count);
      count += 5;
      response.write(this.username, count);
      count += this.username.length;
      response.writeUInt8(1, count);
      count += 1;
      response.write("auth=Bearer ", count);
      count += 12;
      response.write(this.token, count);
      count += this.token.length;
      response.writeUInt8(1, count);
      count += 1;
      response.writeUInt8(1, count);
      count += 1;
      callback(void 0, response);
    };
    var SaslServer = function(connection, mechanisms) {
      this.connection = connection;
      this.transport = new Transport(connection.amqp_transport.identifier, SASL_PROTOCOL_ID, frames.TYPE_SASL, this);
      this.next = connection.amqp_transport;
      this.mechanisms = mechanisms;
      this.mechanism = void 0;
      this.outcome = void 0;
      this.username = void 0;
      var mechlist = Object.getOwnPropertyNames(mechanisms);
      this.transport.encode(frames.sasl_frame(frames.sasl_mechanisms({ sasl_server_mechanisms: mechlist })));
    };
    SaslServer.prototype.do_step = function(challenge) {
      if (this.mechanism.outcome === void 0) {
        this.transport.encode(frames.sasl_frame(frames.sasl_challenge({ "challenge": challenge })));
        this.connection.output();
      } else {
        this.outcome = this.mechanism.outcome ? sasl_codes.OK : sasl_codes.AUTH;
        var frame = frames.sasl_frame(frames.sasl_outcome({ code: this.outcome }));
        this.transport.encode(frame);
        this.connection.output();
        if (this.outcome === sasl_codes.OK) {
          this.username = this.mechanism.username;
          this.transport.write_complete = true;
          this.transport.read_complete = true;
        }
      }
    };
    SaslServer.prototype.on_sasl_init = function(frame) {
      var saslctor = this.mechanisms[frame.performative.mechanism];
      if (saslctor) {
        this.mechanism = saslctor();
        Promise.resolve(this.mechanism.start(frame.performative.initial_response, frame.performative.hostname)).then(this.do_step.bind(this)).catch(this.do_fail.bind(this));
      } else {
        this.outcome = sasl_codes.AUTH;
        this.transport.encode(frames.sasl_frame(frames.sasl_outcome({ code: this.outcome })));
      }
    };
    SaslServer.prototype.on_sasl_response = function(frame) {
      Promise.resolve(this.mechanism.step(frame.performative.response)).then(this.do_step.bind(this)).catch(this.do_fail.bind(this));
    };
    SaslServer.prototype.do_fail = function(e) {
      var frame = frames.sasl_frame(frames.sasl_outcome({ code: sasl_codes.SYS }));
      this.transport.encode(frame);
      this.connection.output();
      try {
        this.connection.sasl_failed("Sasl callback promise failed with " + e, "amqp:internal-error");
      } catch (e2) {
        console.error("Uncaught error: ", e2.message);
      }
    };
    SaslServer.prototype.has_writes_pending = function() {
      return this.transport.has_writes_pending() || this.next.has_writes_pending();
    };
    SaslServer.prototype.write = function(socket) {
      if (this.transport.write_complete && this.transport.pending.length === 0) {
        return this.next.write(socket);
      } else {
        return this.transport.write(socket);
      }
    };
    SaslServer.prototype.peek_size = function(buffer) {
      if (this.transport.read_complete) {
        return this.next.peek_size(buffer);
      } else {
        return this.transport.peek_size(buffer);
      }
    };
    SaslServer.prototype.read = function(buffer) {
      if (this.transport.read_complete) {
        return this.next.read(buffer);
      } else {
        return this.transport.read(buffer);
      }
    };
    var SaslClient = function(connection, mechanisms, hostname) {
      this.connection = connection;
      this.transport = new Transport(connection.amqp_transport.identifier, SASL_PROTOCOL_ID, frames.TYPE_SASL, this);
      this.next = connection.amqp_transport;
      this.mechanisms = mechanisms;
      this.mechanism = void 0;
      this.mechanism_name = void 0;
      this.hostname = hostname;
      this.failed = false;
    };
    SaslClient.prototype.on_sasl_mechanisms = function(frame) {
      var offered_mechanisms = [];
      if (Array.isArray(frame.performative.sasl_server_mechanisms)) {
        offered_mechanisms = frame.performative.sasl_server_mechanisms;
      } else if (frame.performative.sasl_server_mechanisms) {
        offered_mechanisms = [frame.performative.sasl_server_mechanisms];
      }
      for (var i = 0; this.mechanism === void 0 && i < offered_mechanisms.length; i++) {
        var mech = offered_mechanisms[i];
        var f = this.mechanisms[mech];
        if (f) {
          this.mechanism = typeof f === "function" ? f() : f;
          this.mechanism_name = mech;
        }
      }
      if (this.mechanism) {
        var self2 = this;
        this.mechanism.start(function(err, response) {
          if (err) {
            self2.failed = true;
            self2.connection.sasl_failed("SASL mechanism init failed: " + err);
          } else {
            var init = { "mechanism": self2.mechanism_name, "initial_response": response };
            if (self2.hostname) {
              init.hostname = self2.hostname;
            }
            self2.transport.encode(frames.sasl_frame(frames.sasl_init(init)));
            self2.connection.output();
          }
        });
      } else {
        this.failed = true;
        this.connection.sasl_failed("No suitable mechanism; server supports " + frame.performative.sasl_server_mechanisms);
      }
    };
    SaslClient.prototype.on_sasl_challenge = function(frame) {
      var self2 = this;
      this.mechanism.step(frame.performative.challenge, function(err, response) {
        if (err) {
          self2.failed = true;
          self2.connection.sasl_failed("SASL mechanism challenge failed: " + err);
        } else {
          self2.transport.encode(frames.sasl_frame(frames.sasl_response({ "response": response })));
          self2.connection.output();
        }
      });
    };
    SaslClient.prototype.on_sasl_outcome = function(frame) {
      switch (frame.performative.code) {
        case sasl_codes.OK:
          this.transport.read_complete = true;
          this.transport.write_complete = true;
          break;
        case sasl_codes.SYS:
        case sasl_codes.SYS_PERM:
        case sasl_codes.SYS_TEMP:
          this.transport.write_complete = true;
          this.connection.sasl_failed("Failed to authenticate: " + frame.performative.code, "amqp:internal-error");
          break;
        default:
          this.transport.write_complete = true;
          this.connection.sasl_failed("Failed to authenticate: " + frame.performative.code);
      }
    };
    SaslClient.prototype.has_writes_pending = function() {
      return this.transport.has_writes_pending() || this.next.has_writes_pending();
    };
    SaslClient.prototype.write = function(socket) {
      if (this.transport.write_complete) {
        return this.next.write(socket);
      } else {
        return this.transport.write(socket);
      }
    };
    SaslClient.prototype.peek_size = function(buffer) {
      if (this.transport.read_complete) {
        return this.next.peek_size(buffer);
      } else {
        return this.transport.peek_size(buffer);
      }
    };
    SaslClient.prototype.read = function(buffer) {
      if (this.transport.read_complete) {
        return this.next.read(buffer);
      } else {
        return this.transport.read(buffer);
      }
    };
    var SelectiveServer = function(connection, mechanisms) {
      this.header_received = false;
      this.transports = {
        0: connection.amqp_transport,
        3: new SaslServer(connection, mechanisms)
      };
      this.selected = void 0;
    };
    SelectiveServer.prototype.has_writes_pending = function() {
      return this.header_received && this.selected.has_writes_pending();
    };
    SelectiveServer.prototype.write = function(socket) {
      if (this.selected) {
        return this.selected.write(socket);
      } else {
        return 0;
      }
    };
    SelectiveServer.prototype.peek_size = function(buffer) {
      if (this.header_received) {
        return this.selected.peek_size(buffer);
      }
      return void 0;
    };
    SelectiveServer.prototype.read = function(buffer) {
      if (!this.header_received) {
        if (buffer.length < 8) {
          return 0;
        } else {
          this.header_received = frames.read_header(buffer);
          this.selected = this.transports[this.header_received.protocol_id];
          if (this.selected === void 0) {
            throw new errors.ProtocolError("Invalid AMQP protocol id " + this.header_received.protocol_id);
          }
        }
      }
      return this.selected.read(buffer);
    };
    var default_server_mechanisms = {
      enable_anonymous: function() {
        this["ANONYMOUS"] = function() {
          return new AnonymousServer();
        };
      },
      enable_plain: function(callback) {
        this["PLAIN"] = function() {
          return new PlainServer(callback);
        };
      }
    };
    var default_client_mechanisms = {
      enable_anonymous: function(name) {
        this["ANONYMOUS"] = function() {
          return new AnonymousClient(name);
        };
      },
      enable_plain: function(username, password) {
        this["PLAIN"] = function() {
          return new PlainClient(username, password);
        };
      },
      enable_external: function() {
        this["EXTERNAL"] = function() {
          return new ExternalClient();
        };
      },
      enable_xoauth2: function(username, token) {
        if (username && token) {
          this["XOAUTH2"] = function() {
            return new XOAuth2Client(username, token);
          };
        } else if (token === void 0) {
          throw Error("token must be specified");
        } else if (username === void 0) {
          throw Error("username must be specified");
        }
      }
    };
    module2.exports = {
      Client: SaslClient,
      Server: SaslServer,
      Selective: SelectiveServer,
      server_mechanisms: function() {
        return Object.create(default_server_mechanisms);
      },
      client_mechanisms: function() {
        return Object.create(default_client_mechanisms);
      },
      server_add_external: function(mechs) {
        mechs["EXTERNAL"] = function() {
          return new ExternalServer();
        };
        return mechs;
      }
    };
  }
});

// ../../node_modules/rhea/lib/endpoint.js
var require_endpoint = __commonJS({
  "../../node_modules/rhea/lib/endpoint.js"(exports, module2) {
    "use strict";
    var EndpointState = function() {
      this.init();
    };
    EndpointState.prototype.init = function() {
      this.local_open = false;
      this.remote_open = false;
      this.open_requests = 0;
      this.close_requests = 0;
      this.initialised = false;
      this.marker = void 0;
    };
    EndpointState.prototype.mark = function(o) {
      this.marker = o || Date.now();
      return this.marker;
    };
    EndpointState.prototype.open = function() {
      this.marker = void 0;
      this.initialised = true;
      if (!this.local_open) {
        this.local_open = true;
        this.open_requests++;
        return true;
      } else {
        return false;
      }
    };
    EndpointState.prototype.close = function() {
      this.marker = void 0;
      if (this.local_open) {
        this.local_open = false;
        this.close_requests++;
        return true;
      } else {
        return false;
      }
    };
    EndpointState.prototype.disconnected = function() {
      var was_initialised = this.initialised;
      this.was_open = this.local_open;
      this.init();
      this.initialised = was_initialised;
    };
    EndpointState.prototype.reconnect = function() {
      if (this.was_open) {
        this.open();
        this.was_open = void 0;
      }
    };
    EndpointState.prototype.remote_opened = function() {
      if (!this.remote_open) {
        this.remote_open = true;
        return true;
      } else {
        return false;
      }
    };
    EndpointState.prototype.remote_closed = function() {
      if (this.remote_open) {
        this.remote_open = false;
        return true;
      } else {
        return false;
      }
    };
    EndpointState.prototype.is_open = function() {
      return this.local_open && this.remote_open;
    };
    EndpointState.prototype.is_closed = function() {
      return this.initialised && !(this.local_open || this.was_open) && !this.remote_open;
    };
    EndpointState.prototype.has_settled = function() {
      return this.open_requests === 0 && this.close_requests === 0;
    };
    EndpointState.prototype.need_open = function() {
      if (this.open_requests > 0) {
        this.open_requests--;
        return true;
      } else {
        return false;
      }
    };
    EndpointState.prototype.need_close = function() {
      if (this.close_requests > 0) {
        this.close_requests--;
        return true;
      } else {
        return false;
      }
    };
    module2.exports = EndpointState;
  }
});

// ../../node_modules/rhea/lib/message.js
var require_message = __commonJS({
  "../../node_modules/rhea/lib/message.js"(exports, module2) {
    "use strict";
    var log = require_log2();
    var types = require_types();
    var by_descriptor = {};
    var unwrappers = {};
    var wrappers = [];
    var message = {};
    function define_section(descriptor, unwrap, wrap) {
      unwrap.descriptor = descriptor;
      unwrappers[descriptor.symbolic] = unwrap;
      unwrappers[Number(descriptor.numeric).toString(10)] = unwrap;
      if (wrap) {
        wrappers.push(wrap);
      }
    }
    function define_composite_section(def) {
      var c = types.define_composite(def);
      message[def.name] = c.create;
      by_descriptor[Number(c.descriptor.numeric).toString(10)] = c;
      by_descriptor[c.descriptor.symbolic] = c;
      var unwrap = function(msg, section) {
        var composite = new c(section.value);
        for (var i = 0; i < def.fields.length; i++) {
          var f = def.fields[i];
          var v = composite[f.name];
          if (v !== void 0 && v !== null) {
            msg[f.name] = v;
          }
        }
      };
      var wrap = function(sections, msg) {
        sections.push(c.create(msg).described());
      };
      define_section(c.descriptor, unwrap, wrap);
    }
    function define_map_section(def, symbolic) {
      var wrapper = symbolic ? types.wrap_symbolic_map : types.wrap_map;
      var descriptor = { numeric: def.code };
      descriptor.symbolic = "amqp:" + def.name.replace(/_/g, "-") + ":map";
      var unwrap = function(msg, section) {
        msg[def.name] = types.unwrap_map_simple(section);
      };
      var wrap = function(sections, msg) {
        if (msg[def.name]) {
          sections.push(types.described_nc(types.wrap_ulong(descriptor.numeric), wrapper(msg[def.name])));
        }
      };
      define_section(descriptor, unwrap, wrap);
    }
    function Section(typecode, content, multiple) {
      this.typecode = typecode;
      this.content = content;
      this.multiple = multiple;
    }
    Section.prototype.described = function(item) {
      return types.described(types.wrap_ulong(this.typecode), types.wrap(item || this.content));
    };
    Section.prototype.collect_sections = function(sections) {
      if (this.multiple) {
        for (var i = 0; i < this.content.length; i++) {
          sections.push(this.described(this.content[i]));
        }
      } else {
        sections.push(this.described());
      }
    };
    define_composite_section({
      name: "header",
      code: 112,
      fields: [
        { name: "durable", type: "boolean", default_value: false },
        { name: "priority", type: "ubyte", default_value: 4 },
        { name: "ttl", type: "uint" },
        { name: "first_acquirer", type: "boolean", default_value: false },
        { name: "delivery_count", type: "uint", default_value: 0 }
      ]
    });
    define_map_section({ name: "delivery_annotations", code: 113 }, true);
    define_map_section({ name: "message_annotations", code: 114 }, true);
    define_composite_section({
      name: "properties",
      code: 115,
      fields: [
        { name: "message_id", type: "message_id" },
        { name: "user_id", type: "binary" },
        { name: "to", type: "string" },
        { name: "subject", type: "string" },
        { name: "reply_to", type: "string" },
        { name: "correlation_id", type: "message_id" },
        { name: "content_type", type: "symbol" },
        { name: "content_encoding", type: "symbol" },
        { name: "absolute_expiry_time", type: "timestamp" },
        { name: "creation_time", type: "timestamp" },
        { name: "group_id", type: "string" },
        { name: "group_sequence", type: "uint" },
        { name: "reply_to_group_id", type: "string" }
      ]
    });
    define_map_section({ name: "application_properties", code: 116 });
    function unwrap_body_section(msg, section, typecode) {
      if (msg.body === void 0) {
        msg.body = new Section(typecode, types.unwrap(section));
      } else if (msg.body.constructor === Section && msg.body.typecode === typecode) {
        if (msg.body.multiple) {
          msg.body.content.push(types.unwrap(section));
        } else {
          msg.body.multiple = true;
          msg.body.content = [msg.body.content, types.unwrap(section)];
        }
      }
    }
    define_section({ numeric: 117, symbolic: "amqp:data:binary" }, function(msg, section) {
      unwrap_body_section(msg, section, 117);
    });
    define_section({ numeric: 118, symbolic: "amqp:amqp-sequence:list" }, function(msg, section) {
      unwrap_body_section(msg, section, 118);
    });
    define_section({ numeric: 119, symbolic: "amqp:value:*" }, function(msg, section) {
      msg.body = types.unwrap(section);
    });
    define_map_section({ name: "footer", code: 120 });
    function wrap_body(sections, msg) {
      if (msg.body && msg.body.collect_sections) {
        msg.body.collect_sections(sections);
      } else {
        sections.push(types.described(types.wrap_ulong(119), types.wrap(msg.body)));
      }
    }
    wrappers.push(wrap_body);
    message.data_section = function(data) {
      return new Section(117, data);
    };
    message.sequence_section = function(list) {
      return new Section(118, list);
    };
    message.data_sections = function(data_elements) {
      return new Section(117, data_elements, true);
    };
    message.sequence_sections = function(lists) {
      return new Section(118, lists, true);
    };
    function copy(src, tgt) {
      for (var k in src) {
        var v = src[k];
        if (typeof v === "object") {
          copy(v, tgt[k]);
        } else {
          tgt[k] = v;
        }
      }
    }
    function Message(o) {
      if (o) {
        copy(o, this);
      }
    }
    Message.prototype.toJSON = function() {
      var o = {};
      for (var key in this) {
        if (typeof this[key] === "function")
          continue;
        o[key] = this[key];
      }
      return o;
    };
    Message.prototype.toString = function() {
      return JSON.stringify(this.toJSON());
    };
    message.encode = function(msg) {
      var sections = [];
      wrappers.forEach(function(wrapper_fn) {
        wrapper_fn(sections, msg);
      });
      var writer = new types.Writer();
      for (var i = 0; i < sections.length; i++) {
        log.message("Encoding section %d of %d: %o", i + 1, sections.length, sections[i]);
        writer.write(sections[i]);
      }
      var data = writer.toBuffer();
      log.message("encoded %d bytes", data.length);
      return data;
    };
    message.decode = function(buffer) {
      var msg = new Message();
      var reader = new types.Reader(buffer);
      while (reader.remaining()) {
        var s = reader.read();
        log.message("decoding section: %o of type: %o", s, s.descriptor);
        if (s.descriptor) {
          var unwrap = unwrappers[s.descriptor.value];
          if (unwrap) {
            unwrap(msg, s);
          } else {
            console.warn("WARNING: did not recognise message section with descriptor " + s.descriptor);
          }
        } else {
          console.warn("WARNING: expected described message section got " + JSON.stringify(s));
        }
      }
      return msg;
    };
    var outcomes = {};
    function define_outcome(def) {
      var c = types.define_composite(def);
      c.composite_type = def.name;
      message[def.name] = c.create;
      outcomes[Number(c.descriptor.numeric).toString(10)] = c;
      outcomes[c.descriptor.symbolic] = c;
      message["is_" + def.name] = function(o) {
        if (o && o.descriptor) {
          var c2 = outcomes[o.descriptor.value];
          if (c2) {
            return c2.descriptor.numeric === def.code;
          }
        }
        return false;
      };
    }
    message.unwrap_outcome = function(outcome) {
      if (outcome && outcome.descriptor) {
        var c = outcomes[outcome.descriptor.value];
        if (c) {
          return new c(outcome.value);
        }
      }
      console.error("unrecognised outcome: " + JSON.stringify(outcome));
      return outcome;
    };
    message.are_outcomes_equivalent = function(a, b) {
      if (a === void 0 && b === void 0)
        return true;
      else if (a === void 0 || b === void 0)
        return false;
      else
        return a.descriptor.value === b.descriptor.value && a.descriptor.value === 36;
    };
    define_outcome({
      name: "received",
      code: 35,
      fields: [
        { name: "section_number", type: "uint", mandatory: true },
        { name: "section_offset", type: "ulong", mandatory: true }
      ]
    });
    define_outcome({ name: "accepted", code: 36, fields: [] });
    define_outcome({ name: "rejected", code: 37, fields: [{ name: "error", type: "error" }] });
    define_outcome({ name: "released", code: 38, fields: [] });
    define_outcome({
      name: "modified",
      code: 39,
      fields: [
        { name: "delivery_failed", type: "boolean" },
        { name: "undeliverable_here", type: "boolean" },
        { name: "message_annotations", type: "map" }
      ]
    });
    module2.exports = message;
  }
});

// ../../node_modules/rhea/lib/terminus.js
var require_terminus = __commonJS({
  "../../node_modules/rhea/lib/terminus.js"(exports, module2) {
    "use strict";
    var types = require_types();
    var terminus = {};
    var by_descriptor = {};
    function define_terminus(def) {
      var c = types.define_composite(def);
      terminus[def.name] = c.create;
      by_descriptor[Number(c.descriptor.numeric).toString(10)] = c;
      by_descriptor[c.descriptor.symbolic] = c;
    }
    terminus.unwrap = function(field) {
      if (field && field.descriptor) {
        var c = by_descriptor[field.descriptor.value];
        if (c) {
          return new c(field.value);
        } else {
          console.warn("Unknown terminus: " + field.descriptor);
        }
      }
      return null;
    };
    define_terminus({
      name: "source",
      code: 40,
      fields: [
        { name: "address", type: "string" },
        { name: "durable", type: "uint", default_value: 0 },
        { name: "expiry_policy", type: "symbol", default_value: "session-end" },
        { name: "timeout", type: "uint", default_value: 0 },
        { name: "dynamic", type: "boolean", default_value: false },
        { name: "dynamic_node_properties", type: "symbolic_map" },
        { name: "distribution_mode", type: "symbol" },
        { name: "filter", type: "symbolic_map" },
        { name: "default_outcome", type: "*" },
        { name: "outcomes", type: "symbol", multiple: true },
        { name: "capabilities", type: "symbol", multiple: true }
      ]
    });
    define_terminus({
      name: "target",
      code: 41,
      fields: [
        { name: "address", type: "string" },
        { name: "durable", type: "uint", default_value: 0 },
        { name: "expiry_policy", type: "symbol", default_value: "session-end" },
        { name: "timeout", type: "uint", default_value: 0 },
        { name: "dynamic", type: "boolean", default_value: false },
        { name: "dynamic_node_properties", type: "symbolic_map" },
        { name: "capabilities", type: "symbol", multiple: true }
      ]
    });
    module2.exports = terminus;
  }
});

// ../../node_modules/rhea/lib/link.js
var require_link = __commonJS({
  "../../node_modules/rhea/lib/link.js"(exports, module2) {
    "use strict";
    var frames = require_frames();
    var log = require_log2();
    var message = require_message();
    var terminus = require_terminus();
    var EndpointState = require_endpoint();
    var FlowController = function(window2) {
      this.window = window2;
    };
    FlowController.prototype.update = function(context) {
      var delta = this.window - context.receiver.credit;
      if (delta >= this.window / 4) {
        context.receiver.flow(delta);
      }
    };
    function auto_settle(context) {
      context.delivery.settled = true;
    }
    function auto_accept(context) {
      context.delivery.update(void 0, message.accepted().described());
    }
    function LinkError(message2, condition, link2) {
      Error.call(this);
      Error.captureStackTrace(this, this.constructor);
      this.message = message2;
      this.condition = condition;
      this.description = message2;
      Object.defineProperty(this, "link", { value: link2 });
    }
    require("util").inherits(LinkError, Error);
    var EventEmitter = require("events").EventEmitter;
    var link = Object.create(EventEmitter.prototype);
    link.dispatch = function(name) {
      log.events("[%s] Link got event: %s", this.connection.options.id, name);
      EventEmitter.prototype.emit.apply(this.observers, arguments);
      if (this.listeners(name).length) {
        EventEmitter.prototype.emit.apply(this, arguments);
        return true;
      } else {
        return this.session.dispatch.apply(this.session, arguments);
      }
    };
    link.set_source = function(fields) {
      this.local.attach.source = terminus.source(fields).described();
    };
    link.set_target = function(fields) {
      this.local.attach.target = terminus.target(fields).described();
    };
    link.attach = function() {
      if (this.state.open()) {
        this.connection._register();
      }
    };
    link.open = link.attach;
    link.detach = function() {
      this.local.detach.closed = false;
      if (this.state.close()) {
        this.connection._register();
      }
    };
    link.close = function(error) {
      if (error)
        this.local.detach.error = error;
      this.local.detach.closed = true;
      if (this.state.close()) {
        this.connection._register();
      }
    };
    link.remove = function() {
      this.session.remove_link(this);
    };
    link.is_open = function() {
      return this.session.is_open() && this.state.is_open();
    };
    link.is_remote_open = function() {
      return this.session.is_remote_open() && this.state.remote_open;
    };
    link.is_itself_closed = function() {
      return this.state.is_closed();
    };
    link.is_closed = function() {
      return this.session.is_closed() || this.is_itself_closed();
    };
    link._process = function() {
      do {
        if (this.state.need_open()) {
          this.session.output(this.local.attach);
        }
        if (this.issue_flow && this.state.local_open) {
          this.session._write_flow(this);
          this.issue_flow = false;
        }
        if (this.state.need_close()) {
          this.session.output(this.local.detach);
        }
      } while (!this.state.has_settled());
    };
    link.on_attach = function(frame) {
      if (this.state.remote_opened()) {
        if (!this.remote.handle) {
          this.remote.handle = frame.handle;
        }
        frame.performative.source = terminus.unwrap(frame.performative.source);
        frame.performative.target = terminus.unwrap(frame.performative.target);
        this.remote.attach = frame.performative;
        this.open();
        this.dispatch(this.is_receiver() ? "receiver_open" : "sender_open", this._context());
      } else {
        throw Error("Attach already received");
      }
    };
    link.prefix_event = function(event) {
      return (this.local.attach.role ? "receiver_" : "sender_") + event;
    };
    link.on_detach = function(frame) {
      if (this.state.remote_closed()) {
        if (this._incomplete) {
          this._incomplete.settled = true;
        }
        this.remote.detach = frame.performative;
        var error = this.remote.detach.error;
        if (error) {
          var handled = this.dispatch(this.prefix_event("error"), this._context());
          handled = this.dispatch(this.prefix_event("close"), this._context()) || handled;
          if (!handled) {
            EventEmitter.prototype.emit.call(this.connection.container, "error", new LinkError(error.description, error.condition, this));
          }
        } else {
          this.dispatch(this.prefix_event("close"), this._context());
        }
        var self2 = this;
        var token = this.state.mark();
        process.nextTick(function() {
          if (self2.state.marker === token) {
            self2.close();
            process.nextTick(function() {
              self2.remove();
            });
          }
        });
      } else {
        throw Error("Detach already received");
      }
    };
    function is_internal(name) {
      switch (name) {
        case "name":
        case "handle":
        case "role":
        case "initial_delivery_count":
          return true;
        default:
          return false;
      }
    }
    var aliases = [
      "snd_settle_mode",
      "rcv_settle_mode",
      "source",
      "target",
      "max_message_size",
      "offered_capabilities",
      "desired_capabilities",
      "properties"
    ];
    function remote_property_shortcut(name) {
      return function() {
        return this.remote.attach ? this.remote.attach[name] : void 0;
      };
    }
    link.init = function(session, name, local_handle, opts, is_receiver) {
      this.session = session;
      this.connection = session.connection;
      this.name = name;
      this.options = opts === void 0 ? {} : opts;
      this.state = new EndpointState();
      this.issue_flow = false;
      this.local = { "handle": local_handle };
      this.local.attach = frames.attach({ "handle": local_handle, "name": name, role: is_receiver });
      for (var field in this.local.attach) {
        if (!is_internal(field) && this.options[field] !== void 0) {
          this.local.attach[field] = this.options[field];
        }
      }
      this.local.detach = frames.detach({ "handle": local_handle, "closed": true });
      this.remote = { "handle": void 0 };
      this.delivery_count = 0;
      this.credit = 0;
      this.observers = new EventEmitter();
      var self2 = this;
      aliases.forEach(function(alias) {
        Object.defineProperty(self2, alias, { get: remote_property_shortcut(alias) });
      });
      Object.defineProperty(this, "error", { get: function() {
        return this.remote.detach ? this.remote.detach.error : void 0;
      } });
    };
    link._disconnect = function() {
      this.state.disconnected();
      if (!this.state.was_open) {
        this.remove();
      }
    };
    link._reconnect = function() {
      this.state.reconnect();
      this.remote = { "handle": void 0 };
      this.delivery_count = 0;
      this.credit = 0;
    };
    link.has_credit = function() {
      return this.credit > 0;
    };
    link.is_receiver = function() {
      return this.local.attach.role;
    };
    link.is_sender = function() {
      return !this.is_receiver();
    };
    link._context = function(c) {
      var context = c ? c : {};
      if (this.is_receiver()) {
        context.receiver = this;
      } else {
        context.sender = this;
      }
      return this.session._context(context);
    };
    link.get_option = function(name, default_value) {
      if (this.options[name] !== void 0)
        return this.options[name];
      else
        return this.session.get_option(name, default_value);
    };
    var Sender = function(session, name, local_handle, opts) {
      this.init(session, name, local_handle, opts, false);
      this._draining = false;
      this._drained = false;
      this.local.attach.initial_delivery_count = 0;
      this.tag = 0;
      if (this.get_option("autosettle", true)) {
        this.observers.on("settled", auto_settle);
      }
      var sender = this;
      if (this.get_option("treat_modified_as_released", true)) {
        this.observers.on("modified", function(context) {
          sender.dispatch("released", context);
        });
      }
    };
    Sender.prototype = Object.create(link);
    Sender.prototype.constructor = Sender;
    Sender.prototype._get_drain = function() {
      if (this._draining && this._drained && this.credit) {
        while (this.credit) {
          ++this.delivery_count;
          --this.credit;
        }
        return true;
      } else {
        return false;
      }
    };
    Sender.prototype.set_drained = function(drained) {
      this._drained = drained;
      if (this._draining && this._drained) {
        this.issue_flow = true;
      }
    };
    Sender.prototype.next_tag = function() {
      return Buffer.from(new String(this.tag++));
    };
    Sender.prototype.sendable = function() {
      return Boolean(this.credit && this.session.outgoing.available());
    };
    Sender.prototype.on_flow = function(frame) {
      var flow = frame.performative;
      this.credit = flow.delivery_count + flow.link_credit - this.delivery_count;
      this._draining = flow.drain;
      this._drained = this.credit > 0;
      if (this.is_open()) {
        this.dispatch("sender_flow", this._context());
        if (this._draining) {
          this.dispatch("sender_draining", this._context());
        }
        if (this.sendable()) {
          this.dispatch("sendable", this._context());
        }
      }
    };
    Sender.prototype.on_transfer = function() {
      throw Error("got transfer on sending link");
    };
    Sender.prototype.send = function(msg, tag, format) {
      var payload = format === void 0 ? message.encode(msg) : msg;
      var delivery = this.session.send(this, tag ? tag : this.next_tag(), payload, format);
      if (this.local.attach.snd_settle_mode === 1) {
        delivery.settled = true;
      }
      return delivery;
    };
    var Receiver = function(session, name, local_handle, opts) {
      this.init(session, name, local_handle, opts, true);
      this.drain = false;
      this.set_credit_window(this.get_option("credit_window", 1e3));
      if (this.get_option("autoaccept", true)) {
        this.observers.on("message", auto_accept);
      }
      if (this.local.attach.rcv_settle_mode === 1 && this.get_option("autosettle", true)) {
        this.observers.on("settled", auto_settle);
      }
    };
    Receiver.prototype = Object.create(link);
    Receiver.prototype.constructor = Receiver;
    Receiver.prototype.on_flow = function(frame) {
      this.dispatch("receiver_flow", this._context());
      if (frame.performative.drain) {
        this.credit = frame.performative.link_credit;
        this.delivery_count = frame.performative.delivery_count;
        if (frame.performative.link_credit > 0)
          console.error("ERROR: received flow with drain set, but non zero credit");
        else
          this.dispatch("receiver_drained", this._context());
      }
    };
    Receiver.prototype.flow = function(credit) {
      if (credit > 0) {
        this.credit += credit;
        this.issue_flow = true;
        this.connection._register();
      }
    };
    Receiver.prototype.drain_credit = function() {
      this.drain = true;
      this.issue_flow = true;
      this.connection._register();
    };
    Receiver.prototype.add_credit = Receiver.prototype.flow;
    Receiver.prototype._get_drain = function() {
      return this.drain;
    };
    Receiver.prototype.set_credit_window = function(credit_window) {
      if (credit_window > 0) {
        var flow_controller = new FlowController(credit_window);
        var listener = flow_controller.update.bind(flow_controller);
        this.observers.on("message", listener);
        this.observers.on("receiver_open", listener);
      }
    };
    module2.exports = { "Sender": Sender, "Receiver": Receiver };
  }
});

// ../../node_modules/rhea/lib/session.js
var require_session = __commonJS({
  "../../node_modules/rhea/lib/session.js"(exports, module2) {
    "use strict";
    var frames = require_frames();
    var link = require_link();
    var log = require_log2();
    var message = require_message();
    var types = require_types();
    var util = require_util2();
    var EndpointState = require_endpoint();
    var EventEmitter = require("events").EventEmitter;
    function SessionError(message2, condition, session) {
      Error.call(this);
      Error.captureStackTrace(this, this.constructor);
      this.message = message2;
      this.condition = condition;
      this.description = message2;
      Object.defineProperty(this, "session", { value: session });
    }
    require("util").inherits(SessionError, Error);
    var CircularBuffer = function(capacity) {
      this.capacity = capacity;
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.entries = [];
    };
    CircularBuffer.prototype.available = function() {
      return this.capacity - this.size;
    };
    CircularBuffer.prototype.push = function(o) {
      if (this.size < this.capacity) {
        this.entries[this.tail] = o;
        this.tail = (this.tail + 1) % this.capacity;
        this.size++;
      } else {
        throw Error("circular buffer overflow: head=" + this.head + " tail=" + this.tail + " size=" + this.size + " capacity=" + this.capacity);
      }
    };
    CircularBuffer.prototype.pop_if = function(f) {
      var count = 0;
      while (this.size && f(this.entries[this.head])) {
        this.entries[this.head] = void 0;
        this.head = (this.head + 1) % this.capacity;
        this.size--;
        count++;
      }
      return count;
    };
    CircularBuffer.prototype.by_id = function(id) {
      if (this.size > 0) {
        var gap = id - this.entries[this.head].id;
        if (gap < this.size) {
          return this.entries[(this.head + gap) % this.capacity];
        }
      }
      return void 0;
    };
    CircularBuffer.prototype.get_head = function() {
      return this.size > 0 ? this.entries[this.head] : void 0;
    };
    CircularBuffer.prototype.get_tail = function() {
      return this.size > 0 ? this.entries[(this.head + this.size - 1) % this.capacity] : void 0;
    };
    function write_dispositions(deliveries) {
      var first, last, next_id, i, delivery;
      for (i = 0; i < deliveries.length; i++) {
        delivery = deliveries[i];
        if (first === void 0) {
          first = delivery;
          last = delivery;
          next_id = delivery.id;
        }
        if (first !== last && !message.are_outcomes_equivalent(last.state, delivery.state) || last.settled !== delivery.settled || next_id !== delivery.id) {
          first.link.session.output(frames.disposition({ "role": first.link.is_receiver(), "first": first.id, "last": last.id, "state": first.state, "settled": first.settled }));
          first = delivery;
          last = delivery;
          next_id = delivery.id;
        } else {
          if (last.id !== delivery.id) {
            last = delivery;
          }
          next_id++;
        }
      }
      if (first !== void 0 && last !== void 0) {
        first.link.session.output(frames.disposition({ "role": first.link.is_receiver(), "first": first.id, "last": last.id, "state": first.state, "settled": first.settled }));
      }
    }
    var Outgoing = function(connection) {
      this.deliveries = new CircularBuffer(2048);
      this.updated = [];
      this.pending_dispositions = [];
      this.next_delivery_id = 0;
      this.next_pending_delivery = 0;
      this.next_transfer_id = 0;
      this.window = types.MAX_UINT;
      this.remote_next_transfer_id = void 0;
      this.remote_window = void 0;
      this.connection = connection;
    };
    Outgoing.prototype.available = function() {
      return this.deliveries.available();
    };
    Outgoing.prototype.compute_max_payload = function(tag) {
      if (this.connection.max_frame_size) {
        return this.connection.max_frame_size - (50 + tag.length);
      } else {
        return void 0;
      }
    };
    Outgoing.prototype.send = function(sender, tag, data, format) {
      var fragments = [];
      var max_payload = this.compute_max_payload(tag);
      if (max_payload && data.length > max_payload) {
        var start = 0;
        while (start < data.length) {
          var end = Math.min(start + max_payload, data.length);
          fragments.push(data.slice(start, end));
          start = end;
        }
      } else {
        fragments.push(data);
      }
      var d = {
        "id": this.next_delivery_id++,
        "tag": tag,
        "link": sender,
        "data": fragments,
        "format": format ? format : 0,
        "next_to_send": 0,
        "sent": false,
        "settled": false,
        "state": void 0,
        "remote_settled": false,
        "remote_state": void 0
      };
      var self2 = this;
      d.update = function(settled, state) {
        self2.update(d, settled, state);
      };
      this.deliveries.push(d);
      return d;
    };
    Outgoing.prototype.on_begin = function(fields) {
      this.remote_window = fields.incoming_window;
    };
    Outgoing.prototype.on_flow = function(fields) {
      this.remote_next_transfer_id = fields.next_incoming_id;
      this.remote_window = fields.incoming_window;
    };
    Outgoing.prototype.on_disposition = function(fields) {
      var last = fields.last ? fields.last : fields.first;
      for (var i = fields.first; i <= last; i++) {
        var d = this.deliveries.by_id(i);
        if (d && !d.remote_settled) {
          var updated = false;
          if (fields.settled) {
            d.remote_settled = fields.settled;
            updated = true;
          }
          if (fields.state && fields.state !== d.remote_state) {
            d.remote_state = message.unwrap_outcome(fields.state);
            updated = true;
          }
          if (updated) {
            this.updated.push(d);
          }
        }
      }
    };
    Outgoing.prototype.update = function(delivery, settled, state) {
      if (delivery) {
        delivery.settled = settled;
        if (state !== void 0)
          delivery.state = state;
        if (!delivery.remote_settled) {
          this.pending_dispositions.push(delivery);
        }
        delivery.link.connection._register();
      }
    };
    Outgoing.prototype.transfer_window = function() {
      if (this.remote_window) {
        return this.remote_window - (this.next_transfer_id - this.remote_next_transfer_id);
      } else {
        return 0;
      }
    };
    Outgoing.prototype.process = function() {
      var d;
      while (this.next_pending_delivery < this.next_delivery_id) {
        d = this.deliveries.by_id(this.next_pending_delivery);
        if (d) {
          if (d.link.has_credit()) {
            const num_to_send = Math.min(this.transfer_window(), d.data.length - d.next_to_send);
            if (num_to_send > 0) {
              this.window -= num_to_send;
              const end_of_send = d.next_to_send + num_to_send;
              for (var i = d.next_to_send; i < end_of_send; i++) {
                this.next_transfer_id++;
                var more = i + 1 < d.data.length;
                var transfer = frames.transfer({ "handle": d.link.local.handle, "message_format": d.format, "delivery_id": d.id, "delivery_tag": d.tag, "settled": d.settled, "more": more });
                d.link.session.output(transfer, d.data[i]);
              }
              if (end_of_send < d.data.length) {
                d.next_to_send = end_of_send;
                break;
              } else {
                if (d.settled) {
                  d.remote_settled = true;
                }
                d.link.credit--;
                d.link.delivery_count++;
                this.next_pending_delivery++;
              }
            } else {
              log.flow(
                "[%s] Incoming window of peer preventing sending further transfers: remote_window=%d, remote_next_transfer_id=%d, next_transfer_id=%d",
                this.connection.options.id,
                this.remote_window,
                this.remote_next_transfer_id,
                this.next_transfer_id
              );
              break;
            }
          } else {
            log.flow("[%s] Link has no credit", this.connection.options.id);
            break;
          }
        } else {
          console.error("ERROR: Next pending delivery not found: " + this.next_pending_delivery);
          break;
        }
      }
      for (var i = 0; i < this.updated.length; i++) {
        d = this.updated[i];
        if (d.remote_state && d.remote_state.constructor.composite_type) {
          d.link.dispatch(d.remote_state.constructor.composite_type, d.link._context({ "delivery": d }));
        }
        if (d.remote_settled)
          d.link.dispatch("settled", d.link._context({ "delivery": d }));
      }
      this.updated = [];
      if (this.pending_dispositions.length) {
        write_dispositions(this.pending_dispositions);
        this.pending_dispositions = [];
      }
      this.deliveries.pop_if(function(d2) {
        return d2.settled && d2.remote_settled;
      });
    };
    var Incoming = function() {
      this.deliveries = new CircularBuffer(
        2048
        /*TODO: configurable?*/
      );
      this.updated = [];
      this.next_transfer_id = 0;
      this.next_delivery_id = void 0;
      Object.defineProperty(this, "window", { get: function() {
        return this.deliveries.available();
      } });
      this.remote_next_transfer_id = void 0;
      this.remote_window = void 0;
      this.max_transfer_id = this.next_transfer_id + this.window;
    };
    Incoming.prototype.update = function(delivery, settled, state) {
      if (delivery) {
        delivery.settled = settled;
        if (state !== void 0)
          delivery.state = state;
        if (!delivery.remote_settled) {
          this.updated.push(delivery);
        }
        delivery.link.connection._register();
      }
    };
    Incoming.prototype.on_transfer = function(frame, receiver) {
      this.next_transfer_id++;
      if (receiver.is_remote_open()) {
        if (this.next_delivery_id === void 0) {
          this.next_delivery_id = frame.performative.delivery_id;
        }
        var current;
        if (receiver._incomplete) {
          current = receiver._incomplete;
          if (util.is_defined(frame.performative.delivery_id) && current.id !== frame.performative.delivery_id) {
            throw Error("frame sequence error: delivery " + current.id + " not complete, got " + frame.performative.delivery_id);
          }
          if (frame.payload) {
            current.frames.push(frame.payload);
          }
        } else if (this.next_delivery_id === frame.performative.delivery_id) {
          current = {
            "id": frame.performative.delivery_id,
            "tag": frame.performative.delivery_tag,
            "format": frame.performative.message_format,
            "link": receiver,
            "settled": false,
            "state": void 0,
            "remote_settled": frame.performative.settled === void 0 ? false : frame.performative.settled,
            "remote_state": frame.performative.state,
            "frames": [frame.payload]
          };
          var self2 = this;
          current.update = function(settled, state) {
            var settled_ = settled;
            if (settled_ === void 0) {
              settled_ = receiver.local.attach.rcv_settle_mode !== 1;
            }
            self2.update(current, settled_, state);
          };
          current.accept = function() {
            this.update(void 0, message.accepted().described());
          };
          current.release = function(params) {
            if (params) {
              this.update(void 0, message.modified(params).described());
            } else {
              this.update(void 0, message.released().described());
            }
          };
          current.reject = function(error) {
            this.update(void 0, message.rejected({ "error": error }).described());
          };
          current.modified = function(params) {
            this.update(void 0, message.modified(params).described());
          };
          this.deliveries.push(current);
          this.next_delivery_id++;
        } else {
          throw Error("frame sequence error: expected " + this.next_delivery_id + ", got " + frame.performative.delivery_id);
        }
        current.incomplete = frame.performative.more;
        if (current.incomplete) {
          receiver._incomplete = current;
        } else {
          receiver._incomplete = void 0;
          const data = current.frames.length === 1 ? current.frames[0] : Buffer.concat(current.frames);
          delete current.frames;
          if (receiver.credit > 0)
            receiver.credit--;
          else
            console.error("Received transfer when credit was %d", receiver.credit);
          receiver.delivery_count++;
          var msgctxt = current.format === 0 ? { "message": message.decode(data), "delivery": current } : { "message": data, "delivery": current, "format": current.format };
          receiver.dispatch("message", receiver._context(msgctxt));
        }
      } else {
        throw Error("transfer after detach");
      }
    };
    Incoming.prototype.process = function(session) {
      if (this.updated.length > 0) {
        write_dispositions(this.updated);
        this.updated = [];
      }
      this.deliveries.pop_if(function(d) {
        return d.settled;
      });
      if (this.max_transfer_id - this.next_transfer_id < this.window / 2) {
        session._write_flow();
      }
    };
    Incoming.prototype.on_begin = function(fields) {
      this.remote_window = fields.outgoing_window;
      this.remote_next_transfer_id = fields.next_outgoing_id;
    };
    Incoming.prototype.on_flow = function(fields) {
      this.remote_next_transfer_id = fields.next_outgoing_id;
      this.remote_window = fields.outgoing_window;
    };
    Incoming.prototype.on_disposition = function(fields) {
      var last = fields.last ? fields.last : fields.first;
      for (var i = fields.first; i <= last; i++) {
        var d = this.deliveries.by_id(i);
        if (d && !d.remote_settled) {
          if (fields.state && fields.state !== d.remote_state) {
            d.remote_state = message.unwrap_outcome(fields.state);
          }
          if (fields.settled) {
            d.remote_settled = fields.settled;
            d.link.dispatch("settled", d.link._context({ "delivery": d }));
          }
        }
      }
    };
    var Session = function(connection, local_channel) {
      this.connection = connection;
      this.outgoing = new Outgoing(connection);
      this.incoming = new Incoming();
      this.state = new EndpointState();
      this.local = { "channel": local_channel, "handles": {} };
      this.local.begin = frames.begin({ next_outgoing_id: this.outgoing.next_transfer_id, incoming_window: this.incoming.window, outgoing_window: this.outgoing.window });
      this.local.end = frames.end();
      this.remote = { "handles": {} };
      this.links = {};
      this.options = {};
      Object.defineProperty(this, "error", { get: function() {
        return this.remote.end ? this.remote.end.error : void 0;
      } });
      this.observers = new EventEmitter();
    };
    Session.prototype = Object.create(EventEmitter.prototype);
    Session.prototype.constructor = Session;
    Session.prototype._disconnect = function() {
      this.state.disconnected();
      for (var l in this.links) {
        this.links[l]._disconnect();
      }
      if (!this.state.was_open) {
        this.remove();
      }
    };
    Session.prototype._reconnect = function() {
      this.state.reconnect();
      this.outgoing = new Outgoing(this.connection);
      this.incoming = new Incoming();
      this.remote = { "handles": {} };
      for (var l in this.links) {
        this.links[l]._reconnect();
      }
    };
    Session.prototype.dispatch = function(name) {
      log.events("[%s] Session got event: %s", this.connection.options.id, name);
      EventEmitter.prototype.emit.apply(this.observers, arguments);
      if (this.listeners(name).length) {
        EventEmitter.prototype.emit.apply(this, arguments);
        return true;
      } else {
        return this.connection.dispatch.apply(this.connection, arguments);
      }
    };
    Session.prototype.output = function(frame, payload) {
      this.connection._write_frame(this.local.channel, frame, payload);
    };
    Session.prototype.create_sender = function(name, opts) {
      if (!opts) {
        opts = this.get_option("sender_options", {});
      }
      return this.create_link(name, link.Sender, opts);
    };
    Session.prototype.create_receiver = function(name, opts) {
      if (!opts) {
        opts = this.get_option("receiver_options", {});
      }
      return this.create_link(name, link.Receiver, opts);
    };
    function merge3(defaults, specific) {
      for (var f in specific) {
        if (f === "properties" && defaults.properties) {
          merge3(defaults.properties, specific.properties);
        } else {
          defaults[f] = specific[f];
        }
      }
    }
    function attach(factory, args, remote_terminus, default_args) {
      var opts = Object.create(default_args || {});
      if (typeof args === "string") {
        opts[remote_terminus] = args;
      } else if (args) {
        merge3(opts, args);
      }
      if (!opts.name)
        opts.name = util.generate_uuid();
      var l = factory(opts.name, opts);
      for (var t in { "source": 0, "target": 0 }) {
        if (opts[t]) {
          if (typeof opts[t] === "string") {
            opts[t] = { "address": opts[t] };
          }
          l["set_" + t](opts[t]);
        }
      }
      if (l.is_sender() && opts.source === void 0) {
        opts.source = l.set_source({});
      }
      if (l.is_receiver() && opts.target === void 0) {
        opts.target = l.set_target({});
      }
      l.attach();
      return l;
    }
    Session.prototype.get_option = function(name, default_value) {
      if (this.options[name] !== void 0)
        return this.options[name];
      else
        return this.connection.get_option(name, default_value);
    };
    Session.prototype.attach_sender = function(args) {
      return attach(this.create_sender.bind(this), args, "target", this.get_option("sender_options", {}));
    };
    Session.prototype.open_sender = Session.prototype.attach_sender;
    Session.prototype.attach_receiver = function(args) {
      return attach(this.create_receiver.bind(this), args, "source", this.get_option("receiver_options", {}));
    };
    Session.prototype.open_receiver = Session.prototype.attach_receiver;
    Session.prototype.find_sender = function(filter) {
      return this.find_link(util.sender_filter(filter));
    };
    Session.prototype.find_receiver = function(filter) {
      return this.find_link(util.receiver_filter(filter));
    };
    Session.prototype.find_link = function(filter) {
      for (var name in this.links) {
        var link2 = this.links[name];
        if (filter(link2))
          return link2;
      }
      return void 0;
    };
    Session.prototype.each_receiver = function(action, filter) {
      this.each_link(action, util.receiver_filter(filter));
    };
    Session.prototype.each_sender = function(action, filter) {
      this.each_link(action, util.sender_filter(filter));
    };
    Session.prototype.each_link = function(action, filter) {
      for (var name in this.links) {
        var link2 = this.links[name];
        if (filter === void 0 || filter(link2))
          action(link2);
      }
    };
    Session.prototype.create_link = function(name, constructor, opts) {
      var i = 0;
      while (this.local.handles[i])
        i++;
      var l = new constructor(this, name, i, opts);
      this.links[name] = l;
      this.local.handles[i] = l;
      return l;
    };
    Session.prototype.begin = function() {
      if (this.state.open()) {
        this.connection._register();
      }
    };
    Session.prototype.open = Session.prototype.begin;
    Session.prototype.end = function(error) {
      if (error)
        this.local.end.error = error;
      if (this.state.close()) {
        this.connection._register();
      }
    };
    Session.prototype.close = Session.prototype.end;
    Session.prototype.is_open = function() {
      return this.connection.is_open() && this.state.is_open();
    };
    Session.prototype.is_remote_open = function() {
      return this.connection.is_remote_open() && this.state.remote_open;
    };
    Session.prototype.is_itself_closed = function() {
      return this.state.is_closed();
    };
    Session.prototype.is_closed = function() {
      return this.connection.is_closed() || this.is_itself_closed();
    };
    function notify_sendable(sender) {
      sender.dispatch("sendable", sender._context());
    }
    function is_sender_sendable(sender) {
      return sender.is_open() && sender.sendable();
    }
    Session.prototype._process = function() {
      do {
        if (this.state.need_open()) {
          this.output(this.local.begin);
        }
        var was_blocked = this.outgoing.deliveries.available() === 0;
        this.outgoing.process();
        if (was_blocked && this.outgoing.deliveries.available()) {
          this.each_sender(notify_sendable, is_sender_sendable);
        }
        this.incoming.process(this);
        for (var k in this.links) {
          this.links[k]._process();
        }
        if (this.state.need_close()) {
          this.output(this.local.end);
        }
      } while (!this.state.has_settled());
    };
    Session.prototype.send = function(sender, tag, data, format) {
      var d = this.outgoing.send(sender, tag, data, format);
      this.connection._register();
      return d;
    };
    Session.prototype._write_flow = function(link2) {
      var fields = {
        "next_incoming_id": this.incoming.next_transfer_id,
        "incoming_window": this.incoming.window,
        "next_outgoing_id": this.outgoing.next_transfer_id,
        "outgoing_window": this.outgoing.window
      };
      this.incoming.max_transfer_id = fields.next_incoming_id + fields.incoming_window;
      if (link2) {
        if (link2._get_drain())
          fields.drain = true;
        fields.delivery_count = link2.delivery_count;
        fields.handle = link2.local.handle;
        fields.link_credit = link2.credit;
      }
      this.output(frames.flow(fields));
    };
    Session.prototype.on_begin = function(frame) {
      if (this.state.remote_opened()) {
        if (!this.remote.channel) {
          this.remote.channel = frame.channel;
        }
        this.remote.begin = frame.performative;
        this.outgoing.on_begin(frame.performative);
        this.incoming.on_begin(frame.performative);
        this.open();
        this.dispatch("session_open", this._context());
      } else {
        throw Error("Begin already received");
      }
    };
    Session.prototype.on_end = function(frame) {
      if (this.state.remote_closed()) {
        this.remote.end = frame.performative;
        var error = this.remote.end.error;
        if (error) {
          var handled = this.dispatch("session_error", this._context());
          handled = this.dispatch("session_close", this._context()) || handled;
          if (!handled) {
            EventEmitter.prototype.emit.call(this.connection.container, "error", new SessionError(error.description, error.condition, this));
          }
        } else {
          this.dispatch("session_close", this._context());
        }
        var self2 = this;
        var token = this.state.mark();
        process.nextTick(function() {
          if (self2.state.marker === token) {
            self2.close();
            process.nextTick(function() {
              self2.remove();
            });
          }
        });
      } else {
        throw Error("End already received");
      }
    };
    Session.prototype.on_attach = function(frame) {
      var name = frame.performative.name;
      var link2 = this.links[name];
      if (!link2) {
        link2 = frame.performative.role ? this.create_sender(name) : this.create_receiver(name);
      }
      this.remote.handles[frame.performative.handle] = link2;
      link2.on_attach(frame);
      link2.remote.attach = frame.performative;
    };
    Session.prototype.on_disposition = function(frame) {
      if (frame.performative.role) {
        log.events("[%s] Received disposition for outgoing transfers", this.connection.options.id);
        this.outgoing.on_disposition(frame.performative);
      } else {
        log.events("[%s] Received disposition for incoming transfers", this.connection.options.id);
        this.incoming.on_disposition(frame.performative);
      }
      this.connection._register();
    };
    Session.prototype.on_flow = function(frame) {
      this.outgoing.on_flow(frame.performative);
      this.incoming.on_flow(frame.performative);
      if (util.is_defined(frame.performative.handle)) {
        this._get_link(frame).on_flow(frame);
      }
      this.connection._register();
    };
    Session.prototype._context = function(c) {
      var context = c ? c : {};
      context.session = this;
      return this.connection._context(context);
    };
    Session.prototype._get_link = function(frame) {
      var handle = frame.performative.handle;
      var link2 = this.remote.handles[handle];
      if (!link2) {
        throw Error("Invalid handle " + handle);
      }
      return link2;
    };
    Session.prototype.on_detach = function(frame) {
      this._get_link(frame).on_detach(frame);
    };
    Session.prototype.remove_link = function(link2) {
      delete this.remote.handles[link2.remote.handle];
      delete this.local.handles[link2.local.handle];
      delete this.links[link2.name];
    };
    Session.prototype.remove = function() {
      this.connection.remove_session(this);
    };
    Session.prototype.on_transfer = function(frame) {
      this.incoming.on_transfer(frame, this._get_link(frame));
    };
    module2.exports = Session;
  }
});

// ../../node_modules/rhea/lib/connection.js
var require_connection = __commonJS({
  "../../node_modules/rhea/lib/connection.js"(exports, module2) {
    "use strict";
    var errors = require_errors();
    var frames = require_frames();
    var log = require_log2();
    var sasl = require_sasl();
    var util = require_util2();
    var EndpointState = require_endpoint();
    var Session = require_session();
    var Transport = require_transport();
    var fs = require("fs");
    var os = require("os");
    var path = require("path");
    var net = require("net");
    var tls = require("tls");
    var EventEmitter = require("events").EventEmitter;
    var AMQP_PROTOCOL_ID = 0;
    function find_connect_config() {
      var paths;
      if (process.env.MESSAGING_CONNECT_FILE) {
        paths = [process.env.MESSAGING_CONNECT_FILE];
      } else {
        paths = [process.cwd(), path.join(os.homedir(), ".config/messaging"), "/etc/messaging"].map(function(base) {
          return path.join(base, "/connect.json");
        });
      }
      for (var i = 0; i < paths.length; i++) {
        if (fs.existsSync(paths[i])) {
          var obj = JSON.parse(fs.readFileSync(paths[i], "utf8"));
          log.config("using config from %s: %j", paths[i], obj);
          return obj;
        }
      }
      return {};
    }
    function get_default_connect_config() {
      var config = find_connect_config();
      var options = {};
      if (config.scheme === "amqps")
        options.transport = "tls";
      if (config.host)
        options.host = config.host;
      if (config.port === "amqp")
        options.port = 5672;
      else if (config.port === "amqps")
        options.port = 5671;
      else
        options.port = config.port;
      if (!(config.sasl && config.sasl.enabled === false)) {
        if (config.user)
          options.username = config.user;
        else
          options.username = "anonymous";
        if (config.password)
          options.password = config.password;
        if (config.sasl_mechanisms)
          options.sasl_mechanisms = config.sasl_mechanisms;
      }
      if (config.tls) {
        if (config.tls.key)
          options.key = fs.readFileSync(config.tls.key);
        if (config.tls.cert)
          options.cert = fs.readFileSync(config.tls.cert);
        if (config.tls.ca)
          options.ca = [fs.readFileSync(config.tls.ca)];
        if (config.verify === false || config.tls.verify === false)
          options.rejectUnauthorized = false;
      }
      if (options.transport === "tls") {
        options.servername = options.host;
      }
      return options;
    }
    function get_socket_id(socket) {
      if (socket.get_id_string)
        return socket.get_id_string();
      return socket.localAddress + ":" + socket.localPort + " -> " + socket.remoteAddress + ":" + socket.remotePort;
    }
    function session_per_connection(conn) {
      var ssn = null;
      return {
        "get_session": function() {
          if (!ssn) {
            ssn = conn.create_session();
            ssn.observers.on("session_close", function() {
              ssn = null;
            });
            ssn.begin();
          }
          return ssn;
        }
      };
    }
    function restrict(count, f) {
      if (count) {
        var current = count;
        var reset;
        return function(successful_attempts) {
          if (reset !== successful_attempts) {
            current = count;
            reset = successful_attempts;
          }
          if (current--)
            return f(successful_attempts);
          else
            return -1;
        };
      } else {
        return f;
      }
    }
    function backoff(initial, max) {
      var delay = initial;
      var reset;
      return function(successful_attempts) {
        if (reset !== successful_attempts) {
          delay = initial;
          reset = successful_attempts;
        }
        var current = delay;
        var next = delay * 2;
        delay = max > next ? next : max;
        return current;
      };
    }
    function get_connect_fn(options) {
      if (options.transport === void 0 || options.transport === "tcp") {
        return net.connect;
      } else if (options.transport === "tls" || options.transport === "ssl") {
        return tls.connect;
      } else {
        throw Error("Unrecognised transport: " + options.transport);
      }
    }
    function connection_details(options) {
      var details = {};
      details.connect = options.connect ? options.connect : get_connect_fn(options);
      details.host = options.host ? options.host : "localhost";
      details.port = options.port ? options.port : 5672;
      details.options = options;
      return details;
    }
    var aliases = [
      "container_id",
      "hostname",
      "max_frame_size",
      "channel_max",
      "idle_time_out",
      "outgoing_locales",
      "incoming_locales",
      "offered_capabilities",
      "desired_capabilities",
      "properties"
    ];
    function remote_property_shortcut(name) {
      return function() {
        return this.remote.open ? this.remote.open[name] : void 0;
      };
    }
    function connection_fields(fields) {
      var o = {};
      aliases.forEach(function(name) {
        if (fields[name] !== void 0) {
          o[name] = fields[name];
        }
      });
      return o;
    }
    function set_reconnect(reconnect, connection) {
      if (typeof reconnect === "boolean") {
        if (reconnect) {
          var initial = connection.get_option("initial_reconnect_delay", 100);
          var max = connection.get_option("max_reconnect_delay", 6e4);
          connection.options.reconnect = restrict(
            connection.get_option("reconnect_limit"),
            backoff(initial, max)
          );
        } else {
          connection.options.reconnect = false;
        }
      } else if (typeof reconnect === "number") {
        var fixed = connection.options.reconnect;
        connection.options.reconnect = restrict(
          connection.get_option("reconnect_limit"),
          function() {
            return fixed;
          }
        );
      }
    }
    var conn_counter = 1;
    var Connection = function(options, container) {
      this.options = {};
      if (options) {
        for (var k in options) {
          this.options[k] = options[k];
        }
        if ((options.transport === "tls" || options.transport === "ssl") && options.servername === void 0 && options.host !== void 0) {
          this.options.servername = options.host;
        }
      } else {
        this.options = get_default_connect_config();
      }
      this.container = container;
      if (!this.options.id) {
        this.options.id = "connection-" + conn_counter++;
      }
      if (!this.options.container_id) {
        this.options.container_id = container ? container.id : util.generate_uuid();
      }
      if (!this.options.connection_details) {
        var self2 = this;
        this.options.connection_details = function() {
          return connection_details(self2.options);
        };
      }
      var reconnect = this.get_option("reconnect", true);
      set_reconnect(reconnect, this);
      this.registered = false;
      this.state = new EndpointState();
      this.local_channel_map = {};
      this.remote_channel_map = {};
      this.local = {};
      this.remote = {};
      this.local.open = frames.open(connection_fields(this.options));
      this.local.close = frames.close({});
      this.session_policy = session_per_connection(this);
      this.amqp_transport = new Transport(this.options.id, AMQP_PROTOCOL_ID, frames.TYPE_AMQP, this);
      this.sasl_transport = void 0;
      this.transport = this.amqp_transport;
      this.conn_established_counter = 0;
      this.heartbeat_out = void 0;
      this.heartbeat_in = void 0;
      this.abort_idle = void 0;
      this.socket_ready = false;
      this.scheduled_reconnect = void 0;
      this.default_sender = void 0;
      this.closed_with_non_fatal_error = false;
      var self2 = this;
      aliases.forEach(function(alias) {
        Object.defineProperty(self2, alias, { get: remote_property_shortcut(alias) });
      });
      Object.defineProperty(this, "error", { get: function() {
        return this.remote.close ? this.remote.close.error : void 0;
      } });
    };
    Connection.prototype = Object.create(EventEmitter.prototype);
    Connection.prototype.constructor = Connection;
    Connection.prototype.dispatch = function(name) {
      log.events("[%s] Connection got event: %s", this.options.id, name);
      if (this.listeners(name).length) {
        EventEmitter.prototype.emit.apply(this, arguments);
        return true;
      } else if (this.container) {
        return this.container.dispatch.apply(this.container, arguments);
      } else {
        return false;
      }
    };
    Connection.prototype._disconnect = function() {
      this.state.disconnected();
      for (var k in this.local_channel_map) {
        this.local_channel_map[k]._disconnect();
      }
      this.socket_ready = false;
    };
    Connection.prototype._reconnect = function() {
      if (this.abort_idle) {
        clearTimeout(this.abort_idle);
        this.abort_idle = void 0;
        this.local.close.error = void 0;
        this.state = new EndpointState();
        this.state.open();
      }
      this.state.reconnect();
      this._reset_remote_state();
    };
    Connection.prototype._reset_remote_state = function() {
      this.amqp_transport = new Transport(this.options.id, AMQP_PROTOCOL_ID, frames.TYPE_AMQP, this);
      this.sasl_transport = void 0;
      this.transport = this.amqp_transport;
      this.remote = {};
      this.remote_channel_map = {};
      var localChannelMap = this.local_channel_map;
      for (var k in localChannelMap) {
        localChannelMap[k]._reconnect();
      }
    };
    Connection.prototype.connect = function() {
      this.is_server = false;
      if (this.abort_idle) {
        clearTimeout(this.abort_idle);
        this.abort_idle = void 0;
      }
      this._reset_remote_state();
      this._connect(this.options.connection_details(this.conn_established_counter));
      this.open();
      return this;
    };
    Connection.prototype.reconnect = function() {
      this.scheduled_reconnect = void 0;
      log.reconnect("[%s] reconnecting...", this.options.id);
      this._reconnect();
      this._connect(this.options.connection_details(this.conn_established_counter));
      process.nextTick(this._process.bind(this));
      return this;
    };
    Connection.prototype.set_reconnect = function(reconnect) {
      set_reconnect(reconnect, this);
    };
    Connection.prototype._connect = function(details) {
      if (details.connect) {
        this.init(details.connect(details.port, details.host, details.options, this.connected.bind(this)));
      } else {
        this.init(get_connect_fn(details)(details.port, details.host, details.options, this.connected.bind(this)));
      }
      return this;
    };
    Connection.prototype.accept = function(socket) {
      this.is_server = true;
      log.io("[%s] client accepted: %s", this.id, get_socket_id(socket));
      this.socket_ready = true;
      return this.init(socket);
    };
    Connection.prototype.abort_socket = function(socket) {
      if (socket === this.socket) {
        this.abort_idle = void 0;
        log.io("[%s] aborting socket", this.options.id);
        this.socket.end();
        if (this.socket.removeAllListeners) {
          this.socket.removeAllListeners("data");
          this.socket.removeAllListeners("error");
          this.socket.removeAllListeners("end");
        }
        if (typeof this.socket.destroy === "function") {
          this.socket.destroy();
        }
        this._disconnected();
      }
    };
    Connection.prototype.init = function(socket) {
      this.socket = socket;
      if (this.get_option("tcp_no_delay", false) && this.socket.setNoDelay) {
        this.socket.setNoDelay(true);
      }
      this.socket.on("data", this.input.bind(this));
      this.socket.on("error", this.on_error.bind(this));
      this.socket.on("end", this.eof.bind(this));
      if (this.is_server) {
        var mechs;
        if (this.container && Object.getOwnPropertyNames(this.container.sasl_server_mechanisms).length) {
          mechs = this.container.sasl_server_mechanisms;
        }
        if (this.socket.encrypted && this.socket.authorized && this.get_option("enable_sasl_external", false)) {
          mechs = sasl.server_add_external(mechs ? util.clone(mechs) : {});
        }
        if (mechs) {
          if (mechs.ANONYMOUS !== void 0 && !this.get_option("require_sasl", false)) {
            this.sasl_transport = new sasl.Selective(this, mechs);
          } else {
            this.sasl_transport = new sasl.Server(this, mechs);
          }
        } else {
          if (!this.get_option("disable_sasl", false)) {
            var anon = sasl.server_mechanisms();
            anon.enable_anonymous();
            this.sasl_transport = new sasl.Selective(this, anon);
          }
        }
      } else {
        var mechanisms = this.get_option("sasl_mechanisms");
        if (!mechanisms) {
          var username = this.get_option("username");
          var password = this.get_option("password");
          var token = this.get_option("token");
          if (username) {
            mechanisms = sasl.client_mechanisms();
            if (password)
              mechanisms.enable_plain(username, password);
            else if (token)
              mechanisms.enable_xoauth2(username, token);
            else
              mechanisms.enable_anonymous(username);
          }
        }
        if (this.socket.encrypted && this.options.cert && this.get_option("enable_sasl_external", false)) {
          if (!mechanisms)
            mechanisms = sasl.client_mechanisms();
          mechanisms.enable_external();
        }
        if (mechanisms) {
          this.sasl_transport = new sasl.Client(this, mechanisms, this.options.sasl_init_hostname || this.options.servername || this.options.host);
        }
      }
      this.transport = this.sasl_transport ? this.sasl_transport : this.amqp_transport;
      return this;
    };
    Connection.prototype.attach_sender = function(options) {
      return this.session_policy.get_session().attach_sender(options);
    };
    Connection.prototype.open_sender = Connection.prototype.attach_sender;
    Connection.prototype.attach_receiver = function(options) {
      if (this.get_option("tcp_no_delay", true) && this.socket.setNoDelay) {
        this.socket.setNoDelay(true);
      }
      return this.session_policy.get_session().attach_receiver(options);
    };
    Connection.prototype.open_receiver = Connection.prototype.attach_receiver;
    Connection.prototype.get_option = function(name, default_value) {
      if (this.options[name] !== void 0)
        return this.options[name];
      else if (this.container)
        return this.container.get_option(name, default_value);
      else
        return default_value;
    };
    Connection.prototype.send = function(msg) {
      if (this.default_sender === void 0) {
        this.default_sender = this.open_sender({ target: {} });
      }
      return this.default_sender.send(msg);
    };
    Connection.prototype.connected = function() {
      this.socket_ready = true;
      this.conn_established_counter++;
      log.io("[%s] connected %s", this.options.id, get_socket_id(this.socket));
      this.output();
    };
    Connection.prototype.sasl_failed = function(text, condition) {
      this.transport_error = new errors.ConnectionError(text, condition ? condition : "amqp:unauthorized-access", this);
      this._handle_error();
      this.socket.end();
    };
    Connection.prototype._is_fatal = function(error_condition) {
      var all_errors_non_fatal = this.get_option("all_errors_non_fatal", false);
      if (all_errors_non_fatal) {
        return false;
      } else {
        var non_fatal = this.get_option("non_fatal_errors", ["amqp:connection:forced"]);
        return non_fatal.indexOf(error_condition) < 0;
      }
    };
    Connection.prototype._handle_error = function() {
      var error = this.get_error();
      if (error) {
        var handled = this.dispatch("connection_error", this._context({ error }));
        handled = this.dispatch("connection_close", this._context({ error })) || handled;
        if (!this._is_fatal(error.condition)) {
          if (this.state.local_open) {
            this.closed_with_non_fatal_error = true;
          }
        } else if (!handled) {
          this.dispatch("error", new errors.ConnectionError(error.description, error.condition, this));
        }
        return true;
      } else {
        return false;
      }
    };
    Connection.prototype.get_error = function() {
      if (this.transport_error)
        return this.transport_error;
      if (this.remote.close && this.remote.close.error) {
        return new errors.ConnectionError(this.remote.close.error.description, this.remote.close.error.condition, this);
      }
      return void 0;
    };
    Connection.prototype._get_peer_details = function() {
      var s = "";
      if (this.remote.open && this.remote.open.container) {
        s += this.remote.open.container + " ";
      }
      if (this.remote.open && this.remote.open.properties) {
        s += JSON.stringify(this.remote.open.properties);
      }
      return s;
    };
    Connection.prototype.output = function() {
      try {
        if (this.socket && this.socket_ready) {
          if (this.heartbeat_out)
            clearTimeout(this.heartbeat_out);
          this.transport.write(this.socket);
          if ((this.is_closed() && this.state.has_settled() || this.abort_idle || this.transport_error) && !this.transport.has_writes_pending()) {
            this.socket.end();
          } else if (this.is_open() && this.remote.open.idle_time_out) {
            this.heartbeat_out = setTimeout(this._write_frame.bind(this), this.remote.open.idle_time_out / 2);
          }
          if (this.local.open.idle_time_out && this.heartbeat_in === void 0) {
            this.heartbeat_in = setTimeout(this.idle.bind(this), this.local.open.idle_time_out);
          }
        }
      } catch (e) {
        this.saved_error = e;
        if (e.name === "ProtocolError") {
          console.error("[" + this.options.id + "] error on write: " + e + " " + this._get_peer_details() + " " + e.name);
          this.dispatch("protocol_error", e) || console.error("[" + this.options.id + "] error on write: " + e + " " + this._get_peer_details());
        } else {
          this.dispatch("error", e);
        }
        this.socket.end();
      }
    };
    function byte_to_hex(value) {
      if (value < 16)
        return "0x0" + Number(value).toString(16);
      else
        return "0x" + Number(value).toString(16);
    }
    function buffer_to_hex(buffer) {
      var bytes = [];
      for (var i = 0; i < buffer.length; i++) {
        bytes.push(byte_to_hex(buffer[i]));
      }
      return bytes.join(",");
    }
    Connection.prototype.input = function(buff) {
      var buffer;
      try {
        if (this.heartbeat_in)
          clearTimeout(this.heartbeat_in);
        log.io("[%s] read %d bytes", this.options.id, buff.length);
        if (this.frame_size) {
          this.received_bytes += buff.length;
          this.chunks.push(buff);
          if (this.frame_size <= this.received_bytes) {
            buffer = Buffer.concat(this.chunks, this.received_bytes);
            this.chunks = null;
            this.frame_size = void 0;
          } else {
            log.io("[%s] pushed %d bytes", this.options.id, buff.length);
            return;
          }
        } else if (this.previous_input) {
          buffer = Buffer.concat([this.previous_input, buff]);
          this.previous_input = null;
        } else {
          buffer = buff;
        }
        const read = this.transport.read(buffer, this);
        if (read < buffer.length) {
          const previous_input = buffer.slice(read);
          this.frame_size = this.transport.peek_size(previous_input);
          if (this.frame_size) {
            this.chunks = [previous_input];
            this.received_bytes = previous_input.length;
            log.io("[%s] waiting frame_size %s", this.options.id, this.frame_size);
          } else {
            this.previous_input = previous_input;
          }
        }
        if (this.local.open.idle_time_out)
          this.heartbeat_in = setTimeout(this.idle.bind(this), this.local.open.idle_time_out);
        if (this.transport.has_writes_pending()) {
          this.output();
        } else if (this.is_closed() && this.state.has_settled()) {
          this.socket.end();
        } else if (this.is_open() && this.remote.open.idle_time_out && !this.heartbeat_out) {
          this.heartbeat_out = setTimeout(this._write_frame.bind(this), this.remote.open.idle_time_out / 2);
        }
      } catch (e) {
        this.saved_error = e;
        if (e.name === "ProtocolError") {
          this.dispatch("protocol_error", e) || console.error("[" + this.options.id + "] error on read: " + e + " " + this._get_peer_details() + " (buffer:" + buffer_to_hex(buffer) + ")");
        } else {
          this.dispatch("error", e);
        }
        this.socket.end();
      }
    };
    Connection.prototype.idle = function() {
      if (!this.is_closed()) {
        this.closed_with_non_fatal_error = true;
        this.local.close.error = { condition: "amqp:resource-limit-exceeded", description: "max idle time exceeded" };
        this.close();
        this.abort_idle = setTimeout(this.abort_socket.bind(this, this.socket), 1e3);
      }
    };
    Connection.prototype.on_error = function(e) {
      this._disconnected(e);
    };
    Connection.prototype.eof = function(e) {
      var error = e || this.saved_error;
      this.saved_error = void 0;
      this._disconnected(error);
    };
    Connection.prototype._disconnected = function(error) {
      if (this.heartbeat_out) {
        clearTimeout(this.heartbeat_out);
        this.heartbeat_out = void 0;
      }
      if (this.heartbeat_in) {
        clearTimeout(this.heartbeat_in);
        this.heartbeat_in = void 0;
      }
      if (this.abort_idle) {
        clearTimeout(this.abort_idle);
        this.abort_idle = void 0;
      }
      var was_closed_with_non_fatal_error = this.closed_with_non_fatal_error;
      if (this.closed_with_non_fatal_error) {
        this.closed_with_non_fatal_error = false;
        if (this.options.reconnect)
          this.open();
      }
      if ((!this.is_closed() || was_closed_with_non_fatal_error) && this.scheduled_reconnect === void 0) {
        this._disconnect();
        var disconnect_ctxt = {};
        if (error) {
          disconnect_ctxt.error = error;
        }
        if (!this.is_server && !this.transport_error && this.options.reconnect) {
          var delay = this.options.reconnect(this.conn_established_counter);
          if (delay >= 0) {
            log.reconnect("[%s] Scheduled reconnect in " + delay + "ms", this.options.id);
            this.scheduled_reconnect = setTimeout(this.reconnect.bind(this), delay);
            disconnect_ctxt.reconnecting = true;
          } else {
            disconnect_ctxt.reconnecting = false;
          }
        }
        if (!this.dispatch("disconnected", this._context(disconnect_ctxt))) {
          console.warn("[" + this.options.id + "] disconnected %s", disconnect_ctxt.error || "");
        }
      }
    };
    Connection.prototype.open = function() {
      if (this.state.open()) {
        this._register();
      }
    };
    Connection.prototype.close = function(error) {
      if (error)
        this.local.close.error = error;
      if (this.state.close()) {
        this._register();
      }
    };
    Connection.prototype.is_open = function() {
      return this.state.is_open();
    };
    Connection.prototype.is_remote_open = function() {
      return this.state.remote_open;
    };
    Connection.prototype.is_closed = function() {
      return this.state.is_closed();
    };
    Connection.prototype.create_session = function() {
      var i = 0;
      while (this.local_channel_map[i])
        i++;
      var session = new Session(this, i);
      this.local_channel_map[i] = session;
      return session;
    };
    Connection.prototype.find_sender = function(filter) {
      return this.find_link(util.sender_filter(filter));
    };
    Connection.prototype.find_receiver = function(filter) {
      return this.find_link(util.receiver_filter(filter));
    };
    Connection.prototype.find_link = function(filter) {
      for (var channel in this.local_channel_map) {
        var session = this.local_channel_map[channel];
        var result = session.find_link(filter);
        if (result)
          return result;
      }
      return void 0;
    };
    Connection.prototype.each_receiver = function(action, filter) {
      this.each_link(action, util.receiver_filter(filter));
    };
    Connection.prototype.each_sender = function(action, filter) {
      this.each_link(action, util.sender_filter(filter));
    };
    Connection.prototype.each_link = function(action, filter) {
      for (var channel in this.local_channel_map) {
        var session = this.local_channel_map[channel];
        session.each_link(action, filter);
      }
    };
    Connection.prototype.on_open = function(frame) {
      if (this.state.remote_opened()) {
        this.remote.open = frame.performative;
        this.open();
        this.dispatch("connection_open", this._context());
      } else {
        throw new errors.ProtocolError("Open already received");
      }
    };
    Connection.prototype.on_close = function(frame) {
      if (this.state.remote_closed()) {
        this.remote.close = frame.performative;
        if (this.remote.close.error) {
          this._handle_error();
        } else {
          this.dispatch("connection_close", this._context());
        }
        if (this.heartbeat_out)
          clearTimeout(this.heartbeat_out);
        var self2 = this;
        process.nextTick(function() {
          self2.close();
        });
      } else {
        throw new errors.ProtocolError("Close already received");
      }
    };
    Connection.prototype._register = function() {
      if (!this.registered) {
        this.registered = true;
        process.nextTick(this._process.bind(this));
      }
    };
    Connection.prototype._process = function() {
      this.registered = false;
      do {
        if (this.state.need_open()) {
          this._write_open();
        }
        var localChannelMap = this.local_channel_map;
        for (var k in localChannelMap) {
          localChannelMap[k]._process();
        }
        if (this.state.need_close()) {
          this._write_close();
        }
      } while (!this.state.has_settled());
    };
    Connection.prototype._write_frame = function(channel, frame, payload) {
      this.amqp_transport.encode(frames.amqp_frame(channel, frame, payload));
      this.output();
    };
    Connection.prototype._write_open = function() {
      this._write_frame(0, this.local.open);
    };
    Connection.prototype._write_close = function() {
      this._write_frame(0, this.local.close);
      this.local.close.error = void 0;
    };
    Connection.prototype.on_begin = function(frame) {
      var session;
      if (frame.performative.remote_channel === null || frame.performative.remote_channel === void 0) {
        session = this.create_session();
        session.local.begin.remote_channel = frame.channel;
      } else {
        session = this.local_channel_map[frame.performative.remote_channel];
        if (!session)
          throw new errors.ProtocolError("Invalid value for remote channel " + frame.performative.remote_channel);
      }
      session.on_begin(frame);
      this.remote_channel_map[frame.channel] = session;
    };
    Connection.prototype.get_peer_certificate = function() {
      if (this.socket && this.socket.getPeerCertificate) {
        return this.socket.getPeerCertificate();
      } else {
        return void 0;
      }
    };
    Connection.prototype.get_tls_socket = function() {
      if (this.socket && (this.options.transport === "tls" || this.options.transport === "ssl")) {
        return this.socket;
      } else {
        return void 0;
      }
    };
    Connection.prototype._context = function(c) {
      var context = c ? c : {};
      context.connection = this;
      if (this.container)
        context.container = this.container;
      return context;
    };
    Connection.prototype.remove_session = function(session) {
      if (this.remote_channel_map[session.remote.channel] === session) {
        delete this.remote_channel_map[session.remote.channel];
      }
      if (this.local_channel_map[session.local.channel] === session) {
        delete this.local_channel_map[session.local.channel];
      }
    };
    Connection.prototype.remove_all_sessions = function() {
      clearObject(this.remote_channel_map);
      clearObject(this.local_channel_map);
    };
    function clearObject(obj) {
      for (var k in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, k)) {
          continue;
        }
        delete obj[k];
      }
    }
    function delegate_to_session(name) {
      Connection.prototype["on_" + name] = function(frame) {
        var session = this.remote_channel_map[frame.channel];
        if (!session) {
          throw new errors.ProtocolError(name + " received on invalid channel " + frame.channel);
        }
        session["on_" + name](frame);
      };
    }
    delegate_to_session("end");
    delegate_to_session("attach");
    delegate_to_session("detach");
    delegate_to_session("transfer");
    delegate_to_session("disposition");
    delegate_to_session("flow");
    module2.exports = Connection;
  }
});

// ../../node_modules/rhea/lib/eventTypes.js
var require_eventTypes = __commonJS({
  "../../node_modules/rhea/lib/eventTypes.js"(exports, module2) {
    "use strict";
    var ReceiverEvents;
    (function(ReceiverEvents2) {
      ReceiverEvents2["message"] = "message";
      ReceiverEvents2["receiverOpen"] = "receiver_open";
      ReceiverEvents2["receiverDrained"] = "receiver_drained";
      ReceiverEvents2["receiverFlow"] = "receiver_flow";
      ReceiverEvents2["receiverError"] = "receiver_error";
      ReceiverEvents2["receiverClose"] = "receiver_close";
      ReceiverEvents2["settled"] = "settled";
    })(ReceiverEvents || (ReceiverEvents = {}));
    var SenderEvents;
    (function(SenderEvents2) {
      SenderEvents2["sendable"] = "sendable";
      SenderEvents2["senderOpen"] = "sender_open";
      SenderEvents2["senderDraining"] = "sender_draining";
      SenderEvents2["senderFlow"] = "sender_flow";
      SenderEvents2["senderError"] = "sender_error";
      SenderEvents2["senderClose"] = "sender_close";
      SenderEvents2["accepted"] = "accepted";
      SenderEvents2["released"] = "released";
      SenderEvents2["rejected"] = "rejected";
      SenderEvents2["modified"] = "modified";
      SenderEvents2["settled"] = "settled";
    })(SenderEvents || (SenderEvents = {}));
    var SessionEvents;
    (function(SessionEvents2) {
      SessionEvents2["sessionOpen"] = "session_open";
      SessionEvents2["sessionError"] = "session_error";
      SessionEvents2["sessionClose"] = "session_close";
      SessionEvents2["settled"] = "settled";
    })(SessionEvents || (SessionEvents = {}));
    var ConnectionEvents;
    (function(ConnectionEvents2) {
      ConnectionEvents2["connectionOpen"] = "connection_open";
      ConnectionEvents2["connectionClose"] = "connection_close";
      ConnectionEvents2["connectionError"] = "connection_error";
      ConnectionEvents2["protocolError"] = "protocol_error", /**
       * @property {string} error Raised when an error is received on the underlying socket.
       */
      ConnectionEvents2["error"] = "error", /**
       * @property {string} disconnected Raised when the underlying tcp connection is lost. The context
       * has a reconnecting property which is true if the library is attempting to automatically reconnect
       * and false if it has reached the reconnect limit. If reconnect has not been enabled or if the connection
       * is a tcp server, then the reconnecting property is undefined. The context may also have an error
       * property giving some information about the reason for the disconnect.
       */
      ConnectionEvents2["disconnected"] = "disconnected";
      ConnectionEvents2["settled"] = "settled";
    })(ConnectionEvents || (ConnectionEvents = {}));
    module2.exports = {
      ReceiverEvents,
      SenderEvents,
      SessionEvents,
      ConnectionEvents
    };
  }
});

// ../../node_modules/rhea/lib/ws.js
var require_ws = __commonJS({
  "../../node_modules/rhea/lib/ws.js"(exports, module2) {
    "use strict";
    function nulltransform(data) {
      return data;
    }
    function from_arraybuffer(data) {
      if (data instanceof ArrayBuffer)
        return Buffer.from(new Uint8Array(data));
      else
        return Buffer.from(data);
    }
    function to_typedarray(data) {
      return new Uint8Array(data);
    }
    function wrap(ws) {
      var data_recv = nulltransform;
      var data_send = nulltransform;
      if (ws.binaryType) {
        ws.binaryType = "arraybuffer";
        data_recv = from_arraybuffer;
        data_send = to_typedarray;
      }
      return {
        end: function() {
          ws.close();
        },
        write: function(data) {
          try {
            ws.send(data_send(data), { binary: true });
          } catch (e) {
            ws.onerror(e);
          }
        },
        on: function(event, handler) {
          if (event === "data") {
            ws.onmessage = function(msg_evt) {
              handler(data_recv(msg_evt.data));
            };
          } else if (event === "end") {
            ws.onclose = handler;
          } else if (event === "error") {
            ws.onerror = handler;
          } else {
            console.error("ERROR: Attempt to set unrecognised handler on websocket wrapper: " + event);
          }
        },
        get_id_string: function() {
          return ws.url;
        }
      };
    }
    module2.exports = {
      "connect": function(Impl) {
        return function(url, protocols, options) {
          return function() {
            return {
              connect: function(port_ignore, host_ignore, options_ignore, callback) {
                var c = new Impl(url, protocols, options);
                c.onopen = callback;
                return wrap(c);
              }
            };
          };
        };
      },
      "wrap": wrap
    };
  }
});

// ../../node_modules/rhea/lib/filter.js
var require_filter = __commonJS({
  "../../node_modules/rhea/lib/filter.js"(exports, module2) {
    "use strict";
    var amqp_types = require_types();
    module2.exports = {
      selector: function(s) {
        return { "jms-selector": amqp_types.wrap_described(s, 77567109365764) };
      }
    };
  }
});

// ../../node_modules/rhea/lib/container.js
var require_container = __commonJS({
  "../../node_modules/rhea/lib/container.js"(exports, module2) {
    "use strict";
    var Connection = require_connection();
    var log = require_log2();
    var sasl = require_sasl();
    var util = require_util2();
    var eventTypes = require_eventTypes();
    var net = require("net");
    var tls = require("tls");
    var EventEmitter = require("events").EventEmitter;
    var Container = function(options) {
      this.options = options ? Object.create(options) : {};
      if (!this.options.id) {
        this.options.id = util.generate_uuid();
      }
      this.id = this.options.id;
      this.sasl_server_mechanisms = sasl.server_mechanisms();
    };
    Container.prototype = Object.create(EventEmitter.prototype);
    Container.prototype.constructor = Container;
    Container.prototype.dispatch = function(name) {
      log.events("[%s] Container got event: " + name, this.id);
      EventEmitter.prototype.emit.apply(this, arguments);
      if (this.listeners(name).length) {
        return true;
      } else {
        return false;
      }
    };
    Container.prototype.connect = function(options) {
      return new Connection(options, this).connect();
    };
    Container.prototype.create_connection = function(options) {
      return new Connection(options, this);
    };
    Container.prototype.listen = function(options) {
      var container = this;
      var server;
      if (options.transport === void 0 || options.transport === "tcp") {
        server = net.createServer(options);
        server.on("connection", function(socket) {
          new Connection(options, container).accept(socket);
        });
      } else if (options.transport === "tls" || options.transport === "ssl") {
        server = tls.createServer(options);
        server.on("secureConnection", function(socket) {
          new Connection(options, container).accept(socket);
        });
      } else {
        throw Error("Unrecognised transport: " + options.transport);
      }
      if (process.version.match(/v0\.10\.\d+/)) {
        server.listen(options.port, options.host);
      } else {
        server.listen(options);
      }
      return server;
    };
    Container.prototype.create_container = function(options) {
      return new Container(options);
    };
    Container.prototype.get_option = function(name, default_value) {
      if (this.options[name] !== void 0)
        return this.options[name];
      else
        return default_value;
    };
    Container.prototype.generate_uuid = util.generate_uuid;
    Container.prototype.string_to_uuid = util.string_to_uuid;
    Container.prototype.uuid_to_string = util.uuid_to_string;
    var ws = require_ws();
    Container.prototype.websocket_accept = function(socket, options) {
      new Connection(options, this).accept(ws.wrap(socket));
    };
    Container.prototype.websocket_connect = ws.connect;
    Container.prototype.filter = require_filter();
    Container.prototype.types = require_types();
    Container.prototype.message = require_message();
    Container.prototype.sasl = sasl;
    Container.prototype.ReceiverEvents = eventTypes.ReceiverEvents;
    Container.prototype.SenderEvents = eventTypes.SenderEvents;
    Container.prototype.SessionEvents = eventTypes.SessionEvents;
    Container.prototype.ConnectionEvents = eventTypes.ConnectionEvents;
    module2.exports = new Container();
  }
});

// ../../node_modules/rhea-promise/dist/lib/log.js
var require_log3 = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contextTranslator = exports.eventHandler = exports.error = exports.receiver = exports.sender = exports.session = exports.connection = exports.container = void 0;
    var debugModule = require_src();
    exports.container = debugModule("rhea-promise:container");
    exports.connection = debugModule("rhea-promise:connection");
    exports.session = debugModule("rhea-promise:session");
    exports.sender = debugModule("rhea-promise:sender");
    exports.receiver = debugModule("rhea-promise:receiver");
    exports.error = debugModule("rhea-promise:error");
    exports.eventHandler = debugModule("rhea-promise:eventhandler");
    exports.contextTranslator = debugModule("rhea-promise:translate");
  }
});

// ../../node_modules/rhea-promise/dist/lib/util/utils.js
var require_utils = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/util/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAbortError = exports.abortErrorName = exports.emitEvent = exports.parseConnectionString = exports.delay = exports.isAmqpError = exports.messageHeader = exports.messageProperties = exports.AmqpResponseStatusCode = void 0;
    var log = require_log3();
    var eventContext_1 = require_eventContext();
    var AmqpResponseStatusCode;
    (function(AmqpResponseStatusCode2) {
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Continue"] = 100] = "Continue";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["SwitchingProtocols"] = 101] = "SwitchingProtocols";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["OK"] = 200] = "OK";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Created"] = 201] = "Created";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Accepted"] = 202] = "Accepted";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NonAuthoritativeInformation"] = 203] = "NonAuthoritativeInformation";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NoContent"] = 204] = "NoContent";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["ResetContent"] = 205] = "ResetContent";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["PartialContent"] = 206] = "PartialContent";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Ambiguous"] = 300] = "Ambiguous";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["MultipleChoices"] = 300] = "MultipleChoices";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Moved"] = 301] = "Moved";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["MovedPermanently"] = 301] = "MovedPermanently";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Found"] = 302] = "Found";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Redirect"] = 302] = "Redirect";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RedirectMethod"] = 303] = "RedirectMethod";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["SeeOther"] = 303] = "SeeOther";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NotModified"] = 304] = "NotModified";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["UseProxy"] = 305] = "UseProxy";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Unused"] = 306] = "Unused";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RedirectKeepVerb"] = 307] = "RedirectKeepVerb";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["BadRequest"] = 400] = "BadRequest";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Unauthorized"] = 401] = "Unauthorized";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["PaymentRequired"] = 402] = "PaymentRequired";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Forbidden"] = 403] = "Forbidden";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NotFound"] = 404] = "NotFound";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NotAcceptable"] = 406] = "NotAcceptable";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RequestTimeout"] = 408] = "RequestTimeout";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Conflict"] = 409] = "Conflict";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["Gone"] = 410] = "Gone";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["LengthRequired"] = 411] = "LengthRequired";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["PreconditionFailed"] = 412] = "PreconditionFailed";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RequestEntityTooLarge"] = 413] = "RequestEntityTooLarge";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RequestUriTooLong"] = 414] = "RequestUriTooLong";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["ExpectationFailed"] = 417] = "ExpectationFailed";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["UpgradeRequired"] = 426] = "UpgradeRequired";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["InternalServerError"] = 500] = "InternalServerError";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["NotImplemented"] = 501] = "NotImplemented";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["BadGateway"] = 502] = "BadGateway";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["GatewayTimeout"] = 504] = "GatewayTimeout";
      AmqpResponseStatusCode2[AmqpResponseStatusCode2["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
    })(AmqpResponseStatusCode = exports.AmqpResponseStatusCode || (exports.AmqpResponseStatusCode = {}));
    exports.messageProperties = [
      "message_id",
      "reply_to",
      "to",
      "correlation_id",
      "content_type",
      "absolute_expiry_time",
      "group_id",
      "group_sequence",
      "reply_to_group_id",
      "content_encoding",
      "creation_time",
      "subject",
      "user_id"
    ];
    exports.messageHeader = [
      "first_acquirer",
      "delivery_count",
      "ttl",
      "durable",
      "priority"
    ];
    function isAmqpError(err) {
      if (!err || typeof err !== "object") {
        throw new Error("err is a required parameter and must be of type 'object'.");
      }
      let result = false;
      if (err.condition && typeof err.condition === "string" && (err.description && typeof err.description === "string") || err.value && Array.isArray(err.value) || err.constructor && err.constructor.name === "c") {
        result = true;
      }
      return result;
    }
    exports.isAmqpError = isAmqpError;
    function delay(t, value) {
      return new Promise((resolve) => setTimeout(() => resolve(value), t));
    }
    exports.delay = delay;
    function parseConnectionString(connectionString, options) {
      if (!options)
        options = {};
      const entitySeperator = options.entitySeperator || ";";
      const keyValueSeparator = options.keyValueSeparator || "=";
      return connectionString.split(entitySeperator).reduce((acc, part) => {
        const splitIndex = part.indexOf(keyValueSeparator);
        return Object.assign(Object.assign({}, acc), { [part.substring(0, splitIndex)]: part.substring(splitIndex + 1) });
      }, {});
    }
    exports.parseConnectionString = parseConnectionString;
    function emitEvent(params) {
      const emit = () => {
        const id = params.emitter && (params.emitter.id || params.emitter.name);
        log[params.emitterType]("[%s] %s '%s' got event: '%s'. Re-emitting the translated context.", params.connectionId, params.emitterType, id, params.eventName);
        params.emitter.emit(params.eventName, eventContext_1.EventContext.translate(params.rheaContext, params.emitter, params.eventName));
      };
      if (params.eventName.indexOf("error") !== -1 && params.emitter.actionInitiated > 0) {
        log[params.emitterType]("[%s] %s got event: '%s'. Will re-emit in the next tick, since this happened before the promise for create/close was resolved.", params.connectionId, params.emitterType, params.eventName);
        setTimeout(emit);
      } else {
        emit();
      }
    }
    exports.emitEvent = emitEvent;
    exports.abortErrorName = "AbortError";
    function createAbortError() {
      const error = new Error("The operation was aborted.");
      error.name = exports.abortErrorName;
      return error;
    }
    exports.createAbortError = createAbortError;
  }
});

// ../../node_modules/rhea-promise/dist/lib/entity.js
var require_entity = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/entity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Entity = void 0;
    var events_1 = require("events");
    var Entity = class extends events_1.EventEmitter {
      constructor() {
        super();
        this.actionInitiated = 0;
      }
    };
    exports.Entity = Entity;
  }
});

// ../../node_modules/rhea-promise/dist/lib/errorDefinitions.js
var require_errorDefinitions = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/errorDefinitions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendOperationFailedError = exports.InsufficientCreditError = exports.OperationTimeoutError = void 0;
    var OperationTimeoutError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "OperationTimeoutError";
      }
    };
    exports.OperationTimeoutError = OperationTimeoutError;
    var InsufficientCreditError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InsufficientCreditError";
      }
    };
    exports.InsufficientCreditError = InsufficientCreditError;
    var SendOperationFailedError = class extends Error {
      constructor(message, code, innerError) {
        super(message);
        this.message = message;
        this.code = code;
        this.innerError = innerError;
        this.name = "SendOperationFailedError";
        this.code = code;
        this.innerError = innerError;
      }
    };
    exports.SendOperationFailedError = SendOperationFailedError;
  }
});

// ../../node_modules/rhea-promise/dist/lib/link.js
var require_link2 = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/link.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Link = exports.LinkType = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var log = require_log3();
    var rhea_1 = require_container();
    var utils_1 = require_utils();
    var entity_1 = require_entity();
    var errorDefinitions_1 = require_errorDefinitions();
    var LinkType;
    (function(LinkType2) {
      LinkType2["sender"] = "sender";
      LinkType2["receiver"] = "receiver";
    })(LinkType = exports.LinkType || (exports.LinkType = {}));
    var Link = class extends entity_1.Entity {
      constructor(type, session, link, options) {
        super();
        this.type = type;
        this._session = session;
        this._link = link;
        this.linkOptions = options;
        this._initializeEventListeners();
      }
      get name() {
        return this._link.name;
      }
      get error() {
        return this._link.error;
      }
      get properties() {
        return this._link.properties;
      }
      get sendSettleMode() {
        return this._link.snd_settle_mode;
      }
      get receiveSettleMode() {
        return this._link.rcv_settle_mode;
      }
      get source() {
        return this._link.source;
      }
      set source(fields) {
        this._link.set_source(fields);
      }
      get target() {
        return this._link.target;
      }
      set target(fields) {
        this._link.set_source(fields);
      }
      get maxMessageSize() {
        return this._link.max_message_size;
      }
      get offeredCapabilities() {
        return this._link.offered_capabilities;
      }
      get desiredCapabilities() {
        return this._link.desired_capabilities;
      }
      get address() {
        return this.source.address;
      }
      get credit() {
        return this._link.credit;
      }
      get session() {
        return this._session;
      }
      get connection() {
        return this._session.connection;
      }
      /**
       * Determines whether the sender link and its underlying session is open.
       * @returns {boolean} `true` open. `false` closed.
       */
      isOpen() {
        let result = false;
        if (this._session.isOpen() && this._link.is_open()) {
          result = true;
        }
        return result;
      }
      /**
       * Determines whether the remote end of the link is open.
       * @return {boolean} boolean `true` - is open; `false` otherwise.
       */
      isRemoteOpen() {
        return this._link.is_remote_open();
      }
      /**
       * Determines whether the link has credit.
       * @return {boolean} boolean `true` - has credit; `false` otherwise.
       */
      hasCredit() {
        return this._link.has_credit();
      }
      /**
       * Determines whether the link is a sender.
       * @return {boolean} boolean `true` - sender; `false` otherwise.
       */
      isSender() {
        return this._link.is_sender();
      }
      /**
       * Determines whether the link is a receiver.
       * @return {boolean} boolean `true` - receiver; `false` otherwise.
       */
      isReceiver() {
        return this._link.is_receiver();
      }
      /**
       * Determines whether both local and remote endpoint for link or it's underlying session
       * or it's underlying connection are closed.
       * Within the "sender_close", "session_close" event handler, if this
       * method returns `false` it means that the local end is still open. It can be useful to
       * determine whether the close was initiated locally under such circumstances.
       *
       * @returns {boolean} `true` if closed, `false` otherwise.
       */
      isClosed() {
        return this._link.is_closed();
      }
      /**
       * Determines whether both local and remote endpoint for just the link itself are closed.
       * Within the "sender_close" event handler, if this method returns `false` it
       * means that the local end is still open. It can be useful to determine whether the close
       * was initiated locally under such circumstances.
       *
       * @returns {boolean} `true` - closed, `false` otherwise.
       */
      isItselfClosed() {
        return this._link.is_itself_closed();
      }
      /**
       * Determines whether both local and remote endpoint for session or it's underlying
       * connection are closed.
       *
       * Within the "session_close" event handler, if this method returns `false` it means that
       * the local end is still open. It can be useful to determine whether the close
       * was initiated locally under such circumstances.
       *
       * @returns {boolean} `true` - closed, `false` otherwise.
       */
      isSessionClosed() {
        return this._session.isClosed();
      }
      /**
       * Determines whether both local and remote endpoint for just the session itself are closed.
       * Within the "session_close" event handler, if this method returns `false` it means that
       * the local end is still open. It can be useful to determine whether the close
       * was initiated locally under such circumstances.
       *
       * @returns {boolean} `true` - closed, `false` otherwise.
       */
      isSessionItselfClosed() {
        return this._session.isItselfClosed();
      }
      /**
       * Removes the underlying amqp link and it's session from the internal map in rhea. Also removes
       * all the event handlers added in the rhea-promise library on the link and it's session.
       * @returns {void} void
       */
      remove() {
        if (this._link) {
          this.removeAllListeners();
          this._link.removeAllListeners();
          this._link.remove();
        }
        if (this._session) {
          this._session.remove();
        }
      }
      /**
       * Closes the underlying amqp link and optionally the session as well in rhea if open.
       * Also removes all the event handlers added in the rhea-promise library on the link
       * and optionally it's session.
       * @returns Promise<void>
       * - **Resolves** the promise when rhea emits the "sender_close" | "receiver_close" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the
       * "sender_error" | "receiver_error" event while trying to close the amqp link.
       */
      close(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!options)
            options = {};
          if (options.closeSession == void 0)
            options.closeSession = true;
          const closePromise = new Promise((resolve, reject) => {
            log.error("[%s] The %s '%s' on amqp session '%s' is open ? -> %s", this.connection.id, this.type, this.name, this.session.id, this.isOpen());
            if (this.isOpen()) {
              const errorEvent = this.type === LinkType.sender ? rhea_1.SenderEvents.senderError : rhea_1.ReceiverEvents.receiverError;
              const closeEvent = this.type === LinkType.sender ? rhea_1.SenderEvents.senderClose : rhea_1.ReceiverEvents.receiverClose;
              const removeListeners = () => {
                clearTimeout(waitTimer);
                this.actionInitiated--;
                this._link.removeListener(errorEvent, onError);
                this._link.removeListener(closeEvent, onClose);
                this._link.connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
              };
              const onClose = (context) => {
                removeListeners();
                log[this.type]("[%s] Resolving the promise as the %s '%s' on amqp session '%s' has been closed.", this.connection.id, this.type, this.name, this.session.id);
                return resolve();
              };
              const onError = (context) => {
                removeListeners();
                let error = context.session.error;
                if (this.type === LinkType.sender && context.sender && context.sender.error) {
                  error = context.sender.error;
                } else if (this.type === LinkType.receiver && context.receiver && context.receiver.error) {
                  error = context.receiver.error;
                }
                log.error("[%s] Error occurred while closing %s '%s' on amqp session '%s': %O.", this.connection.id, this.type, this.name, this.session.id, error);
                return reject(error);
              };
              const onDisconnected = (context) => {
                removeListeners();
                const error = context.connection && context.connection.error ? context.connection.error : context.error;
                log.error("[%s] Connection got disconnected while closing amqp %s '%s' on amqp session '%s': %O.", this.connection.id, this.type, this.name, this.session.id, error);
              };
              const actionAfterTimeout = () => {
                removeListeners();
                const msg = `Unable to close the ${this.type} '${this.name}' on amqp session '${this.session.id}' due to operation timeout.`;
                log.error("[%s] %s", this.connection.id, msg);
                return reject(new errorDefinitions_1.OperationTimeoutError(msg));
              };
              this._link.once(closeEvent, onClose);
              this._link.once(errorEvent, onError);
              this._link.connection.once(rhea_1.ConnectionEvents.disconnected, onDisconnected);
              const waitTimer = setTimeout(actionAfterTimeout, this.connection.options.operationTimeoutInSeconds * 1e3);
              this._link.close();
              this.actionInitiated++;
            } else {
              return resolve();
            }
          });
          try {
            yield closePromise;
          } finally {
            this.removeAllListeners();
          }
          if (options.closeSession) {
            log[this.type]("[%s] %s '%s' has been closed, now closing it's amqp session '%s'.", this.connection.id, this.type, this.name, this.session.id);
            return this._session.close();
          }
        });
      }
      /**
       * Adds event listeners for the possible events that can occur on the link object and
       * re-emits the same event back with the received arguments from rhea's event emitter.
       * @private
       * @returns {void} void
       */
      _initializeEventListeners() {
        const events = this.type === LinkType.sender ? rhea_1.SenderEvents : rhea_1.ReceiverEvents;
        for (const eventName of Object.keys(events)) {
          this._link.on(events[eventName], (context) => {
            const params = {
              rheaContext: context,
              emitter: this,
              eventName: events[eventName],
              emitterType: this.type,
              connectionId: this.connection.id
            };
            (0, utils_1.emitEvent)(params);
          });
        }
        if (typeof this._link.eventNames === "function") {
          log.eventHandler("[%s] rhea-promise '%s' object is listening for events: %o emitted by rhea's '%s' object.", this.connection.id, this.type, this._link.eventNames(), this.type);
        }
        if (typeof this._link.listenerCount === "function") {
          log.eventHandler("[%s] ListenerCount for event '%s_error' on rhea's '%s' object is: %d.", this.connection.id, this.type, this.type, this._link.listenerCount(`${this.type}_error`));
        }
      }
    };
    exports.Link = Link;
  }
});

// ../../node_modules/rhea-promise/dist/lib/receiver.js
var require_receiver = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/receiver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Receiver = void 0;
    var link_1 = require_link2();
    var Receiver = class extends link_1.Link {
      constructor(session, receiver, options) {
        super(link_1.LinkType.receiver, session, receiver, options);
      }
      get drain() {
        return this._link.drain;
      }
      set drain(value) {
        this._link.drain = value;
      }
      addCredit(credit) {
        this._link.add_credit(credit);
      }
      drainCredit() {
        this._link.drain_credit();
      }
      setCreditWindow(creditWindow) {
        this._link.set_credit_window(creditWindow);
      }
    };
    exports.Receiver = Receiver;
  }
});

// ../../node_modules/rhea-promise/dist/lib/sender.js
var require_sender = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/sender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sender = exports.SenderSendOptions = exports.BaseSender = void 0;
    var link_1 = require_link2();
    var BaseSender = class extends link_1.Link {
      constructor(session, sender, options) {
        super(link_1.LinkType.sender, session, sender, options);
      }
      setDrained(drained) {
        this._link.set_drained(drained);
      }
      /**
       * Determines whether the message is sendable.
       * @returns {boolean} `true` Sendable. `false` Not Sendable.
       */
      sendable() {
        return this._link.sendable();
      }
    };
    exports.BaseSender = BaseSender;
    var SenderSendOptions = class {
    };
    exports.SenderSendOptions = SenderSendOptions;
    var Sender = class extends BaseSender {
      constructor(session, sender, options) {
        super(session, sender, options);
      }
      /**
       * Sends the message
       * @param {Message | Buffer} msg The message to be sent. For default AMQP format msg parameter
       * should be of type Message interface. For a custom format, the msg parameter should be a Buffer
       * and a valid value should be passed to the `format` argument.
       * @param {SenderSendOptions} [options] Options to configure the tag and message format of the message.
       * @returns {Delivery} Delivery The delivery information about the sent message.
       */
      send(msg, options = {}) {
        return this._link.send(msg, options.tag, options.format);
      }
    };
    exports.Sender = Sender;
  }
});

// ../../node_modules/rhea-promise/dist/lib/awaitableSender.js
var require_awaitableSender = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/awaitableSender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwaitableSender = void 0;
    var rhea_1 = require_container();
    var log = require_log3();
    var sender_1 = require_sender();
    var rhea_2 = require_container();
    var errorDefinitions_1 = require_errorDefinitions();
    var utils_1 = require_utils();
    var AwaitableSender = class extends sender_1.BaseSender {
      constructor(session, sender, options = {}) {
        super(session, sender, options);
        this.deliveryDispositionMap = /* @__PURE__ */ new Map();
        const onSendSuccess = (delivery) => {
          const id = delivery.id;
          if (this.deliveryDispositionMap.has(delivery.id)) {
            const promise = this.deliveryDispositionMap.get(id);
            clearTimeout(promise.timer);
            const deleteResult = this.deliveryDispositionMap.delete(id);
            log.sender("[%s] Event: 'Accepted', Successfully deleted the delivery with id %d from the map of sender '%s' on amqp session '%s' and cleared the timer: %s.", this.connection.id, id, this.name, this.session.id, deleteResult);
            return promise.resolve(delivery);
          }
        };
        const onSendFailure = (eventName, id, error) => {
          if (this.deliveryDispositionMap.has(id)) {
            const promise = this.deliveryDispositionMap.get(id);
            clearTimeout(promise.timer);
            const deleteResult = this.deliveryDispositionMap.delete(id);
            log.sender("[%s] Event: '%s', Successfully deleted the delivery with id %d from the  map of sender '%s' on amqp session '%s' and cleared the timer: %s.", this.connection.id, eventName, id, this.name, this.session.id, deleteResult);
            const msg = `Sender '${this.name}' on amqp session '${this.session.id}', received a '${eventName}' disposition. Hence we are rejecting the promise.`;
            const err = new errorDefinitions_1.SendOperationFailedError(msg, eventName, error);
            log.error("[%s] %s", this.connection.id, msg);
            return promise.reject(err);
          }
        };
        const onError = (eventName, error) => {
          for (const id of this.deliveryDispositionMap.keys()) {
            onSendFailure(eventName, id, error);
          }
        };
        this.on(rhea_2.SenderEvents.accepted, (context) => {
          onSendSuccess(context.delivery);
        });
        this.on(rhea_2.SenderEvents.rejected, (context) => {
          const delivery = context.delivery;
          onSendFailure(rhea_2.SenderEvents.rejected, delivery.id, delivery.remote_state && delivery.remote_state.error);
        });
        this.on(rhea_2.SenderEvents.released, (context) => {
          const delivery = context.delivery;
          onSendFailure(rhea_2.SenderEvents.released, delivery.id, delivery.remote_state && delivery.remote_state.error);
        });
        this.on(rhea_2.SenderEvents.modified, (context) => {
          const delivery = context.delivery;
          onSendFailure(rhea_2.SenderEvents.modified, delivery.id, delivery.remote_state && delivery.remote_state.error);
        });
        if (!options.onError) {
          this.on(rhea_2.SenderEvents.senderError, (context) => {
            onError(rhea_2.SenderEvents.senderError, context.sender.error);
          });
        }
        if (!options.onSessionError) {
          this.session.on(rhea_1.SessionEvents.sessionError, (context) => {
            onError(rhea_1.SessionEvents.sessionError, context.session.error);
          });
        }
      }
      /**
       * Sends the message on which one can await to ensure that the message has been successfully
       * delivered.
       * @param {Message | Buffer} msg The message to be sent. For default AMQP format msg parameter
       * should be of type Message interface. For a custom format, the msg parameter should be a Buffer
       * and a valid value should be passed to the `format` argument.
       * @param {AwaitableSendOptions} [options] Options to configure the timeout, cancellation for
       * the send operation and the tag and message format of the message.
       * @returns {Promise<Delivery>} Promise<Delivery> The delivery information about the sent message.
       */
      send(msg, options = {}) {
        return new Promise((resolve, reject) => {
          log.sender("[%s] Sender '%s' on amqp session '%s', credit: %d available: %d", this.connection.id, this.name, this.session.id, this.credit, this.session.outgoing.available());
          const abortSignal = options && options.abortSignal;
          const timeoutInSeconds = options.timeoutInSeconds || 20;
          if (abortSignal && abortSignal.aborted) {
            const err = (0, utils_1.createAbortError)();
            log.error("[%s] %s", this.connection.id, err.message);
            return reject(err);
          }
          if (this.sendable()) {
            const timer = setTimeout(() => {
              this.deliveryDispositionMap.delete(delivery.id);
              const message = `Sender '${this.name}' on amqp session '${this.session.id}', with address '${this.address}' was not able to send the message with delivery id ${delivery.id} right now, due to operation timeout.`;
              log.error("[%s] %s", this.connection.id, message);
              return reject(new errorDefinitions_1.OperationTimeoutError(message));
            }, timeoutInSeconds * 1e3);
            const onAbort = () => {
              if (this.deliveryDispositionMap.has(delivery.id)) {
                const promise = this.deliveryDispositionMap.get(delivery.id);
                clearTimeout(promise.timer);
                const deleteResult = this.deliveryDispositionMap.delete(delivery.id);
                log.sender("[%s] Event: 'abort', Successfully deleted the delivery with id %d from the  map of sender '%s' on amqp session '%s' and cleared the timer: %s.", this.connection.id, delivery.id, this.name, this.session.id, deleteResult);
                const err = (0, utils_1.createAbortError)();
                log.error("[%s] %s", this.connection.id, err.message);
                promise.reject(err);
              }
            };
            const removeAbortListener = () => {
              if (abortSignal) {
                abortSignal.removeEventListener("abort", onAbort);
              }
            };
            const delivery = this._link.send(msg, options.tag, options.format);
            this.deliveryDispositionMap.set(delivery.id, {
              resolve: (delivery2) => {
                resolve(delivery2);
                removeAbortListener();
              },
              reject: (reason) => {
                reject(reason);
                removeAbortListener();
              },
              timer
            });
            if (abortSignal) {
              abortSignal.addEventListener("abort", onAbort);
            }
          } else {
            const msg2 = `Sender "${this.name}" on amqp session "${this.session.id}", with address ${this.address} cannot send the message right now as it does not have enough credit. Please try later.`;
            log.error("[%s] %s", this.connection.id, msg2);
            reject(new errorDefinitions_1.InsufficientCreditError(msg2));
          }
        });
      }
    };
    exports.AwaitableSender = AwaitableSender;
  }
});

// ../../node_modules/rhea-promise/dist/lib/session.js
var require_session2 = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Session = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var log = require_log3();
    var receiver_1 = require_receiver();
    var sender_1 = require_sender();
    var rhea_1 = require_container();
    var utils_1 = require_utils();
    var entity_1 = require_entity();
    var errorDefinitions_1 = require_errorDefinitions();
    var awaitableSender_1 = require_awaitableSender();
    var SenderType;
    (function(SenderType2) {
      SenderType2["sender"] = "sender";
      SenderType2["AwaitableSender"] = "AwaitableSender";
    })(SenderType || (SenderType = {}));
    var Session = class extends entity_1.Entity {
      constructor(connection, session) {
        super();
        this._connection = connection;
        this._session = session;
        this._initializeEventListeners();
      }
      /**
       * @property {Connection} connection The underlying AMQP connection.
       * @readonly
       */
      get connection() {
        return this._connection;
      }
      get incoming() {
        return this._session.incoming;
      }
      get outgoing() {
        return this._session.outgoing;
      }
      get error() {
        return this._session.error;
      }
      /**
       * Returns the unique identifier for the session in the format:
       * "local_<number>-remote_<number>-<connection-id>" or an empty string if the local channel or
       * remote channel are not yet defined.
       */
      get id() {
        let result = "";
        const session = this._session;
        if (session.local) {
          result += `local-${session.local.channel}_`;
        }
        if (session.remote) {
          result += `remote-${session.remote.channel}_`;
        }
        if (result) {
          result += `${this._connection.id}`;
        }
        return result;
      }
      /**
       * Determines whether the session and the underlying connection is open.
       * @returns {boolean} result `true` - is open; `false` otherwise.
       */
      isOpen() {
        let result = false;
        if (this._connection.isOpen() && this._session.is_open()) {
          result = true;
        }
        return result;
      }
      /**
       * Determines whether the close from the peer is a response to a locally initiated close request.
       * @returns {boolean} `true` if close was locally initiated, `false` otherwise.
       */
      isClosed() {
        return this._session.is_closed();
      }
      /**
       * Determines whether both local and remote endpoint for just the session itself are closed.
       * Within the "session_close" event handler, if this method returns `false` it means that
       * the local end is still open. It can be useful to determine whether the close
       * was initiated locally under such circumstances.
       *
       * @returns {boolean} `true` - closed, `false` otherwise.
       */
      isItselfClosed() {
        return this._session.is_itself_closed();
      }
      /**
       * Removes the underlying amqp session from the internal map in rhea.
       * Also removes all the event handlers added in the rhea-promise library on the session.
       */
      remove() {
        if (this._session) {
          this.removeAllListeners();
          this._session.removeAllListeners();
          this._session.remove();
        }
      }
      begin() {
        if (this._session) {
          this._session.begin();
        }
      }
      /**
       * Closes the underlying amqp session in rhea if open. Also removes all the event
       * handlers added in the rhea-promise library on the session
       * @param options A set of options including a signal used to cancel the operation.
       * When the abort signal in the options is fired, the local endpoint is closed.
       * This does not guarantee that the remote has closed as well. It only stops listening for
       * an acknowledgement that the remote endpoint is closed as well.
       * @return {Promise<void>} Promise<void>
       * - **Resolves** the promise when rhea emits the "session_close" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "session_error" event while trying
       * to close an amqp session or with an AbortError if the operation was cancelled.
       */
      close(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const closePromise = new Promise((resolve, reject) => {
            log.error("[%s] The amqp session '%s' is open ? -> %s", this.connection.id, this.id, this.isOpen());
            if (this.isOpen()) {
              const abortSignal = options && options.abortSignal;
              const removeListeners = () => {
                clearTimeout(waitTimer);
                this.actionInitiated--;
                this._session.removeListener(rhea_1.SessionEvents.sessionError, onError);
                this._session.removeListener(rhea_1.SessionEvents.sessionClose, onClose);
                this._session.connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
                if (abortSignal) {
                  abortSignal.removeEventListener("abort", onAbort);
                }
              };
              const onClose = (context) => {
                removeListeners();
                log.session("[%s] Resolving the promise as the amqp session '%s' has been closed.", this.connection.id, this.id);
                return resolve();
              };
              const onError = (context) => {
                removeListeners();
                log.error("[%s] Error occurred while closing amqp session '%s'.", this.connection.id, this.id, context.session.error);
                reject(context.session.error);
              };
              const onDisconnected = (context) => {
                removeListeners();
                const error = context.connection && context.connection.error ? context.connection.error : context.error;
                log.error("[%s] Connection got disconnected while closing amqp session '%s': %O.", this.connection.id, this.id, error);
              };
              const onAbort = () => {
                removeListeners();
                const err = (0, utils_1.createAbortError)();
                log.error("[%s] [%s]", this.connection.id, err.message);
                return reject(err);
              };
              const actionAfterTimeout = () => {
                removeListeners();
                const msg = `Unable to close the amqp session ${this.id} due to operation timeout.`;
                log.error("[%s] %s", this.connection.id, msg);
                reject(new errorDefinitions_1.OperationTimeoutError(msg));
              };
              this._session.once(rhea_1.SessionEvents.sessionClose, onClose);
              this._session.once(rhea_1.SessionEvents.sessionError, onError);
              this._session.connection.once(rhea_1.ConnectionEvents.disconnected, onDisconnected);
              log.session("[%s] Calling session.close() for amqp session '%s'.", this.connection.id, this.id);
              const waitTimer = setTimeout(actionAfterTimeout, this.connection.options.operationTimeoutInSeconds * 1e3);
              this._session.close();
              this.actionInitiated++;
              if (abortSignal) {
                if (abortSignal.aborted) {
                  onAbort();
                } else {
                  abortSignal.addEventListener("abort", onAbort);
                }
              }
            } else {
              return resolve();
            }
          });
          try {
            yield closePromise;
          } finally {
            this.removeAllListeners();
          }
        });
      }
      /**
       * Creates an amqp receiver on this session.
       * @param session The amqp session object on which the receiver link needs to be established.
       * @param options Options that can be provided while creating an amqp receiver.
       * @return Promise<Receiver>
       * - **Resolves** the promise with the Receiver object when rhea emits the "receiver_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "receiver_close" event while trying
       * to create an amqp receiver or the operation timeout occurs.
       */
      createReceiver(options) {
        return new Promise((resolve, reject) => {
          if (options && (options.onMessage && !options.onError || options.onError && !options.onMessage)) {
            if (options.credit_window !== 0) {
              return reject(new Error("Either provide both 'onMessage' and 'onError' handlers, or please set the credit_window to 0, if you want to provide only the 'onError' handler. This ensures no messages are lost between the receiver getting created  and the 'onMessage' handler being added."));
            }
          }
          const abortSignal = options && options.abortSignal;
          let onAbort;
          if (abortSignal) {
            const rejectOnAbort = () => {
              const err = (0, utils_1.createAbortError)();
              log.error("[%s] [%s]", this.connection.id, err.message);
              return reject(err);
            };
            onAbort = () => {
              removeListeners();
              if (rheaReceiver.is_open()) {
                rheaReceiver.close();
              } else if (!rheaReceiver.is_closed()) {
                rheaReceiver.once(rhea_1.ReceiverEvents.receiverOpen, () => {
                  rheaReceiver.close();
                });
              }
              return rejectOnAbort();
            };
            if (abortSignal.aborted) {
              return rejectOnAbort();
            } else {
              abortSignal.addEventListener("abort", onAbort);
            }
          }
          if (options && options.onSessionError) {
            this.on(rhea_1.SessionEvents.sessionError, options.onSessionError);
            log.session("[%s] Added event handler for event '%s' on rhea-promise 'session: %s', while creating the 'receiver'.", this.connection.id, rhea_1.SessionEvents.sessionError, this.id);
          }
          if (options && options.onSessionClose) {
            this.on(rhea_1.SessionEvents.sessionClose, options.onSessionClose);
            log.session("[%s] Added event handler for event '%s' on rhea-promise 'session: %s',  while creating the 'receiver'.", this.connection.id, rhea_1.SessionEvents.sessionClose, this.id);
          }
          const rheaReceiver = this._session.attach_receiver(options);
          const receiver = new receiver_1.Receiver(this, rheaReceiver, options);
          receiver.actionInitiated++;
          if (options && options.onMessage) {
            receiver.on(rhea_1.ReceiverEvents.message, options.onMessage);
            log.receiver("[%s] Added event handler for event '%s' on rhea-promise 'receiver'.", this.connection.id, rhea_1.ReceiverEvents.message);
          }
          if (options && options.onError) {
            receiver.on(rhea_1.ReceiverEvents.receiverError, options.onError);
            log.receiver("[%s] Added event handler for event '%s' on rhea-promise 'receiver'.", this.connection.id, rhea_1.ReceiverEvents.receiverError);
          }
          if (options && options.onClose) {
            receiver.on(rhea_1.ReceiverEvents.receiverClose, options.onClose);
            log.receiver("[%s] Added event handler for event '%s' on rhea-promise 'receiver'.", this.connection.id, rhea_1.ReceiverEvents.receiverClose);
          }
          if (options && options.onSettled) {
            receiver.on(rhea_1.ReceiverEvents.settled, options.onSettled);
            log.receiver("[%s] Added event handler for event '%s' on rhea-promise 'receiver'.", this.connection.id, rhea_1.ReceiverEvents.settled);
          }
          const removeListeners = () => {
            clearTimeout(waitTimer);
            receiver.actionInitiated--;
            rheaReceiver.removeListener(rhea_1.ReceiverEvents.receiverOpen, onOpen);
            rheaReceiver.removeListener(rhea_1.ReceiverEvents.receiverClose, onClose);
            rheaReceiver.session.connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
            if (abortSignal) {
              abortSignal.removeEventListener("abort", onAbort);
            }
          };
          const onOpen = (context) => {
            removeListeners();
            log.receiver("[%s] Resolving the promise with amqp receiver '%s' on amqp session '%s'.", this.connection.id, receiver.name, this.id);
            return resolve(receiver);
          };
          const onClose = (context) => {
            removeListeners();
            log.error("[%s] Error occurred while creating the amqp receiver '%s' on amqp session '%s' over amqp connection: %O.", this.connection.id, receiver.name, this.id, context.receiver.error);
            return reject(context.receiver.error);
          };
          const onDisconnected = (context) => {
            removeListeners();
            const error = context.connection && context.connection.error ? context.connection.error : context.error;
            log.error("[%s] Connection got disconnected while creating amqp receiver '%s' on amqp session '%s': %O.", this.connection.id, receiver.name, this.id, error);
            return reject(error);
          };
          const actionAfterTimeout = () => {
            var _a;
            removeListeners();
            const msg = `Unable to create the amqp receiver '${receiver.name}' on amqp session '${this.id}' due to operation timeout.`;
            log.error("[%s] %s", this.connection.id, msg);
            const createReceiverOptions = options;
            if ((_a = createReceiverOptions === null || createReceiverOptions === void 0 ? void 0 : createReceiverOptions.session) === null || _a === void 0 ? void 0 : _a.createReceiver) {
              receiver.close({ closeSession: false }).then(() => {
                receiver.remove();
              });
            } else {
              receiver.close({ closeSession: true }).then(() => {
                receiver.remove();
              });
            }
            return reject(new errorDefinitions_1.OperationTimeoutError(msg));
          };
          rheaReceiver.once(rhea_1.ReceiverEvents.receiverOpen, onOpen);
          rheaReceiver.once(rhea_1.ReceiverEvents.receiverClose, onClose);
          rheaReceiver.session.connection.on(rhea_1.ConnectionEvents.disconnected, onDisconnected);
          const waitTimer = setTimeout(actionAfterTimeout, this.connection.options.operationTimeoutInSeconds * 1e3);
        });
      }
      /**
       * Creates an amqp sender on this session.
       * @param options Options that can be provided while creating an amqp sender.
       * @return Promise<Sender>
       * - **Resolves** the promise with the Sender object when rhea emits the "sender_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "sender_close" event while trying
       * to create an amqp sender or the operation timeout occurs.
       */
      createSender(options) {
        return this._createSender(SenderType.sender, options);
      }
      /**
       * Creates an awaitable amqp sender on this session.
       * @param options Options that can be provided while creating an async amqp sender.
       * - If `onError` and `onSessionError` handlers are not provided then the `AwaitableSender` will
       * clear the timer and reject the Promise for all the entries of inflight send operation in its
       * `deliveryDispositionMap`.
       * - If the user is handling the reconnection of sender link or the underlying connection in it's
       * app, then the `onError` and `onSessionError` handlers must be provided by the user and (s)he
       * shall be responsible of clearing the `deliveryDispotionMap` of inflight `send()` operation.
       *
       * @return Promise<AwaitableSender>
       * - **Resolves** the promise with the Sender object when rhea emits the "sender_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "sender_close" event while trying
       * to create an amqp sender or the operation timeout occurs.
       */
      createAwaitableSender(options) {
        return this._createSender(SenderType.AwaitableSender, options);
      }
      /**
       * Creates the Sender based on the provided type.
       * @internal
       * @param type The type of sender
       * @param options Options to be provided while creating the sender.
       */
      _createSender(type, options) {
        return new Promise((resolve, reject) => {
          const abortSignal = options && options.abortSignal;
          let onAbort;
          if (abortSignal) {
            const rejectOnAbort = () => {
              const err = (0, utils_1.createAbortError)();
              log.error("[%s] [%s]", this.connection.id, err.message);
              return reject(err);
            };
            onAbort = () => {
              removeListeners();
              if (rheaSender.is_open()) {
                rheaSender.close();
              } else if (!rheaSender.is_closed()) {
                rheaSender.once(rhea_1.SenderEvents.senderOpen, () => {
                  rheaSender.close();
                });
              }
              return rejectOnAbort();
            };
            if (abortSignal.aborted) {
              return rejectOnAbort();
            } else {
              abortSignal.addEventListener("abort", onAbort);
            }
          }
          if (options && options.onSessionError) {
            this.on(rhea_1.SessionEvents.sessionError, options.onSessionError);
            log.session("[%s] Added event handler for event '%s' on rhea-promise 'session: %s', while creating the sender.", this.connection.id, rhea_1.SessionEvents.sessionError, this.id);
          }
          if (options && options.onSessionClose) {
            this.on(rhea_1.SessionEvents.sessionClose, options.onSessionClose);
            log.session("[%s] Added event handler for event '%s' on rhea-promise 'session: %s', while creating the sender.", this.connection.id, rhea_1.SessionEvents.sessionClose, this.id);
          }
          const rheaSender = this._session.attach_sender(options);
          let sender;
          if (type === SenderType.sender) {
            sender = new sender_1.Sender(this, rheaSender, options);
          } else {
            sender = new awaitableSender_1.AwaitableSender(this, rheaSender, options);
          }
          sender.actionInitiated++;
          if (options) {
            if (options.onError) {
              sender.on(rhea_1.SenderEvents.senderError, options.onError);
            }
            if (options.onClose) {
              sender.on(rhea_1.SenderEvents.senderClose, options.onClose);
            }
            if (type === SenderType.sender) {
              if (options.onAccepted) {
                sender.on(rhea_1.SenderEvents.accepted, options.onAccepted);
              }
              if (options.onRejected) {
                sender.on(rhea_1.SenderEvents.rejected, options.onRejected);
              }
              if (options.onReleased) {
                sender.on(rhea_1.SenderEvents.released, options.onReleased);
              }
              if (options.onModified) {
                sender.on(rhea_1.SenderEvents.modified, options.onModified);
              }
            }
          }
          const removeListeners = () => {
            clearTimeout(waitTimer);
            sender.actionInitiated--;
            rheaSender.removeListener(rhea_1.SenderEvents.senderOpen, onSendable);
            rheaSender.removeListener(rhea_1.SenderEvents.senderClose, onClose);
            rheaSender.session.connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
            if (abortSignal) {
              abortSignal.removeEventListener("abort", onAbort);
            }
          };
          const onSendable = (context) => {
            removeListeners();
            log.sender("[%s] Resolving the promise with amqp sender '%s' on amqp session '%s'.", this.connection.id, sender.name, this.id);
            return resolve(sender);
          };
          const onClose = (context) => {
            removeListeners();
            log.error("[%s] Error occurred while creating the amqp sender '%s' on amqp session '%s' over amqp connection: %O.", this.connection.id, sender.name, this.id, context.sender.error);
            return reject(context.sender.error);
          };
          const onDisconnected = (context) => {
            removeListeners();
            const error = context.connection && context.connection.error ? context.connection.error : context.error;
            log.error("[%s] Connection got disconnected while creating amqp sender '%s' on amqp session '%s': %O.", this.connection.id, sender.name, this.id, error);
            return reject(error);
          };
          const actionAfterTimeout = () => {
            removeListeners();
            const msg = `Unable to create the amqp sender '${sender.name}' on amqp session '${this.id}' due to operation timeout.`;
            log.error("[%s] %s", this.connection.id, msg);
            return reject(new errorDefinitions_1.OperationTimeoutError(msg));
          };
          rheaSender.once(rhea_1.SenderEvents.sendable, onSendable);
          rheaSender.once(rhea_1.SenderEvents.senderClose, onClose);
          rheaSender.session.connection.on(rhea_1.ConnectionEvents.disconnected, onDisconnected);
          const waitTimer = setTimeout(actionAfterTimeout, this.connection.options.operationTimeoutInSeconds * 1e3);
        });
      }
      /**
       * Adds event listeners for the possible events that can occur on the session object and
       * re-emits the same event back with the received arguments from rhea's event emitter.
       * @private
       * @returns {void} void
       */
      _initializeEventListeners() {
        for (const eventName of Object.keys(rhea_1.SessionEvents)) {
          this._session.on(rhea_1.SessionEvents[eventName], (context) => {
            const params = {
              rheaContext: context,
              emitter: this,
              eventName: rhea_1.SessionEvents[eventName],
              emitterType: "session",
              connectionId: this.connection.id
            };
            (0, utils_1.emitEvent)(params);
          });
        }
        this._session.on(rhea_1.SenderEvents.senderError, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SenderEvents.senderError,
            emitterType: "session",
            connectionId: this.connection.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._session.on(rhea_1.SenderEvents.senderClose, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SenderEvents.senderClose,
            emitterType: "session",
            connectionId: this.connection.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._session.on(rhea_1.ReceiverEvents.receiverError, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.ReceiverEvents.receiverError,
            emitterType: "session",
            connectionId: this.connection.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._session.on(rhea_1.ReceiverEvents.receiverClose, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.ReceiverEvents.receiverClose,
            emitterType: "session",
            connectionId: this.connection.id
          };
          (0, utils_1.emitEvent)(params);
        });
        if (typeof this._session.eventNames === "function") {
          log.eventHandler("[%s] rhea-promise 'session' object '%s' is listening for events: %o emitted by rhea's 'session' object.", this.connection.id, this.id, this._session.eventNames());
        }
      }
    };
    exports.Session = Session;
  }
});

// ../../node_modules/rhea-promise/dist/lib/eventContext.js
var require_eventContext = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/eventContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventContext = void 0;
    var session_1 = require_session2();
    var link_1 = require_link2();
    var log = require_log3();
    function hasConnection(val2) {
      return val2 && val2.connection;
    }
    var EventContext;
    (function(EventContext2) {
      function translate(rheaContext, emitter, eventName) {
        const connection = hasConnection(emitter) ? emitter.connection : emitter;
        log.contextTranslator("[%s] Translating the context for event: '%s'.", connection.id, eventName);
        const result = Object.assign({ _context: rheaContext }, rheaContext);
        result.connection = connection;
        result.container = connection.container;
        if (emitter instanceof link_1.Link) {
          result.session = emitter.session;
          if (emitter.type === link_1.LinkType.receiver && rheaContext.receiver) {
            result.receiver = emitter;
          } else if (emitter.type === link_1.LinkType.sender && rheaContext.sender) {
            result.sender = emitter;
          }
        } else if (emitter instanceof session_1.Session) {
          result.session = emitter;
        }
        return result;
      }
      EventContext2.translate = translate;
    })(EventContext = exports.EventContext || (exports.EventContext = {}));
  }
});

// ../../node_modules/rhea-promise/dist/lib/util/constants.js
var require_constants = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/util/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultOperationTimeoutInSeconds = void 0;
    exports.defaultOperationTimeoutInSeconds = 60;
  }
});

// ../../node_modules/rhea-promise/dist/lib/connection.js
var require_connection2 = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/connection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Connection = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var log = require_log3();
    var session_1 = require_session2();
    var container_1 = require_container2();
    var constants_1 = require_constants();
    var utils_1 = require_utils();
    var rhea_1 = require_container();
    var entity_1 = require_entity();
    var errorDefinitions_1 = require_errorDefinitions();
    function isCreatedRheaConnectionOptions(obj) {
      return obj && typeof obj.container === "object" && typeof obj.rheaConnection === "object";
    }
    var maxListenerLimit = 1e3;
    var Connection = class extends entity_1.Entity {
      /**
       * Creates an instance of the Connection object.
       * @constructor
       * @param {Connection} _connection The connection object from rhea library.
       */
      constructor(options) {
        var _a;
        super();
        if (isCreatedRheaConnectionOptions(options)) {
          this._connection = options.rheaConnection;
          this.container = options.container;
        } else {
          let connectionOptions = options;
          if (!connectionOptions)
            connectionOptions = { transport: "tls" };
          if (!connectionOptions.operationTimeoutInSeconds) {
            connectionOptions.operationTimeoutInSeconds = constants_1.defaultOperationTimeoutInSeconds;
          }
          if (connectionOptions.webSocketOptions) {
            const ws = (0, rhea_1.websocket_connect)(connectionOptions.webSocketOptions.webSocket);
            connectionOptions.connection_details = ws(connectionOptions.webSocketOptions.url, connectionOptions.webSocketOptions.protocol, connectionOptions.webSocketOptions.options);
          }
          this._connection = (0, rhea_1.create_connection)(connectionOptions);
          this.container = container_1.Container.copyFromContainerInstance(this._connection.container);
          options = connectionOptions;
        }
        this.options = this._connection.options;
        this.options.operationTimeoutInSeconds = (_a = options === null || options === void 0 ? void 0 : options.operationTimeoutInSeconds) !== null && _a !== void 0 ? _a : constants_1.defaultOperationTimeoutInSeconds;
        this._initializeEventListeners();
        this._connection.setMaxListeners(maxListenerLimit);
      }
      /**
       * @property {string} id Returns the connection id.
       * @readonly
       */
      get id() {
        return this._connection.options.id;
      }
      /**
       * @property {Dictionary<any> | undefined} [properties] Provides the connection properties.
       * @readonly
       */
      get properties() {
        return this._connection.properties;
      }
      /**
       * @property {number | undefined} [maxFrameSize] Provides the max frame size.
       * @readonly
       */
      get maxFrameSize() {
        return this._connection.max_frame_size;
      }
      /**
       * @property {number | undefined} [idleTimeout] Provides the idle timeout for the connection.
       * @readonly
       */
      get idleTimeout() {
        return this._connection.idle_time_out;
      }
      /**
       * @property {number | undefined} [channelMax] Provides the maximum number of channels supported.
       * @readonly
       */
      get channelMax() {
        return this._connection.channel_max;
      }
      /**
       * @property {AmqpError | Error | undefined} [error] Provides the last error that occurred on the
       * connection.
       */
      get error() {
        return this._connection.error;
      }
      /**
       * Removes the provided session from the internal map in rhea.
       * Also removes all the event handlers added in the rhea-promise library on the provided session.
       * @param {Session} session The session to be removed.
       */
      removeSession(session) {
        return session.remove();
      }
      /**
       * Creates a new amqp connection.
       * @param options A set of options including a signal used to cancel the operation.
       * @return {Promise<Connection>} Promise<Connection>
       * - **Resolves** the promise with the Connection object when rhea emits the "connection_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "connection_close" event
       * while trying to establish an amqp connection or with an AbortError if the operation was cancelled.
       */
      open(options) {
        return new Promise((resolve, reject) => {
          if (!this.isOpen()) {
            const abortSignal = options && options.abortSignal;
            const removeListeners = () => {
              clearTimeout(waitTimer);
              this.actionInitiated--;
              this._connection.removeListener(rhea_1.ConnectionEvents.connectionOpen, onOpen);
              this._connection.removeListener(rhea_1.ConnectionEvents.connectionClose, onClose);
              this._connection.removeListener(rhea_1.ConnectionEvents.disconnected, onClose);
              if (abortSignal) {
                abortSignal.removeEventListener("abort", onAbort);
              }
            };
            const onOpen = (context) => {
              removeListeners();
              log.connection("[%s] Resolving the promise with amqp connection.", this.id);
              return resolve(this);
            };
            const onClose = (context) => {
              removeListeners();
              const err = context.error || context.connection.error || Error("Failed to connect");
              log.error("[%s] Error occurred while establishing amqp connection: %O", this.id, err);
              return reject(err);
            };
            const onAbort = () => {
              removeListeners();
              this._connection.close();
              const err = (0, utils_1.createAbortError)();
              log.error("[%s] [%s]", this.id, err.message);
              return reject(err);
            };
            const actionAfterTimeout = () => {
              removeListeners();
              const msg = `Unable to open the amqp connection "${this.id}" due to operation timeout.`;
              log.error("[%s] %s", this.id, msg);
              return reject(new Error(msg));
            };
            this._connection.once(rhea_1.ConnectionEvents.connectionOpen, onOpen);
            this._connection.once(rhea_1.ConnectionEvents.connectionClose, onClose);
            this._connection.once(rhea_1.ConnectionEvents.disconnected, onClose);
            const waitTimer = setTimeout(actionAfterTimeout, this.options.operationTimeoutInSeconds * 1e3);
            log.connection("[%s] Trying to create a new amqp connection.", this.id);
            this._connection.connect();
            this.actionInitiated++;
            if (abortSignal) {
              if (abortSignal.aborted) {
                onAbort();
              } else {
                abortSignal.addEventListener("abort", onAbort);
              }
            }
          } else {
            return resolve(this);
          }
        });
      }
      /**
       * Closes the amqp connection.
       * @param options A set of options including a signal used to cancel the operation.
       * When the abort signal in the options is fired, the local endpoint is closed.
       * This does not guarantee that the remote has closed as well. It only stops listening for
       * an acknowledgement that the remote endpoint is closed as well.
       * @return {Promise<void>} Promise<void>
       * - **Resolves** the promise when rhea emits the "connection_close" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "connection_error" event while
       * trying to close an amqp connection or with an AbortError if the operation was cancelled.
       */
      close(options) {
        return new Promise((resolve, reject) => {
          log.error("[%s] The connection is open ? -> %s", this.id, this.isOpen());
          if (this.isOpen()) {
            const abortSignal = options && options.abortSignal;
            const removeListeners = () => {
              clearTimeout(waitTimer);
              this.actionInitiated--;
              this._connection.removeListener(rhea_1.ConnectionEvents.connectionError, onError);
              this._connection.removeListener(rhea_1.ConnectionEvents.connectionClose, onClose);
              this._connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
              if (abortSignal) {
                abortSignal.removeEventListener("abort", onAbort);
              }
            };
            const onClose = (context) => {
              removeListeners();
              log.connection("[%s] Resolving the promise as the connection has been successfully closed.", this.id);
              return resolve();
            };
            const onError = (context) => {
              removeListeners();
              log.error("[%s] Error occurred while closing amqp connection: %O.", this.id, context.connection.error);
              return reject(context.connection.error);
            };
            const onDisconnected = (context) => {
              removeListeners();
              const error = context.connection && context.connection.error ? context.connection.error : context.error;
              log.error("[%s] Connection got disconnected while closing itself: %O.", this.id, error);
            };
            const onAbort = () => {
              removeListeners();
              const err = (0, utils_1.createAbortError)();
              log.error("[%s] [%s]", this.id, err.message);
              return reject(err);
            };
            const actionAfterTimeout = () => {
              removeListeners();
              const msg = `Unable to close the amqp connection "${this.id}" due to operation timeout.`;
              log.error("[%s] %s", this.id, msg);
              return reject(new Error(msg));
            };
            this._connection.once(rhea_1.ConnectionEvents.connectionClose, onClose);
            this._connection.once(rhea_1.ConnectionEvents.connectionError, onError);
            this._connection.once(rhea_1.ConnectionEvents.disconnected, onDisconnected);
            const waitTimer = setTimeout(actionAfterTimeout, this.options.operationTimeoutInSeconds * 1e3);
            this._connection.close();
            this.actionInitiated++;
            if (abortSignal) {
              if (abortSignal.aborted) {
                onAbort();
              } else {
                abortSignal.addEventListener("abort", onAbort);
              }
            }
          } else {
            return resolve();
          }
        });
      }
      /**
       * Determines whether the connection is open.
       * @returns {boolean} result `true` - is open; `false` otherwise.
       */
      isOpen() {
        let result = false;
        if (this._connection && this._connection.is_open && this._connection.is_open()) {
          result = true;
        }
        return result;
      }
      /**
       * Clears all the amqp sessions from the internal map maintained in rhea. This does not remove any
       * of the event handlers added in the rhea-promise library. To clear such event handlers, either
       * call remove() or close() on each session
       */
      removeAllSessions() {
        if (this._connection) {
          this._connection.remove_all_sessions();
        }
      }
      /**
       * Determines whether the remote end of the connection is open.
       * @returns {boolean} result `true` - is open; `false` otherwise.
       */
      isRemoteOpen() {
        return this._connection.is_remote_open();
      }
      /**
       * Gets the connection error if present.
       * @returns {ConnectionError | undefined} ConnectionError | undefined
       */
      getError() {
        return this._connection.get_error();
      }
      /**
       * Gets the peer certificate if present.
       * @returns {PeerCertificate | undefined} PeerCertificate | undefined
       */
      getPeerCertificate() {
        return this._connection.get_peer_certificate();
      }
      /**
       * Gets the tls socket if present.
       * @returns {Socket | undefined} Socket | undefined
       */
      getTlsSocket() {
        return this._connection.get_tls_socket();
      }
      /**
       * Determines whether the close from the peer is a response to a locally initiated close request
       * for the connection.
       * @returns {boolean} `true` if close was locally initiated, `false` otherwise.
       */
      wasCloseInitiated() {
        return this._connection.is_closed();
      }
      /**
       * Creates an amqp session on the provided amqp connection.
       * @param options A set of options including a signal used to cancel the operation.
       * @return {Promise<Session>} Promise<Session>
       * - **Resolves** the promise with the Session object when rhea emits the "session_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "session_close" event while
       * trying to create an amqp session or with an AbortError if the operation was cancelled.
       */
      createSession(options) {
        return new Promise((resolve, reject) => {
          const abortSignal = options && options.abortSignal;
          let onAbort;
          if (abortSignal) {
            const rejectOnAbort = () => {
              const err = (0, utils_1.createAbortError)();
              log.error("[%s] [%s]", this.id, err.message);
              return reject(err);
            };
            onAbort = () => {
              removeListeners();
              if (rheaSession.is_open()) {
                rheaSession.close();
              } else if (!rheaSession.is_closed()) {
                rheaSession.once(rhea_1.SessionEvents.sessionOpen, () => {
                  rheaSession.close();
                });
              }
              return rejectOnAbort();
            };
            if (abortSignal.aborted) {
              return rejectOnAbort();
            } else {
              abortSignal.addEventListener("abort", onAbort);
            }
          }
          const rheaSession = this._connection.create_session();
          const session = new session_1.Session(this, rheaSession);
          session.actionInitiated++;
          const removeListeners = () => {
            clearTimeout(waitTimer);
            session.actionInitiated--;
            rheaSession.removeListener(rhea_1.SessionEvents.sessionOpen, onOpen);
            rheaSession.removeListener(rhea_1.SessionEvents.sessionClose, onClose);
            rheaSession.connection.removeListener(rhea_1.ConnectionEvents.disconnected, onDisconnected);
            if (abortSignal) {
              abortSignal.removeEventListener("abort", onAbort);
            }
          };
          const onOpen = (context) => {
            removeListeners();
            log.session("[%s] Resolving the promise with amqp session '%s'.", this.id, session.id);
            return resolve(session);
          };
          const onClose = (context) => {
            removeListeners();
            log.error("[%s] Error occurred while establishing a session over amqp connection: %O.", this.id, context.session.error);
            return reject(context.session.error);
          };
          const onDisconnected = (context) => {
            removeListeners();
            const error = context.connection && context.connection.error ? context.connection.error : context.error;
            log.error("[%s] Connection got disconnected while creating amqp session '%s': %O.", this.id, session.id, error);
            return reject(error);
          };
          const actionAfterTimeout = () => {
            removeListeners();
            const msg = `Unable to create the amqp session due to operation timeout.`;
            log.error("[%s] %s", this.id, msg);
            return reject(new errorDefinitions_1.OperationTimeoutError(msg));
          };
          rheaSession.once(rhea_1.SessionEvents.sessionOpen, onOpen);
          rheaSession.once(rhea_1.SessionEvents.sessionClose, onClose);
          rheaSession.connection.once(rhea_1.ConnectionEvents.disconnected, onDisconnected);
          log.session("[%s] Calling amqp session.begin().", this.id);
          const waitTimer = setTimeout(actionAfterTimeout, this.options.operationTimeoutInSeconds * 1e3);
          rheaSession.begin();
        });
      }
      /**
       * Creates an amqp sender link. It either uses the provided session or creates a new one.
       * - **Resolves** the promise with the Sender object when rhea emits the "sender_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "sender_close" event while
       * trying to create an amqp session or with an AbortError if the operation was cancelled.
       * @param {CreateSenderOptions} options Optional parameters to create a sender link.
       * @return {Promise<Sender>} Promise<Sender>.
       */
      createSender(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (options && options.session && options.session.createSender) {
            return options.session.createSender(options);
          }
          const session = yield this.createSession({ abortSignal: options && options.abortSignal });
          return session.createSender(options);
        });
      }
      /**
       * Creates an awaitable amqp sender. It either uses the provided session or creates a new one.
       * @param options Optional parameters to create an awaitable sender link.
       * - If `onError` and `onSessionError` handlers are not provided then the `AwaitableSender` will
       * clear the timer and reject the Promise for all the entries of inflight send operation in its
       * `deliveryDispositionMap`.
       * - If the user is handling the reconnection of sender link or the underlying connection in it's
       * app, then the `onError` and `onSessionError` handlers must be provided by the user and (s)he
       * shall be responsible of clearing the `deliveryDispositionMap` of inflight `send()` operation.
       *
       * @return Promise<AwaitableSender>.
       */
      createAwaitableSender(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (options && options.session && options.session.createAwaitableSender) {
            return options.session.createAwaitableSender(options);
          }
          const session = yield this.createSession({ abortSignal: options && options.abortSignal });
          return session.createAwaitableSender(options);
        });
      }
      /**
       * Creates an amqp receiver link. It either uses the provided session or creates a new one.
       * - **Resolves** the promise with the Sender object when rhea emits the "receiver_open" event.
       * - **Rejects** the promise with an AmqpError when rhea emits the "receiver_close" event while
       * trying to create an amqp session or with an AbortError if the operation was cancelled.
       * @param {CreateReceiverOptions} options Optional parameters to create a receiver link.
       * @return {Promise<Receiver>} Promise<Receiver>.
       */
      createReceiver(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (options && options.session && options.session.createReceiver) {
            return options.session.createReceiver(options);
          }
          const session = yield this.createSession({ abortSignal: options && options.abortSignal });
          return session.createReceiver(options);
        });
      }
      /**
       * Creates an amqp sender-receiver link. It either uses the provided session or creates a new one.
       * This method creates a sender-receiver link on the same session. It is useful for management
       * style operations where one may want to send a request and await for response.
       * @param {SenderOptions} senderOptions Parameters to create a sender.
       * @param {ReceiverOptions} receiverOptions Parameters to create a receiver.
       * @param {CreateRequestResponseLinkOptions} [options] Optional parameters to control how sender and receiver link creation.
       * @return {Promise<ReqResLink>} Promise<ReqResLink>
       */
      createRequestResponseLink(senderOptions, receiverOptions, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!senderOptions) {
            throw new Error(`Please provide sender options.`);
          }
          if (!receiverOptions) {
            throw new Error(`Please provide receiver options.`);
          }
          const { session: providedSession, abortSignal } = options;
          const session = providedSession || (yield this.createSession({ abortSignal }));
          const [sender, receiver] = yield Promise.all([
            session.createSender(Object.assign(Object.assign({}, senderOptions), { abortSignal })),
            session.createReceiver(Object.assign(Object.assign({}, receiverOptions), { abortSignal }))
          ]);
          log.connection("[%s] Successfully created the sender '%s' and receiver '%s' on the same amqp session '%s'.", this.id, sender.name, receiver.name, session.id);
          return {
            session,
            sender,
            receiver
          };
        });
      }
      /**
       * Adds event listeners for the possible events that can occur on the connection object and
       * re-emits the same event back with the received arguments from rhea's event emitter.
       * @private
       * @returns {void} void
       */
      _initializeEventListeners() {
        for (const eventName of Object.keys(rhea_1.ConnectionEvents)) {
          this._connection.on(rhea_1.ConnectionEvents[eventName], (context) => {
            const params = {
              rheaContext: context,
              emitter: this,
              eventName: rhea_1.ConnectionEvents[eventName],
              emitterType: "connection",
              connectionId: this.id
            };
            if (rhea_1.ConnectionEvents[eventName] === rhea_1.ConnectionEvents.protocolError) {
              log.connection("[%s] ProtocolError is: %O.", this.id, context);
            }
            (0, utils_1.emitEvent)(params);
          });
        }
        this._connection.on(rhea_1.SenderEvents.senderError, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SenderEvents.senderError,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._connection.on(rhea_1.SenderEvents.senderClose, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SenderEvents.senderClose,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._connection.on(rhea_1.ReceiverEvents.receiverError, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.ReceiverEvents.receiverError,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._connection.on(rhea_1.ReceiverEvents.receiverClose, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.ReceiverEvents.receiverClose,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._connection.on(rhea_1.SessionEvents.sessionError, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SessionEvents.sessionError,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        this._connection.on(rhea_1.SessionEvents.sessionClose, (context) => {
          const params = {
            rheaContext: context,
            emitter: this,
            eventName: rhea_1.SessionEvents.sessionClose,
            emitterType: "connection",
            connectionId: this.id
          };
          (0, utils_1.emitEvent)(params);
        });
        if (typeof this._connection.eventNames === "function") {
          log.eventHandler("[%s] rhea-promise 'connection' object is listening for events: %o emitted by rhea's 'connection' object.", this.id, this._connection.eventNames());
        }
      }
    };
    exports.Connection = Connection;
  }
});

// ../../node_modules/rhea-promise/dist/lib/container.js
var require_container2 = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/container.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Container = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var rhea_1 = require_container();
    var events_1 = require("events");
    var connection_1 = require_connection2();
    var Container = class _Container extends events_1.EventEmitter {
      constructor(options) {
        if (!options)
          options = {};
        super();
        if (options.createdInstance) {
          this._container = options.createdInstance;
          delete options.createdInstance;
        } else {
          this._container = (0, rhea_1.create_container)(options);
        }
        this.options = this._container.options;
      }
      get id() {
        return this._container.id;
      }
      get filter() {
        return this._container.filter;
      }
      get types() {
        return this._container.types;
      }
      get message() {
        return this._container.message;
      }
      get sasl() {
        return this._container.sasl;
      }
      get saslServerMechanisms() {
        return this._container.sasl_server_mechanisms;
      }
      createConnection(options) {
        const rheaConnection = this._container.create_connection(options);
        return new connection_1.Connection({ rheaConnection, container: this });
      }
      connect(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return this.createConnection(options).open();
        });
      }
      listen(options) {
        return this._container.listen(options);
      }
      generateUUid() {
        return this._container.generate_uuid();
      }
      stringToUuid(uuidString) {
        return this._container.string_to_uuid(uuidString);
      }
      uuidToString(buffer) {
        return this._container.uuid_to_string(buffer);
      }
      websocketAccept(socket, options) {
        return this._container.websocket_accept(socket, options);
      }
      websocketConnect(impl) {
        return this._container.websocket_connect(impl);
      }
      static create(options) {
        return new _Container(options);
      }
      static copyFromContainerInstance(instance) {
        return new _Container({ createdInstance: instance });
      }
    };
    exports.Container = Container;
  }
});

// ../../node_modules/rhea-promise/dist/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/rhea-promise/dist/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendOperationFailedError = exports.OperationTimeoutError = exports.InsufficientCreditError = exports.parseConnectionString = exports.messageProperties = exports.messageHeader = exports.delay = exports.isAmqpError = exports.AmqpResponseStatusCode = exports.AwaitableSender = exports.SenderSendOptions = exports.Sender = exports.Receiver = exports.Session = exports.Connection = exports.Container = exports.EventContext = exports.Typed = exports.SessionEvents = exports.ConnectionEvents = exports.SenderEvents = exports.ReceiverEvents = exports.string_to_uuid = exports.generate_uuid = exports.uuid_to_string = exports.filter = exports.message = exports.types = void 0;
    var rhea_1 = require_container();
    Object.defineProperty(exports, "types", { enumerable: true, get: function() {
      return rhea_1.types;
    } });
    Object.defineProperty(exports, "message", { enumerable: true, get: function() {
      return rhea_1.message;
    } });
    Object.defineProperty(exports, "filter", { enumerable: true, get: function() {
      return rhea_1.filter;
    } });
    Object.defineProperty(exports, "uuid_to_string", { enumerable: true, get: function() {
      return rhea_1.uuid_to_string;
    } });
    Object.defineProperty(exports, "generate_uuid", { enumerable: true, get: function() {
      return rhea_1.generate_uuid;
    } });
    Object.defineProperty(exports, "string_to_uuid", { enumerable: true, get: function() {
      return rhea_1.string_to_uuid;
    } });
    Object.defineProperty(exports, "ReceiverEvents", { enumerable: true, get: function() {
      return rhea_1.ReceiverEvents;
    } });
    Object.defineProperty(exports, "SenderEvents", { enumerable: true, get: function() {
      return rhea_1.SenderEvents;
    } });
    Object.defineProperty(exports, "ConnectionEvents", { enumerable: true, get: function() {
      return rhea_1.ConnectionEvents;
    } });
    Object.defineProperty(exports, "SessionEvents", { enumerable: true, get: function() {
      return rhea_1.SessionEvents;
    } });
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return rhea_1.Typed;
    } });
    var eventContext_1 = require_eventContext();
    Object.defineProperty(exports, "EventContext", { enumerable: true, get: function() {
      return eventContext_1.EventContext;
    } });
    var container_1 = require_container2();
    Object.defineProperty(exports, "Container", { enumerable: true, get: function() {
      return container_1.Container;
    } });
    var connection_1 = require_connection2();
    Object.defineProperty(exports, "Connection", { enumerable: true, get: function() {
      return connection_1.Connection;
    } });
    var session_1 = require_session2();
    Object.defineProperty(exports, "Session", { enumerable: true, get: function() {
      return session_1.Session;
    } });
    var receiver_1 = require_receiver();
    Object.defineProperty(exports, "Receiver", { enumerable: true, get: function() {
      return receiver_1.Receiver;
    } });
    var sender_1 = require_sender();
    Object.defineProperty(exports, "Sender", { enumerable: true, get: function() {
      return sender_1.Sender;
    } });
    Object.defineProperty(exports, "SenderSendOptions", { enumerable: true, get: function() {
      return sender_1.SenderSendOptions;
    } });
    var awaitableSender_1 = require_awaitableSender();
    Object.defineProperty(exports, "AwaitableSender", { enumerable: true, get: function() {
      return awaitableSender_1.AwaitableSender;
    } });
    var utils_1 = require_utils();
    Object.defineProperty(exports, "AmqpResponseStatusCode", { enumerable: true, get: function() {
      return utils_1.AmqpResponseStatusCode;
    } });
    Object.defineProperty(exports, "isAmqpError", { enumerable: true, get: function() {
      return utils_1.isAmqpError;
    } });
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return utils_1.delay;
    } });
    Object.defineProperty(exports, "messageHeader", { enumerable: true, get: function() {
      return utils_1.messageHeader;
    } });
    Object.defineProperty(exports, "messageProperties", { enumerable: true, get: function() {
      return utils_1.messageProperties;
    } });
    Object.defineProperty(exports, "parseConnectionString", { enumerable: true, get: function() {
      return utils_1.parseConnectionString;
    } });
    var errorDefinitions_1 = require_errorDefinitions();
    Object.defineProperty(exports, "InsufficientCreditError", { enumerable: true, get: function() {
      return errorDefinitions_1.InsufficientCreditError;
    } });
    Object.defineProperty(exports, "OperationTimeoutError", { enumerable: true, get: function() {
      return errorDefinitions_1.OperationTimeoutError;
    } });
    Object.defineProperty(exports, "SendOperationFailedError", { enumerable: true, get: function() {
      return errorDefinitions_1.SendOperationFailedError;
    } });
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardAbortMessage = exports.Constants = void 0;
    exports.Constants = {
      associatedLinkName: "associated-link-name",
      partitionKey: "x-opt-partition-key",
      sequenceNumber: "x-opt-sequence-number",
      enqueueSequenceNumber: "x-opt-enqueue-sequence-number",
      enqueuedTime: "x-opt-enqueued-time",
      scheduledEnqueueTime: "x-opt-scheduled-enqueue-time",
      offset: "x-opt-offset",
      lockedUntil: "x-opt-locked-until",
      partitionIdName: "x-opt-partition-id",
      publisher: "x-opt-publisher-name",
      viaPartitionKey: "x-opt-via-partition-key",
      deadLetterSource: "x-opt-deadletter-source",
      messageState: "x-opt-message-state",
      enqueuedTimeAnnotation: `amqp.annotation.x-opt-enqueued-time`,
      offsetAnnotation: `amqp.annotation.x-opt-offset`,
      sequenceNumberAnnotation: `amqp.annotation.x-opt-sequence-number`,
      guidSize: 16,
      message: "message",
      error: "error",
      statusCode: "status-code",
      statusDescription: "status-description",
      errorCondition: "error-condition",
      management: "$management",
      partition: "partition",
      partitionId: "partitionId",
      readOperation: "READ",
      TLS: "tls",
      TCP: "tcp",
      establishConnection: "establishConnection",
      defaultConsumerGroup: "$default",
      eventHub: "eventhub",
      cbsEndpoint: "$cbs",
      cbsReplyTo: "cbs",
      operationPutToken: "put-token",
      aadEventHubsAudience: "https://eventhubs.azure.net/",
      aadEventHubsScope: "https://eventhubs.azure.net//.default",
      aadServiceBusAudience: "https://servicebus.azure.net/",
      aadServiceBusScope: "https://servicebus.azure.net//.default",
      maxUserAgentLength: 512,
      vendorString: "com.microsoft",
      attachEpoch: `com.microsoft:epoch`,
      receiverIdentifierName: `com.microsoft:receiver-name`,
      enableReceiverRuntimeMetricName: `com.microsoft:enable-receiver-runtime-metric`,
      timespan: `com.microsoft:timespan`,
      uri: `com.microsoft:uri`,
      dateTimeOffset: `com.microsoft:datetime-offset`,
      sessionFilterName: `com.microsoft:session-filter`,
      receiverError: "receiver_error",
      senderError: "sender_error",
      sessionError: "session_error",
      connectionError: "connection_error",
      defaultOperationTimeoutInMs: 6e4,
      defaultConnectionIdleTimeoutInMs: 6e4,
      managementRequestKey: "managementRequest",
      negotiateCbsKey: "negotiateCbs",
      negotiateClaim: "negotiateClaim",
      ensureContainerAndBlob: "ensureContainerAndBlob",
      defaultPrefetchCount: 1e3,
      reconnectLimit: 100,
      maxMessageIdLength: 128,
      maxPartitionKeyLength: 128,
      maxSessionIdLength: 128,
      pathDelimiter: "/",
      ruleNameMaximumLength: 50,
      maximumSqlFilterStatementLength: 1024,
      maximumSqlRuleActionStatementLength: 1024,
      maxDeadLetterReasonLength: 4096,
      // https://stackoverflow.com/questions/11526504/minimum-and-maximum-date for js
      // However we are setting this to the TimeSpan.MaxValue of C#.
      maxDurationValue: 922337203685477,
      minDurationValue: -922337203685477,
      // https://github.com/Azure/azure-amqp/blob/master/Microsoft.Azure.Amqp/Amqp/AmqpConstants.cs#L47
      maxAbsoluteExpiryTime: (/* @__PURE__ */ new Date("9999-12-31T07:59:59.000Z")).getTime(),
      maxUint32Value: 4294967295,
      aadTokenValidityMarginInMs: 5e3,
      connectionReconnectDelay: 300,
      defaultMaxRetries: 3,
      defaultMaxRetriesForConnection: 150,
      defaultDelayBetweenOperationRetriesInMs: 3e4,
      defaultMaxDelayForExponentialRetryInMs: 9e4,
      receiverSettleMode: "receiver-settle-mode",
      dispositionStatus: "disposition-status",
      fromSequenceNumber: "from-sequence-number",
      messageCount: "message-count",
      enqueuedTimeUtc: "enqueued-time-utc",
      lockTokens: "lock-tokens",
      messageIdMapKey: "message-id",
      sequenceNumberMapKey: "sequence-number",
      lockTokenMapKey: "lock-token",
      sessionIdMapKey: "session-id",
      sequenceNumbers: "sequence-numbers",
      deadLetterReason: "deadletter-reason",
      deadLetterDescription: "deadletter-description",
      propertiesToModify: "properties-to-modify",
      deadLetterName: "com.microsoft:dead-letter",
      trackingId: "com.microsoft:tracking-id",
      serverTimeout: "com.microsoft:server-timeout",
      operations: {
        putToken: "put-token",
        read: "READ",
        cancelScheduledMessage: "com.microsoft:cancel-scheduled-message",
        scheduleMessage: "com.microsoft:schedule-message",
        renewLock: "com.microsoft:renew-lock",
        peekMessage: "com.microsoft:peek-message",
        receiveBySequenceNumber: "com.microsoft:receive-by-sequence-number",
        deleteMessages: "com.microsoft:batch-delete-messages",
        updateDisposition: "com.microsoft:update-disposition",
        renewSessionLock: "com.microsoft:renew-session-lock",
        setSessionState: "com.microsoft:set-session-state",
        getSessionState: "com.microsoft:get-session-state",
        enumerateSessions: "com.microsoft:get-message-sessions",
        addRule: "com.microsoft:add-rule",
        removeRule: "com.microsoft:remove-rule",
        enumerateRules: "com.microsoft:enumerate-rules"
      },
      descriptorCodes: {
        ruleDescriptionList: 1335734829060,
        sqlFilterList: 83483426822,
        correlationFilterList: 83483426825,
        sqlRuleActionList: 1335734829062,
        trueFilterList: 83483426823,
        falseFilterList: 83483426824
      }
    };
    exports.StandardAbortMessage = "The operation was aborted.";
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/log.js
var require_log4 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logErrorStackTrace = exports.logger = void 0;
    var logger_1 = require_commonjs();
    var core_util_1 = require_commonjs3();
    exports.logger = (0, logger_1.createClientLogger)("core-amqp");
    function logErrorStackTrace(error) {
      if ((0, core_util_1.isObjectWithProperties)(error, ["stack"])) {
        exports.logger.verbose(error.stack);
      }
    }
    exports.logErrorStackTrace = logErrorStackTrace;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/lock.js
var require_lock = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/lock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancellableAsyncLockImpl = void 0;
    var abort_controller_1 = require_commonjs4();
    var rhea_promise_1 = require_lib();
    var constants_js_1 = require_constants2();
    var log_js_1 = require_log4();
    var CancellableAsyncLockImpl = class {
      constructor() {
        this._keyMap = /* @__PURE__ */ new Map();
        this._executionRunningSet = /* @__PURE__ */ new Set();
      }
      /**
       * Returns a promise that resolves to the value returned by the provided task function.
       * Only 1 task can be invoked at a time for a given `key` value.
       *
       * An acquire call can be cancelled via an `abortSignal`.
       * If cancelled, the promise will be rejected with an `AbortError`.
       *
       * `acquireTimeoutInMs` can also be provided to properties.
       * If the timeout is reached before the provided `task` is invoked,
       * then the promise will be rejected with an Error stating the task
       * timed out waiting to acquire a lock.
       *
       * @param key - All `acquire` calls are grouped by the provided `key`.
       * @param task - The function to invoke once the lock has been acquired.
       * @param properties - Additional properties to control the behavior of `acquire`.
       */
      acquire(key, task, properties) {
        var _a;
        const { abortSignal, timeoutInMs } = properties;
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
          return Promise.reject(new abort_controller_1.AbortError(constants_js_1.StandardAbortMessage));
        }
        const taskQueue = (_a = this._keyMap.get(key)) !== null && _a !== void 0 ? _a : [];
        this._keyMap.set(key, taskQueue);
        const { promise, rejecter, resolver } = getPromiseParts();
        const taskDetails = {
          reject: rejecter,
          resolve: resolver,
          task
        };
        if (typeof timeoutInMs === "number") {
          const tid = setTimeout(() => {
            this._removeTaskDetails(key, taskDetails);
            rejecter(new rhea_promise_1.OperationTimeoutError(`The task timed out waiting to acquire a lock for ${key}`));
          }, timeoutInMs);
          taskDetails.tid = tid;
        }
        if (abortSignal) {
          const abortListener = () => {
            this._removeTaskDetails(key, taskDetails);
            rejecter(new abort_controller_1.AbortError(constants_js_1.StandardAbortMessage));
          };
          abortSignal.addEventListener("abort", abortListener);
          taskDetails.abortSignal = abortSignal;
          taskDetails.abortListener = abortListener;
        }
        taskQueue.push(taskDetails);
        log_js_1.logger.verbose(`Called acquire() for lock "${key}". Lock "${key}" has ${taskQueue.length} pending tasks.`);
        this._execute(key);
        return promise;
      }
      /**
       * Iterates over all the pending tasks for a given `key` serially.
       *
       * Note: If the pending tasks are already being iterated by an early
       * _execute invocation, this returns immediately.
       * @returns
       */
      async _execute(key) {
        if (this._executionRunningSet.has(key)) {
          return;
        }
        const taskQueue = this._keyMap.get(key);
        if (!taskQueue || !taskQueue.length) {
          return;
        }
        this._executionRunningSet.add(key);
        while (taskQueue.length) {
          const taskDetails = taskQueue.shift();
          if (!taskDetails) {
            continue;
          }
          try {
            log_js_1.logger.verbose(`Acquired lock for "${key}", invoking task.`);
            cleanupTaskDetails(taskDetails);
            const value = await taskDetails.task();
            taskDetails.resolve(value);
          } catch (err) {
            taskDetails.reject(err);
          }
          log_js_1.logger.verbose(`Task completed for lock "${key}". Lock "${key}" has ${taskQueue.length} pending tasks.`);
        }
        this._executionRunningSet.delete(key);
        this._keyMap.delete(key);
      }
      _removeTaskDetails(key, taskDetails) {
        const taskQueue = this._keyMap.get(key);
        if (!taskQueue || !taskQueue.length) {
          return;
        }
        const index = taskQueue.indexOf(taskDetails);
        if (index !== -1) {
          const [details] = taskQueue.splice(index, 1);
          cleanupTaskDetails(details);
        }
      }
    };
    exports.CancellableAsyncLockImpl = CancellableAsyncLockImpl;
    function getPromiseParts() {
      let resolver;
      let rejecter;
      const promise = new Promise((resolve, reject) => {
        resolver = resolve;
        rejecter = reject;
      });
      return {
        promise,
        resolver,
        rejecter
      };
    }
    function cleanupTaskDetails(taskDetails) {
      if (taskDetails.tid)
        clearTimeout(taskDetails.tid);
      if (taskDetails.abortSignal && taskDetails.abortListener) {
        taskDetails.abortSignal.removeEventListener("abort", taskDetails.abortListener);
      }
    }
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNumber = exports.isString = exports.isIotHubConnectionString = exports.executePromisesSequentially = exports.randomNumberFromInterval = exports.isLoopbackAddress = exports.delay = exports.Timeout = exports.defaultCancellableLock = exports.parseConnectionString = void 0;
    var lock_js_1 = require_lock();
    var core_util_1 = require_commonjs3();
    function parseConnectionString(connectionString) {
      const output = {};
      const parts = connectionString.trim().split(";");
      for (let part of parts) {
        part = part.trim();
        if (part === "") {
          continue;
        }
        const splitIndex = part.indexOf("=");
        if (splitIndex === -1) {
          throw new Error("Connection string malformed: each part of the connection string must have an `=` assignment.");
        }
        const key = part.substring(0, splitIndex).trim();
        if (key === "") {
          throw new Error("Connection string malformed: missing key for assignment");
        }
        const value = part.substring(splitIndex + 1).trim();
        output[key] = value;
      }
      return output;
    }
    exports.parseConnectionString = parseConnectionString;
    exports.defaultCancellableLock = new lock_js_1.CancellableAsyncLockImpl();
    var Timeout = class _Timeout {
      set(t, value) {
        return new Promise((resolve, reject) => {
          this.clear();
          const callback = value ? () => reject(new Error(`${value}`)) : resolve;
          this._timer = setTimeout(callback, t);
        });
      }
      clear() {
        if (this._timer) {
          clearTimeout(this._timer);
        }
      }
      wrap(promise, t, value) {
        const wrappedPromise = this._promiseFinally(promise, () => this.clear());
        const timer = this.set(t, value);
        return Promise.race([wrappedPromise, timer]);
      }
      _promiseFinally(promise, fn) {
        const success = (result) => {
          fn();
          return result;
        };
        const error = (e) => {
          fn();
          return Promise.reject(e);
        };
        return Promise.resolve(promise).then(success, error);
      }
      static set(t, value) {
        return new _Timeout().set(t, value);
      }
      static wrap(promise, t, value) {
        return new _Timeout().wrap(promise, t, value);
      }
    };
    exports.Timeout = Timeout;
    async function delay(delayInMs, abortSignal, abortErrorMsg, value) {
      await (0, core_util_1.delay)(delayInMs, {
        abortSignal,
        abortErrorMsg
      });
      if (value !== void 0) {
        return value;
      }
    }
    exports.delay = delay;
    function isLoopbackAddress(address) {
      return /^(.*:\/\/)?(127\.[\d.]+|[0:]+1|localhost)/.test(address.toLowerCase());
    }
    exports.isLoopbackAddress = isLoopbackAddress;
    function randomNumberFromInterval(min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    }
    exports.randomNumberFromInterval = randomNumberFromInterval;
    function executePromisesSequentially(promiseFactories, kickstart) {
      let result = Promise.resolve(kickstart);
      promiseFactories.forEach((promiseFactory) => {
        result = result.then(promiseFactory);
      });
      return result;
    }
    exports.executePromisesSequentially = executePromisesSequentially;
    function isIotHubConnectionString(connectionString) {
      connectionString = String(connectionString);
      let result = false;
      const model = parseConnectionString(connectionString);
      if (model && model.HostName && model.SharedAccessKey && model.SharedAccessKeyName) {
        result = true;
      }
      return result;
    }
    exports.isIotHubConnectionString = isIotHubConnectionString;
    function isString2(s) {
      return typeof s === "string";
    }
    exports.isString = isString2;
    function isNumber2(n) {
      return typeof n === "number";
    }
    exports.isNumber = isNumber2;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/errors.js
var require_errors2 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.translate = exports.isSystemError = exports.SystemErrorConditionMapper = exports.retryableErrors = exports.MessagingError = exports.isMessagingError = exports.ErrorNameConditionMapper = exports.ConditionErrorNameMapper = exports.ConditionStatusMapper = void 0;
    var rhea_promise_1 = require_lib();
    var core_util_1 = require_commonjs3();
    var utils_js_1 = require_utils2();
    var ConditionStatusMapper;
    (function(ConditionStatusMapper2) {
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:timeout"] = 408] = "com.microsoft:timeout";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:not-found"] = 404] = "amqp:not-found";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:not-implemented"] = 501] = "amqp:not-implemented";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:entity-already-exists"] = 409] = "com.microsoft:entity-already-exists";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:message-lock-lost"] = 410] = "com.microsoft:message-lock-lost";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:session-lock-lost"] = 410] = "com.microsoft:session-lock-lost";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:no-matching-subscription"] = 500] = "com.microsoft:no-matching-subscription";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:link:message-size-exceeded"] = 403] = "amqp:link:message-size-exceeded";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:server-busy"] = 503] = "com.microsoft:server-busy";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:argument-error"] = 400] = "com.microsoft:argument-error";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:argument-out-of-range"] = 400] = "com.microsoft:argument-out-of-range";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:store-lock-lost"] = 410] = "com.microsoft:store-lock-lost";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:session-cannot-be-locked"] = 410] = "com.microsoft:session-cannot-be-locked";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:partition-not-owned"] = 410] = "com.microsoft:partition-not-owned";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:entity-disabled"] = 400] = "com.microsoft:entity-disabled";
      ConditionStatusMapper2[ConditionStatusMapper2["com.microsoft:publisher-revoked"] = 401] = "com.microsoft:publisher-revoked";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:link:stolen"] = 410] = "amqp:link:stolen";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:not-allowed"] = 400] = "amqp:not-allowed";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:unauthorized-access"] = 401] = "amqp:unauthorized-access";
      ConditionStatusMapper2[ConditionStatusMapper2["amqp:resource-limit-exceeded"] = 403] = "amqp:resource-limit-exceeded";
    })(ConditionStatusMapper || (exports.ConditionStatusMapper = ConditionStatusMapper = {}));
    var ConditionErrorNameMapper;
    (function(ConditionErrorNameMapper2) {
      ConditionErrorNameMapper2["com.microsoft:address-already-in-use"] = "AddressAlreadyInUseError";
      ConditionErrorNameMapper2["com.microsoft:store-lock-lost"] = "StoreLockLostError";
      ConditionErrorNameMapper2["com.microsoft:no-matching-subscription"] = "NoMatchingSubscriptionError";
      ConditionErrorNameMapper2["com.microsoft:partition-not-owned"] = "PartitionNotOwnedError";
      ConditionErrorNameMapper2["com.microsoft:publisher-revoked"] = "PublisherRevokedError";
      ConditionErrorNameMapper2["com.microsoft:entity-already-exists"] = "MessagingEntityAlreadyExistsError";
      ConditionErrorNameMapper2["com.microsoft:entity-disabled"] = "MessagingEntityDisabledError";
      ConditionErrorNameMapper2["com.microsoft:message-lock-lost"] = "MessageLockLostError";
      ConditionErrorNameMapper2["com.microsoft:session-lock-lost"] = "SessionLockLostError";
      ConditionErrorNameMapper2["com.microsoft:session-cannot-be-locked"] = "SessionCannotBeLockedError";
      ConditionErrorNameMapper2["amqp:internal-error"] = "InternalServerError";
      ConditionErrorNameMapper2["amqp:not-found"] = "ServiceCommunicationError";
      ConditionErrorNameMapper2["com.microsoft:message-not-found"] = "MessageNotFoundError";
      ConditionErrorNameMapper2["com.microsoft:relay-not-found"] = "RelayNotFoundError";
      ConditionErrorNameMapper2["amqp:not-implemented"] = "NotImplementedError";
      ConditionErrorNameMapper2["amqp:not-allowed"] = "InvalidOperationError";
      ConditionErrorNameMapper2["amqp:resource-limit-exceeded"] = "QuotaExceededError";
      ConditionErrorNameMapper2["amqp:unauthorized-access"] = "UnauthorizedError";
      ConditionErrorNameMapper2["com.microsoft:auth-failed"] = "UnauthorizedError";
      ConditionErrorNameMapper2["com.microsoft:timeout"] = "ServiceUnavailableError";
      ConditionErrorNameMapper2["com.microsoft:message-wait-timeout"] = "MessageWaitTimeout";
      ConditionErrorNameMapper2["com.microsoft:argument-out-of-range"] = "ArgumentOutOfRangeError";
      ConditionErrorNameMapper2["amqp:precondition-failed"] = "PreconditionFailedError";
      ConditionErrorNameMapper2["com.microsoft:precondition-failed"] = "PreconditionFailedError";
      ConditionErrorNameMapper2["amqp:decode-error"] = "DecodeError";
      ConditionErrorNameMapper2["amqp:invalid-field"] = "InvalidFieldError";
      ConditionErrorNameMapper2["amqp:resource-locked"] = "ResourceLockedError";
      ConditionErrorNameMapper2["amqp:resource-deleted"] = "ResourceDeletedError";
      ConditionErrorNameMapper2["amqp:illegal-state"] = "IllegalStateError";
      ConditionErrorNameMapper2["amqp:frame-size-too-small"] = "FrameSizeTooSmallError";
      ConditionErrorNameMapper2["amqp:link:detach-forced"] = "DetachForcedError";
      ConditionErrorNameMapper2["amqp:link:transfer-limit-exceeded"] = "TransferLimitExceededError";
      ConditionErrorNameMapper2["amqp:link:message-size-exceeded"] = "MessageTooLargeError";
      ConditionErrorNameMapper2["amqp:link:redirect"] = "LinkRedirectError";
      ConditionErrorNameMapper2["amqp:link:stolen"] = "ReceiverDisconnectedError";
      ConditionErrorNameMapper2["amqp:session:window-violation"] = "SessionWindowViolationError";
      ConditionErrorNameMapper2["amqp:session:errant-link"] = "ErrantLinkError";
      ConditionErrorNameMapper2["amqp:session:handle-in-use"] = "HandleInUseError";
      ConditionErrorNameMapper2["amqp:session:unattached-handle"] = "UnattachedHandleError";
      ConditionErrorNameMapper2["amqp:connection:forced"] = "ConnectionForcedError";
      ConditionErrorNameMapper2["amqp:connection:framing-error"] = "FramingError";
      ConditionErrorNameMapper2["amqp:connection:redirect"] = "ConnectionRedirectError";
      ConditionErrorNameMapper2["com.microsoft:server-busy"] = "ServerBusyError";
      ConditionErrorNameMapper2["com.microsoft:argument-error"] = "ArgumentError";
      ConditionErrorNameMapper2["com.microsoft:operation-cancelled"] = "OperationCancelledError";
      ConditionErrorNameMapper2["client.sender:not-enough-link-credit"] = "SenderBusyError";
      ConditionErrorNameMapper2["client.sender:link-not-ready"] = "SenderNotReadyError";
      ConditionErrorNameMapper2["system:error"] = "SystemError";
    })(ConditionErrorNameMapper || (exports.ConditionErrorNameMapper = ConditionErrorNameMapper = {}));
    var ErrorNameConditionMapper;
    (function(ErrorNameConditionMapper2) {
      ErrorNameConditionMapper2["AddressAlreadyInUseError"] = "com.microsoft:address-already-in-use";
      ErrorNameConditionMapper2["StoreLockLostError"] = "com.microsoft:store-lock-lost";
      ErrorNameConditionMapper2["NoMatchingSubscriptionError"] = "com.microsoft:no-matching-subscription";
      ErrorNameConditionMapper2["PartitionNotOwnedError"] = "com.microsoft:partition-not-owned";
      ErrorNameConditionMapper2["PublisherRevokedError"] = "com.microsoft:publisher-revoked";
      ErrorNameConditionMapper2["MessagingEntityAlreadyExistsError"] = "com.microsoft:entity-already-exists";
      ErrorNameConditionMapper2["MessagingEntityDisabledError"] = "com.microsoft:entity-disabled";
      ErrorNameConditionMapper2["MessageLockLostError"] = "com.microsoft:message-lock-lost";
      ErrorNameConditionMapper2["SessionLockLostError"] = "com.microsoft:session-lock-lost";
      ErrorNameConditionMapper2["SessionCannotBeLockedError"] = "com.microsoft:session-cannot-be-locked";
      ErrorNameConditionMapper2["InternalServerError"] = "amqp:internal-error";
      ErrorNameConditionMapper2["ServiceCommunicationError"] = "amqp:not-found";
      ErrorNameConditionMapper2["MessageNotFoundError"] = "com.microsoft:message-not-found";
      ErrorNameConditionMapper2["RelayNotFoundError"] = "com.microsoft:relay-not-found";
      ErrorNameConditionMapper2["NotImplementedError"] = "amqp:not-implemented";
      ErrorNameConditionMapper2["InvalidOperationError"] = "amqp:not-allowed";
      ErrorNameConditionMapper2["QuotaExceededError"] = "amqp:resource-limit-exceeded";
      ErrorNameConditionMapper2["UnauthorizedError"] = "amqp:unauthorized-access";
      ErrorNameConditionMapper2["ServiceUnavailableError"] = "com.microsoft:timeout";
      ErrorNameConditionMapper2["MessageWaitTimeout"] = "com.microsoft:message-wait-timeout";
      ErrorNameConditionMapper2["ArgumentOutOfRangeError"] = "com.microsoft:argument-out-of-range";
      ErrorNameConditionMapper2["PreconditionFailedError"] = "amqp:precondition-failed";
      ErrorNameConditionMapper2["DecodeError"] = "amqp:decode-error";
      ErrorNameConditionMapper2["InvalidFieldError"] = "amqp:invalid-field";
      ErrorNameConditionMapper2["ResourceLockedError"] = "amqp:resource-locked";
      ErrorNameConditionMapper2["ResourceDeletedError"] = "amqp:resource-deleted";
      ErrorNameConditionMapper2["IllegalStateError"] = "amqp:illegal-state";
      ErrorNameConditionMapper2["FrameSizeTooSmallError"] = "amqp:frame-size-too-small";
      ErrorNameConditionMapper2["DetachForcedError"] = "amqp:link:detach-forced";
      ErrorNameConditionMapper2["TransferLimitExceededError"] = "amqp:link:transfer-limit-exceeded";
      ErrorNameConditionMapper2["MessageTooLargeError"] = "amqp:link:message-size-exceeded";
      ErrorNameConditionMapper2["LinkRedirectError"] = "amqp:link:redirect";
      ErrorNameConditionMapper2["ReceiverDisconnectedError"] = "amqp:link:stolen";
      ErrorNameConditionMapper2["SessionWindowViolationError"] = "amqp:session:window-violation";
      ErrorNameConditionMapper2["ErrantLinkError"] = "amqp:session:errant-link";
      ErrorNameConditionMapper2["HandleInUseError"] = "amqp:session:handle-in-use";
      ErrorNameConditionMapper2["UnattachedHandleError"] = "amqp:session:unattached-handle";
      ErrorNameConditionMapper2["ConnectionForcedError"] = "amqp:connection:forced";
      ErrorNameConditionMapper2["FramingError"] = "amqp:connection:framing-error";
      ErrorNameConditionMapper2["ConnectionRedirectError"] = "amqp:connection:redirect";
      ErrorNameConditionMapper2["ServerBusyError"] = "com.microsoft:server-busy";
      ErrorNameConditionMapper2["ArgumentError"] = "com.microsoft:argument-error";
      ErrorNameConditionMapper2["OperationCancelledError"] = "com.microsoft:operation-cancelled";
      ErrorNameConditionMapper2["SenderBusyError"] = "client.sender:not-enough-link-credit";
      ErrorNameConditionMapper2["SenderNotReadyError"] = "client.sender:link-not-ready";
      ErrorNameConditionMapper2["SystemError"] = "system:error";
    })(ErrorNameConditionMapper || (exports.ErrorNameConditionMapper = ErrorNameConditionMapper = {}));
    var systemErrorFieldsToCopy = [
      "address",
      "code",
      "errno",
      "info",
      "port",
      "stack",
      "syscall"
    ];
    function isMessagingError(error) {
      return error.name === "MessagingError";
    }
    exports.isMessagingError = isMessagingError;
    var MessagingError = class extends Error {
      /**
       * @param message - The error message that provides more information about the error.
       * @param originalError - An error whose properties will be copied to the MessagingError if the
       * property matches one found on the Node.js `SystemError`.
       */
      constructor(message, originalError) {
        super(message);
        this.name = "MessagingError";
        this.retryable = true;
        if (!originalError) {
          return;
        }
        for (const propName of systemErrorFieldsToCopy) {
          if (originalError[propName] != void 0) {
            this[propName] = originalError[propName];
          }
        }
      }
    };
    exports.MessagingError = MessagingError;
    exports.retryableErrors = [
      "InternalServerError",
      "ServerBusyError",
      "ServiceUnavailableError",
      "OperationCancelledError",
      // The service may throw UnauthorizedError if credentials have been rotated.
      // Attempt to retry in case the user has also rotated their credentials.
      "UnauthorizedError",
      // OperationTimeoutError occurs when the service fails to respond within a given timeframe.
      // Since reasons for such failures can be transient, this is treated as a retryable error.
      "OperationTimeoutError",
      "SenderBusyError",
      "SenderNotReadyError",
      "MessagingError",
      "DetachForcedError",
      "ConnectionForcedError",
      "TransferLimitExceededError",
      // InsufficientCreditError occurs when the number of credits available on Rhea link is insufficient.
      // Since reasons for such shortage can be transient such as for pending delivery of messages, this is treated as a retryable error.
      "InsufficientCreditError"
    ];
    var SystemErrorConditionMapper;
    (function(SystemErrorConditionMapper2) {
      SystemErrorConditionMapper2["ENOTFOUND"] = "amqp:not-found";
      SystemErrorConditionMapper2["EBUSY"] = "com.microsoft:server-busy";
      SystemErrorConditionMapper2["ECONNREFUSED"] = "amqp:connection:forced";
      SystemErrorConditionMapper2["ETIMEDOUT"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["ECONNRESET"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["ENETDOWN"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["EHOSTDOWN"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["ENETRESET"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["ENETUNREACH"] = "com.microsoft:timeout";
      SystemErrorConditionMapper2["ENONET"] = "com.microsoft:timeout";
    })(SystemErrorConditionMapper || (exports.SystemErrorConditionMapper = SystemErrorConditionMapper = {}));
    function isSystemError(err) {
      if (!(0, core_util_1.isObjectWithProperties)(err, ["code", "syscall", "errno"])) {
        return false;
      }
      if (!(0, utils_js_1.isString)(err.code) || !(0, utils_js_1.isString)(err.syscall)) {
        return false;
      }
      if (!(0, utils_js_1.isString)(err.errno) && !(0, utils_js_1.isNumber)(err.errno)) {
        return false;
      }
      return true;
    }
    exports.isSystemError = isSystemError;
    function isBrowserWebsocketError(err) {
      let result = false;
      if (!core_util_1.isNodeLike && self && err.type === "error" && err.target instanceof self.WebSocket) {
        result = true;
      }
      return result;
    }
    function isErrorEvent(err) {
      return typeof err.error === "object" && typeof err.message === "string";
    }
    var rheaPromiseErrors = [
      // OperationTimeoutError occurs when the service fails to respond within a given timeframe.
      "OperationTimeoutError",
      // InsufficientCreditError occurs when the number of credits available on Rhea link is insufficient.
      "InsufficientCreditError",
      // Defines the error that occurs when the Sender fails to send a message.
      "SendOperationFailedError"
    ];
    function translate(err) {
      if (!(0, core_util_1.isDefined)(err)) {
        return new Error(`Unknown error encountered.`);
      } else if (typeof err !== "object") {
        return new Error(String(err));
      }
      const errObj = isErrorEvent(err) ? err.error : err;
      if (errObj instanceof TypeError || errObj instanceof RangeError) {
        return errObj;
      }
      if (isAmqpError(errObj)) {
        const condition = errObj.condition;
        const description = errObj.description;
        const error = new MessagingError(description);
        if (errObj.stack)
          error.stack = errObj.stack;
        error.info = errObj.info;
        if (condition) {
          error.code = ConditionErrorNameMapper[condition];
        }
        if (description && (description.includes("status-code: 404") || description.match(/The messaging entity .* could not be found.*/i) !== null)) {
          error.code = "MessagingEntityNotFoundError";
        }
        if (error.code && exports.retryableErrors.indexOf(error.code) === -1) {
          error.retryable = false;
        }
        return error;
      }
      if (errObj instanceof Error && errObj.name === "MessagingError") {
        return errObj;
      }
      if (isSystemError(errObj)) {
        const condition = errObj.code;
        const description = errObj.message;
        const error = new MessagingError(description, errObj);
        let errorType = "SystemError";
        if (condition) {
          const amqpErrorCondition = SystemErrorConditionMapper[condition];
          errorType = ConditionErrorNameMapper[amqpErrorCondition];
        }
        if (exports.retryableErrors.indexOf(errorType) === -1) {
          error.retryable = false;
        }
        return error;
      }
      if (isBrowserWebsocketError(errObj)) {
        const error = new MessagingError("Websocket connection failed.");
        error.code = ConditionErrorNameMapper[ErrorNameConditionMapper.ServiceCommunicationError];
        error.retryable = false;
        return error;
      }
      if ((0, core_util_1.isError)(errObj) && rheaPromiseErrors.indexOf(errObj.name) !== -1) {
        const error = new MessagingError(errObj.message, errObj);
        error.code = errObj.name;
        if (error.code && exports.retryableErrors.indexOf(error.code) === -1) {
          error.retryable = false;
        }
        return error;
      }
      return (0, core_util_1.isError)(errObj) ? errObj : new Error(String(errObj));
    }
    exports.translate = translate;
    function isAmqpError(error) {
      return (0, rhea_promise_1.isAmqpError)(error);
    }
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/requestResponseLink.js
var require_requestResponseLink = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/requestResponseLink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onMessageReceived = exports.getCodeDescriptionAndError = exports.RequestResponseLink = void 0;
    var abort_controller_1 = require_commonjs4();
    var errors_js_1 = require_errors2();
    var rhea_promise_1 = require_lib();
    var constants_js_1 = require_constants2();
    var log_js_1 = require_log4();
    var core_util_1 = require_commonjs3();
    var RequestResponseLink = class _RequestResponseLink {
      /**
       * @param session - The amqp session.
       * @param sender - The amqp sender link.
       * @param receiver - The amqp receiver link.
       */
      constructor(session, sender, receiver) {
        this.session = session;
        this.sender = sender;
        this.receiver = receiver;
        this._responsesMap = /* @__PURE__ */ new Map();
        this.session = session;
        this.sender = sender;
        this.receiver = receiver;
        this.receiver.on(rhea_promise_1.ReceiverEvents.message, (context) => {
          onMessageReceived(context, this.connection.id, this._responsesMap);
        });
        this.sender.on(rhea_promise_1.SenderEvents.senderError, (context) => {
          onSenderError(context, this.connection.id, this._responsesMap);
        });
      }
      /**
       * Provides the underlying amqp connection object.
       * @returns Connection.
       */
      get connection() {
        return this.session.connection;
      }
      /**
       * Indicates whether the session and the sender and receiver links are all open or closed.
       * @returns boolean - `true` - `open`, `false` - `closed`.
       */
      isOpen() {
        return this.session.isOpen() && this.sender.isOpen() && this.receiver.isOpen();
      }
      /**
       * Sends the given request message and returns the received response. If the operation is not
       * completed in the provided timeout in milliseconds `default: 60000`, then `OperationTimeoutError` is thrown.
       *
       * @param request - The AMQP (request) message.
       * @param options - Options that can be provided while sending a request.
       * @returns Promise<Message> The AMQP (response) message.
       */
      sendRequest(request, options = {}) {
        const timeoutInMs = options.timeoutInMs || constants_js_1.Constants.defaultOperationTimeoutInMs;
        const aborter = options.abortSignal;
        if (!request.message_id) {
          request.message_id = (0, rhea_promise_1.generate_uuid)();
        }
        return new Promise((resolve, reject) => {
          let timer = void 0;
          const rejectOnAbort = () => {
            this._responsesMap.delete(request.message_id);
            const address = this.receiver.address || "address";
            const requestName = options.requestName;
            const desc = `[${this.connection.id}] The request "${requestName}" to "${address}" has been cancelled by the user.`;
            log_js_1.logger.info(desc);
            const error = new abort_controller_1.AbortError(constants_js_1.StandardAbortMessage);
            reject(error);
          };
          const onAbort = () => {
            if ((0, core_util_1.isDefined)(timer)) {
              clearTimeout(timer);
            }
            aborter.removeEventListener("abort", onAbort);
            rejectOnAbort();
          };
          if (aborter) {
            if (aborter.aborted) {
              return rejectOnAbort();
            }
            aborter.addEventListener("abort", onAbort);
          }
          timer = setTimeout(() => {
            var _a;
            this._responsesMap.delete(request.message_id);
            if (aborter) {
              aborter.removeEventListener("abort", onAbort);
            }
            const address = ((_a = this.receiver) === null || _a === void 0 ? void 0 : _a.address) || "address";
            const desc = `The request with message_id "${request.message_id}" to "${address}" endpoint timed out. Please try again later.`;
            const e = {
              name: "OperationTimeoutError",
              message: desc
            };
            return reject((0, errors_js_1.translate)(e));
          }, timeoutInMs);
          this._responsesMap.set(request.message_id, {
            resolve,
            reject,
            cleanupBeforeResolveOrReject: () => {
              if (aborter)
                aborter.removeEventListener("abort", onAbort);
              if ((0, core_util_1.isDefined)(timer)) {
                clearTimeout(timer);
              }
            }
          });
          log_js_1.logger.verbose("[%s] %s request sent: %O", this.connection.id, request.to || "$management", request);
          this.sender.send(request);
        });
      }
      /**
       * Closes the sender, receiver link and the underlying session.
       * @returns Promise<void>
       */
      async close() {
        await this.sender.close({ closeSession: false });
        await this.receiver.close({ closeSession: false });
        await this.session.close();
      }
      /**
       * Removes the sender, receiver link and it's underlying session.
       * @returns void
       */
      remove() {
        this.sender.remove();
        this.receiver.remove();
        this.session.remove();
      }
      /**
       * Creates an amqp request/response link.
       *
       * @param connection - The amqp connection.
       * @param senderOptions - Options that must be provided to create the sender link.
       * @param receiverOptions - Options that must be provided to create the receiver link.
       * @param createOptions - Optional parameters that can be used to affect this method's behavior.
       *    For example, `abortSignal` can be passed to allow cancelling an in-progress `create` invocation.
       * @returns Promise<RequestResponseLink>
       */
      static async create(connection, senderOptions, receiverOptions, createOptions = {}) {
        const { abortSignal } = createOptions;
        const session = await connection.createSession({ abortSignal });
        const sender = await session.createSender(Object.assign(Object.assign({}, senderOptions), { abortSignal }));
        const receiver = await session.createReceiver(Object.assign(Object.assign({}, receiverOptions), { abortSignal }));
        log_js_1.logger.verbose("[%s] Successfully created the sender and receiver links on the same session.", connection.id);
        return new _RequestResponseLink(session, sender, receiver);
      }
    };
    exports.RequestResponseLink = RequestResponseLink;
    var getCodeDescriptionAndError = (props = {}) => {
      return {
        statusCode: props[constants_js_1.Constants.statusCode] || props.statusCode,
        statusDescription: props[constants_js_1.Constants.statusDescription] || props.statusDescription,
        errorCondition: props[constants_js_1.Constants.errorCondition] || props.errorCondition
      };
    };
    exports.getCodeDescriptionAndError = getCodeDescriptionAndError;
    function onMessageReceived(context, connectionId, responsesMap) {
      const message = context.message;
      if (!message) {
        log_js_1.logger.verbose(`[${connectionId}] "message" property on the EventContext is "undefined" which is unexpected, returning from the "onMessageReceived" handler without resolving or rejecting the promise upon encountering the message event.`);
        return;
      }
      const responseCorrelationId = message.correlation_id;
      if (!responsesMap.has(responseCorrelationId)) {
        log_js_1.logger.verbose(`[${connectionId}] correlationId "${responseCorrelationId}" property on the response does not match with any of the "request-id"s in the map, returning from the "onMessageReceived" handler without resolving or rejecting the promise upon encountering the message event.`);
        return;
      }
      const promise = responsesMap.get(responseCorrelationId);
      promise.cleanupBeforeResolveOrReject();
      const deleteResult = responsesMap.delete(responseCorrelationId);
      log_js_1.logger.verbose(`[${connectionId}] Successfully deleted the response with id ${responseCorrelationId} from the map. Delete result - ${deleteResult}`);
      const info = (0, exports.getCodeDescriptionAndError)(message.application_properties);
      let error;
      if (!info.statusCode) {
        error = new Error(`[${connectionId}] No statusCode in the "application_properties" in the returned response with correlation-id: ${responseCorrelationId}`);
      }
      if (info.statusCode > 199 && info.statusCode < 300) {
        log_js_1.logger.verbose(`[${connectionId}] Resolving the response with correlation-id: ${responseCorrelationId}`);
        return promise.resolve(message);
      }
      if (!error) {
        const condition = info.errorCondition || errors_js_1.ConditionStatusMapper[info.statusCode] || "amqp:internal-error";
        error = (0, errors_js_1.translate)({
          condition,
          description: info.statusDescription
        });
        log_js_1.logger.warning(`${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}`);
      }
      (0, log_js_1.logErrorStackTrace)(error);
      return promise.reject(error);
    }
    exports.onMessageReceived = onMessageReceived;
    function onSenderError(context, connectionId, responsesMap) {
      if (context.sender) {
        for (const [key, promise] of responsesMap.entries()) {
          log_js_1.logger.verbose(`[${connectionId}] Sender closed due to error when sending request with message_id "${key}"`);
          promise.cleanupBeforeResolveOrReject();
          promise.reject(context.sender.error);
        }
        responsesMap.clear();
      }
    }
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/checkNetworkConnection.js
var require_checkNetworkConnection = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/checkNetworkConnection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkNetworkConnection = void 0;
    var node_dns_1 = require("node:dns");
    var log_js_1 = require_log4();
    function checkNetworkConnection(host) {
      return new Promise((resolve) => {
        log_js_1.logger.verbose("Calling dns.resolve to determine network connection status.");
        (0, node_dns_1.resolve)(host, function(err) {
          if (err) {
            log_js_1.logger.verbose("Error thrown from dns.resolve in network connection check: '%s', %O", err.code || err.name, err);
            if (err.code === node_dns_1.CONNREFUSED || err.code === node_dns_1.TIMEOUT) {
              return resolve(false);
            }
          } else {
            log_js_1.logger.verbose("Successfully resolved host via dns.resolve in network connection check.");
          }
          return resolve(true);
        });
      });
    }
    exports.checkNetworkConnection = checkNetworkConnection;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/retry.js
var require_retry = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = exports.RetryOperationType = exports.RetryMode = void 0;
    var errors_js_1 = require_errors2();
    var constants_js_1 = require_constants2();
    var checkNetworkConnection_js_1 = require_checkNetworkConnection();
    var core_util_1 = require_commonjs3();
    var log_js_1 = require_log4();
    function isDelivery(obj) {
      let result = false;
      if (obj && typeof obj.id === "number" && typeof obj.settled === "boolean" && typeof obj.remote_settled === "boolean" && typeof obj.format === "number") {
        result = true;
      }
      return result;
    }
    var RetryMode;
    (function(RetryMode2) {
      RetryMode2[RetryMode2["Exponential"] = 0] = "Exponential";
      RetryMode2[RetryMode2["Fixed"] = 1] = "Fixed";
    })(RetryMode || (exports.RetryMode = RetryMode = {}));
    var RetryOperationType;
    (function(RetryOperationType2) {
      RetryOperationType2["cbsAuth"] = "cbsAuth";
      RetryOperationType2["connection"] = "connection";
      RetryOperationType2["management"] = "management";
      RetryOperationType2["receiverLink"] = "receiverLink";
      RetryOperationType2["senderLink"] = "senderLink";
      RetryOperationType2["sendMessage"] = "sendMessage";
      RetryOperationType2["receiveMessage"] = "receiveMessage";
      RetryOperationType2["session"] = "session";
      RetryOperationType2["messageSettlement"] = "settlement";
    })(RetryOperationType || (exports.RetryOperationType = RetryOperationType = {}));
    function validateRetryConfig(config) {
      if (!config.operation) {
        throw new TypeError("Missing 'operation' in retry configuration");
      }
      if (!config.connectionId) {
        throw new TypeError("Missing 'connectionId' in retry configuration");
      }
      if (!config.operationType) {
        throw new TypeError("Missing 'operationType' in retry configuration");
      }
    }
    function calculateDelay(attemptCount, retryDelayInMs, maxRetryDelayInMs, mode) {
      if (mode === RetryMode.Exponential) {
        const boundedRandDelta = retryDelayInMs * 0.8 + Math.floor(Math.random() * (retryDelayInMs * 1.2 - retryDelayInMs * 0.8));
        const incrementDelta = boundedRandDelta * (Math.pow(2, attemptCount) - 1);
        return Math.min(incrementDelta, maxRetryDelayInMs);
      }
      return retryDelayInMs;
    }
    async function retry(config) {
      validateRetryConfig(config);
      const updatedConfig = Object.assign({}, config);
      if (!updatedConfig.retryOptions) {
        updatedConfig.retryOptions = {};
      }
      if (updatedConfig.retryOptions.maxRetries == void 0 || updatedConfig.retryOptions.maxRetries < 0) {
        updatedConfig.retryOptions.maxRetries = constants_js_1.Constants.defaultMaxRetries;
      }
      if (updatedConfig.retryOptions.retryDelayInMs == void 0 || updatedConfig.retryOptions.retryDelayInMs < 0) {
        updatedConfig.retryOptions.retryDelayInMs = constants_js_1.Constants.defaultDelayBetweenOperationRetriesInMs;
      }
      if (updatedConfig.retryOptions.maxRetryDelayInMs == void 0 || updatedConfig.retryOptions.maxRetryDelayInMs < 0) {
        updatedConfig.retryOptions.maxRetryDelayInMs = constants_js_1.Constants.defaultMaxDelayForExponentialRetryInMs;
      }
      if (updatedConfig.retryOptions.mode == void 0) {
        updatedConfig.retryOptions.mode = RetryMode.Fixed;
      }
      const errors = [];
      let result;
      let success = false;
      const totalNumberOfAttempts = updatedConfig.retryOptions.maxRetries + 1;
      for (let i = 1; i <= totalNumberOfAttempts; i++) {
        log_js_1.logger.verbose("[%s] Attempt number for '%s': %d.", updatedConfig.connectionId, updatedConfig.operationType, i);
        try {
          result = await updatedConfig.operation();
          success = true;
          log_js_1.logger.verbose("[%s] Success for '%s', after attempt number: %d.", updatedConfig.connectionId, updatedConfig.operationType, i);
          if (result && !isDelivery(result)) {
            log_js_1.logger.verbose("[%s] Success result for '%s': %O", updatedConfig.connectionId, updatedConfig.operationType, result);
          }
          break;
        } catch (_err) {
          const err = (0, errors_js_1.translate)(_err);
          if (!err.retryable && err.name === "ServiceCommunicationError" && updatedConfig.connectionHost) {
            const isConnected = await (0, checkNetworkConnection_js_1.checkNetworkConnection)(updatedConfig.connectionHost);
            if (!isConnected) {
              err.name = "ConnectionLostError";
              err.retryable = true;
            }
          }
          log_js_1.logger.verbose("[%s] Error occurred for '%s' in attempt number %d: %O", updatedConfig.connectionId, updatedConfig.operationType, i, err);
          errors.push(err);
          if (errors[(errors === null || errors === void 0 ? void 0 : errors.length) - 1].retryable && totalNumberOfAttempts > i) {
            const targetDelayInMs = calculateDelay(i, updatedConfig.retryOptions.retryDelayInMs, updatedConfig.retryOptions.maxRetryDelayInMs, updatedConfig.retryOptions.mode);
            log_js_1.logger.verbose("[%s] Sleeping for %d milliseconds for '%s'.", updatedConfig.connectionId, targetDelayInMs, updatedConfig.operationType);
            await (0, core_util_1.delay)(targetDelayInMs, {
              abortSignal: updatedConfig.abortSignal,
              abortErrorMsg: `The retry operation has been cancelled by the user.`
            });
            continue;
          } else {
            break;
          }
        }
      }
      if (success) {
        return result;
      } else {
        throw compileErrors(errors);
      }
    }
    exports.retry = retry;
    function compileErrors(errors) {
      if (!errors.length) {
        throw new RangeError("Error array is empty");
      }
      let i = 0;
      const str = errors.map((error) => `Error ${i++}: ${error}`).join("\n\n");
      const lastError = errors[errors.length - 1];
      lastError.message = str;
      return lastError;
    }
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/auth/token.js
var require_token = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/auth/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenType = void 0;
    var TokenType;
    (function(TokenType2) {
      TokenType2["CbsTokenTypeJwt"] = "jwt";
      TokenType2["CbsTokenTypeSas"] = "servicebus.windows.net:sastoken";
    })(TokenType || (exports.TokenType = TokenType = {}));
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/connectionConfig/connectionConfig.js
var require_connectionConfig = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/connectionConfig/connectionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSharedAccessSignature = exports.ConnectionConfig = void 0;
    var core_util_1 = require_commonjs3();
    var utils_js_1 = require_utils2();
    function getHost(endpoint) {
      const matches = /.*:\/\/([^/]*)/.exec(endpoint);
      const match = matches === null || matches === void 0 ? void 0 : matches[1];
      return !match ? endpoint : match;
    }
    exports.ConnectionConfig = {
      /**
       * Creates the connection config.
       * @param connectionString - The connection string for a given service like
       * EventHub/ServiceBus.
       * @param path - The name/path of the entity (hub name) to which the
       * connection needs to happen. This will override the EntityPath in the connectionString
       * if present.
       * @returns ConnectionConfig
       */
      create(connectionString, path) {
        connectionString = String(connectionString);
        const parsedCS = (0, utils_js_1.parseConnectionString)(connectionString);
        if (!parsedCS.Endpoint) {
          throw new TypeError("Missing Endpoint in Connection String.");
        }
        if (!parsedCS.Endpoint.endsWith("/"))
          parsedCS.Endpoint += "/";
        const result = {
          connectionString,
          endpoint: parsedCS.Endpoint,
          host: getHost(parsedCS.Endpoint),
          sharedAccessKeyName: parsedCS.SharedAccessKeyName,
          sharedAccessKey: parsedCS.SharedAccessKey,
          useDevelopmentEmulator: parsedCS.UseDevelopmentEmulator === "true"
        };
        if (path || parsedCS.EntityPath) {
          result.entityPath = path || parsedCS.EntityPath;
        }
        return result;
      },
      /**
       * Validates the properties of connection config.
       * @param config - The connection config to be validated.
       * @returns void
       */
      validate(config, options) {
        if (!options)
          options = {};
        if (!config) {
          throw new TypeError("Missing configuration");
        }
        if (!config.endpoint) {
          throw new TypeError("Missing 'endpoint' in configuration");
        }
        config.endpoint = String(config.endpoint);
        if (!config.host) {
          throw new TypeError("Missing 'host' in configuration");
        }
        config.host = String(config.host);
        if (options.isEntityPathRequired && !config.entityPath) {
          throw new TypeError("Missing 'entityPath' in configuration");
        }
        if ((0, core_util_1.isDefined)(config.entityPath)) {
          config.entityPath = String(config.entityPath);
        }
        if (!isSharedAccessSignature(config.connectionString)) {
          if (!config.sharedAccessKeyName) {
            throw new TypeError("Missing 'sharedAccessKeyName' in configuration");
          }
          config.sharedAccessKeyName = String(config.sharedAccessKeyName);
          if (!config.sharedAccessKey) {
            throw new TypeError("Missing 'sharedAccessKey' in configuration");
          }
          config.sharedAccessKey = String(config.sharedAccessKey);
        }
      }
    };
    function isSharedAccessSignature(connectionString) {
      return connectionString.match(/;{0,1}SharedAccessSignature=SharedAccessSignature /) != null;
    }
    exports.isSharedAccessSignature = isSharedAccessSignature;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/cbs.js
var require_cbs = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/cbs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CbsClient = void 0;
    var abort_controller_1 = require_commonjs4();
    var rhea_promise_1 = require_lib();
    var log_js_1 = require_log4();
    var constants_js_1 = require_constants2();
    var requestResponseLink_js_1 = require_requestResponseLink();
    var constants_js_2 = require_constants2();
    var utils_js_1 = require_utils2();
    var core_util_1 = require_commonjs3();
    var errors_js_1 = require_errors2();
    var CbsClient = class {
      /**
       * @param connection - The AMQP connection.
       * @param connectionLock - A unique string (usually a guid) per connection.
       */
      constructor(connection, connectionLock) {
        this.endpoint = constants_js_1.Constants.cbsEndpoint;
        this.replyTo = `${constants_js_1.Constants.cbsReplyTo}-${(0, rhea_promise_1.generate_uuid)()}`;
        this.cbsLock = `${constants_js_1.Constants.negotiateCbsKey}-${(0, rhea_promise_1.generate_uuid)()}`;
        this.connection = connection;
        this.connectionLock = connectionLock;
      }
      /**
       * Creates a singleton instance of the CBS session if it hasn't been initialized previously on
       * the given connection.
       * @param options - Optional parameters that can be used to affect this method's behavior.
       *    For example, `abortSignal` can be passed to allow cancelling an in-progress `init` invocation.
       * @returns Promise<void>.
       */
      async init(options = {}) {
        const { abortSignal, timeoutInMs } = options;
        try {
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            throw new abort_controller_1.AbortError(constants_js_2.StandardAbortMessage);
          }
          if (!this.connection.isOpen()) {
            log_js_1.logger.verbose("The CBS client is trying to establish an AMQP connection.");
            await utils_js_1.defaultCancellableLock.acquire(this.connectionLock, () => {
              return this.connection.open({ abortSignal });
            }, { abortSignal, timeoutInMs });
          }
          if (!this.isOpen()) {
            const rxOpt = {
              source: {
                address: this.endpoint
              },
              name: this.replyTo,
              onSessionError: (context) => {
                const id = context.connection.options.id;
                const ehError = (0, errors_js_1.translate)(context.session.error);
                log_js_1.logger.verbose("[%s] An error occurred on the session for request/response links for $cbs: %O", id, ehError);
              }
            };
            const srOpt = { target: { address: this.endpoint } };
            log_js_1.logger.verbose("[%s] Creating sender/receiver links on a session for $cbs endpoint.", this.connection.id);
            this._cbsSenderReceiverLink = await requestResponseLink_js_1.RequestResponseLink.create(this.connection, srOpt, rxOpt, { abortSignal });
            this._cbsSenderReceiverLink.sender.on(rhea_promise_1.SenderEvents.senderError, (context) => {
              const id = context.connection.options.id;
              const ehError = (0, errors_js_1.translate)(context.sender.error);
              log_js_1.logger.verbose("[%s] An error occurred on the cbs sender link.. %O", id, ehError);
            });
            this._cbsSenderReceiverLink.receiver.on(rhea_promise_1.ReceiverEvents.receiverError, (context) => {
              const id = context.connection.options.id;
              const ehError = (0, errors_js_1.translate)(context.receiver.error);
              log_js_1.logger.verbose("[%s] An error occurred on the cbs receiver link.. %O", id, ehError);
            });
            log_js_1.logger.verbose("[%s] Successfully created the cbs sender '%s' and receiver '%s' links over cbs session.", this.connection.id, this._cbsSenderReceiverLink.sender.name, this._cbsSenderReceiverLink.receiver.name);
          } else {
            log_js_1.logger.verbose("[%s] CBS session is already present. Reusing the cbs sender '%s' and receiver '%s' links over cbs session.", this.connection.id, this._cbsSenderReceiverLink.sender.name, this._cbsSenderReceiverLink.receiver.name);
          }
        } catch (err) {
          const translatedError = (0, errors_js_1.translate)(err);
          log_js_1.logger.warning("[%s] An error occurred while establishing the cbs links: %s", this.connection.id, `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          (0, log_js_1.logErrorStackTrace)(translatedError);
          throw translatedError;
        }
      }
      /**
       * Negotiates the CBS claim with the EventHub/ServiceBus Service.
       * @param audience - The entity token audience for which the token is requested in one
       * of the following forms:
       *
       * - **ServiceBus**
       *    - **Sender**
       *        - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
       *        - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`
       *
       *    - **Receiver**
       *         - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
       *         - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`
       *
       *    - **ManagementClient**
       *         - `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.
       *         - `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
       *
       * - **EventHubs**
       *     - **Sender**
       *          - `"sb://<yournamespace>.servicebus.windows.net/<hubName>"`
       *          - `"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>"`.
       *
       *     - **Receiver**
       *         - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`.
       *
       *     - **ManagementClient**
       *         - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management"`.
       * @param token - The token that needs to be sent in the put-token request.
       * @param tokenType - The type of token being used. For example, 'jwt' or 'servicebus.windows.net:sastoken'.
       * @param options - Optional parameters that can be used to affect this method's behavior.
       *    For example, `abortSignal` can be passed to allow cancelling an in-progress `negotiateClaim` invocation.
       * @returns A Promise that resolves when $cbs authentication is successful
       * and rejects when an error occurs during $cbs authentication.
       */
      async negotiateClaim(audience, token, tokenType, options = {}) {
        const { abortSignal, timeoutInMs } = options;
        try {
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            throw new abort_controller_1.AbortError(constants_js_2.StandardAbortMessage);
          }
          if (!this._cbsSenderReceiverLink) {
            throw new Error("Attempted to negotiate a claim but the CBS link does not exist.");
          }
          const request = {
            body: token,
            message_id: (0, rhea_promise_1.generate_uuid)(),
            reply_to: this.replyTo,
            to: this.endpoint,
            application_properties: {
              operation: constants_js_1.Constants.operationPutToken,
              name: audience,
              type: tokenType
            }
          };
          const responseMessage = await this._cbsSenderReceiverLink.sendRequest(request, {
            abortSignal,
            timeoutInMs,
            requestName: "negotiateClaim"
          });
          log_js_1.logger.verbose("[%s] The CBS response is: %O", this.connection.id, responseMessage);
          return this._fromRheaMessageResponse(responseMessage);
        } catch (err) {
          log_js_1.logger.warning("[%s] An error occurred while negotiating the cbs claim: %s", this.connection.id, (0, core_util_1.isError)(err) ? `${err.name}: ${err.message}` : String(err));
          (0, log_js_1.logErrorStackTrace)(err);
          throw err;
        }
      }
      /**
       * Closes the AMQP cbs session to the EventHub/ServiceBus for this client,
       * returning a promise that will be resolved when disconnection is completed.
       * @returns
       */
      async close() {
        try {
          if (this.isOpen()) {
            const cbsLink = this._cbsSenderReceiverLink;
            this._cbsSenderReceiverLink = void 0;
            await cbsLink.close();
            log_js_1.logger.verbose("[%s] Successfully closed the cbs session.", this.connection.id);
          }
        } catch (err) {
          const msg = `An error occurred while closing the cbs link: ${(0, core_util_1.isError)(err) && err.stack ? err.stack : JSON.stringify(err)}.`;
          log_js_1.logger.verbose("[%s] %s", this.connection.id, msg);
          throw new Error(msg);
        }
      }
      /**
       * Removes the AMQP cbs session to the EventHub/ServiceBus for this client,
       * @returns void
       */
      remove() {
        try {
          if (this._cbsSenderReceiverLink) {
            const cbsLink = this._cbsSenderReceiverLink;
            this._cbsSenderReceiverLink = void 0;
            cbsLink.remove();
            log_js_1.logger.verbose("[%s] Successfully removed the cbs session.", this.connection.id);
          }
        } catch (err) {
          const msg = `An error occurred while removing the cbs link: ${(0, core_util_1.isError)(err) && err.stack ? err.stack : JSON.stringify(err)}.`;
          log_js_1.logger.verbose("[%s] %s", this.connection.id, msg);
          throw new Error(msg);
        }
      }
      /**
       * Indicates whether the cbs sender receiver link is open or closed.
       * @returns `true` open, `false` closed.
       */
      isOpen() {
        var _a;
        return Boolean((_a = this._cbsSenderReceiverLink) === null || _a === void 0 ? void 0 : _a.isOpen());
      }
      _fromRheaMessageResponse(msg) {
        const cbsResponse = {
          correlationId: msg.correlation_id,
          statusCode: msg.application_properties ? msg.application_properties["status-code"] : "",
          statusDescription: msg.application_properties ? msg.application_properties["status-description"] : ""
        };
        log_js_1.logger.verbose("[%s] The deserialized CBS response is: %o", this.connection.id, cbsResponse);
        return cbsResponse;
      }
    };
    exports.CbsClient = CbsClient;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/messageHeader.js
var require_messageHeader = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/messageHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AmqpMessageHeader = void 0;
    var log_js_1 = require_log4();
    exports.AmqpMessageHeader = {
      /**
       * Converts MessageHeader to RheaMessageHeader.
       *
       * @param props - Message header.
       * @returns RheaMessageHeader
       */
      toRheaMessageHeader(props) {
        const amqpHeader = {};
        if (props.deliveryCount != void 0) {
          amqpHeader.delivery_count = props.deliveryCount;
        }
        if (props.durable != void 0)
          amqpHeader.durable = props.durable;
        if (props.firstAcquirer != void 0) {
          amqpHeader.first_acquirer = props.firstAcquirer;
        }
        if (props.priority != void 0) {
          amqpHeader.priority = props.priority;
        }
        if (props.timeToLive != void 0) {
          amqpHeader.ttl = props.timeToLive;
        }
        log_js_1.logger.verbose("To RheaMessageHeader: %O", amqpHeader);
        return amqpHeader;
      },
      /**
       * Converts RheaMessageHeader to MessageHeader.
       *
       * @param props - Amqp Message Header
       * @returns MessageHeader.
       */
      fromRheaMessageHeader(props) {
        const msgHeader = {};
        if (props.delivery_count != void 0) {
          msgHeader.deliveryCount = props.delivery_count;
        }
        if (props.durable != void 0) {
          msgHeader.durable = props.durable;
        }
        if (props.first_acquirer != void 0) {
          msgHeader.firstAcquirer = props.first_acquirer;
        }
        if (props.priority != void 0) {
          msgHeader.priority = props.priority;
        }
        if (props.ttl != void 0) {
          msgHeader.timeToLive = props.ttl;
        }
        log_js_1.logger.verbose("From RheaMessageHeader: %O", msgHeader);
        return msgHeader;
      }
    };
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/messageProperties.js
var require_messageProperties = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/messageProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AmqpMessageProperties = void 0;
    var log_js_1 = require_log4();
    exports.AmqpMessageProperties = {
      /**
       * Converts MessageProperties to RheaMessageProperties.
       * @param props - Message properties.
       * @returns RheaMessageProperties.
       */
      toRheaMessageProperties(props) {
        const amqpProperties = {};
        if (props.absoluteExpiryTime != void 0) {
          amqpProperties.absolute_expiry_time = new Date(props.absoluteExpiryTime);
        }
        if (props.contentEncoding != void 0) {
          amqpProperties.content_encoding = props.contentEncoding;
        }
        if (props.contentType != void 0) {
          amqpProperties.content_type = props.contentType;
        }
        if (props.correlationId != void 0) {
          amqpProperties.correlation_id = props.correlationId;
        }
        if (props.creationTime != void 0) {
          amqpProperties.creation_time = new Date(props.creationTime);
        }
        if (props.groupId != void 0) {
          amqpProperties.group_id = props.groupId;
        }
        if (props.groupSequence != void 0) {
          amqpProperties.group_sequence = props.groupSequence;
        }
        if (props.messageId != void 0) {
          amqpProperties.message_id = props.messageId;
        }
        if (props.replyTo != void 0) {
          amqpProperties.reply_to = props.replyTo;
        }
        if (props.replyToGroupId != void 0) {
          amqpProperties.reply_to_group_id = props.replyToGroupId;
        }
        if (props.subject != void 0) {
          amqpProperties.subject = props.subject;
        }
        if (props.to != void 0) {
          amqpProperties.to = props.to;
        }
        log_js_1.logger.verbose("To RheaMessageProperties: %O", amqpProperties);
        return amqpProperties;
      },
      /**
       * Converts RheaMessageProperties to MessageProperties.
       * @param props - Amqp message properties.
       * @returns MessageProperties.
       */
      fromRheaMessageProperties(props) {
        const msgProperties = {};
        if (props.absolute_expiry_time != void 0) {
          msgProperties.absoluteExpiryTime = props.absolute_expiry_time.getTime();
        }
        if (props.content_encoding != void 0) {
          msgProperties.contentEncoding = props.content_encoding;
        }
        if (props.content_type != void 0) {
          msgProperties.contentType = props.content_type;
        }
        if (props.correlation_id != void 0) {
          msgProperties.correlationId = props.correlation_id;
        }
        if (props.creation_time != void 0) {
          msgProperties.creationTime = props.creation_time.getTime();
        }
        if (props.group_id != void 0) {
          msgProperties.groupId = props.group_id;
        }
        if (props.group_sequence != void 0) {
          msgProperties.groupSequence = props.group_sequence;
        }
        if (props.message_id != void 0) {
          msgProperties.messageId = props.message_id;
        }
        if (props.reply_to != void 0) {
          msgProperties.replyTo = props.reply_to;
        }
        if (props.reply_to_group_id != void 0) {
          msgProperties.replyToGroupId = props.reply_to_group_id;
        }
        if (props.subject != void 0) {
          msgProperties.subject = props.subject;
        }
        if (props.to != void 0) {
          msgProperties.to = props.to;
        }
        log_js_1.logger.verbose("From RheaMessageProperties: %O", msgProperties);
        return msgProperties;
      }
    };
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/runtimeInfo.js
var require_runtimeInfo = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/runtimeInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFrameworkInfo = exports.getPlatformInfo = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var os = tslib_1.__importStar(require("node:os"));
    function getPlatformInfo() {
      return `(${os.arch()}-${os.type()}-${os.release()})`;
    }
    exports.getPlatformInfo = getPlatformInfo;
    function getFrameworkInfo() {
      return `Node/${process.version}`;
    }
    exports.getFrameworkInfo = getFrameworkInfo;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/ConnectionContextBase.js
var require_ConnectionContextBase = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/ConnectionContextBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionContextBase = void 0;
    var rhea_promise_1 = require_lib();
    var runtimeInfo_js_1 = require_runtimeInfo();
    var cbs_js_1 = require_cbs();
    var connectionConfig_js_1 = require_connectionConfig();
    var constants_js_1 = require_constants2();
    var core_util_1 = require_commonjs3();
    var maxListenerLimit = 1e3;
    var CoreAmqpConnection = class extends rhea_promise_1.Connection {
      /**
       * Creates an amqp sender link. Max listener limit on the sender is set to 1000 because the
       * default value of 10 in NodeJS is too low.
       * @param options - Optional parameters to create a sender link.
       * @returns Promise<Sender>.
       */
      async createSender(options) {
        const sender = await super.createSender(options);
        sender.setMaxListeners(maxListenerLimit);
        return sender;
      }
      /**
       * Creates an awaitable amqp sender. Max listener limit on the sender is set to 1000 because the
       * default value of 10 in NodeJS is too low.
       * @param options - Optional parameters to create an awaitable sender link.
       * - If `onError` and `onSessionError` handlers are not provided then the `AwaitableSender` will
       * clear the timer and reject the Promise for all the entries of inflight send operation in its
       * `deliveryDispositionMap`.
       * - If the user is handling the reconnection of sender link or the underlying connection in it's
       * app, then the `onError` and `onSessionError` handlers must be provided by the user and (s)he
       * shall be responsible of clearing the `deliveryDispositionMap` of inflight `send()` operation.
       *
       * @returns Promise<AwaitableSender>.
       */
      async createAwaitableSender(options) {
        const sender = await super.createAwaitableSender(options);
        sender.setMaxListeners(maxListenerLimit);
        return sender;
      }
      /**
       * Creates an amqp receiver link. Max listener limit on the sender is set to 1000 because the
       * default value of 10 in NodeJS is too low.
       * @param options - Optional parameters to create a receiver link.
       * @returns Promise<Receiver>.
       */
      async createReceiver(options) {
        const receiver = await super.createReceiver(options);
        receiver.setMaxListeners(maxListenerLimit);
        return receiver;
      }
    };
    exports.ConnectionContextBase = {
      /**
       * Creates the base connection context.
       * @param parameters - Parameters to be provided to create
       * the base connection context.
       */
      create(parameters) {
        var _a, _b, _c;
        connectionConfig_js_1.ConnectionConfig.validate(parameters.config, {
          isEntityPathRequired: parameters.isEntityPathRequired || false
        });
        const userAgent = parameters.connectionProperties.userAgent;
        if (userAgent.length > constants_js_1.Constants.maxUserAgentLength) {
          throw new Error(`The user-agent string cannot be more than ${constants_js_1.Constants.maxUserAgentLength} characters in length.The given user-agent string is: ${userAgent} with length: ${userAgent.length}`);
        }
        const connectionOptions = {
          transport: parameters.config.useDevelopmentEmulator ? constants_js_1.Constants.TCP : constants_js_1.Constants.TLS,
          host: parameters.config.host,
          hostname: (_a = parameters.config.amqpHostname) !== null && _a !== void 0 ? _a : parameters.config.host,
          username: parameters.config.sharedAccessKeyName,
          port: (_b = parameters.config.port) !== null && _b !== void 0 ? _b : parameters.config.useDevelopmentEmulator ? 5672 : 5671,
          reconnect: false,
          properties: {
            product: parameters.connectionProperties.product,
            version: parameters.connectionProperties.version,
            "user-agent": userAgent,
            platform: (0, runtimeInfo_js_1.getPlatformInfo)(),
            framework: (0, runtimeInfo_js_1.getFrameworkInfo)()
          },
          idle_time_out: constants_js_1.Constants.defaultConnectionIdleTimeoutInMs,
          operationTimeoutInSeconds: parameters.operationTimeoutInMs ? parameters.operationTimeoutInMs / 1e3 : void 0
        };
        if (parameters.config.webSocket || !core_util_1.isNodeLike && typeof self !== "undefined" && self.WebSocket) {
          const socket = parameters.config.webSocket || self.WebSocket;
          const host = parameters.config.host;
          const endpoint = parameters.config.webSocketEndpointPath || "";
          const socketOptions = parameters.config.webSocketConstructorOptions || {};
          const port = (_c = parameters.config.port) !== null && _c !== void 0 ? _c : 443;
          connectionOptions.webSocketOptions = {
            webSocket: socket,
            url: `wss://${host}:${port}/${endpoint}`,
            protocol: ["AMQPWSB10"],
            options: socketOptions
          };
        }
        const connection = new CoreAmqpConnection(connectionOptions);
        const connectionLock = `${constants_js_1.Constants.establishConnection}-${(0, rhea_promise_1.generate_uuid)()}`;
        const connectionContextBase = {
          wasConnectionCloseCalled: false,
          connectionLock,
          negotiateClaimLock: `${constants_js_1.Constants.negotiateClaim}-${(0, rhea_promise_1.generate_uuid)()}`,
          connection,
          connectionId: connection.id,
          cbsSession: new cbs_js_1.CbsClient(connection, connectionLock),
          config: parameters.config,
          refreshConnection() {
            const newConnection = new CoreAmqpConnection(connectionOptions);
            const newConnectionLock = `${constants_js_1.Constants.establishConnection}-${(0, rhea_promise_1.generate_uuid)()}`;
            this.wasConnectionCloseCalled = false;
            this.connectionLock = newConnectionLock;
            this.negotiateClaimLock = `${constants_js_1.Constants.negotiateClaim} - ${(0, rhea_promise_1.generate_uuid)()}`;
            this.connection = newConnection;
            this.connectionId = newConnection.id;
            this.cbsSession = new cbs_js_1.CbsClient(newConnection, newConnectionLock);
          }
        };
        return connectionContextBase;
      }
    };
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/amqpAnnotatedMessage.js
var require_amqpAnnotatedMessage = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/amqpAnnotatedMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AmqpAnnotatedMessage = void 0;
    var messageHeader_js_1 = require_messageHeader();
    var messageProperties_js_1 = require_messageProperties();
    var constants_js_1 = require_constants2();
    exports.AmqpAnnotatedMessage = {
      /**
       * Takes RheaMessage(`Message` type from "rhea") and returns it in the AmqpAnnotatedMessage format.
       */
      fromRheaMessage(msg) {
        const amqpMsg = {
          header: messageHeader_js_1.AmqpMessageHeader.fromRheaMessageHeader(msg),
          footer: msg.footer,
          messageAnnotations: msg.message_annotations,
          deliveryAnnotations: msg.delivery_annotations,
          applicationProperties: msg.application_properties,
          properties: messageProperties_js_1.AmqpMessageProperties.fromRheaMessageProperties(msg),
          body: msg.body
        };
        if (msg.absolute_expiry_time) {
          const absoluteExpiryTime = msg.absolute_expiry_time.getTime();
          amqpMsg.properties.absoluteExpiryTime = Math.min(absoluteExpiryTime, constants_js_1.Constants.maxAbsoluteExpiryTime);
          if (msg.creation_time) {
            amqpMsg.header.timeToLive = amqpMsg.properties.absoluteExpiryTime - msg.creation_time.getTime();
          }
        }
        return amqpMsg;
      },
      /**
       * Takes AmqpAnnotatedMessage and returns it in the RheaMessage(`Message` type from "rhea") format.
       */
      toRheaMessage(msg) {
        var _a, _b;
        const rhMsg = Object.assign(Object.assign(Object.assign({}, messageProperties_js_1.AmqpMessageProperties.toRheaMessageProperties(msg.properties || {})), messageHeader_js_1.AmqpMessageHeader.toRheaMessageHeader(msg.header || {})), { body: msg.body, message_annotations: msg.messageAnnotations, delivery_annotations: msg.deliveryAnnotations, application_properties: msg.applicationProperties, footer: msg.footer });
        if ((_a = msg.header) === null || _a === void 0 ? void 0 : _a.timeToLive) {
          const ttl = msg.header.timeToLive;
          rhMsg.ttl = Math.min(ttl, constants_js_1.Constants.maxUint32Value);
          rhMsg.creation_time = (_b = rhMsg.creation_time) !== null && _b !== void 0 ? _b : /* @__PURE__ */ new Date();
          rhMsg.absolute_expiry_time = new Date(Math.min(rhMsg.creation_time.getTime() + ttl, constants_js_1.Constants.maxAbsoluteExpiryTime));
        }
        return rhMsg;
      }
    };
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js
var require_azureKeyCredential = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AzureKeyCredential = void 0;
    var AzureKeyCredential = class {
      /**
       * The value of the key to be used in authentication
       */
      get key() {
        return this._key;
      }
      /**
       * Create an instance of an AzureKeyCredential for use
       * with a service client.
       *
       * @param key - The initial value of the key to use in authentication
       */
      constructor(key) {
        if (!key) {
          throw new Error("key must be a non-empty string");
        }
        this._key = key;
      }
      /**
       * Change the value of the key.
       *
       * Updates will take effect upon the next request after
       * updating the key value.
       *
       * @param newKey - The new key value to be used
       */
      update(newKey) {
        this._key = newKey;
      }
    };
    exports.AzureKeyCredential = AzureKeyCredential;
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/keyCredential.js
var require_keyCredential = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/keyCredential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isKeyCredential = void 0;
    var core_util_1 = require_commonjs3();
    function isKeyCredential(credential) {
      return (0, core_util_1.isObjectWithProperties)(credential, ["key"]) && typeof credential.key === "string";
    }
    exports.isKeyCredential = isKeyCredential;
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js
var require_azureNamedKeyCredential = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNamedKeyCredential = exports.AzureNamedKeyCredential = void 0;
    var core_util_1 = require_commonjs3();
    var AzureNamedKeyCredential = class {
      /**
       * The value of the key to be used in authentication.
       */
      get key() {
        return this._key;
      }
      /**
       * The value of the name to be used in authentication.
       */
      get name() {
        return this._name;
      }
      /**
       * Create an instance of an AzureNamedKeyCredential for use
       * with a service client.
       *
       * @param name - The initial value of the name to use in authentication.
       * @param key - The initial value of the key to use in authentication.
       */
      constructor(name, key) {
        if (!name || !key) {
          throw new TypeError("name and key must be non-empty strings");
        }
        this._name = name;
        this._key = key;
      }
      /**
       * Change the value of the key.
       *
       * Updates will take effect upon the next request after
       * updating the key value.
       *
       * @param newName - The new name value to be used.
       * @param newKey - The new key value to be used.
       */
      update(newName, newKey) {
        if (!newName || !newKey) {
          throw new TypeError("newName and newKey must be non-empty strings");
        }
        this._name = newName;
        this._key = newKey;
      }
    };
    exports.AzureNamedKeyCredential = AzureNamedKeyCredential;
    function isNamedKeyCredential(credential) {
      return (0, core_util_1.isObjectWithProperties)(credential, ["name", "key"]) && typeof credential.key === "string" && typeof credential.name === "string";
    }
    exports.isNamedKeyCredential = isNamedKeyCredential;
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js
var require_azureSASCredential = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSASCredential = exports.AzureSASCredential = void 0;
    var core_util_1 = require_commonjs3();
    var AzureSASCredential = class {
      /**
       * The value of the shared access signature to be used in authentication
       */
      get signature() {
        return this._signature;
      }
      /**
       * Create an instance of an AzureSASCredential for use
       * with a service client.
       *
       * @param signature - The initial value of the shared access signature to use in authentication
       */
      constructor(signature) {
        if (!signature) {
          throw new Error("shared access signature must be a non-empty string");
        }
        this._signature = signature;
      }
      /**
       * Change the value of the signature.
       *
       * Updates will take effect upon the next request after
       * updating the signature value.
       *
       * @param newSignature - The new shared access signature value to be used
       */
      update(newSignature) {
        if (!newSignature) {
          throw new Error("shared access signature must be a non-empty string");
        }
        this._signature = newSignature;
      }
    };
    exports.AzureSASCredential = AzureSASCredential;
    function isSASCredential(credential) {
      return (0, core_util_1.isObjectWithProperties)(credential, ["signature"]) && typeof credential.signature === "string";
    }
    exports.isSASCredential = isSASCredential;
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js
var require_tokenCredential = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTokenCredential = void 0;
    function isTokenCredential(credential) {
      const castCredential = credential;
      return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === void 0 || castCredential.getToken.length > 0);
    }
    exports.isTokenCredential = isTokenCredential;
  }
});

// ../../node_modules/@azure/core-auth/dist/commonjs/index.js
var require_commonjs5 = __commonJS({
  "../../node_modules/@azure/core-auth/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTokenCredential = exports.isSASCredential = exports.AzureSASCredential = exports.isNamedKeyCredential = exports.AzureNamedKeyCredential = exports.isKeyCredential = exports.AzureKeyCredential = void 0;
    var azureKeyCredential_js_1 = require_azureKeyCredential();
    Object.defineProperty(exports, "AzureKeyCredential", { enumerable: true, get: function() {
      return azureKeyCredential_js_1.AzureKeyCredential;
    } });
    var keyCredential_js_1 = require_keyCredential();
    Object.defineProperty(exports, "isKeyCredential", { enumerable: true, get: function() {
      return keyCredential_js_1.isKeyCredential;
    } });
    var azureNamedKeyCredential_js_1 = require_azureNamedKeyCredential();
    Object.defineProperty(exports, "AzureNamedKeyCredential", { enumerable: true, get: function() {
      return azureNamedKeyCredential_js_1.AzureNamedKeyCredential;
    } });
    Object.defineProperty(exports, "isNamedKeyCredential", { enumerable: true, get: function() {
      return azureNamedKeyCredential_js_1.isNamedKeyCredential;
    } });
    var azureSASCredential_js_1 = require_azureSASCredential();
    Object.defineProperty(exports, "AzureSASCredential", { enumerable: true, get: function() {
      return azureSASCredential_js_1.AzureSASCredential;
    } });
    Object.defineProperty(exports, "isSASCredential", { enumerable: true, get: function() {
      return azureSASCredential_js_1.isSASCredential;
    } });
    var tokenCredential_js_1 = require_tokenCredential();
    Object.defineProperty(exports, "isTokenCredential", { enumerable: true, get: function() {
      return tokenCredential_js_1.isTokenCredential;
    } });
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/hmacSha256.js
var require_hmacSha256 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/hmacSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.signString = void 0;
    var node_crypto_1 = require("node:crypto");
    async function signString(key, toSign) {
      const hmac = (0, node_crypto_1.createHmac)("sha256", key).update(toSign).digest("base64");
      return encodeURIComponent(hmac);
    }
    exports.signString = signString;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/auth/tokenProvider.js
var require_tokenProvider = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/auth/tokenProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SasTokenProviderImpl = exports.createSasTokenProvider = void 0;
    var core_auth_1 = require_commonjs5();
    var hmacSha256_js_1 = require_hmacSha256();
    function createSasTokenProvider(data) {
      if ((0, core_auth_1.isNamedKeyCredential)(data) || (0, core_auth_1.isSASCredential)(data)) {
        return new SasTokenProviderImpl(data);
      } else if ("sharedAccessKeyName" in data && "sharedAccessKey" in data) {
        return new SasTokenProviderImpl({ name: data.sharedAccessKeyName, key: data.sharedAccessKey });
      } else {
        return new SasTokenProviderImpl({ signature: data.sharedAccessSignature });
      }
    }
    exports.createSasTokenProvider = createSasTokenProvider;
    var SasTokenProviderImpl = class {
      /**
       * Property used to distinguish TokenProvider from TokenCredential.
       */
      get isSasTokenProvider() {
        return true;
      }
      /**
       * Initializes a new instance of SasTokenProvider
       * @param credential - The source `NamedKeyCredential` or `SASCredential`.
       */
      constructor(credential) {
        this._credential = credential;
      }
      /**
       * Gets the sas token for the specified audience
       * @param audience - The audience for which the token is desired.
       */
      async getToken(audience) {
        if ((0, core_auth_1.isNamedKeyCredential)(this._credential)) {
          return createToken(this._credential.name, this._credential.key, Math.floor(Date.now() / 1e3) + 3600, audience);
        } else {
          return {
            token: this._credential.signature,
            expiresOnTimestamp: 0
          };
        }
      }
    };
    exports.SasTokenProviderImpl = SasTokenProviderImpl;
    async function createToken(keyName, key, expiry, audience) {
      audience = encodeURIComponent(audience);
      keyName = encodeURIComponent(keyName);
      const stringToSign = audience + "\n" + expiry;
      const sig = await (0, hmacSha256_js_1.signString)(key, stringToSign);
      return {
        token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,
        expiresOnTimestamp: expiry
      };
    }
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/util/typeGuards.js
var require_typeGuards2 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/util/typeGuards.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSasTokenProvider = void 0;
    var core_util_1 = require_commonjs3();
    function isSasTokenProvider(thing) {
      return (0, core_util_1.isObjectWithProperties)(thing, ["isSasTokenProvider"]) && thing.isSasTokenProvider === true;
    }
    exports.isSasTokenProvider = isSasTokenProvider;
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/internals.js
var require_internals = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/internals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSasTokenProvider = exports.createSasTokenProvider = void 0;
    var tokenProvider_js_1 = require_tokenProvider();
    Object.defineProperty(exports, "createSasTokenProvider", { enumerable: true, get: function() {
      return tokenProvider_js_1.createSasTokenProvider;
    } });
    var typeGuards_js_1 = require_typeGuards2();
    Object.defineProperty(exports, "isSasTokenProvider", { enumerable: true, get: function() {
      return typeGuards_js_1.isSasTokenProvider;
    } });
  }
});

// ../../node_modules/@azure/core-amqp/dist/commonjs/index.js
var require_commonjs6 = __commonJS({
  "../../node_modules/@azure/core-amqp/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.AmqpAnnotatedMessage = exports.defaultCancellableLock = exports.parseConnectionString = exports.delay = exports.SystemErrorConditionMapper = exports.isSystemError = exports.retryableErrors = exports.translate = exports.ConditionErrorNameMapper = exports.ErrorNameConditionMapper = exports.isMessagingError = exports.MessagingError = exports.ConnectionContextBase = exports.AmqpMessageProperties = exports.AmqpMessageHeader = exports.StandardAbortMessage = exports.Constants = exports.CbsClient = exports.ConnectionConfig = exports.TokenType = exports.RetryMode = exports.RetryOperationType = exports.retry = exports.RequestResponseLink = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var requestResponseLink_js_1 = require_requestResponseLink();
    Object.defineProperty(exports, "RequestResponseLink", { enumerable: true, get: function() {
      return requestResponseLink_js_1.RequestResponseLink;
    } });
    var retry_js_1 = require_retry();
    Object.defineProperty(exports, "retry", { enumerable: true, get: function() {
      return retry_js_1.retry;
    } });
    Object.defineProperty(exports, "RetryOperationType", { enumerable: true, get: function() {
      return retry_js_1.RetryOperationType;
    } });
    Object.defineProperty(exports, "RetryMode", { enumerable: true, get: function() {
      return retry_js_1.RetryMode;
    } });
    var token_js_1 = require_token();
    Object.defineProperty(exports, "TokenType", { enumerable: true, get: function() {
      return token_js_1.TokenType;
    } });
    var connectionConfig_js_1 = require_connectionConfig();
    Object.defineProperty(exports, "ConnectionConfig", { enumerable: true, get: function() {
      return connectionConfig_js_1.ConnectionConfig;
    } });
    var cbs_js_1 = require_cbs();
    Object.defineProperty(exports, "CbsClient", { enumerable: true, get: function() {
      return cbs_js_1.CbsClient;
    } });
    var constants_js_1 = require_constants2();
    Object.defineProperty(exports, "Constants", { enumerable: true, get: function() {
      return constants_js_1.Constants;
    } });
    Object.defineProperty(exports, "StandardAbortMessage", { enumerable: true, get: function() {
      return constants_js_1.StandardAbortMessage;
    } });
    var messageHeader_js_1 = require_messageHeader();
    Object.defineProperty(exports, "AmqpMessageHeader", { enumerable: true, get: function() {
      return messageHeader_js_1.AmqpMessageHeader;
    } });
    var messageProperties_js_1 = require_messageProperties();
    Object.defineProperty(exports, "AmqpMessageProperties", { enumerable: true, get: function() {
      return messageProperties_js_1.AmqpMessageProperties;
    } });
    var ConnectionContextBase_js_1 = require_ConnectionContextBase();
    Object.defineProperty(exports, "ConnectionContextBase", { enumerable: true, get: function() {
      return ConnectionContextBase_js_1.ConnectionContextBase;
    } });
    var errors_js_1 = require_errors2();
    Object.defineProperty(exports, "MessagingError", { enumerable: true, get: function() {
      return errors_js_1.MessagingError;
    } });
    Object.defineProperty(exports, "isMessagingError", { enumerable: true, get: function() {
      return errors_js_1.isMessagingError;
    } });
    Object.defineProperty(exports, "ErrorNameConditionMapper", { enumerable: true, get: function() {
      return errors_js_1.ErrorNameConditionMapper;
    } });
    Object.defineProperty(exports, "ConditionErrorNameMapper", { enumerable: true, get: function() {
      return errors_js_1.ConditionErrorNameMapper;
    } });
    Object.defineProperty(exports, "translate", { enumerable: true, get: function() {
      return errors_js_1.translate;
    } });
    Object.defineProperty(exports, "retryableErrors", { enumerable: true, get: function() {
      return errors_js_1.retryableErrors;
    } });
    Object.defineProperty(exports, "isSystemError", { enumerable: true, get: function() {
      return errors_js_1.isSystemError;
    } });
    Object.defineProperty(exports, "SystemErrorConditionMapper", { enumerable: true, get: function() {
      return errors_js_1.SystemErrorConditionMapper;
    } });
    var utils_js_1 = require_utils2();
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return utils_js_1.delay;
    } });
    Object.defineProperty(exports, "parseConnectionString", { enumerable: true, get: function() {
      return utils_js_1.parseConnectionString;
    } });
    Object.defineProperty(exports, "defaultCancellableLock", { enumerable: true, get: function() {
      return utils_js_1.defaultCancellableLock;
    } });
    var amqpAnnotatedMessage_js_1 = require_amqpAnnotatedMessage();
    Object.defineProperty(exports, "AmqpAnnotatedMessage", { enumerable: true, get: function() {
      return amqpAnnotatedMessage_js_1.AmqpAnnotatedMessage;
    } });
    var log_js_1 = require_log4();
    Object.defineProperty(exports, "logger", { enumerable: true, get: function() {
      return log_js_1.logger;
    } });
    tslib_1.__exportStar(require_internals(), exports);
  }
});

// ../../node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "../../node_modules/is-buffer/index.js"(exports, module2) {
    module2.exports = function isBuffer(obj) {
      return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    };
  }
});

// ../../node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js
var require_tracingContext = __commonJS({
  "../../node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TracingContextImpl = exports.createTracingContext = exports.knownContextKeys = void 0;
    exports.knownContextKeys = {
      span: Symbol.for("@azure/core-tracing span"),
      namespace: Symbol.for("@azure/core-tracing namespace")
    };
    function createTracingContext(options = {}) {
      let context = new TracingContextImpl(options.parentContext);
      if (options.span) {
        context = context.setValue(exports.knownContextKeys.span, options.span);
      }
      if (options.namespace) {
        context = context.setValue(exports.knownContextKeys.namespace, options.namespace);
      }
      return context;
    }
    exports.createTracingContext = createTracingContext;
    var TracingContextImpl = class _TracingContextImpl {
      constructor(initialContext) {
        this._contextMap = initialContext instanceof _TracingContextImpl ? new Map(initialContext._contextMap) : /* @__PURE__ */ new Map();
      }
      setValue(key, value) {
        const newContext = new _TracingContextImpl(this);
        newContext._contextMap.set(key, value);
        return newContext;
      }
      getValue(key) {
        return this._contextMap.get(key);
      }
      deleteValue(key) {
        const newContext = new _TracingContextImpl(this);
        newContext._contextMap.delete(key);
        return newContext;
      }
    };
    exports.TracingContextImpl = TracingContextImpl;
  }
});

// ../../node_modules/@azure/core-tracing/dist/commonjs/state.js
var require_state = __commonJS({
  "../../node_modules/@azure/core-tracing/dist/commonjs/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.state = void 0;
    exports.state = {
      instrumenterImplementation: void 0
    };
  }
});

// ../../node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js
var require_instrumenter = __commonJS({
  "../../node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstrumenter = exports.useInstrumenter = exports.createDefaultInstrumenter = exports.createDefaultTracingSpan = void 0;
    var tracingContext_js_1 = require_tracingContext();
    var state_js_1 = require_state();
    function createDefaultTracingSpan() {
      return {
        end: () => {
        },
        isRecording: () => false,
        recordException: () => {
        },
        setAttribute: () => {
        },
        setStatus: () => {
        }
      };
    }
    exports.createDefaultTracingSpan = createDefaultTracingSpan;
    function createDefaultInstrumenter() {
      return {
        createRequestHeaders: () => {
          return {};
        },
        parseTraceparentHeader: () => {
          return void 0;
        },
        startSpan: (_name, spanOptions) => {
          return {
            span: createDefaultTracingSpan(),
            tracingContext: (0, tracingContext_js_1.createTracingContext)({ parentContext: spanOptions.tracingContext })
          };
        },
        withContext(_context, callback, ...callbackArgs) {
          return callback(...callbackArgs);
        }
      };
    }
    exports.createDefaultInstrumenter = createDefaultInstrumenter;
    function useInstrumenter(instrumenter) {
      state_js_1.state.instrumenterImplementation = instrumenter;
    }
    exports.useInstrumenter = useInstrumenter;
    function getInstrumenter() {
      if (!state_js_1.state.instrumenterImplementation) {
        state_js_1.state.instrumenterImplementation = createDefaultInstrumenter();
      }
      return state_js_1.state.instrumenterImplementation;
    }
    exports.getInstrumenter = getInstrumenter;
  }
});

// ../../node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js
var require_tracingClient = __commonJS({
  "../../node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTracingClient = void 0;
    var instrumenter_js_1 = require_instrumenter();
    var tracingContext_js_1 = require_tracingContext();
    function createTracingClient(options) {
      const { namespace, packageName, packageVersion } = options;
      function startSpan(name, operationOptions, spanOptions) {
        var _a;
        const startSpanResult = (0, instrumenter_js_1.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName, packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));
        let tracingContext = startSpanResult.tracingContext;
        const span = startSpanResult.span;
        if (!tracingContext.getValue(tracingContext_js_1.knownContextKeys.namespace)) {
          tracingContext = tracingContext.setValue(tracingContext_js_1.knownContextKeys.namespace, namespace);
        }
        span.setAttribute("az.namespace", tracingContext.getValue(tracingContext_js_1.knownContextKeys.namespace));
        const updatedOptions = Object.assign({}, operationOptions, {
          tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext })
        });
        return {
          span,
          updatedOptions
        };
      }
      async function withSpan(name, operationOptions, callback, spanOptions) {
        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);
        try {
          const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));
          span.setStatus({ status: "success" });
          return result;
        } catch (err) {
          span.setStatus({ status: "error", error: err });
          throw err;
        } finally {
          span.end();
        }
      }
      function withContext(context, callback, ...callbackArgs) {
        return (0, instrumenter_js_1.getInstrumenter)().withContext(context, callback, ...callbackArgs);
      }
      function parseTraceparentHeader(traceparentHeader) {
        return (0, instrumenter_js_1.getInstrumenter)().parseTraceparentHeader(traceparentHeader);
      }
      function createRequestHeaders(tracingContext) {
        return (0, instrumenter_js_1.getInstrumenter)().createRequestHeaders(tracingContext);
      }
      return {
        startSpan,
        withSpan,
        withContext,
        parseTraceparentHeader,
        createRequestHeaders
      };
    }
    exports.createTracingClient = createTracingClient;
  }
});

// ../../node_modules/@azure/core-tracing/dist/commonjs/index.js
var require_commonjs7 = __commonJS({
  "../../node_modules/@azure/core-tracing/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTracingClient = exports.useInstrumenter = void 0;
    var instrumenter_js_1 = require_instrumenter();
    Object.defineProperty(exports, "useInstrumenter", { enumerable: true, get: function() {
      return instrumenter_js_1.useInstrumenter;
    } });
    var tracingClient_js_1 = require_tracingClient();
    Object.defineProperty(exports, "createTracingClient", { enumerable: true, get: function() {
      return tracingClient_js_1.createTracingClient;
    } });
  }
});

// ../../node_modules/@azure/event-hubs/dist/index.js
var require_dist2 = __commonJS({
  "../../node_modules/@azure/event-hubs/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abortController = require_dist();
    var logger$1 = require_commonjs();
    var coreUtil = require_commonjs3();
    var coreAmqp = require_commonjs6();
    var rheaPromise = require_lib();
    var buffer = require("buffer");
    var isBuffer = require_is_buffer();
    var coreTracing = require_commonjs7();
    var coreAuth = require_commonjs5();
    var os = require("os");
    function _interopNamespaceDefault(e) {
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: function() {
                return e[k];
              }
            });
          }
        });
      }
      n.default = e;
      return Object.freeze(n);
    }
    var os__namespace = /* @__PURE__ */ _interopNamespaceDefault(os);
    var logger2 = logger$1.createClientLogger("event-hubs");
    function logErrorStackTrace(error) {
      if (coreUtil.isObjectWithProperties(error, ["stack"])) {
        logger2.verbose(error.stack);
      }
    }
    function createReceiverLogPrefix(consumerId, connectionId, partitionId) {
      return `[${connectionId}] Receiver P${partitionId}-${consumerId}`;
    }
    function createSenderLogPrefix(senderId, connectionId) {
      return `[${connectionId}] Sender ${senderId}`;
    }
    function createManagementLogPrefix(connectionId) {
      return `[${connectionId}] Management`;
    }
    function createLogFunction(azureLogger, prefix, level) {
      return (arg, ...args) => azureLogger[level](...typeof arg === "string" ? [`${prefix}: ${arg}`] : [prefix, arg], ...args);
    }
    function createSimpleLogger(azureLogger, prefix) {
      return {
        info: createLogFunction(azureLogger, prefix, "info"),
        error: createLogFunction(azureLogger, prefix, "error"),
        verbose: createLogFunction(azureLogger, prefix, "verbose"),
        warning: createLogFunction(azureLogger, prefix, "warning")
      };
    }
    function logObj(obj) {
      JSON.stringify(obj, void 0, 2);
    }
    var PartitionProcessor = class {
      constructor(_eventHandlers, _checkpointStore, _context) {
        this._eventHandlers = _eventHandlers;
        this._checkpointStore = _checkpointStore;
        this._context = _context;
      }
      /**
       * Information on the last enqueued event in the partition that is being processed.
       * This property is updated by the `EventProcessor` if the `trackLastEnqueuedEventProperties` option is set to true
       * when creating an instance of EventProcessor
       * @readonly
       */
      get lastEnqueuedEventProperties() {
        return this._lastEnqueuedEventProperties;
      }
      /**
       * Information on the last enqueued event in the partition that is being processed.
       * This property is updated by the `EventProcessor` if the `trackLastEnqueuedEventProperties` option is set to true
       * when creating an instance of EventProcessor
       */
      set lastEnqueuedEventProperties(properties) {
        this._lastEnqueuedEventProperties = properties;
      }
      /**
       * The fully qualified namespace from where the current partition is being processed. It is set by the `EventProcessor`
       * @readonly
       */
      get fullyQualifiedNamespace() {
        return this._context.fullyQualifiedNamespace;
      }
      /**
       * The name of the consumer group from where the current partition is being processed. It is set by the `EventProcessor`
       * @readonly
       */
      get consumerGroup() {
        return this._context.consumerGroup;
      }
      /**
       * The name of the event hub to which the current partition belongs. It is set by the `EventProcessor`
       * @readonly
       */
      get eventHubName() {
        return this._context.eventHubName;
      }
      /**
       * The identifier of the Event Hub partition that is being processed. It is set by the `EventProcessor`
       * @readonly
       */
      get partitionId() {
        return this._context.partitionId;
      }
      /**
       * The unique identifier of the `EventProcessor` that has spawned the current instance of `PartitionProcessor`. This is set by the `EventProcessor`
       */
      get eventProcessorId() {
        return this._context.eventProcessorId;
      }
      /**
       * This method is called when the `EventProcessor` takes ownership of a new partition and before any
       * events are received.
       */
      async initialize() {
        var _a, _b;
        return (_b = (_a = this._eventHandlers).processInitialize) === null || _b === void 0 ? void 0 : _b.call(_a, this);
      }
      /**
       * This method is called before the partition processor is closed by the EventProcessor.
       *
       * @param reason - The reason for closing this partition processor.
       */
      async close(reason) {
        if (this._eventHandlers.processClose) {
          await this._eventHandlers.processClose(reason, this);
        }
      }
      /**
       * This method is called when new events are received.
       *
       * This is also a good place to update checkpoints as appropriate.
       *
       * @param event - The received events to be processed.
       */
      async processEvents(events) {
        await this._eventHandlers.processEvents(events, this);
      }
      /**
       * This method is called when an error occurs while receiving events from Event Hubs.
       *
       * @param error - The error to be processed.
       */
      async processError(error) {
        if (this._eventHandlers.processError) {
          try {
            await this._eventHandlers.processError(error, this);
          } catch (err) {
            logger2.verbose(`Error thrown from user's processError handler : ${err}`);
          }
        }
      }
      /**
       * Updates the checkpoint using the event data.
       *
       * A checkpoint is meant to represent the last successfully processed event by the user from a particular
       * partition of a consumer group in an Event Hub instance.
       *
       * @param eventData - The event that you want to update the checkpoint with.
       */
      async updateCheckpoint(eventData) {
        const checkpoint = {
          fullyQualifiedNamespace: this._context.fullyQualifiedNamespace,
          eventHubName: this._context.eventHubName,
          consumerGroup: this._context.consumerGroup,
          partitionId: this._context.partitionId,
          sequenceNumber: eventData.sequenceNumber,
          offset: eventData.offset
        };
        await this._checkpointStore.updateCheckpoint(checkpoint);
      }
    };
    function getEventPositionFilter(eventPosition) {
      let result;
      if (coreUtil.isDefined(eventPosition.offset)) {
        result = eventPosition.isInclusive ? `${coreAmqp.Constants.offsetAnnotation} >= '${eventPosition.offset}'` : `${coreAmqp.Constants.offsetAnnotation} > '${eventPosition.offset}'`;
      } else if (coreUtil.isDefined(eventPosition.sequenceNumber)) {
        result = eventPosition.isInclusive ? `${coreAmqp.Constants.sequenceNumberAnnotation} >= '${eventPosition.sequenceNumber}'` : `${coreAmqp.Constants.sequenceNumberAnnotation} > '${eventPosition.sequenceNumber}'`;
      } else if (coreUtil.isDefined(eventPosition.enqueuedOn)) {
        const time = eventPosition.enqueuedOn instanceof Date ? eventPosition.enqueuedOn.getTime() : eventPosition.enqueuedOn;
        result = `${coreAmqp.Constants.enqueuedTimeAnnotation} > '${time}'`;
      }
      if (!result) {
        throw coreAmqp.translate({
          condition: coreAmqp.ErrorNameConditionMapper.ArgumentError,
          description: "No starting position was set in the EventPosition."
        });
      }
      return result;
    }
    var earliestEventPosition2 = {
      offset: -1
    };
    var latestEventPosition = {
      offset: "@latest"
    };
    function validateEventPositions(position) {
      if (!coreUtil.isDefined(position)) {
        return;
      }
      const keys = Object.keys(position);
      if (!keys.length) {
        throw new TypeError("Invalid value for EventPosition found. Pass an object with either of offset, sequenceNumber or enqueuedOn properties set.");
      }
      if (isEventPosition(position)) {
        validateEventPosition(position);
        return;
      }
      const positions = position;
      for (let i = 0; i < keys.length; i++) {
        if (Object.prototype.hasOwnProperty.call(positions, keys[i])) {
          validateEventPosition(positions[keys[i]]);
        }
      }
    }
    function isEventPosition(position) {
      if (!position) {
        return false;
      }
      if (coreUtil.objectHasProperty(position, "offset") && coreUtil.isDefined(position.offset)) {
        return true;
      }
      if (coreUtil.objectHasProperty(position, "sequenceNumber") && coreUtil.isDefined(position.sequenceNumber)) {
        return true;
      }
      if (coreUtil.objectHasProperty(position, "enqueuedOn") && coreUtil.isDefined(position.enqueuedOn)) {
        return true;
      }
      return false;
    }
    function validateEventPosition(position) {
      if (!coreUtil.isDefined(position)) {
        return;
      }
      const offsetPresent = coreUtil.isDefined(position.offset);
      const sequenceNumberPresent = coreUtil.isDefined(position.sequenceNumber);
      const enqueuedOnPresent = coreUtil.isDefined(position.enqueuedOn);
      if (offsetPresent && sequenceNumberPresent || offsetPresent && enqueuedOnPresent || enqueuedOnPresent && sequenceNumberPresent) {
        throw new TypeError("Invalid value for EventPosition found. Set only one of offset, sequenceNumber or enqueuedOn properties.");
      }
      if (!offsetPresent && !enqueuedOnPresent && !sequenceNumberPresent) {
        throw new TypeError("Invalid value for EventPosition found. Pass an object with either of offset, sequenceNumber or enqueuedOn properties set.");
      }
    }
    exports.CloseReason = void 0;
    (function(CloseReason) {
      CloseReason["OwnershipLost"] = "OwnershipLost";
      CloseReason["Shutdown"] = "Shutdown";
    })(exports.CloseReason || (exports.CloseReason = {}));
    var dataSectionTypeCode = 117;
    var sequenceSectionTypeCode = 118;
    var valueSectionTypeCode = 119;
    var defaultDataTransformer = {
      /**
       * A function that takes the body property from an EventData object
       * and returns an encoded body (some form of AMQP type).
       *
       * @param body - The AMQP message body
       * @param bodyType - The AMQP section to story the body in.
       * @returns The encoded AMQP message body as an AMQP Data/Sequence/Value section.
       */
      encode(body, bodyType) {
        let result;
        if (body === void 0)
          body = null;
        if (bodyType === "value") {
          result = rheaPromise.message.data_section(body);
          result.typecode = valueSectionTypeCode;
        } else if (bodyType === "sequence") {
          result = rheaPromise.message.sequence_section(body);
        } else if (isBuffer(body) || body instanceof Uint8Array) {
          result = rheaPromise.message.data_section(body);
        } else if (body === null && bodyType === "data") {
          result = rheaPromise.message.data_section(null);
        } else {
          try {
            const bodyStr = JSON.stringify(body);
            result = rheaPromise.message.data_section(buffer.Buffer.from(bodyStr, "utf8"));
          } catch (err) {
            const msg = `An error occurred while executing JSON.stringify() on the given body ` + body + `${err ? err.stack : JSON.stringify(err)}`;
            logger2.warning("[encode] " + msg);
            logErrorStackTrace(err);
            throw new Error(msg);
          }
        }
        return result;
      },
      /**
       * A function that takes the body property from an AMQP message, which can come from either
       * the 'data', 'value' or 'sequence' sections of an AMQP message.
       *
       * If the body is not a JSON string the the raw contents will be returned, along with the bodyType
       * indicating which part of the AMQP message the body was decoded from.
       *
       * @param body - The AMQP message body as received from rhea.
       * @param skipParsingBodyAsJson - Boolean to skip running JSON.parse() on message body when body type is `content`.
       * @returns The decoded/raw body and the body type.
       */
      decode(body, skipParsingBodyAsJson) {
        try {
          if (isRheaAmqpSection(body)) {
            switch (body.typecode) {
              case dataSectionTypeCode:
                return {
                  body: skipParsingBodyAsJson ? body.content : tryToJsonDecode(body.content),
                  bodyType: "data"
                };
              case sequenceSectionTypeCode:
                return { body: body.content, bodyType: "sequence" };
              case valueSectionTypeCode:
                return { body: body.content, bodyType: "value" };
            }
          } else {
            if (isBuffer(body)) {
              return { body: skipParsingBodyAsJson ? body : tryToJsonDecode(body), bodyType: "data" };
            }
            return { body, bodyType: "value" };
          }
        } catch (err) {
          logger2.verbose("[decode] An error occurred while decoding the received message body. The error is: %O", err);
          throw err;
        }
      }
    };
    function tryToJsonDecode(body) {
      let processedBody = body;
      try {
        const bodyStr = processedBody.toString("utf8");
        processedBody = JSON.parse(bodyStr);
      } catch (err) {
        logger2.verbose("[decode] An error occurred while trying JSON.parse() on the received body. The error is %O", err);
      }
      return processedBody;
    }
    function isRheaAmqpSection(possibleSection) {
      return possibleSection != null && typeof possibleSection.typecode === "number" && (possibleSection.typecode === dataSectionTypeCode || possibleSection.typecode === valueSectionTypeCode || possibleSection.typecode === sequenceSectionTypeCode);
    }
    var packageJsonInfo = {
      name: "@azure/event-hubs",
      version: "5.12.0"
    };
    var idempotentProducerAmqpPropertyNames = {
      capability: "com.microsoft:idempotent-producer",
      epoch: "com.microsoft:producer-epoch",
      producerId: "com.microsoft:producer-id",
      producerSequenceNumber: "com.microsoft:producer-sequence-number"
    };
    var receiverIdPropertyName = "com.microsoft:receiver-name";
    var PENDING_PUBLISH_SEQ_NUM_SYMBOL = Symbol.for("@azure/event-hubs.pendingPublishSequenceNumber");
    var messagePropertiesMap = {
      message_id: "messageId",
      user_id: "userId",
      to: "to",
      subject: "subject",
      reply_to: "replyTo",
      correlation_id: "correlationId",
      content_type: "contentType",
      content_encoding: "contentEncoding",
      absolute_expiry_time: "absoluteExpiryTime",
      creation_time: "creationTime",
      group_id: "groupId",
      group_sequence: "groupSequence",
      reply_to_group_id: "replyToGroupId"
    };
    function fromRheaMessage(msg, skipParsingBodyAsJson) {
      const rawMessage = coreAmqp.AmqpAnnotatedMessage.fromRheaMessage(msg);
      const { body, bodyType } = defaultDataTransformer.decode(msg.body, skipParsingBodyAsJson);
      rawMessage.bodyType = bodyType;
      const data = {
        body,
        getRawAmqpMessage() {
          return rawMessage;
        }
      };
      if (msg.message_annotations) {
        for (const annotationKey of Object.keys(msg.message_annotations)) {
          switch (annotationKey) {
            case coreAmqp.Constants.partitionKey:
              data.partitionKey = msg.message_annotations[annotationKey];
              break;
            case coreAmqp.Constants.sequenceNumber:
              data.sequenceNumber = msg.message_annotations[annotationKey];
              break;
            case coreAmqp.Constants.enqueuedTime:
              data.enqueuedTimeUtc = new Date(msg.message_annotations[annotationKey]);
              break;
            case coreAmqp.Constants.offset:
              data.offset = msg.message_annotations[annotationKey];
              break;
            default:
              if (!data.systemProperties) {
                data.systemProperties = {};
              }
              data.systemProperties[annotationKey] = convertDatesToNumbers(msg.message_annotations[annotationKey]);
              break;
          }
        }
      }
      if (msg.application_properties) {
        data.properties = convertDatesToNumbers(msg.application_properties);
      }
      if (msg.delivery_annotations) {
        data.lastEnqueuedOffset = msg.delivery_annotations.last_enqueued_offset;
        data.lastSequenceNumber = msg.delivery_annotations.last_enqueued_sequence_number;
        data.lastEnqueuedTime = new Date(msg.delivery_annotations.last_enqueued_time_utc);
        data.retrievalTime = new Date(msg.delivery_annotations.runtime_info_retrieval_time_utc);
      }
      const messageProperties = Object.keys(messagePropertiesMap);
      for (const messageProperty of messageProperties) {
        if (!data.systemProperties) {
          data.systemProperties = {};
        }
        if (msg[messageProperty] != null) {
          data.systemProperties[messagePropertiesMap[messageProperty]] = convertDatesToNumbers(msg[messageProperty]);
        }
      }
      if (msg.content_type != null) {
        data.contentType = msg.content_type;
      }
      if (msg.correlation_id != null) {
        data.correlationId = msg.correlation_id;
      }
      if (msg.message_id != null) {
        data.messageId = msg.message_id;
      }
      return data;
    }
    function toRheaMessage(data, partitionKey) {
      var _a, _b;
      let rheaMessage;
      if (isAmqpAnnotatedMessage(data)) {
        rheaMessage = Object.assign(Object.assign({}, coreAmqp.AmqpAnnotatedMessage.toRheaMessage(data)), { body: defaultDataTransformer.encode(data.body, (_a = data.bodyType) !== null && _a !== void 0 ? _a : "data") });
      } else {
        let bodyType = "data";
        if (typeof data.getRawAmqpMessage === "function") {
          bodyType = (_b = data.getRawAmqpMessage().bodyType) !== null && _b !== void 0 ? _b : "data";
        }
        rheaMessage = {
          body: defaultDataTransformer.encode(data.body, bodyType)
        };
        rheaMessage.message_annotations = {};
        if (data.properties) {
          rheaMessage.application_properties = data.properties;
        }
        if (coreUtil.isDefined(partitionKey)) {
          rheaMessage.message_annotations[coreAmqp.Constants.partitionKey] = partitionKey;
          rheaMessage.durable = true;
        }
        if (data.contentType != null) {
          rheaMessage.content_type = data.contentType;
        }
        if (data.correlationId != null) {
          rheaMessage.correlation_id = data.correlationId;
        }
        if (data.messageId != null) {
          if (typeof data.messageId === "string" && data.messageId.length > coreAmqp.Constants.maxMessageIdLength) {
            throw new Error(`Length of 'messageId' property on the event cannot be greater than ${coreAmqp.Constants.maxMessageIdLength} characters.`);
          }
          rheaMessage.message_id = data.messageId;
        }
      }
      return rheaMessage;
    }
    function isAmqpAnnotatedMessage(possible) {
      return coreUtil.isObjectWithProperties(possible, ["body", "bodyType"]) && !coreUtil.objectHasProperty(possible, "getRawAmqpMessage");
    }
    function convertDatesToNumbers(thing) {
      if (!coreUtil.isDefined(thing))
        return thing;
      if (typeof thing === "object" && coreUtil.objectHasProperty(thing, "getTime") && typeof thing.getTime === "function") {
        return thing.getTime();
      }
      if (Array.isArray(thing)) {
        return thing.map(convertDatesToNumbers);
      }
      if (typeof thing === "object" && coreUtil.isDefined(thing)) {
        const thingShallowCopy = Object.assign({}, thing);
        for (const key of Object.keys(thingShallowCopy)) {
          thingShallowCopy[key] = convertDatesToNumbers(thingShallowCopy[key]);
        }
        return thingShallowCopy;
      }
      return thing;
    }
    function populateIdempotentMessageAnnotations(rheaMessage, { isIdempotentPublishingEnabled, ownerLevel, producerGroupId, publishSequenceNumber }) {
      if (!isIdempotentPublishingEnabled) {
        return;
      }
      const messageAnnotations = rheaMessage.message_annotations || {};
      if (!rheaMessage.message_annotations) {
        rheaMessage.message_annotations = messageAnnotations;
      }
      if (coreUtil.isDefined(ownerLevel)) {
        messageAnnotations[idempotentProducerAmqpPropertyNames.epoch] = rheaPromise.types.wrap_short(ownerLevel);
      }
      if (coreUtil.isDefined(producerGroupId)) {
        messageAnnotations[idempotentProducerAmqpPropertyNames.producerId] = rheaPromise.types.wrap_long(producerGroupId);
      }
      if (coreUtil.isDefined(publishSequenceNumber)) {
        messageAnnotations[idempotentProducerAmqpPropertyNames.producerSequenceNumber] = rheaPromise.types.wrap_int(publishSequenceNumber);
      }
    }
    function getRetryAttemptTimeoutInMs(retryOptions = {}) {
      const { timeoutInMs } = retryOptions;
      return typeof timeoutInMs !== "number" || !isFinite(timeoutInMs) ? coreAmqp.Constants.defaultOperationTimeoutInMs : timeoutInMs;
    }
    function getRandomName(prefix) {
      const str = coreUtil.randomUUID();
      return prefix ? `${prefix}-${str}` : str;
    }
    function createTimerLoop(timeoutInMs, createTask) {
      let token;
      const loop = {
        start: () => {
          clearTimeout(token);
          token = setTimeout(() => createTask().catch(() => {
          }).finally(loop.start), timeoutInMs);
          loop.isRunning = true;
        },
        stop: () => {
          clearTimeout(token);
          loop.isRunning = false;
        },
        isRunning: false
      };
      return loop;
    }
    async function withAuth(callback, context, audience, timeoutInMs, logger3, options) {
      const info = await getTokenInfo(context.tokenCredential, audience);
      await setupClaimNegotiation(context, audience, info, timeoutInMs, logger3, options);
      await callback();
      async function createTask() {
        try {
          const info2 = await getTokenInfo(context.tokenCredential, audience);
          await setupClaimNegotiation(context, audience, info2, timeoutInMs, logger3, options);
          logger3.verbose(`next token renewal is in ${info2.timeToLiveInMs} milliseconds @(${new Date(Date.now() + info2.timeToLiveInMs).toString()}).`);
        } catch (err) {
          logger3.verbose(`an error occurred while renewing the token: ${logObj(err)}`);
        }
      }
      const loop = createTimerLoop(info.timeToLiveInMs, createTask);
      loop.start();
      return loop;
    }
    async function openCbsSession(client2, timeoutAfterStartTime, { abortSignal } = {}) {
      return coreAmqp.defaultCancellableLock.acquire(client2.cbsLock, () => client2.init({
        abortSignal,
        timeoutInMs: timeoutAfterStartTime - Date.now()
      }), {
        abortSignal,
        timeoutInMs: timeoutAfterStartTime - Date.now()
      });
    }
    async function getAadToken(cred) {
      const token = await cred.getToken(coreAmqp.Constants.aadEventHubsScope);
      if (!token) {
        throw new Error(`Failed to get token from the provided "TokenCredential" object`);
      }
      return {
        token,
        type: coreAmqp.TokenType.CbsTokenTypeJwt,
        timeToLiveInMs: token.expiresOnTimestamp - Date.now() - 2 * 60 * 1e3
      };
    }
    async function getSharedKeyBasedToken(cred, audience) {
      return {
        token: await cred.getToken(audience),
        type: coreAmqp.TokenType.CbsTokenTypeSas,
        timeToLiveInMs: 45 * 60 * 1e3
      };
    }
    async function getTokenInfo(cred, audience) {
      return coreAmqp.isSasTokenProvider(cred) ? getSharedKeyBasedToken(cred, audience) : getAadToken(cred);
    }
    function negotiateClaim({ token, type }, audience, cbsSession, timeoutAfterStartTime, lock, abortSignal) {
      return coreAmqp.defaultCancellableLock.acquire(lock, () => cbsSession.negotiateClaim(audience, token.token, type, {
        abortSignal,
        timeoutInMs: timeoutAfterStartTime - Date.now()
      }), {
        abortSignal,
        timeoutInMs: timeoutAfterStartTime - Date.now()
      });
    }
    async function setupClaimNegotiation(context, audience, info, timeoutInMs, logger3, { abortSignal }) {
      const startTime = Date.now();
      logger3.verbose(`acquiring cbs lock: '${context.cbsSession.cbsLock}' for creating the cbs session`);
      await openCbsSession(context.cbsSession, timeoutInMs + startTime, { abortSignal });
      logger3.verbose(`acquiring cbs lock: '${context.negotiateClaimLock}' for cbs auth`);
      await negotiateClaim(info, audience, context.cbsSession, timeoutInMs + startTime, context.negotiateClaimLock, abortSignal);
      logger3.verbose("claim negotiation succeeded");
    }
    var abortLogMessage = "operation has been cancelled by the user";
    var qReadIntervalInMs = 20;
    function createReceiver(ctx, consumerGroup, consumerId, partitionId, eventPosition, options = {}) {
      const address = ctx.config.getReceiverAddress(partitionId, consumerGroup);
      const name = getRandomName(address);
      const audience = ctx.config.getReceiverAudience(partitionId, consumerGroup);
      const logPrefix = createReceiverLogPrefix(consumerId, ctx.connectionId, partitionId);
      const logger$12 = createSimpleLogger(logger2, logPrefix);
      const queue = [];
      const state = {
        isConnecting: false
      };
      const obj = {
        _onError: void 0,
        checkpoint: -1,
        lastEnqueuedEventProperties: {},
        isClosed: false,
        close: async () => {
          var _a, _b;
          clearHandlers(obj);
          delete ctx.receivers[name];
          logger$12.verbose("deleted the receiver from the client cache");
          (_a = state.authLoop) === null || _a === void 0 ? void 0 : _a.stop();
          return (_b = state.link) === null || _b === void 0 ? void 0 : _b.close().catch((err) => {
            logger$12.warning(`an error occurred while closing: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`);
            logErrorStackTrace(err);
            throw err;
          }).finally(() => {
            obj.isClosed = true;
            logger$12.verbose("is closed");
            state.link = void 0;
            state.authLoop = void 0;
          });
        },
        abort: () => {
          var _a;
          (_a = obj._onError) === null || _a === void 0 ? void 0 : _a.call(obj, new abortController.AbortError(coreAmqp.StandardAbortMessage));
          logger$12.info(abortLogMessage);
          return obj.close();
        },
        isOpen: () => {
          var _a;
          const isOpen = !!((_a = state.link) === null || _a === void 0 ? void 0 : _a.isOpen());
          logger$12.verbose(`is open? -> ${isOpen}`);
          return isOpen;
        },
        async connect({ abortSignal, timeoutInMs }) {
          if (state.isConnecting || obj.isOpen()) {
            return;
          }
          state.isConnecting = true;
          logger$12.verbose("is trying to connect");
          try {
            await ctx.readyToOpenLink({ abortSignal });
            state.authLoop = await withAuth(() => setupLink(consumerId, ctx, name, address, obj, state, queue, eventPosition, logger$12, options, abortSignal), ctx, audience, timeoutInMs, logger$12, {
              abortSignal
            });
          } catch (err) {
            state.isConnecting = false;
            const error = coreAmqp.translate(err);
            logger$12.error(`an error occurred while creating the receiver: ${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}`);
            logErrorStackTrace(err);
            throw error;
          }
        },
        receiveBatch: (maxMessageCount, maxWaitTimeInSeconds = 60, abortSignal) => {
          var _a, _b;
          const prefetchCount = (_a = options.prefetchCount) !== null && _a !== void 0 ? _a : maxMessageCount * 3;
          const cleanupBeforeAbort = () => {
            logger$12.info(abortLogMessage);
            return obj.close();
          };
          const retrieveEvents = () => {
            const eventsToRetrieveCount = Math.max(maxMessageCount - queue.length, 0);
            logger$12.verbose(`already has ${queue.length} events and wants to receive ${eventsToRetrieveCount} more events`);
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
              cleanupBeforeAbort();
              return Promise.reject(new abortController.AbortError(coreAmqp.StandardAbortMessage));
            }
            return obj.isClosed || ctx.wasConnectionCloseCalled || eventsToRetrieveCount === 0 ? Promise.resolve(queue.splice(0, maxMessageCount)) : new Promise((resolve, reject) => {
              obj._onError = reject;
              obj.connect({
                abortSignal,
                timeoutInMs: getRetryAttemptTimeoutInMs(options.retryOptions)
              }).then(() => {
                addCredits(state.link, Math.max(prefetchCount, maxMessageCount) - queue.length);
                logger$12.verbose(`setting the max wait time to ${maxWaitTimeInSeconds} seconds`);
                return waitForEvents(maxMessageCount, maxWaitTimeInSeconds * 1e3, qReadIntervalInMs, queue, {
                  abortSignal,
                  cleanupBeforeAbort,
                  receivedAfterWait: () => logger$12.info(`${Math.min(maxMessageCount, queue.length)} messages received within ${maxWaitTimeInSeconds} seconds`),
                  receivedAlready: () => logger$12.info(`${maxMessageCount} messages already received`),
                  receivedNone: () => logger$12.info(`no messages received when max wait time in seconds ${maxWaitTimeInSeconds} is over`)
                });
              }).catch(reject).then(resolve);
            }).then(() => queue.splice(0, maxMessageCount)).finally(() => clearHandlers(obj));
          };
          return coreAmqp.retry(Object.defineProperties({
            operation: retrieveEvents,
            operationType: coreAmqp.RetryOperationType.receiveMessage,
            abortSignal,
            retryOptions: (_b = options.retryOptions) !== null && _b !== void 0 ? _b : {}
          }, {
            connectionId: {
              enumerable: true,
              get: () => ctx.connectionId
            },
            connectionHost: {
              enumerable: true,
              get: () => ctx.config.host
            }
          }));
        }
      };
      return obj;
    }
    function delay(waitTimeInMs, options) {
      let token;
      return coreUtil.createAbortablePromise((resolve) => {
        token = setTimeout(resolve, waitTimeInMs);
      }, options).finally(() => clearTimeout(token));
    }
    function checkOnInterval(waitTimeInMs, check, options) {
      let token;
      return coreUtil.createAbortablePromise((resolve) => {
        token = setInterval(() => {
          if (check()) {
            resolve();
          }
        }, waitTimeInMs);
      }, options).finally(() => clearInterval(token));
    }
    function waitForEvents(maxEventCount, maxWaitTimeInMs, readIntervalWaitTimeInMs, queue, options = {}) {
      const { abortSignal: clientAbortSignal, cleanupBeforeAbort, receivedNone, receivedAfterWait, receivedAlready } = options;
      if (queue.length >= maxEventCount) {
        return Promise.resolve().then(receivedAlready);
      }
      const aborter = new abortController.AbortController();
      const abortListener = () => {
        aborter.abort();
      };
      clientAbortSignal === null || clientAbortSignal === void 0 ? void 0 : clientAbortSignal.addEventListener("abort", abortListener);
      const updatedOptions = {
        abortSignal: aborter.signal,
        abortErrorMsg: coreAmqp.StandardAbortMessage,
        cleanupBeforeAbort: () => {
          if (clientAbortSignal === null || clientAbortSignal === void 0 ? void 0 : clientAbortSignal.aborted) {
            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
          }
        }
      };
      return Promise.race([
        checkOnInterval(readIntervalWaitTimeInMs, () => queue.length > 0, updatedOptions).then(() => delay(readIntervalWaitTimeInMs, updatedOptions)).then(receivedAfterWait),
        delay(maxWaitTimeInMs, updatedOptions).then(receivedNone)
      ]).finally(() => {
        aborter.abort();
        clientAbortSignal === null || clientAbortSignal === void 0 ? void 0 : clientAbortSignal.removeEventListener("abort", abortListener);
      });
    }
    function convertAMQPMesage(data) {
      const rawMessage = data.getRawAmqpMessage();
      const receivedEventData = {
        body: data.body,
        properties: data.properties,
        offset: data.offset,
        sequenceNumber: data.sequenceNumber,
        enqueuedTimeUtc: data.enqueuedTimeUtc,
        partitionKey: data.partitionKey,
        systemProperties: data.systemProperties,
        getRawAmqpMessage() {
          return rawMessage;
        }
      };
      if (data.correlationId != null) {
        receivedEventData.correlationId = data.correlationId;
      }
      if (data.contentType != null) {
        receivedEventData.contentType = data.contentType;
      }
      if (data.messageId != null) {
        receivedEventData.messageId = data.messageId;
      }
      return receivedEventData;
    }
    function setEventProps(eventProps, data) {
      eventProps.sequenceNumber = data.lastSequenceNumber;
      eventProps.enqueuedOn = data.lastEnqueuedTime;
      eventProps.offset = data.lastEnqueuedOffset;
      eventProps.retrievedOn = data.retrievalTime;
    }
    function clearHandlers(obj) {
      obj._onError = void 0;
    }
    function onMessage(context, obj, queue, options) {
      if (!context.message) {
        return;
      }
      const data = fromRheaMessage(context.message, !!options.skipParsingBodyAsJson);
      const receivedEventData = convertAMQPMesage(data);
      obj.checkpoint = receivedEventData.sequenceNumber;
      if (options.trackLastEnqueuedEventProperties) {
        setEventProps(obj.lastEnqueuedEventProperties, data);
      }
      queue.push(receivedEventData);
    }
    function onError(context, obj, receiver, logger3) {
      const rheaReceiver = receiver || context.receiver;
      const amqpError = rheaReceiver === null || rheaReceiver === void 0 ? void 0 : rheaReceiver.error;
      logger3.verbose(`'receiver_error' event occurred: ${logObj(amqpError)}`);
      if (obj._onError && amqpError) {
        const error = coreAmqp.translate(amqpError);
        logErrorStackTrace(error);
        obj._onError(error);
      }
    }
    function onSessionError(context, obj, logger3) {
      var _a;
      const sessionError = (_a = context.session) === null || _a === void 0 ? void 0 : _a.error;
      logger3.verbose(`'session_error' event occurred: ${logObj(sessionError)}`);
      if (obj._onError && sessionError) {
        const error = coreAmqp.translate(sessionError);
        logErrorStackTrace(error);
        obj._onError(error);
      }
    }
    async function onClose(context, state, logger3) {
      const rheaReceiver = state.link || context.receiver;
      logger3.verbose(`'receiver_close' event occurred. Value for isItselfClosed on the receiver is: '${rheaReceiver === null || rheaReceiver === void 0 ? void 0 : rheaReceiver.isItselfClosed().toString()}' Value for isConnecting on the session is: '${state.isConnecting}'`);
      if (rheaReceiver && !state.isConnecting) {
        return rheaReceiver.close().catch((err) => {
          logger3.verbose(`error when closing after 'receiver_close' event: ${logObj(err)}`);
        });
      }
    }
    async function onSessionClose(context, state, logger3) {
      const rheaReceiver = state.link || context.receiver;
      logger3.verbose(`'session_close' event occurred. Value for isSessionItselfClosed on the session is: '${rheaReceiver === null || rheaReceiver === void 0 ? void 0 : rheaReceiver.isSessionItselfClosed().toString()}' Value for isConnecting on the session is: '${state.isConnecting}'`);
      if (rheaReceiver && !state.isConnecting) {
        return rheaReceiver.close().catch((err) => {
          logger3.verbose(`error when closing after 'session_close' event: ${logObj(err)}`);
        });
      }
    }
    function createRheaOptions(consumerId, name, address, obj, state, queue, eventPosition, logger3, options) {
      const rheaOptions = {
        name,
        autoaccept: true,
        target: consumerId,
        source: {
          address
        },
        credit_window: 0,
        properties: {
          [receiverIdPropertyName]: consumerId
        },
        onClose: (context) => onClose(context, state, logger3),
        onSessionClose: (context) => onSessionClose(context, state, logger3),
        onError: (context) => onError(context, obj, state.link, logger3),
        onMessage: (context) => onMessage(context, obj, queue, options),
        onSessionError: (context) => onSessionError(context, obj, logger3)
      };
      const ownerLevel = options.ownerLevel;
      if (typeof ownerLevel === "number") {
        rheaOptions.properties[coreAmqp.Constants.attachEpoch] = rheaPromise.types.wrap_long(ownerLevel);
      }
      if (options.trackLastEnqueuedEventProperties) {
        rheaOptions.desired_capabilities = coreAmqp.Constants.enableReceiverRuntimeMetricName;
      }
      const filterClause = getEventPositionFilter(obj.checkpoint > -1 ? { sequenceNumber: obj.checkpoint } : eventPosition);
      rheaOptions.source.filter = {
        "apache.org:selector-filter:string": rheaPromise.types.wrap_described(filterClause, 77567109365764)
      };
      return rheaOptions;
    }
    async function setupLink(consumerId, ctx, name, address, obj, state, queue, eventPosition, logger3, options, abortSignal) {
      const rheaOptions = createRheaOptions(consumerId, name, address, obj, state, queue, eventPosition, logger3, options);
      logger3.verbose(`trying to be created with options ${logObj(rheaOptions)}`);
      state.link = await ctx.connection.createReceiver(Object.assign(Object.assign({}, rheaOptions), { abortSignal }));
      state.isConnecting = false;
      logger3.verbose("is created successfully");
      ctx.receivers[name] = obj;
    }
    function addCredits(receiver, creditsToAdd) {
      if (creditsToAdd > 0) {
        receiver === null || receiver === void 0 ? void 0 : receiver.addCredit(creditsToAdd);
      }
    }
    var tracingClient = coreTracing.createTracingClient({
      namespace: "Microsoft.EventHub",
      packageName: packageJsonInfo.name,
      packageVersion: packageJsonInfo.version
    });
    function toSpanOptions(eventHubConfig, operation, spanKind) {
      const propertyName = operation === "process" || operation === "receive" ? "messaging.source.name" : "messaging.destination.name";
      const spanAttributes = {
        "messaging.system": "eventhubs",
        [propertyName]: eventHubConfig.entityPath,
        "net.peer.name": eventHubConfig.host
      };
      if (operation) {
        spanAttributes["messaging.operation"] = operation;
      }
      const spanOptions = {
        spanAttributes
      };
      if (spanKind) {
        spanOptions.spanKind = spanKind;
      }
      return spanOptions;
    }
    var TRACEPARENT_PROPERTY = "Diagnostic-Id";
    function instrumentEventData(eventData, options, entityPath, host, operation) {
      var _a, _b;
      const props = isAmqpAnnotatedMessage(eventData) ? eventData.applicationProperties : eventData.properties;
      const previouslyInstrumented = Boolean(props === null || props === void 0 ? void 0 : props[TRACEPARENT_PROPERTY]);
      if (previouslyInstrumented) {
        return { event: eventData, spanContext: void 0 };
      }
      const { span: messageSpan, updatedOptions } = tracingClient.startSpan("message", options, toSpanOptions({ entityPath, host }, operation, "producer"));
      try {
        if (!messageSpan.isRecording()) {
          return {
            event: eventData,
            spanContext: void 0
          };
        }
        const traceParent = tracingClient.createRequestHeaders((_a = updatedOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)["traceparent"];
        if (traceParent) {
          const copiedProps = Object.assign({}, props);
          if (isAmqpAnnotatedMessage(eventData)) {
            eventData = Object.assign(Object.assign({}, eventData), { applicationProperties: copiedProps });
          } else {
            eventData = Object.assign(Object.assign({}, eventData), { properties: copiedProps });
          }
          copiedProps[TRACEPARENT_PROPERTY] = traceParent;
        }
        return {
          event: eventData,
          spanContext: (_b = updatedOptions.tracingOptions) === null || _b === void 0 ? void 0 : _b.tracingContext
        };
      } finally {
        messageSpan.end();
      }
    }
    function extractSpanContextFromEventData(eventData) {
      if (!eventData.properties || !eventData.properties[TRACEPARENT_PROPERTY]) {
        return;
      }
      const diagnosticId = eventData.properties[TRACEPARENT_PROPERTY];
      return tracingClient.parseTraceparentHeader(diagnosticId);
    }
    var PartitionPump = class {
      constructor(_context, partitionProcessor, _startPosition, options) {
        this._context = _context;
        this._startPosition = _startPosition;
        this._isReceiving = false;
        this._isStopped = false;
        this._partitionProcessor = partitionProcessor;
        this._processorOptions = options;
        this._abortController = new abortController.AbortController();
      }
      get isReceiving() {
        return this._isReceiving;
      }
      async start() {
        this._isReceiving = true;
        try {
          await this._partitionProcessor.initialize();
        } catch (err) {
          this._partitionProcessor.processError(err);
        }
        this._receiveEvents(this._partitionProcessor.partitionId);
        logger2.info(`Successfully started the receiver for partition "${this._partitionProcessor.partitionId}".`);
      }
      /**
       * Creates a new `PartitionReceiver` and replaces any existing receiver.
       * @param partitionId - The partition the receiver should read messages from.
       * @param lastSeenSequenceNumber - The sequence number to begin receiving messages from (exclusive).
       * If `-1`, then the PartitionPump's startPosition will be used instead.
       */
      _setOrReplaceReceiver(partitionId, lastSeenSequenceNumber) {
        const currentEventPosition = lastSeenSequenceNumber >= 0 ? {
          sequenceNumber: lastSeenSequenceNumber,
          isInclusive: false
        } : this._startPosition;
        this._receiver = createReceiver(this._context, this._partitionProcessor.consumerGroup, this._partitionProcessor.eventProcessorId, partitionId, currentEventPosition, {
          ownerLevel: this._processorOptions.ownerLevel,
          trackLastEnqueuedEventProperties: this._processorOptions.trackLastEnqueuedEventProperties,
          retryOptions: this._processorOptions.retryOptions,
          skipParsingBodyAsJson: this._processorOptions.skipParsingBodyAsJson,
          prefetchCount: this._processorOptions.prefetchCount
        });
        return this._receiver;
      }
      async _receiveEvents(partitionId) {
        let lastSeenSequenceNumber = -1;
        let receiver = this._setOrReplaceReceiver(partitionId, lastSeenSequenceNumber);
        while (this._isReceiving) {
          try {
            if (receiver.isClosed) {
              receiver = this._setOrReplaceReceiver(partitionId, lastSeenSequenceNumber);
            }
            const receivedEvents = await receiver.receiveBatch(this._processorOptions.maxBatchSize, this._processorOptions.maxWaitTimeInSeconds, this._abortController.signal);
            if (this._processorOptions.trackLastEnqueuedEventProperties && receiver.lastEnqueuedEventProperties) {
              this._partitionProcessor.lastEnqueuedEventProperties = receiver.lastEnqueuedEventProperties;
            }
            if (!this._isReceiving) {
              return;
            }
            if (receivedEvents.length) {
              lastSeenSequenceNumber = receivedEvents[receivedEvents.length - 1].sequenceNumber;
            }
            await tracingClient.withSpan("PartitionPump.process", {}, () => this._partitionProcessor.processEvents(receivedEvents), toProcessingSpanOptions(receivedEvents, this._context.config));
          } catch (err) {
            if (!this._isReceiving) {
              return;
            }
            logger2.warning(`An error was thrown while receiving or processing events on partition "${this._partitionProcessor.partitionId}"`);
            logErrorStackTrace(err);
            try {
              await this._partitionProcessor.processError(err);
            } catch (errorFromUser) {
              logger2.verbose("An error was thrown by user's processError method: ", errorFromUser);
            }
            if (typeof err !== "object" || !err.retryable) {
              try {
                if (err.code === "ReceiverDisconnectedError") {
                  return await this.stop(exports.CloseReason.OwnershipLost);
                }
                return await this.stop(exports.CloseReason.Shutdown);
              } catch (errorFromStop) {
                logger2.verbose(`An error occurred while closing the receiver with reason ${exports.CloseReason.Shutdown}: `, errorFromStop);
              }
            }
          }
        }
      }
      async stop(reason) {
        var _a;
        if (this._isStopped) {
          return;
        }
        this._isStopped = true;
        this._isReceiving = false;
        try {
          this._abortController.abort();
          await ((_a = this._receiver) === null || _a === void 0 ? void 0 : _a.close());
          await this._partitionProcessor.close(reason);
        } catch (err) {
          logger2.warning(`An error occurred while closing the receiver: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`);
          logErrorStackTrace(err);
          this._partitionProcessor.processError(err);
          throw err;
        }
      }
    };
    function toProcessingSpanOptions(receivedEvents, eventHubProperties) {
      const spanLinks = [];
      for (const receivedEvent of receivedEvents) {
        const tracingContext = extractSpanContextFromEventData(receivedEvent);
        if (tracingContext) {
          spanLinks.push({
            tracingContext,
            attributes: {
              enqueuedTime: receivedEvent.enqueuedTimeUtc.getTime()
            }
          });
        }
      }
      return Object.assign({ spanLinks, spanKind: "consumer" }, toSpanOptions(eventHubProperties, "process"));
    }
    var PumpManagerImpl = class {
      constructor(eventProcessorName, eventProcessorOptions) {
        this._partitionIdToPumps = {};
        this._eventProcessorName = eventProcessorName;
        this._options = eventProcessorOptions;
      }
      /**
       * Returns a list of partitionIds that are actively receiving messages.
       */
      receivingFromPartitions() {
        return Object.keys(this._partitionIdToPumps).filter((id) => {
          const pump = this._partitionIdToPumps[id];
          return Boolean(pump && pump.isReceiving);
        });
      }
      /**
       * Indicates whether the pump manager is actively receiving events from a given partition.
       * @internal
       */
      isReceivingFromPartition(partitionId) {
        const pump = this._partitionIdToPumps[partitionId];
        return Boolean(pump && pump.isReceiving);
      }
      /**
       * Creates and starts a PartitionPump.
       * @param startPosition - The position in the partition to start reading from.
       * @param connectionContext - The ConnectionContext to forward to the PartitionPump.
       * @param partitionProcessor - The PartitionProcessor to forward to the PartitionPump.
       */
      async createPump(startPosition, connectionContext, partitionProcessor, abortSignal) {
        const partitionId = partitionProcessor.partitionId;
        if (abortSignal.aborted) {
          logger2.verbose(`${this._eventProcessorName}] The subscription was closed before creating the pump for partition ${partitionId}.`);
          return;
        }
        const existingPump = this._partitionIdToPumps[partitionId];
        if (existingPump) {
          if (existingPump.isReceiving) {
            logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] The existing pump is running.`);
            return;
          }
          logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] The existing pump is not running.`);
          await this.removePump(partitionId, exports.CloseReason.OwnershipLost);
        }
        logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] Creating a new pump.`);
        const pump = new PartitionPump(connectionContext, partitionProcessor, startPosition, this._options);
        try {
          this._partitionIdToPumps[partitionId] = pump;
          await pump.start();
        } catch (err) {
          logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] An error occured while adding/updating a pump: ${err}`);
          logErrorStackTrace(err);
        }
      }
      /**
       * Stop a PartitionPump and removes it from the internal map.
       * @param partitionId - The partitionId to remove the associated PartitionPump from.
       * @param reason - The reason for removing the pump.
       */
      async removePump(partitionId, reason) {
        try {
          const pump = this._partitionIdToPumps[partitionId];
          if (pump) {
            delete this._partitionIdToPumps[partitionId];
            logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] Stopping the pump.`);
            await pump.stop(reason);
          } else {
            logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] No pump was found to remove.`);
          }
        } catch (err) {
          logger2.verbose(`[${this._eventProcessorName}] [${partitionId}] An error occured while removing a pump: ${err}`);
          logErrorStackTrace(err);
        }
      }
      /**
       * Stops all PartitionPumps and removes them from the internal map.
       * @param reason - The reason for removing the pump.
       */
      async removeAllPumps(reason) {
        const partitionIds = Object.keys(this._partitionIdToPumps);
        logger2.verbose(`[${this._eventProcessorName}] Removing all pumps due to reason ${reason}.`);
        const tasks = [];
        for (const partitionId of partitionIds) {
          const pump = this._partitionIdToPumps[partitionId];
          if (pump) {
            tasks.push(pump.stop(reason));
          }
        }
        try {
          await Promise.all(tasks);
        } catch (err) {
          logger2.verbose(`[${this._eventProcessorName}] An error occured while removing all pumps: ${err}`);
          logErrorStackTrace(err);
        } finally {
          this._partitionIdToPumps = {};
        }
      }
    };
    async function delayWithoutThrow(delayInMs, abortSignal) {
      try {
        await coreAmqp.delay(delayInMs, abortSignal);
      } catch (_a) {
      }
    }
    var EventProcessor = class {
      /**
       * @param consumerGroup - The name of the consumer group from which you want to process events.
       * @param eventHubClient - An instance of `EventHubClient` that was created for the Event Hub instance.
       * @param PartitionProcessorClass - A user-provided class that extends the `PartitionProcessor` class.
       * This class will be responsible for processing and checkpointing events.
       * @param checkpointStore - An instance of `CheckpointStore`. See &commat;azure/eventhubs-checkpointstore-blob for an implementation.
       * For production, choose an implementation that will store checkpoints and partition ownership details to a durable store.
       * @param options - A set of options to configure the Event Processor
       * - `maxBatchSize`         : The max size of the batch of events passed each time to user code for processing.
       * - `maxWaitTimeInSeconds` : The maximum amount of time to wait to build up the requested message count before
       * passing the data to user code for processing. If not provided, it defaults to 60 seconds.
       */
      constructor(_consumerGroup, _context, _subscriptionEventHandlers, _checkpointStore, options) {
        this._consumerGroup = _consumerGroup;
        this._context = _context;
        this._subscriptionEventHandlers = _subscriptionEventHandlers;
        this._checkpointStore = _checkpointStore;
        this._isRunning = false;
        if (options.ownerId) {
          this._id = options.ownerId;
          logger2.verbose(`Starting event processor with ID ${this._id}`);
        } else {
          this._id = getRandomName();
          logger2.verbose(`Starting event processor with autogenerated ID ${this._id}`);
        }
        this._eventHubName = this._context.config.entityPath;
        this._fullyQualifiedNamespace = this._context.config.host;
        this._processorOptions = options;
        this._pumpManager = options.pumpManager || new PumpManagerImpl(this._id, this._processorOptions);
        this._processingTarget = options.processingTarget;
        this._loopIntervalInMs = options.loopIntervalInMs;
        this._loadBalancingStrategy = options.loadBalancingStrategy;
      }
      /**
       * The unique identifier for the EventProcessor.
       */
      get id() {
        return this._id;
      }
      _createPartitionOwnershipRequest(partitionOwnershipMap, partitionIdToClaim) {
        const previousPartitionOwnership = partitionOwnershipMap.get(partitionIdToClaim);
        const partitionOwnership = {
          ownerId: this._id,
          partitionId: partitionIdToClaim,
          fullyQualifiedNamespace: this._fullyQualifiedNamespace,
          consumerGroup: this._consumerGroup,
          eventHubName: this._eventHubName,
          etag: previousPartitionOwnership ? previousPartitionOwnership.etag : void 0
        };
        return partitionOwnership;
      }
      /*
       * Claim ownership of the given partition if it's available
       */
      async _claimOwnership(ownershipRequest, abortSignal) {
        if (abortSignal.aborted) {
          logger2.verbose(`[${this._id}] Subscription was closed before claiming ownership of ${ownershipRequest.partitionId}.`);
          return;
        }
        logger2.info(`[${this._id}] Attempting to claim ownership of partition ${ownershipRequest.partitionId}.`);
        try {
          const claimedOwnerships = await this._checkpointStore.claimOwnership([ownershipRequest]);
          if (!claimedOwnerships.length) {
            return;
          }
          logger2.info(`[${this._id}] Successfully claimed ownership of partition ${ownershipRequest.partitionId}.`);
          await this._startPump(ownershipRequest.partitionId, abortSignal);
        } catch (err) {
          logger2.warning(`[${this._id}] Failed to claim ownership of partition ${ownershipRequest.partitionId}`);
          logErrorStackTrace(err);
          await this._handleSubscriptionError(err);
        }
      }
      async _startPump(partitionId, abortSignal) {
        if (abortSignal.aborted) {
          logger2.verbose(`[${this._id}] The subscription was closed before starting to read from ${partitionId}.`);
          return;
        }
        if (this._pumpManager.isReceivingFromPartition(partitionId)) {
          logger2.verbose(`[${this._id}] There is already an active partitionPump for partition "${partitionId}", skipping pump creation.`);
          return;
        }
        logger2.verbose(`[${this._id}] [${partitionId}] Calling user-provided PartitionProcessorFactory.`);
        const partitionProcessor = new PartitionProcessor(this._subscriptionEventHandlers, this._checkpointStore, {
          fullyQualifiedNamespace: this._fullyQualifiedNamespace,
          eventHubName: this._eventHubName,
          consumerGroup: this._consumerGroup,
          partitionId,
          eventProcessorId: this._id
        });
        const eventPosition = await this._getStartingPosition(partitionId);
        await this._pumpManager.createPump(eventPosition, this._context, partitionProcessor, abortSignal);
        logger2.verbose(`[${this._id}] PartitionPump created successfully.`);
      }
      async _getStartingPosition(partitionIdToClaim) {
        const availableCheckpoints = await this._checkpointStore.listCheckpoints(this._fullyQualifiedNamespace, this._eventHubName, this._consumerGroup);
        const validCheckpoints = availableCheckpoints.filter((chk) => chk.partitionId === partitionIdToClaim);
        if (validCheckpoints.length > 0) {
          return { offset: validCheckpoints[0].offset };
        }
        logger2.verbose(`No checkpoint found for partition ${partitionIdToClaim}. Looking for fallback.`);
        return getStartPosition(partitionIdToClaim, this._processorOptions.startPosition);
      }
      async _runLoopForSinglePartition(partitionId, abortSignal) {
        while (!abortSignal.aborted) {
          try {
            await this._startPump(partitionId, abortSignal);
          } catch (err) {
            logger2.warning(`[${this._id}] An error occured within the EventProcessor loop: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`);
            logErrorStackTrace(err);
            await this._handleSubscriptionError(err);
          } finally {
            logger2.verbose(`[${this._id}] Pausing the EventProcessor loop for ${this._loopIntervalInMs} ms.`);
            await delayWithoutThrow(this._loopIntervalInMs, abortSignal);
          }
        }
        this._isRunning = false;
      }
      /**
       * Every loop to this method will result in this EventProcessor owning at most one new partition.
       *
       * The load is considered balanced when no active EventProcessor owns 2 partitions more than any other active
       * EventProcessor. Given that each invocation to this method results in ownership claim of at most one partition,
       * this algorithm converges gradually towards a steady state.
       *
       * When a new partition is claimed, this method is also responsible for starting a partition pump that creates an
       * EventHubConsumer for processing events from that partition.
       */
      async _runLoopWithLoadBalancing(loadBalancingStrategy, abortSignal) {
        let cancelLoopResolver;
        const cancelLoopPromise = new Promise((resolve) => {
          cancelLoopResolver = resolve;
          if (abortSignal.aborted) {
            resolve();
            return;
          }
          abortSignal.addEventListener("abort", resolve);
        });
        while (!abortSignal.aborted) {
          const iterationStartTimeInMs = Date.now();
          try {
            const { partitionIds } = await this._context.managementSession.getEventHubProperties({
              abortSignal
            });
            await this._performLoadBalancing(loadBalancingStrategy, partitionIds, abortSignal);
          } catch (err) {
            logger2.warning(`[${this._id}] An error occurred within the EventProcessor loop: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`);
            logErrorStackTrace(err);
            await Promise.race([this._handleSubscriptionError(err), cancelLoopPromise]);
          } finally {
            const iterationDeltaInMs = Date.now() - iterationStartTimeInMs;
            const delayDurationInMs = Math.max(this._loopIntervalInMs - iterationDeltaInMs, 0);
            logger2.verbose(`[${this._id}] Pausing the EventProcessor loop for ${delayDurationInMs} ms.`);
            await delayWithoutThrow(delayDurationInMs, abortSignal);
          }
        }
        if (cancelLoopResolver) {
          abortSignal.removeEventListener("abort", cancelLoopResolver);
        }
        this._isRunning = false;
      }
      async _performLoadBalancing(loadBalancingStrategy, partitionIds, abortSignal) {
        if (abortSignal.aborted)
          throw new abortController.AbortError("The operation was aborted.");
        const partitionOwnership = await this._checkpointStore.listOwnership(this._fullyQualifiedNamespace, this._eventHubName, this._consumerGroup);
        if (abortSignal.aborted)
          throw new abortController.AbortError("The operation was aborted.");
        const { partitionOwnershipMap, partitionsToClaim } = computePartitionsToClaim({
          id: this._id,
          isReceivingFromPartition: (partitionId) => this._pumpManager.isReceivingFromPartition(partitionId),
          loadBalancingStrategy,
          partitionIds,
          partitionOwnership
        });
        for (const partitionToClaim of partitionsToClaim) {
          const partitionOwnershipRequest = this._createPartitionOwnershipRequest(partitionOwnershipMap, partitionToClaim);
          await this._claimOwnership(partitionOwnershipRequest, abortSignal);
        }
      }
      /**
       * This is called when there are errors that are not specific to a partition (ex: load balancing)
       */
      async _handleSubscriptionError(err) {
        if (err.name === "AbortError") {
          return;
        }
        if (this._subscriptionEventHandlers.processError) {
          try {
            await this._subscriptionEventHandlers.processError(err, {
              fullyQualifiedNamespace: this._fullyQualifiedNamespace,
              eventHubName: this._eventHubName,
              consumerGroup: this._consumerGroup,
              partitionId: "",
              updateCheckpoint: async () => {
              }
            });
          } catch (errorFromUser) {
            logger2.verbose(`[${this._id}] An error was thrown from the user's processError handler: ${errorFromUser}`);
          }
        }
      }
      /**
       * Starts the `EventProcessor`. Based on the number of instances of `EventProcessor` that are running for the
       * same consumer group, the partitions are distributed among these instances to process events.
       *
       * For each partition, the user provided `PartitionProcessor` is instantiated.
       *
       * Subsequent calls to start will be ignored if this event processor is already running.
       * Calling `start()` after `stop()` is called will restart this event processor.
       *
       */
      start() {
        if (this._isRunning) {
          logger2.verbose(`[${this._id}] Attempted to start an already running EventProcessor.`);
          return;
        }
        this._isRunning = true;
        this._abortController = new abortController.AbortController();
        logger2.verbose(`[${this._id}] Starting an EventProcessor.`);
        if (this._processingTarget) {
          logger2.verbose(`[${this._id}] Single partition target: ${this._processingTarget}`);
          this._loopTask = this._runLoopForSinglePartition(this._processingTarget, this._abortController.signal);
        } else {
          logger2.verbose(`[${this._id}] Multiple partitions, using load balancer`);
          this._loopTask = this._runLoopWithLoadBalancing(this._loadBalancingStrategy, this._abortController.signal);
        }
      }
      isRunning() {
        return this._isRunning;
      }
      /**
       * Stops processing events for all partitions owned by this event processor.
       * All `PartitionProcessor` will be shutdown and any open resources will be closed.
       *
       * Subsequent calls to stop will be ignored if the event processor is not running.
       *
       */
      async stop() {
        logger2.verbose(`[${this._id}] Stopping an EventProcessor.`);
        if (this._abortController) {
          this._abortController.abort();
        }
        try {
          await this._pumpManager.removeAllPumps(exports.CloseReason.Shutdown);
          if (this._loopTask) {
            await this._loopTask;
          }
        } catch (err) {
          logger2.verbose(`[${this._id}] An error occured while stopping the EventProcessor: ${err}`);
        } finally {
          logger2.verbose(`[${this._id}] EventProcessor stopped.`);
        }
        if (this._processingTarget) {
          logger2.verbose(`[${this._id}] No partitions owned, skipping abandoning.`);
        } else {
          await this.abandonPartitionOwnerships();
        }
      }
      async abandonPartitionOwnerships() {
        logger2.verbose(`[${this._id}] Abandoning owned partitions`);
        const allOwnerships = await this._checkpointStore.listOwnership(this._fullyQualifiedNamespace, this._eventHubName, this._consumerGroup);
        const ourOwnerships = allOwnerships.filter((ownership) => ownership.ownerId === this._id);
        for (const ownership of ourOwnerships) {
          ownership.ownerId = "";
        }
        return this._checkpointStore.claimOwnership(ourOwnerships);
      }
    };
    function isAbandoned(ownership) {
      return ownership.ownerId === "";
    }
    function getStartPosition(partitionIdToClaim, startPositions) {
      if (startPositions == null) {
        return latestEventPosition;
      }
      if (isEventPosition(startPositions)) {
        return startPositions;
      }
      const startPosition = startPositions[partitionIdToClaim];
      if (startPosition == null) {
        return latestEventPosition;
      }
      return startPosition;
    }
    function computePartitionsToClaim(inputs) {
      const { partitionOwnership, id, isReceivingFromPartition, loadBalancingStrategy, partitionIds } = inputs;
      const partitionOwnershipMap = /* @__PURE__ */ new Map();
      const nonAbandonedPartitionOwnershipMap = /* @__PURE__ */ new Map();
      const partitionsToRenew = [];
      for (const ownership of partitionOwnership) {
        partitionOwnershipMap.set(ownership.partitionId, ownership);
        if (!isAbandoned(ownership)) {
          nonAbandonedPartitionOwnershipMap.set(ownership.partitionId, ownership);
        }
        if (ownership.ownerId === id && isReceivingFromPartition(ownership.partitionId)) {
          partitionsToRenew.push(ownership.partitionId);
        }
      }
      const partitionsToClaim = loadBalancingStrategy.getPartitionsToClaim(id, nonAbandonedPartitionOwnershipMap, partitionIds);
      partitionsToClaim.push(...partitionsToRenew);
      return {
        partitionsToClaim: new Set(partitionsToClaim),
        partitionOwnershipMap
      };
    }
    function parseEventHubConnectionString(connectionString) {
      const parsedResult = coreAmqp.parseConnectionString(connectionString);
      validateProperties(parsedResult.Endpoint, parsedResult.SharedAccessSignature, parsedResult.SharedAccessKey, parsedResult.SharedAccessKeyName);
      const output = {
        fullyQualifiedNamespace: (parsedResult.Endpoint.match(".*://([^/]*)") || [])[1],
        endpoint: parsedResult.Endpoint
      };
      if (parsedResult.EntityPath) {
        output.eventHubName = parsedResult.EntityPath;
      }
      if (parsedResult.SharedAccessSignature) {
        output.sharedAccessSignature = parsedResult.SharedAccessSignature;
      }
      if (parsedResult.SharedAccessKey && parsedResult.SharedAccessKeyName) {
        output.sharedAccessKey = parsedResult.SharedAccessKey;
        output.sharedAccessKeyName = parsedResult.SharedAccessKeyName;
      }
      return output;
    }
    function validateProperties(endpoint, sharedAccessSignature, sharedAccessKey, sharedAccessKeyName) {
      if (!endpoint) {
        throw new Error("Connection string should have an Endpoint key.");
      }
      if (sharedAccessSignature) {
        if (sharedAccessKey || sharedAccessKeyName) {
          throw new Error("Connection string cannot have both SharedAccessSignature and SharedAccessKey keys.");
        }
      } else if (sharedAccessKey && !sharedAccessKeyName) {
        throw new Error("Connection string with SharedAccessKey should have SharedAccessKeyName.");
      } else if (!sharedAccessKey && sharedAccessKeyName) {
        throw new Error("Connection string with SharedAccessKeyName should have SharedAccessKey as well.");
      }
    }
    function throwErrorIfConnectionClosed(context) {
      if (context && context.wasConnectionCloseCalled) {
        const errorMessage = "The underlying AMQP connection is closed.";
        const error = new Error(errorMessage);
        logger2.warning(`[${context.connectionId}] ${error.name}: ${error.message}`);
        logErrorStackTrace(error);
        throw error;
      }
    }
    function throwTypeErrorIfParameterMissing(connectionId, methodName, parameterName, parameterValue) {
      if (!coreUtil.isDefined(parameterValue)) {
        const error = new TypeError(`${methodName} called without required argument "${parameterName}"`);
        logger2.warning(`[${connectionId}] ${error.name}: ${error.message}`);
        logErrorStackTrace(error);
        throw error;
      }
    }
    var ConditionErrorNameMapper;
    (function(ConditionErrorNameMapper2) {
      ConditionErrorNameMapper2["com.microsoft:out-of-order-sequence"] = "SequenceOutOfOrderError";
      ConditionErrorNameMapper2["com.microsoft:producer-epoch-stolen"] = "ProducerDisconnectedError";
    })(ConditionErrorNameMapper || (ConditionErrorNameMapper = {}));
    var nonRetryableErrors = /* @__PURE__ */ new Set([
      "ProducerDisconnectedError",
      "SequenceOutOfOrderError"
    ]);
    function translateError(err) {
      const translatedError = coreAmqp.translate(err);
      if (!coreAmqp.isMessagingError(translatedError) || !rheaPromise.isAmqpError(err) || translatedError.code) {
        return translatedError;
      }
      const amqpError = err;
      const condition = amqpError.condition;
      if (!condition) {
        return translatedError;
      }
      translatedError.code = ConditionErrorNameMapper[condition];
      if (translatedError.code) {
        translatedError.retryable = !nonRetryableErrors.has(translatedError.code);
      }
      return translatedError;
    }
    var idempotentAlreadyPublished = "These events have already been successfully published. When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again.";
    var idempotentSomeAlreadyPublished = "1 or more of these events have already been successfully published. When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again.";
    function validateProducerPartitionSettings({ enableIdempotentRetries, partitionId, partitionKey }) {
      if (enableIdempotentRetries && (coreUtil.isDefined(partitionKey) || !coreUtil.isDefined(partitionId))) {
        throw new Error(`The "partitionId" must be supplied and "partitionKey" must not be provided when the EventHubProducerClient has "enableIdempotentRetries" set to true.`);
      }
      if (coreUtil.isDefined(partitionId) && coreUtil.isDefined(partitionKey)) {
        throw new Error(`The partitionId (${partitionId}) and partitionKey (${partitionKey}) cannot both be specified.`);
      }
    }
    var ManagementClient = class {
      /**
       * Instantiates the management client.
       * @param context - The connection context.
       * @param address - The address for the management endpoint. For IotHub it will be
       * `/messages/events/$management`.
       */
      constructor(context, { address, audience } = {}) {
        this.managementLock = getRandomName(coreAmqp.Constants.managementRequestKey);
        this.replyTo = getRandomName();
        this.address = address !== null && address !== void 0 ? address : coreAmqp.Constants.management;
        this.audience = audience !== null && audience !== void 0 ? audience : context.config.getManagementAudience();
        this._context = context;
        const logPrefix = createManagementLogPrefix(this._context.connectionId);
        this.logger = createSimpleLogger(logger2, logPrefix);
        this.entityPath = context.config.entityPath;
      }
      /**
       * Gets the security token for the management application properties.
       * @internal
       */
      async getSecurityToken() {
        if (coreAmqp.isSasTokenProvider(this._context.tokenCredential)) {
          const audienceParts = this.audience.split("/");
          if (audienceParts[audienceParts.length - 1] === this.address) {
            audienceParts.pop();
          }
          const audience = audienceParts.join("/");
          return this._context.tokenCredential.getToken(audience);
        }
        return this._context.tokenCredential.getToken(coreAmqp.Constants.aadEventHubsScope);
      }
      /**
       * Provides the eventhub runtime information.
       */
      async getEventHubProperties(options = {}) {
        throwErrorIfConnectionClosed(this._context);
        return tracingClient.withSpan("ManagementClient.getEventHubProperties", options, async (updatedOptions) => {
          try {
            const securityToken = await this.getSecurityToken();
            const request = {
              body: Buffer.from(JSON.stringify([])),
              message_id: getRandomName(),
              reply_to: this.replyTo,
              application_properties: {
                operation: coreAmqp.Constants.readOperation,
                name: this.entityPath,
                type: `${coreAmqp.Constants.vendorString}:${coreAmqp.Constants.eventHub}`,
                security_token: securityToken === null || securityToken === void 0 ? void 0 : securityToken.token
              }
            };
            const info = await this._makeManagementRequest(request, Object.assign(Object.assign({}, updatedOptions), { requestName: "getHubRuntimeInformation" }));
            const runtimeInfo = {
              name: info.name,
              createdOn: new Date(info.created_at),
              partitionIds: info.partition_ids
            };
            logger2.verbose("the hub runtime info is: %O", runtimeInfo);
            return runtimeInfo;
          } catch (error) {
            logger2.warning(`an error occurred while getting the hub runtime information: ${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}`);
            logErrorStackTrace(error);
            throw error;
          }
        }, toSpanOptions(this._context.config));
      }
      /**
       * Provides information about the specified partition.
       * @param partitionId - Partition ID for which partition information is required.
       */
      async getPartitionProperties(partitionId, options = {}) {
        throwErrorIfConnectionClosed(this._context);
        throwTypeErrorIfParameterMissing(this._context.connectionId, "getPartitionProperties", "partitionId", partitionId);
        partitionId = String(partitionId);
        return tracingClient.withSpan("ManagementClient.getPartitionProperties", options, async (updatedOptions) => {
          try {
            const securityToken = await this.getSecurityToken();
            const request = {
              body: Buffer.from(JSON.stringify([])),
              message_id: getRandomName(),
              reply_to: this.replyTo,
              application_properties: {
                operation: coreAmqp.Constants.readOperation,
                name: this.entityPath,
                type: `${coreAmqp.Constants.vendorString}:${coreAmqp.Constants.partition}`,
                partition: `${partitionId}`,
                security_token: securityToken === null || securityToken === void 0 ? void 0 : securityToken.token
              }
            };
            const info = await this._makeManagementRequest(request, Object.assign(Object.assign({}, updatedOptions), { requestName: "getPartitionInformation" }));
            const partitionInfo = {
              beginningSequenceNumber: info.begin_sequence_number,
              eventHubName: info.name,
              lastEnqueuedOffset: info.last_enqueued_offset,
              lastEnqueuedOnUtc: new Date(info.last_enqueued_time_utc),
              lastEnqueuedSequenceNumber: info.last_enqueued_sequence_number,
              partitionId: info.partition,
              isEmpty: info.is_partition_empty
            };
            logger2.verbose("the partition info is: %O.", partitionInfo);
            return partitionInfo;
          } catch (error) {
            logger2.warning(`an error occurred while getting the partition information: ${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}`);
            logErrorStackTrace(error);
            throw error;
          }
        }, toSpanOptions(this._context.config));
      }
      /**
       * Closes the AMQP management session to the Event Hub for this client,
       * returning a promise that will be resolved when disconnection is completed.
       */
      async close() {
        var _a;
        try {
          (_a = this.authLoop) === null || _a === void 0 ? void 0 : _a.stop();
          if (this._isMgmtRequestResponseLinkOpen()) {
            const mgmtLink = this._mgmtReqResLink;
            this._mgmtReqResLink = void 0;
            await mgmtLink.close();
            logger2.info("successfully closed the management session.");
          }
        } catch (err) {
          const msg = `an error occurred while closing the management session: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`;
          logger2.warning(msg);
          logErrorStackTrace(err);
          throw new Error(msg);
        }
      }
      async _init({ abortSignal, timeoutInMs }) {
        const createLink = async () => {
          const rxopt = {
            source: { address: this.address },
            name: this.replyTo,
            target: { address: this.replyTo },
            onSessionError: (context) => {
              const ehError = coreAmqp.translate(context.session.error);
              logger2.verbose("an error occurred on the session for request/response links for $management: %O", ehError);
            }
          };
          const sropt = {
            target: { address: this.address }
          };
          logger2.verbose("creating sender/receiver links with srOpts: %o, receiverOpts: %O.", sropt, rxopt);
          this._mgmtReqResLink = await coreAmqp.RequestResponseLink.create(this._context.connection, sropt, rxopt, { abortSignal });
          this._mgmtReqResLink.sender.on(rheaPromise.SenderEvents.senderError, (context) => {
            const ehError = coreAmqp.translate(context.sender.error);
            logger2.verbose("an error occurred on the $management sender link.. %O", ehError);
          });
          this._mgmtReqResLink.receiver.on(rheaPromise.ReceiverEvents.receiverError, (context) => {
            const ehError = coreAmqp.translate(context.receiver.error);
            logger2.verbose("an error occurred on the $management receiver link.. %O", ehError);
          });
          logger2.verbose("created sender '%s' and receiver '%s' links", this._mgmtReqResLink.sender.name, this._mgmtReqResLink.receiver.name);
        };
        try {
          if (!this._isMgmtRequestResponseLinkOpen()) {
            await this._context.readyToOpenLink();
            this.authLoop = await withAuth(createLink, this._context, this.audience, timeoutInMs, this.logger, { abortSignal });
          }
        } catch (err) {
          const translatedError = coreAmqp.translate(err);
          logger2.warning(`an error occurred while establishing the links: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          logErrorStackTrace(translatedError);
          throw translatedError;
        }
      }
      /**
       * Helper method to make the management request
       * @param request - The AMQP message to send
       * @param options - The options to use when sending a request over a $management link
       */
      async _makeManagementRequest(request, options = {}) {
        const retryOptions = options.retryOptions || {};
        try {
          const abortSignal = options && options.abortSignal;
          const sendOperationPromise = async () => {
            let count = 0;
            const retryTimeoutInMs = getRetryAttemptTimeoutInMs(options.retryOptions);
            let timeTakenByInit = 0;
            if (!this._isMgmtRequestResponseLinkOpen()) {
              logger2.verbose("acquiring lock to get the management req res link.");
              const initOperationStartTime = Date.now();
              try {
                await coreAmqp.defaultCancellableLock.acquire(this.managementLock, () => {
                  const acquireLockEndTime = Date.now();
                  const timeoutInMs = retryTimeoutInMs - (acquireLockEndTime - initOperationStartTime);
                  return this._init({ abortSignal, timeoutInMs });
                }, { abortSignal, timeoutInMs: retryTimeoutInMs });
              } catch (err) {
                const translatedError = coreAmqp.translate(err);
                logger2.warning("an error occurred while creating the link: %s", `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
                logErrorStackTrace(translatedError);
                throw translatedError;
              }
              timeTakenByInit = Date.now() - initOperationStartTime;
            }
            const remainingOperationTimeoutInMs = retryTimeoutInMs - timeTakenByInit;
            const sendRequestOptions = {
              abortSignal: options.abortSignal,
              requestName: options.requestName,
              timeoutInMs: remainingOperationTimeoutInMs
            };
            count++;
            if (count !== 1) {
              request.message_id = getRandomName();
            } else if (!request.message_id) {
              request.message_id = getRandomName();
            }
            return this._mgmtReqResLink.sendRequest(request, sendRequestOptions);
          };
          const config = Object.defineProperties({
            operation: sendOperationPromise,
            operationType: coreAmqp.RetryOperationType.management,
            abortSignal,
            retryOptions
          }, {
            connectionId: {
              enumerable: true,
              get: () => {
                return this._context.connectionId;
              }
            }
          });
          return (await coreAmqp.retry(config)).body;
        } catch (err) {
          const translatedError = coreAmqp.translate(err);
          logger2.warning("an error occurred during send on management request-response link with address: %s", `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          logErrorStackTrace(translatedError);
          throw translatedError;
        }
      }
      _isMgmtRequestResponseLinkOpen() {
        return this._mgmtReqResLink && this._mgmtReqResLink.isOpen();
      }
    };
    function parseEndpoint(endpoint) {
      const hostMatch = endpoint.match(/.*:\/\/([^/]*)/);
      if (!hostMatch) {
        throw new TypeError(`Invalid endpoint missing host: ${endpoint}`);
      }
      const [, host] = hostMatch;
      const [hostname, port] = host.split(":");
      return { host, hostname, port };
    }
    var EventHubConnectionConfig = {
      /**
       * Creates the connection config.
       * @param connectionString - The connection string for a given service like
       * EventHub/ServiceBus.
       * @param path - The name/path of the entity (hub name) to which the
       * connection needs to happen. This will override the EntityPath in the connectionString
       * if present.
       * @returns EventHubConnectionConfig
       */
      create(connectionString, path) {
        const config = coreAmqp.ConnectionConfig.create(connectionString, path);
        if (!config.entityPath) {
          throw new TypeError(`Either provide "path" or the "connectionString": "${connectionString}", must contain EntityPath="<path-to-the-entity>".`);
        }
        return EventHubConnectionConfig.createFromConnectionConfig(config);
      },
      /**
       * Creates an EventHubConnectionConfig from the provided base ConnectionConfig.
       * @param config - The base connection config from which the EventHubConnectionConfig needs to be
       * created.
       * @returns EventHubConnectionConfig
       */
      createFromConnectionConfig(config) {
        coreAmqp.ConnectionConfig.validate(config, { isEntityPathRequired: true });
        config.getManagementAudience = () => {
          return `${config.endpoint}${config.entityPath}/$management`;
        };
        config.getManagementAddress = () => {
          return `${config.entityPath}/$management`;
        };
        config.getSenderAudience = (partitionId) => {
          if (partitionId != void 0) {
            return `${config.endpoint}${config.entityPath}/Partitions/${partitionId}`;
          } else {
            return `${config.endpoint}${config.entityPath}`;
          }
        };
        config.getSenderAddress = (partitionId) => {
          if (partitionId != void 0) {
            return `${config.entityPath}/Partitions/${partitionId}`;
          } else {
            return `${config.entityPath}`;
          }
        };
        config.getReceiverAudience = (partitionId, consumergroup) => {
          if (!consumergroup)
            consumergroup = "$default";
          return `${config.endpoint}${config.entityPath}/ConsumerGroups/${consumergroup}/Partitions/${partitionId}`;
        };
        config.getReceiverAddress = (partitionId, consumergroup) => {
          if (!consumergroup)
            consumergroup = "$default";
          return `${config.entityPath}/ConsumerGroups/${consumergroup}/Partitions/${partitionId}`;
        };
        return config;
      },
      /**
       * Updates the provided EventHubConnectionConfig to use the custom endpoint address.
       * @param config - An existing connection configuration to be updated.
       * @param customEndpointAddress - The custom endpoint address to use.
       */
      setCustomEndpointAddress(config, customEndpointAddress) {
        config.amqpHostname = config.host;
        const { hostname, port } = parseEndpoint(customEndpointAddress);
        config.host = hostname;
        if (port) {
          config.port = parseInt(port, 10);
        }
      },
      /**
       * Validates the properties of connection config.
       * @param config - The connection config to be validated.
       * @returns void
       */
      validate(config) {
        return coreAmqp.ConnectionConfig.validate(config, { isEntityPathRequired: true });
      }
    };
    function getRuntimeInfo() {
      return `NODE-VERSION ${process.version}; ${os__namespace.type()} ${os__namespace.release()}`;
    }
    function isCredential(thing) {
      return coreAuth.isTokenCredential(thing) || coreAuth.isNamedKeyCredential(thing) || coreAuth.isSASCredential(thing);
    }
    var ConnectionContext;
    (function(ConnectionContext2) {
      const userAgent = `azsdk-js-azureeventhubs/${packageJsonInfo.version} (${getRuntimeInfo()})`;
      function getUserAgent(options) {
        const finalUserAgent = options.userAgent ? `${userAgent},${options.userAgent}` : userAgent;
        if (finalUserAgent.length > coreAmqp.Constants.maxUserAgentLength) {
          throw new Error(`The user-agent string cannot be more than ${coreAmqp.Constants.maxUserAgentLength} characters in length.The given user-agent string is: ${finalUserAgent} with length: ${finalUserAgent.length}`);
        }
        return finalUserAgent;
      }
      ConnectionContext2.getUserAgent = getUserAgent;
      function create(config, tokenCredential, options) {
        if (!options)
          options = {};
        config.webSocket = options.webSocketOptions && options.webSocketOptions.webSocket;
        config.webSocketEndpointPath = "$servicebus/websocket";
        config.webSocketConstructorOptions = options.webSocketOptions && options.webSocketOptions.webSocketConstructorOptions;
        const parameters = {
          config,
          // re-enabling this will be a post-GA discussion.
          // dataTransformer: options.dataTransformer,
          isEntityPathRequired: true,
          connectionProperties: {
            product: "MSJSClient",
            userAgent: getUserAgent(options),
            version: packageJsonInfo.version
          }
        };
        const connectionContext = coreAmqp.ConnectionContextBase.create(parameters);
        connectionContext.tokenCredential = tokenCredential;
        connectionContext.wasConnectionCloseCalled = false;
        connectionContext.senders = {};
        connectionContext.receivers = {};
        const mOptions = {
          address: options.managementSessionAddress,
          audience: options.managementSessionAudience
        };
        connectionContext.managementSession = new ManagementClient(connectionContext, mOptions);
        let waitForConnectionRefreshResolve;
        let waitForConnectionRefreshPromise;
        Object.assign(connectionContext, {
          isConnectionClosing() {
            return Boolean(!this.connection.isOpen() && this.connection.isRemoteOpen());
          },
          async readyToOpenLink(optionsArg) {
            if (this.isConnectionClosing()) {
              await this.waitForDisconnectedEvent(optionsArg);
            }
            await this.waitForConnectionReset();
          },
          waitForDisconnectedEvent(optionsArg) {
            return coreUtil.createAbortablePromise((resolve) => {
              logger2.verbose(`[${this.connectionId}] Attempting to reinitialize connection but the connection is in the process of closing. Waiting for the disconnect event before continuing.`);
              this.connection.once(rheaPromise.ConnectionEvents.disconnected, resolve);
            }, optionsArg);
          },
          waitForConnectionReset() {
            if (waitForConnectionRefreshPromise) {
              return waitForConnectionRefreshPromise;
            }
            return Promise.resolve();
          },
          async close() {
            var _a;
            try {
              if (this.connection.isOpen()) {
                await Promise.all(Object.keys(connectionContext.senders).map((name) => {
                  var _a2;
                  return (_a2 = connectionContext.senders[name]) === null || _a2 === void 0 ? void 0 : _a2.close().catch(() => {
                  });
                }));
                await Promise.all(Object.keys(connectionContext.receivers).map((name) => {
                  var _a2;
                  return (_a2 = connectionContext.receivers[name]) === null || _a2 === void 0 ? void 0 : _a2.close().catch(() => {
                  });
                }));
                await this.cbsSession.close();
                await ((_a = this.managementSession) === null || _a === void 0 ? void 0 : _a.close());
                await this.connection.close();
                this.wasConnectionCloseCalled = true;
                logger2.info("Closed the amqp connection '%s' on the client.", this.connectionId);
              }
            } catch (err) {
              const errorDescription = err instanceof Error ? `${err.name}: ${err.message}` : JSON.stringify(err);
              logger2.warning(`An error occurred while closing the connection "${this.connectionId}":
${errorDescription}`);
              logErrorStackTrace(err);
              throw err;
            }
          }
        });
        const onConnectionOpen = () => {
          connectionContext.wasConnectionCloseCalled = false;
          logger2.verbose("[%s] setting 'wasConnectionCloseCalled' property of connection context to %s.", connectionContext.connection.id, connectionContext.wasConnectionCloseCalled);
        };
        const onDisconnected = async (context) => {
          var _a, _b;
          if (waitForConnectionRefreshPromise) {
            return;
          }
          waitForConnectionRefreshPromise = new Promise((resolve) => {
            waitForConnectionRefreshResolve = resolve;
          });
          try {
            logger2.verbose("[%s] 'disconnected' event occurred on the amqp connection.", connectionContext.connection.id);
            if (context.connection && context.connection.error) {
              logger2.verbose("[%s] Accompanying error on the context.connection: %O", connectionContext.connection.id, context.connection && context.connection.error);
            }
            if (context.error) {
              logger2.verbose("[%s] Accompanying error on the context: %O", connectionContext.connection.id, context.error);
            }
            const state = {
              wasConnectionCloseCalled: connectionContext.wasConnectionCloseCalled,
              numSenders: Object.keys(connectionContext.senders).length,
              numReceivers: Object.keys(connectionContext.receivers).length
            };
            logger2.verbose("[%s] Closing all open senders and receivers in the state: %O", connectionContext.connection.id, state);
            connectionContext.connection.removeAllSessions();
            await ((_a = connectionContext.cbsSession) === null || _a === void 0 ? void 0 : _a.close().catch(() => {
            }));
            await ((_b = connectionContext.managementSession) === null || _b === void 0 ? void 0 : _b.close().catch(() => {
            }));
            if (state.numSenders || state.numReceivers) {
              await Promise.all(Object.keys(connectionContext.senders).map((name) => {
                var _a2;
                return (_a2 = connectionContext.senders[name]) === null || _a2 === void 0 ? void 0 : _a2.close().catch(() => {
                });
              }));
              await Promise.all(Object.keys(connectionContext.receivers).map((name) => {
                var _a2;
                return (_a2 = connectionContext.receivers[name]) === null || _a2 === void 0 ? void 0 : _a2.close().catch(() => {
                });
              }));
            }
          } catch (err) {
            logger2.verbose(`[${connectionContext.connectionId}] An error occurred while closing the connection in 'disconnected'. %O`, err);
          }
          try {
            await refreshConnection(connectionContext);
          } catch (err) {
            logger2.verbose(`[${connectionContext.connectionId}] An error occurred while refreshing the connection in 'disconnected'. %O`, err);
          } finally {
            waitForConnectionRefreshResolve();
            waitForConnectionRefreshPromise = void 0;
          }
        };
        const protocolError = async (context) => {
          logger2.verbose("[%s] 'protocol_error' event occurred on the amqp connection.", connectionContext.connection.id);
          if (context.connection && context.connection.error) {
            logger2.verbose("[%s] Accompanying error on the context.connection: %O", connectionContext.connection.id, context.connection && context.connection.error);
          }
          if (context.error) {
            logger2.verbose("[%s] Accompanying error on the context: %O", connectionContext.connection.id, context.error);
          }
        };
        const error = async (context) => {
          logger2.verbose("[%s] 'error' event occurred on the amqp connection.", connectionContext.connection.id);
          if (context.connection && context.connection.error) {
            logger2.verbose("[%s] Accompanying error on the context.connection: %O", connectionContext.connection.id, context.connection && context.connection.error);
          }
          if (context.error) {
            logger2.verbose("[%s] Accompanying error on the context: %O", connectionContext.connection.id, context.error);
          }
        };
        function addConnectionListeners(connection) {
          connection.on(rheaPromise.ConnectionEvents.connectionOpen, onConnectionOpen);
          connection.on(rheaPromise.ConnectionEvents.disconnected, onDisconnected);
          connection.on(rheaPromise.ConnectionEvents.protocolError, protocolError);
          connection.on(rheaPromise.ConnectionEvents.error, error);
        }
        function cleanConnectionContext(context) {
          context.connection.removeListener(rheaPromise.ConnectionEvents.connectionOpen, onConnectionOpen);
          context.connection.removeListener(rheaPromise.ConnectionEvents.disconnected, onDisconnected);
          context.connection.removeListener(rheaPromise.ConnectionEvents.protocolError, protocolError);
          context.connection.removeListener(rheaPromise.ConnectionEvents.error, error);
          return context.connection.close();
        }
        async function refreshConnection(context) {
          const originalConnectionId = context.connectionId;
          try {
            await cleanConnectionContext(context);
          } catch (err) {
            logger2.verbose(`[${context.connectionId}] There was an error closing the connection before reconnecting: %O`, err);
          }
          context.refreshConnection();
          addConnectionListeners(context.connection);
          logger2.verbose(`The connection "${originalConnectionId}" has been updated to "${context.connectionId}".`);
        }
        addConnectionListeners(connectionContext.connection);
        logger2.verbose("[%s] Created connection context successfully.", connectionContext.connectionId);
        return connectionContext;
      }
      ConnectionContext2.create = create;
    })(ConnectionContext || (ConnectionContext = {}));
    function createConnectionContext(hostOrConnectionString, eventHubNameOrOptions, credentialOrOptions, options) {
      let connectionString;
      let config;
      let credential;
      hostOrConnectionString = String(hostOrConnectionString);
      if (!isCredential(credentialOrOptions)) {
        const parsedCS = parseEventHubConnectionString(hostOrConnectionString);
        if (!(parsedCS.eventHubName || typeof eventHubNameOrOptions === "string" && eventHubNameOrOptions)) {
          throw new TypeError(`Either provide "eventHubName" or the "connectionString": "${hostOrConnectionString}", must contain "EntityPath=<your-event-hub-name>".`);
        }
        if (parsedCS.eventHubName && typeof eventHubNameOrOptions === "string" && eventHubNameOrOptions && parsedCS.eventHubName !== eventHubNameOrOptions) {
          throw new TypeError(`The entity path "${parsedCS.eventHubName}" in connectionString: "${hostOrConnectionString}" doesn't match with eventHubName: "${eventHubNameOrOptions}".`);
        }
        connectionString = hostOrConnectionString;
        if (typeof eventHubNameOrOptions !== "string") {
          config = EventHubConnectionConfig.create(connectionString);
          options = eventHubNameOrOptions;
        } else {
          const eventHubName = eventHubNameOrOptions;
          config = EventHubConnectionConfig.create(connectionString, eventHubName);
          options = credentialOrOptions;
        }
        const parsed = parseEventHubConnectionString(connectionString);
        credential = coreAmqp.createSasTokenProvider(parsed);
      } else {
        const eventHubName = eventHubNameOrOptions;
        let host = hostOrConnectionString;
        if (coreAuth.isNamedKeyCredential(credentialOrOptions) || coreAuth.isSASCredential(credentialOrOptions)) {
          credential = coreAmqp.createSasTokenProvider(credentialOrOptions);
        } else {
          credential = credentialOrOptions;
        }
        if (!eventHubName) {
          throw new TypeError(`"eventHubName" is missing`);
        }
        if (!host.endsWith("/"))
          host += "/";
        connectionString = `Endpoint=sb://${host};SharedAccessKeyName=defaultKeyName;SharedAccessKey=defaultKeyValue;EntityPath=${eventHubName}`;
        config = EventHubConnectionConfig.create(connectionString);
      }
      if (options === null || options === void 0 ? void 0 : options.customEndpointAddress) {
        EventHubConnectionConfig.setCustomEndpointAddress(config, options.customEndpointAddress);
      }
      coreAmqp.ConnectionConfig.validate(config);
      return ConnectionContext.create(config, credential, options);
    }
    function getActivePartitionOwnerships(partitionOwnershipMap, expirationIntervalInMs) {
      const activePartitionOwnershipMap = /* @__PURE__ */ new Map();
      partitionOwnershipMap.forEach((partitionOwnership, partitionId) => {
        if (typeof partitionOwnership.lastModifiedTimeInMs === "undefined" || partitionOwnership.lastModifiedTimeInMs === null) {
          return;
        }
        const timeSincePartitionClaimed = Date.now() - partitionOwnership.lastModifiedTimeInMs;
        if (timeSincePartitionClaimed < expirationIntervalInMs && partitionOwnership.ownerId) {
          activePartitionOwnershipMap.set(partitionId, partitionOwnership);
        }
      });
      return activePartitionOwnershipMap;
    }
    function calculateBalancedLoadCounts(ownerToOwnershipMap, partitionIds) {
      const minPartitionsPerOwner = Math.floor(partitionIds.length / ownerToOwnershipMap.size);
      const requiredNumberOfOwnersWithExtraPartition = partitionIds.length % ownerToOwnershipMap.size;
      return {
        minPartitionsPerOwner,
        requiredNumberOfOwnersWithExtraPartition
      };
    }
    function getEventProcessorCounts(minPartitionsPerOwner, ownerToOwnershipMap) {
      const counts = {
        haveRequiredPartitions: 0,
        haveAdditionalPartition: 0,
        haveTooManyPartitions: 0
      };
      for (const ownershipList of ownerToOwnershipMap.values()) {
        const numberOfPartitions = ownershipList.length;
        if (numberOfPartitions === minPartitionsPerOwner) {
          counts.haveRequiredPartitions++;
        } else if (numberOfPartitions === minPartitionsPerOwner + 1) {
          counts.haveAdditionalPartition++;
        } else if (numberOfPartitions > minPartitionsPerOwner + 1) {
          counts.haveTooManyPartitions++;
        }
      }
      return counts;
    }
    function isLoadBalanced(requiredNumberOfOwnersWithExtraPartition, totalExpectedEventProcessors, { haveAdditionalPartition, haveRequiredPartitions }) {
      return haveAdditionalPartition === requiredNumberOfOwnersWithExtraPartition && haveRequiredPartitions + haveAdditionalPartition === totalExpectedEventProcessors;
    }
    function getNumberOfPartitionsToClaim(minRequiredPartitionCount, requiredNumberOfOwnersWithExtraPartition, numPartitionsOwnedByUs, { haveAdditionalPartition, haveTooManyPartitions }) {
      let actualRequiredPartitionCount = minRequiredPartitionCount;
      if (requiredNumberOfOwnersWithExtraPartition > 0 && // Eventually the `haveTooManyPartitions` will decay into `haveAdditionalPartition`
      // EventProcessors as partitions are balanced to consumers that aren't at par.
      // We can consider them to be `haveAdditionalPartition` EventProcessors for our purposes.
      haveAdditionalPartition + haveTooManyPartitions < requiredNumberOfOwnersWithExtraPartition) {
        actualRequiredPartitionCount = minRequiredPartitionCount + 1;
      }
      return actualRequiredPartitionCount - numPartitionsOwnedByUs;
    }
    function findPartitionsToSteal(numberOfPartitionsToClaim, minPartitionsPerOwner, requiredNumberOfOwnersWithExtraPartition, ourOwnerId, ownerToOwnershipMap) {
      const partitionsToSteal = [];
      const listOfPartitionOwnerships = [];
      ownerToOwnershipMap.forEach((partitionOwnerships, ownerId) => {
        if (ownerId === ourOwnerId || partitionOwnerships.length <= minPartitionsPerOwner)
          return;
        listOfPartitionOwnerships.push(partitionOwnerships);
      });
      listOfPartitionOwnerships.sort((a, b) => {
        if (a.length > b.length)
          return -1;
        if (a.length < b.length)
          return 1;
        return 0;
      });
      let ownersEncounteredWithExtraPartitions = 0;
      let currentPartitionOwnershipList = listOfPartitionOwnerships.shift();
      while (numberOfPartitionsToClaim > 0 && currentPartitionOwnershipList) {
        let ownersExpectedPartitionCount = minPartitionsPerOwner;
        if (ownersEncounteredWithExtraPartitions < requiredNumberOfOwnersWithExtraPartition) {
          ownersExpectedPartitionCount++;
        }
        ownersEncounteredWithExtraPartitions++;
        let numberAvailableToSteal = currentPartitionOwnershipList.length - ownersExpectedPartitionCount;
        while (Math.min(numberOfPartitionsToClaim, numberAvailableToSteal)) {
          const indexToClaim = Math.floor(Math.random() * currentPartitionOwnershipList.length);
          partitionsToSteal.push(currentPartitionOwnershipList.splice(indexToClaim, 1)[0].partitionId);
          numberOfPartitionsToClaim--;
          numberAvailableToSteal--;
        }
        currentPartitionOwnershipList = listOfPartitionOwnerships.shift();
      }
      return partitionsToSteal;
    }
    function listAvailablePartitions(ownerId, claimedPartitionOwnershipMap, partitionIds, expirationIntervalInMs) {
      if (!partitionIds.length) {
        return [];
      }
      const activePartitionOwnershipMap = getActivePartitionOwnerships(claimedPartitionOwnershipMap, expirationIntervalInMs);
      logger2.verbose(`[${ownerId}] Number of active ownership records: ${activePartitionOwnershipMap.size}.`);
      if (activePartitionOwnershipMap.size === 0) {
        return partitionIds;
      }
      const ownerToOwnershipMap = /* @__PURE__ */ new Map();
      for (const activeOwnership of activePartitionOwnershipMap.values()) {
        const partitionOwnershipList = ownerToOwnershipMap.get(activeOwnership.ownerId) || [];
        partitionOwnershipList.push(activeOwnership);
        ownerToOwnershipMap.set(activeOwnership.ownerId, partitionOwnershipList);
      }
      if (!ownerToOwnershipMap.has(ownerId)) {
        ownerToOwnershipMap.set(ownerId, []);
      }
      logger2.info(`[${ownerId}] Number of active event processors: ${ownerToOwnershipMap.size}.`);
      const { minPartitionsPerOwner, requiredNumberOfOwnersWithExtraPartition } = calculateBalancedLoadCounts(ownerToOwnershipMap, partitionIds);
      logger2.verbose(`[${ownerId}] Expected minimum number of partitions per event processor: ${minPartitionsPerOwner},expected number of event processors with additional partition: ${requiredNumberOfOwnersWithExtraPartition}.`);
      const eventProcessorCounts = getEventProcessorCounts(minPartitionsPerOwner, ownerToOwnershipMap);
      if (isLoadBalanced(requiredNumberOfOwnersWithExtraPartition, ownerToOwnershipMap.size, eventProcessorCounts)) {
        return [];
      }
      let numberOfPartitionsToClaim = getNumberOfPartitionsToClaim(minPartitionsPerOwner, requiredNumberOfOwnersWithExtraPartition, ownerToOwnershipMap.get(ownerId).length, eventProcessorCounts);
      if (numberOfPartitionsToClaim <= 0) {
        return [];
      }
      const partitionsToClaim = [];
      const unclaimedPartitionIds = partitionIds.filter((id) => !activePartitionOwnershipMap.has(id));
      while (Math.min(numberOfPartitionsToClaim, unclaimedPartitionIds.length)) {
        const indexToClaim = Math.floor(Math.random() * unclaimedPartitionIds.length);
        partitionsToClaim.push(unclaimedPartitionIds.splice(indexToClaim, 1)[0]);
        numberOfPartitionsToClaim--;
      }
      if (numberOfPartitionsToClaim === 0) {
        return partitionsToClaim;
      }
      const partitionsToSteal = findPartitionsToSteal(numberOfPartitionsToClaim, minPartitionsPerOwner, requiredNumberOfOwnersWithExtraPartition, ownerId, ownerToOwnershipMap);
      return partitionsToClaim.concat(partitionsToSteal);
    }
    var BalancedLoadBalancingStrategy = class {
      /**
       * Creates an instance of BalancedLoadBalancingStrategy.
       *
       * @param _partitionOwnershipExpirationIntervalInMs - The length of time a partition claim is valid.
       */
      constructor(_partitionOwnershipExpirationIntervalInMs) {
        this._partitionOwnershipExpirationIntervalInMs = _partitionOwnershipExpirationIntervalInMs;
      }
      /**
       * Implements load balancing by taking into account current ownership and
       * the full set of partitions in the Event Hub.
       * @param ourOwnerId - The id we should assume is _our_ id when checking for ownership.
       * @param claimedPartitionOwnershipMap - The current claimed ownerships for partitions.
       * @param partitionIds - Partitions to assign owners to.
       * @returns Partition ids to claim.
       */
      getPartitionsToClaim(ourOwnerId, claimedPartitionOwnershipMap, partitionIds) {
        const claimablePartitions = listAvailablePartitions(ourOwnerId, claimedPartitionOwnershipMap, partitionIds, this._partitionOwnershipExpirationIntervalInMs);
        if (!claimablePartitions.length) {
          return [];
        }
        const randomIndex = Math.floor(Math.random() * claimablePartitions.length);
        return [claimablePartitions[randomIndex]];
      }
    };
    var GreedyLoadBalancingStrategy = class {
      /**
       * Creates an instance of GreedyLoadBalancingStrategy.
       *
       * @param _partitionOwnershipExpirationIntervalInMs - The length of time a partition claim is valid.
       */
      constructor(_partitionOwnershipExpirationIntervalInMs) {
        this._partitionOwnershipExpirationIntervalInMs = _partitionOwnershipExpirationIntervalInMs;
      }
      /**
       * Implements load balancing by taking into account current ownership and
       * the new set of partitions to add.
       * @param ourOwnerId - The id we should assume is _our_ id when checking for ownership.
       * @param claimedPartitionOwnershipMap - The current claimed ownerships for partitions.
       * @param partitionIds - Partitions to assign owners to.
       * @returns Partition ids to claim.
       */
      getPartitionsToClaim(ourOwnerId, claimedPartitionOwnershipMap, partitionIds) {
        return listAvailablePartitions(ourOwnerId, claimedPartitionOwnershipMap, partitionIds, this._partitionOwnershipExpirationIntervalInMs);
      }
    };
    var InMemoryCheckpointStore = class {
      constructor() {
        this._partitionOwnershipMap = /* @__PURE__ */ new Map();
        this._committedCheckpoints = /* @__PURE__ */ new Map();
      }
      /**
       * Get the list of all existing partition ownership from the underlying data store. Could return empty
       * results if there are is no existing ownership information.
       *
       * @param fullyQualifiedNamespace - The fully qualified Event Hubs namespace. This is likely to be similar to
       * <yournamespace>.servicebus.windows.net.
       * @param eventHubName - The event hub name.
       * @param consumerGroup - The consumer group name.
       * @returns Partition ownership details of all the partitions that have/had an owner..
       */
      async listOwnership(_fullyQualifiedNamespace, _eventHubName, _consumerGroup) {
        const ownerships = [];
        for (const value of this._partitionOwnershipMap.values()) {
          ownerships.push(Object.assign({}, value));
        }
        return ownerships;
      }
      /**
       * Claim ownership of a list of partitions. This will return the list of partitions that were owned
       * successfully.
       *
       * @param partitionOwnership - The list of partition ownership this instance is claiming to own.
       * @returns A list partitions this instance successfully claimed ownership.
       */
      async claimOwnership(partitionOwnership) {
        const claimedOwnerships = [];
        for (const ownership of partitionOwnership) {
          if (!this._partitionOwnershipMap.has(ownership.partitionId) || this._partitionOwnershipMap.get(ownership.partitionId).etag === ownership.etag) {
            const date = /* @__PURE__ */ new Date();
            const newOwnership = Object.assign(Object.assign({}, ownership), { etag: getRandomName(), lastModifiedTimeInMs: date.getTime() });
            this._partitionOwnershipMap.set(newOwnership.partitionId, newOwnership);
            claimedOwnerships.push(newOwnership);
          }
        }
        return claimedOwnerships;
      }
      /**
       * Updates the checkpoint in the data store for a partition.
       *
       * @param checkpoint - The checkpoint.
       */
      async updateCheckpoint(checkpoint) {
        throwTypeErrorIfParameterMissing("", "updateCheckpoint", "sequenceNumber", checkpoint.sequenceNumber);
        throwTypeErrorIfParameterMissing("", "updateCheckpoint", "offset", checkpoint.offset);
        checkpoint = Object.assign({}, checkpoint);
        const partitionOwnership = this._partitionOwnershipMap.get(checkpoint.partitionId);
        if (partitionOwnership) {
          partitionOwnership.etag = getRandomName();
          const key = `${checkpoint.fullyQualifiedNamespace}:${checkpoint.eventHubName}:${checkpoint.consumerGroup}`;
          let partitionMap = this._committedCheckpoints.get(key);
          if (partitionMap == null) {
            partitionMap = /* @__PURE__ */ new Map();
            this._committedCheckpoints.set(key, partitionMap);
          }
          partitionMap.set(checkpoint.partitionId, checkpoint);
        }
      }
      async listCheckpoints(fullyQualifiedNamespace, eventHubName, consumerGroup) {
        const key = `${fullyQualifiedNamespace}:${eventHubName}:${consumerGroup}`;
        const partitionMap = this._committedCheckpoints.get(key);
        if (partitionMap == null) {
          return [];
        }
        const checkpoints = [];
        for (const value of partitionMap.values()) {
          checkpoints.push(Object.assign({}, value));
        }
        return checkpoints;
      }
    };
    var PartitionGate = class {
      constructor() {
        this._partitions = /* @__PURE__ */ new Set();
      }
      /**
       * Adds a partition, throwing an Error if there is a conflict with partitions (including "all")
       * that are already added.
       *
       * @param partitionId - A partition ID or the constant "all"
       */
      add(partitionId) {
        if (partitionId === "all" && this._partitions.size > 0 || this._partitions.has(partitionId) || this._partitions.has("all")) {
          throw new Error(`Partition already has a subscriber.`);
        }
        this._partitions.add(partitionId);
      }
      /**
       * Removes a partition
       *
       * @param partitionId - A partition ID or the constant "all"
       */
      remove(partitionId) {
        this._partitions.delete(partitionId);
      }
    };
    var UnbalancedLoadBalancingStrategy = class {
      /**
       * Implements load balancing by taking into account current ownership and
       * the full set of partitions in the Event Hub.
       * @param _ourOwnerId - The id we should assume is _our_ id when checking for ownership.
       * @param _claimedPartitionOwnershipMap - The current claimed ownerships for partitions.
       * @param partitionIds - Partitions to assign owners to.
       * @returns Partition ids to claim.
       */
      getPartitionsToClaim(_ourOwnerId, _claimedPartitionOwnershipMap, partitionIds) {
        return partitionIds;
      }
    };
    var defaultConsumerClientOptions = {
      // to support our current "process single event only" workflow we'll also purposefully
      // only request a single event at a time.
      maxBatchSize: 1,
      maxWaitTimeInSeconds: 60
    };
    var EventHubConsumerClient2 = class {
      /**
       * @readonly
       * The name of the Event Hub instance for which this client is created.
       */
      get eventHubName() {
        return this._context.config.entityPath;
      }
      /**
       * @readonly
       * The fully qualified namespace of the Event Hub instance for which this client is created.
       * This is likely to be similar to <yournamespace>.servicebus.windows.net.
       */
      get fullyQualifiedNamespace() {
        return this._context.config.host;
      }
      constructor(_consumerGroup, connectionStringOrFullyQualifiedNamespace2, checkpointStoreOrEventHubNameOrOptions3, checkpointStoreOrCredentialOrOptions4, checkpointStoreOrOptions5, options6) {
        var _a, _b;
        this._consumerGroup = _consumerGroup;
        this._partitionGate = new PartitionGate();
        this._subscriptions = /* @__PURE__ */ new Set();
        if (isCredential(checkpointStoreOrCredentialOrOptions4)) {
          logger2.info("Creating EventHubConsumerClient with TokenCredential.");
          if (isCheckpointStore(checkpointStoreOrOptions5)) {
            this._checkpointStore = checkpointStoreOrOptions5;
            this._userChoseCheckpointStore = true;
            this._clientOptions = options6 || {};
          } else {
            this._checkpointStore = new InMemoryCheckpointStore();
            this._userChoseCheckpointStore = false;
            this._clientOptions = checkpointStoreOrOptions5 || {};
          }
          this._context = createConnectionContext(connectionStringOrFullyQualifiedNamespace2, checkpointStoreOrEventHubNameOrOptions3, checkpointStoreOrCredentialOrOptions4, this._clientOptions);
        } else if (typeof checkpointStoreOrEventHubNameOrOptions3 === "string") {
          logger2.info("Creating EventHubConsumerClient with connection string and event hub name.");
          if (isCheckpointStore(checkpointStoreOrCredentialOrOptions4)) {
            this._checkpointStore = checkpointStoreOrCredentialOrOptions4;
            this._userChoseCheckpointStore = true;
            this._clientOptions = checkpointStoreOrOptions5 || {};
          } else {
            this._checkpointStore = new InMemoryCheckpointStore();
            this._userChoseCheckpointStore = false;
            this._clientOptions = checkpointStoreOrCredentialOrOptions4 || {};
          }
          this._context = createConnectionContext(connectionStringOrFullyQualifiedNamespace2, checkpointStoreOrEventHubNameOrOptions3, this._clientOptions);
        } else {
          logger2.info("Creating EventHubConsumerClient with connection string.");
          if (isCheckpointStore(checkpointStoreOrEventHubNameOrOptions3)) {
            this._checkpointStore = checkpointStoreOrEventHubNameOrOptions3;
            this._userChoseCheckpointStore = true;
            this._clientOptions = checkpointStoreOrCredentialOrOptions4 || {};
          } else {
            this._checkpointStore = new InMemoryCheckpointStore();
            this._userChoseCheckpointStore = false;
            this._clientOptions = checkpointStoreOrEventHubNameOrOptions3 || {};
          }
          this._context = createConnectionContext(connectionStringOrFullyQualifiedNamespace2, this._clientOptions);
        }
        this.identifier = (_a = this._clientOptions.identifier) !== null && _a !== void 0 ? _a : getRandomName();
        this._loadBalancingOptions = Object.assign({
          // default options
          strategy: "balanced",
          updateIntervalInMs: 1e4,
          partitionOwnershipExpirationIntervalInMs: 6e4
        }, (_b = this._clientOptions) === null || _b === void 0 ? void 0 : _b.loadBalancingOptions);
      }
      /**
       * Closes the AMQP connection to the Event Hub instance,
       * returning a promise that will be resolved when disconnection is completed.
       * @returns Promise<void>
       * @throws Error if the underlying connection encounters an error while closing.
       */
      async close() {
        const activeSubscriptions = Array.from(this._subscriptions);
        await Promise.all(activeSubscriptions.map((subscription) => {
          return subscription.close();
        }));
        return this._context.close();
      }
      /**
       * Provides the id for each partition associated with the Event Hub.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with an Array of strings representing the id for
       * each partition associated with the Event Hub.
       * @throws Error if the underlying connection has been closed, create a new EventHubConsumerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionIds(options = {}) {
        return this._context.managementSession.getEventHubProperties(Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions })).then((eventHubProperties) => {
          return eventHubProperties.partitionIds;
        });
      }
      /**
       * Provides information about the state of the specified partition.
       * @param partitionId - The id of the partition for which information is required.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the state of the partition .
       * @throws Error if the underlying connection has been closed, create a new EventHubConsumerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionProperties(partitionId, options = {}) {
        return this._context.managementSession.getPartitionProperties(partitionId, Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions }));
      }
      /**
       * Provides the Event Hub runtime information.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the Event Hub instance.
       * @throws Error if the underlying connection has been closed, create a new EventHubConsumerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getEventHubProperties(options = {}) {
        return this._context.managementSession.getEventHubProperties(Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions }));
      }
      subscribe(handlersOrPartitionId1, optionsOrHandlers2, possibleOptions3) {
        let eventProcessor;
        let targetedPartitionId;
        if (isSubscriptionEventHandlers(handlersOrPartitionId1)) {
          const options = optionsOrHandlers2;
          if (options && options.startPosition) {
            validateEventPositions(options.startPosition);
          }
          ({ targetedPartitionId, eventProcessor } = this.createEventProcessorForAllPartitions(handlersOrPartitionId1, options));
        } else if (isSubscriptionEventHandlers(optionsOrHandlers2)) {
          const options = possibleOptions3;
          if (options && options.startPosition) {
            validateEventPositions(options.startPosition);
          }
          ({ targetedPartitionId, eventProcessor } = this.createEventProcessorForSinglePartition(
            // cast to string as downstream code expects partitionId to be string, but JS users could have given us anything.
            // we don't validate the user input and instead rely on service throwing errors if any
            String(handlersOrPartitionId1),
            optionsOrHandlers2,
            possibleOptions3
          ));
        } else {
          throw new TypeError("Unhandled subscribe() overload");
        }
        eventProcessor.start();
        const subscription = {
          get isRunning() {
            return eventProcessor.isRunning();
          },
          close: () => {
            this._partitionGate.remove(targetedPartitionId);
            this._subscriptions.delete(subscription);
            return eventProcessor.stop();
          }
        };
        this._subscriptions.add(subscription);
        return subscription;
      }
      /**
       * Gets the LoadBalancing strategy that should be used based on what the user provided.
       */
      _getLoadBalancingStrategy() {
        var _a;
        if (!this._userChoseCheckpointStore) {
          return new UnbalancedLoadBalancingStrategy();
        }
        const partitionOwnershipExpirationIntervalInMs = this._loadBalancingOptions.partitionOwnershipExpirationIntervalInMs;
        if (((_a = this._loadBalancingOptions) === null || _a === void 0 ? void 0 : _a.strategy) === "greedy") {
          return new GreedyLoadBalancingStrategy(partitionOwnershipExpirationIntervalInMs);
        }
        return new BalancedLoadBalancingStrategy(partitionOwnershipExpirationIntervalInMs);
      }
      createEventProcessorForAllPartitions(subscriptionEventHandlers, options) {
        this._partitionGate.add("all");
        if (this._userChoseCheckpointStore) {
          logger2.verbose("EventHubConsumerClient subscribing to all partitions, using a checkpoint store.");
        } else {
          logger2.verbose("EventHubConsumerClient subscribing to all partitions, no checkpoint store.");
        }
        const loadBalancingStrategy = this._getLoadBalancingStrategy();
        const eventProcessor = this._createEventProcessor(this._context, subscriptionEventHandlers, this._checkpointStore, Object.assign(Object.assign(Object.assign({}, defaultConsumerClientOptions), options), {
          ownerLevel: getOwnerLevel(options, this._userChoseCheckpointStore),
          // make it so all the event processors process work with the same overarching owner ID
          // this allows the EventHubConsumer to unify all the work for any processors that it spawns
          ownerId: this.identifier,
          retryOptions: this._clientOptions.retryOptions,
          loadBalancingStrategy,
          loopIntervalInMs: this._loadBalancingOptions.updateIntervalInMs
        }));
        return { targetedPartitionId: "all", eventProcessor };
      }
      createEventProcessorForSinglePartition(partitionId, eventHandlers, options) {
        var _a;
        this._partitionGate.add(partitionId);
        const subscribeOptions = options;
        if (this._userChoseCheckpointStore) {
          logger2.verbose(`EventHubConsumerClient subscribing to specific partition (${partitionId}), using a checkpoint store.`);
        } else {
          logger2.verbose(`EventHubConsumerClient subscribing to specific partition (${partitionId}), no checkpoint store.`);
        }
        const eventProcessor = this._createEventProcessor(this._context, eventHandlers, this._checkpointStore, Object.assign(Object.assign(Object.assign({}, defaultConsumerClientOptions), options), { processingTarget: partitionId, ownerLevel: getOwnerLevel(subscribeOptions, this._userChoseCheckpointStore), retryOptions: this._clientOptions.retryOptions, loadBalancingStrategy: new UnbalancedLoadBalancingStrategy(), loopIntervalInMs: (_a = this._loadBalancingOptions.updateIntervalInMs) !== null && _a !== void 0 ? _a : 1e4 }));
        return { targetedPartitionId: partitionId, eventProcessor };
      }
      _createEventProcessor(connectionContext, subscriptionEventHandlers, checkpointStore, options) {
        return new EventProcessor(this._consumerGroup, connectionContext, subscriptionEventHandlers, checkpointStore, options);
      }
    };
    EventHubConsumerClient2.defaultConsumerGroupName = coreAmqp.Constants.defaultConsumerGroup;
    function isCheckpointStore(possible) {
      if (!possible) {
        return false;
      }
      const checkpointStore = possible;
      return typeof checkpointStore.claimOwnership === "function" && typeof checkpointStore.listCheckpoints === "function" && typeof checkpointStore.listOwnership === "function" && typeof checkpointStore.updateCheckpoint === "function";
    }
    function isSubscriptionEventHandlers(possible) {
      return typeof possible.processEvents === "function";
    }
    function getOwnerLevel(options, userChoseCheckpointStore) {
      if (options && options.ownerLevel) {
        return options.ownerLevel;
      }
      if (userChoseCheckpointStore) {
        return 0;
      } else {
        return void 0;
      }
    }
    var smallMessageOverhead = 5;
    var largeMessageOverhead = 8;
    var smallMessageMaxBytes = 255;
    function isEventDataBatch(eventDataBatch) {
      return coreUtil.isObjectWithProperties(eventDataBatch, ["count", "sizeInBytes", "tryAdd"]) && typeof eventDataBatch.tryAdd === "function" && typeof eventDataBatch.count === "number" && typeof eventDataBatch.sizeInBytes === "number";
    }
    var EventDataBatchImpl = class {
      /**
       * EventDataBatch should not be constructed using `new EventDataBatch()`
       * Use the `createBatch()` method on your `EventHubProducer` instead.
       * @internal
       */
      constructor(context, maxSizeInBytes, isIdempotent, partitionKey, partitionId) {
        this._encodedMessages = [];
        this._spanContexts = [];
        this._context = context;
        this._maxSizeInBytes = maxSizeInBytes;
        this._isIdempotent = isIdempotent;
        this._partitionKey = coreUtil.isDefined(partitionKey) ? String(partitionKey) : partitionKey;
        this._partitionId = coreUtil.isDefined(partitionId) ? String(partitionId) : partitionId;
        this._sizeInBytes = 0;
        this._count = 0;
      }
      /**
       * The maximum size of the batch, in bytes.
       * @readonly
       */
      get maxSizeInBytes() {
        return this._maxSizeInBytes;
      }
      /**
       * The partitionKey set during `EventDataBatch` creation. This value is hashed to
       * produce a partition assignment when the producer is created without a `partitionId`
       * @readonly
       */
      get partitionKey() {
        return this._partitionKey;
      }
      /**
       * The partitionId set during `EventDataBatch` creation.
       * If this value is set then partitionKey can not be set.
       * @readonly
       */
      get partitionId() {
        return this._partitionId;
      }
      /**
       * Size of the `EventDataBatch` instance after the events added to it have been
       * encoded into a single AMQP message.
       * @readonly
       */
      get sizeInBytes() {
        return this._sizeInBytes;
      }
      /**
       * Number of events in the `EventDataBatch` instance.
       * @readonly
       */
      get count() {
        return this._count;
      }
      /**
       * The publishing sequence number assigned to the first event in the batch at the time
       * the batch was successfully published.
       * If the producer was not configured to apply sequence numbering or if the batch
       * has not yet been successfully published, the value will be `undefined`.
       */
      get startingPublishedSequenceNumber() {
        return this._startingPublishSequenceNumber;
      }
      /**
       * Gets the "message" span contexts that were created when adding events to the batch.
       * @internal
       */
      get _messageSpanContexts() {
        return this._spanContexts;
      }
      /**
       * Generates an AMQP message that contains the provided encoded events and annotations.
       * @param encodedEvents - The already encoded events to include in the AMQP batch.
       * @param annotations - The message annotations to set on the batch.
       * @param publishingProps - Idempotent publishing properties used to decorate the events in the batch while sending.
       */
      _generateBatch(encodedEvents, annotations, publishingProps) {
        if (this._isIdempotent && publishingProps) {
          const decodedEvents = encodedEvents.map(rheaPromise.message.decode);
          const decoratedEvents = this._decorateRheaMessagesWithPublishingProps(decodedEvents, publishingProps);
          encodedEvents = decoratedEvents.map(rheaPromise.message.encode);
        }
        const batchEnvelope = {
          body: rheaPromise.message.data_sections(encodedEvents)
        };
        if (annotations) {
          batchEnvelope.message_annotations = annotations;
        }
        return rheaPromise.message.encode(batchEnvelope);
      }
      /**
       * Uses the publishingProps to add idempotent properties as message annotations to rhea messages.
       */
      _decorateRheaMessagesWithPublishingProps(events, publishingProps) {
        if (!this._isIdempotent) {
          return events;
        }
        const { lastPublishedSequenceNumber = 0, ownerLevel, producerGroupId } = publishingProps;
        const startingSequenceNumber = lastPublishedSequenceNumber + 1;
        for (let i = 0; i < events.length; i++) {
          const event = events[i];
          populateIdempotentMessageAnnotations(event, {
            isIdempotentPublishingEnabled: this._isIdempotent,
            ownerLevel,
            producerGroupId,
            publishSequenceNumber: startingSequenceNumber + i
          });
        }
        this._pendingStartingSequenceNumber = startingSequenceNumber;
        return events;
      }
      /**
       * Annotates a rhea message with placeholder idempotent properties if the batch is idempotent.
       * This is necessary so that we can accurately calculate the size of the batch while adding events.
       * Placeholder values are used because real values won't be known until we attempt to send the batch.
       */
      _decorateRheaMessageWithPlaceholderIdempotencyProps(event) {
        if (!this._isIdempotent) {
          return event;
        }
        if (!event.message_annotations) {
          event.message_annotations = {};
        }
        populateIdempotentMessageAnnotations(event, {
          isIdempotentPublishingEnabled: this._isIdempotent,
          ownerLevel: 0,
          publishSequenceNumber: 0,
          producerGroupId: 0
        });
        return event;
      }
      /**
       * Generates the single AMQP message which is the result of encoding all the events
       * added into the `EventDataBatch` instance.
       *
       * This is not meant for the user to use directly.
       *
       * When the `EventDataBatch` instance is passed to the `send()` method on the `EventHubProducer`,
       * this single batched AMQP message is what gets sent over the wire to the service.
       * @readonly
       */
      _generateMessage(publishingProps) {
        return this._generateBatch(this._encodedMessages, this._batchAnnotations, publishingProps);
      }
      /**
       * Sets startingPublishSequenceNumber to the pending publish sequence number.
       */
      _commitPublish() {
        this._startingPublishSequenceNumber = this._pendingStartingSequenceNumber;
      }
      /**
       * Tries to add an event data to the batch if permitted by the batch's size limit.
       * **NOTE**: Always remember to check the return value of this method, before calling it again
       * for the next event.
       *
       * @param eventData -  An individual event data object.
       * @returns A boolean value indicating if the event data has been added to the batch or not.
       */
      tryAdd(eventData, options = {}) {
        throwTypeErrorIfParameterMissing(this._context.connectionId, "tryAdd", "eventData", eventData);
        const { entityPath, host } = this._context.config;
        const { event: instrumentedEvent, spanContext } = instrumentEventData(eventData, options, entityPath, host);
        const amqpMessage = toRheaMessage(instrumentedEvent, this._partitionKey);
        const originalAnnotations = amqpMessage.message_annotations && Object.assign({}, amqpMessage.message_annotations);
        this._decorateRheaMessageWithPlaceholderIdempotencyProps(amqpMessage);
        const encodedMessage = rheaPromise.message.encode(amqpMessage);
        let currentSize = this._sizeInBytes;
        if (this.count === 0) {
          if (originalAnnotations) {
            this._batchAnnotations = originalAnnotations;
          }
          currentSize += this._generateBatch([], this._batchAnnotations).length;
        }
        const messageSize = encodedMessage.length;
        const messageOverhead = messageSize <= smallMessageMaxBytes ? smallMessageOverhead : largeMessageOverhead;
        currentSize += messageSize + messageOverhead;
        if (currentSize > this._maxSizeInBytes) {
          return false;
        }
        this._encodedMessages.push(encodedMessage);
        if (spanContext) {
          this._spanContexts.push(spanContext);
        }
        this._sizeInBytes = currentSize;
        this._count++;
        return true;
      }
    };
    var EventHubSender = class _EventHubSender {
      /**
       * Creates a new EventHubSender instance.
       * @param context - The connection context.
       * @param options - Options used to configure the EventHubSender.
       */
      constructor(context, senderId, { partitionId, enableIdempotentProducer, partitionPublishingOptions }) {
        this.senderLock = getRandomName("sender");
        this.isConnecting = false;
        this.address = context.config.getSenderAddress(partitionId);
        this.name = this.address;
        this._id = senderId;
        this.audience = context.config.getSenderAudience(partitionId);
        this._context = context;
        this.partitionId = partitionId;
        this._isIdempotentProducer = enableIdempotentProducer;
        this._userProvidedPublishingOptions = partitionPublishingOptions;
        const logPrefix = createSenderLogPrefix(this.name, this._context.connectionId);
        this.logger = createSimpleLogger(logger2, logPrefix);
        this._onAmqpError = (eventContext) => {
          const senderError = eventContext.sender && eventContext.sender.error;
          this.logger.verbose("'sender_error' event occurred. The associated error is: %O", senderError);
        };
        this._onSessionError = (eventContext) => {
          const sessionError = eventContext.session && eventContext.session.error;
          this.logger.verbose("'session_error' event occurred. The associated error is: %O", sessionError);
        };
        this._onAmqpClose = async (eventContext) => {
          const sender = this._sender || eventContext.sender;
          this.logger.verbose("'sender_close' event occurred. Value for isItselfClosed on the receiver is: '%s' Value for isConnecting on the session is: '%s'.", sender === null || sender === void 0 ? void 0 : sender.isItselfClosed().toString(), this.isConnecting);
          if (sender && !this.isConnecting) {
            await sender.close().catch((err) => {
              this.logger.verbose("error when closing after 'sender_close' event: %O", err);
            });
          }
        };
        this._onSessionClose = async (eventContext) => {
          const sender = this._sender || eventContext.sender;
          this.logger.verbose("'session_close' event occurred. Value for isSessionItselfClosed on the session is: '%s' Value for isConnecting on the session is: '%s'.", sender === null || sender === void 0 ? void 0 : sender.isSessionItselfClosed().toString(), this.isConnecting);
          if (sender && !this.isConnecting) {
            await sender.close().catch((err) => {
              this.logger.verbose("error when closing after 'session_close' event: %O", err);
            });
          }
        };
      }
      /**
       * Deletes the sender from the context. Clears the token renewal timer. Closes the sender link.
       */
      async close() {
        var _a;
        try {
          if (this._sender) {
            this.logger.info("closing");
            const senderLink = this._sender;
            this._deleteFromCache();
            await senderLink.close();
            (_a = this.authLoop) === null || _a === void 0 ? void 0 : _a.stop();
            this.logger.verbose("closed.");
          }
        } catch (err) {
          const msg = `an error occurred while closing: ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`;
          this.logger.warning(msg);
          logErrorStackTrace(err);
          throw err;
        }
      }
      /**
       * Determines whether the AMQP sender link is open. If open then returns true else returns false.
       * @returns boolean
       */
      isOpen() {
        const result = Boolean(this._sender && this._sender.isOpen());
        this.logger.verbose("is open? -> %s", result);
        return result;
      }
      /**
       * Returns maximum message size on the AMQP sender link.
       * @param abortSignal - An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
       * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
       * @returns Promise<number>
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      async getMaxMessageSize(options = {}) {
        const sender = await this._getLink(options);
        return sender.maxMessageSize;
      }
      /**
       * Get the information about the state of publishing for a partition as observed by the `EventHubSender`.
       * This data can always be read, but will only be populated with information relevant to the active features
       * for the producer client.
       */
      async getPartitionPublishingProperties(options = {}) {
        var _a, _b;
        if (this._localPublishingProperties) {
          return Object.assign({}, this._localPublishingProperties);
        }
        const properties = {
          isIdempotentPublishingEnabled: this._isIdempotentProducer,
          partitionId: (_a = this.partitionId) !== null && _a !== void 0 ? _a : ""
        };
        if (this._isIdempotentProducer) {
          this._sender = await this._getLink(options);
          if (!this._sender) {
            throw new Error(`Failed to retrieve partition publishing properties for partition "${this.partitionId}".`);
          }
          const { [idempotentProducerAmqpPropertyNames.epoch]: ownerLevel, [idempotentProducerAmqpPropertyNames.producerId]: producerGroupId, [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: lastPublishedSequenceNumber } = (_b = this._sender.properties) !== null && _b !== void 0 ? _b : {};
          properties.ownerLevel = parseInt(ownerLevel, 10);
          properties.producerGroupId = parseInt(producerGroupId, 10);
          properties.lastPublishedSequenceNumber = parseInt(lastPublishedSequenceNumber, 10);
        }
        this._localPublishingProperties = properties;
        return Object.assign({}, properties);
      }
      /**
       * Send a batch of EventData to the EventHub. The "message_annotations",
       * "application_properties" and "properties" of the first message will be set as that
       * of the envelope (batch message).
       * @param events -  An array of EventData objects to be sent in a Batch message.
       * @param options - Options to control the way the events are batched along with request options
       */
      async send(events, options) {
        try {
          this.logger.info("trying to send EventData[].");
          if (this._isIdempotentProducer && this._hasPendingSend) {
            throw new Error(`There can only be 1 "sendBatch" call in-flight per partition while "enableIdempotentRetries" is set to true.`);
          }
          const eventCount = isEventDataBatch(events) ? events.count : events.length;
          if (eventCount === 0) {
            this.logger.info(`no events were passed to sendBatch.`);
            return;
          }
          if (this._isIdempotentProducer) {
            this._hasPendingSend = true;
          }
          this.logger.info("sending encoded batch message.");
          await this._trySendBatch(events, options);
          if (this._isIdempotentProducer) {
            commitIdempotentSequenceNumbers(events);
            if (this._localPublishingProperties) {
              const { lastPublishedSequenceNumber = 0 } = this._localPublishingProperties;
              this._localPublishingProperties.lastPublishedSequenceNumber = lastPublishedSequenceNumber + eventCount;
            }
          }
          return;
        } catch (err) {
          rollbackIdempotentSequenceNumbers(events);
          this.logger.warning(`an error occurred while sending the batch message ${err === null || err === void 0 ? void 0 : err.name}: ${err === null || err === void 0 ? void 0 : err.message}`);
          logErrorStackTrace(err);
          throw err;
        } finally {
          if (this._isIdempotentProducer) {
            this._hasPendingSend = false;
          }
        }
      }
      /**
       * @param sender - The rhea sender that contains the idempotent producer properties.
       */
      _populateLocalPublishingProperties(sender) {
        var _a, _b;
        const { [idempotentProducerAmqpPropertyNames.epoch]: ownerLevel, [idempotentProducerAmqpPropertyNames.producerId]: producerGroupId, [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: lastPublishedSequenceNumber } = (_a = sender.properties) !== null && _a !== void 0 ? _a : {};
        this._localPublishingProperties = {
          isIdempotentPublishingEnabled: this._isIdempotentProducer,
          partitionId: (_b = this.partitionId) !== null && _b !== void 0 ? _b : "",
          lastPublishedSequenceNumber,
          ownerLevel,
          producerGroupId
        };
      }
      _deleteFromCache() {
        this._sender = void 0;
        delete this._context.senders[this.name];
        this.logger.verbose("deleted from the client cache.");
      }
      _createSenderOptions() {
        const srOptions = {
          name: this.name,
          source: this._id,
          target: {
            address: this.address
          },
          onError: this._onAmqpError,
          onClose: this._onAmqpClose,
          onSessionError: this._onSessionError,
          onSessionClose: this._onSessionClose
        };
        if (this._isIdempotentProducer) {
          srOptions.desired_capabilities = idempotentProducerAmqpPropertyNames.capability;
          const idempotentProperties = generateIdempotentLinkProperties(this._userProvidedPublishingOptions, this._localPublishingProperties);
          srOptions.properties = idempotentProperties;
        }
        this.logger.verbose("being created with options: %O", srOptions);
        return srOptions;
      }
      /**
       * Tries to send the message to EventHub if there is enough credit to send them
       * and the circular buffer has available space to settle the message after sending them.
       *
       * We have implemented a synchronous send over here in the sense that we shall be waiting
       * for the message to be accepted or rejected and accordingly resolve or reject the promise.
       * @param rheaMessage - The message to be sent to EventHub.
       * @returns Promise<void>
       */
      async _trySendBatch(events, options = {}) {
        const abortSignal = options.abortSignal;
        const retryOptions = options.retryOptions || {};
        const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);
        retryOptions.timeoutInMs = timeoutInMs;
        const sendEventPromise = async () => {
          var _a, _b;
          const initStartTime = Date.now();
          const sender = await this._getLink(options);
          const publishingProps = await this.getPartitionPublishingProperties(options);
          const timeTakenByInit = Date.now() - initStartTime;
          this.logger.verbose("credit: %d available: %d", sender.credit, sender.session.outgoing.available());
          let waitTimeForSendable = 1e3;
          if (!sender.sendable() && timeoutInMs - timeTakenByInit > waitTimeForSendable) {
            this.logger.verbose("waiting for 1 second for sender to become sendable");
            await coreAmqp.delay(waitTimeForSendable);
            this.logger.verbose("after waiting for a second, credit: %d available: %d", sender.credit, (_b = (_a = sender.session) === null || _a === void 0 ? void 0 : _a.outgoing) === null || _b === void 0 ? void 0 : _b.available());
          } else {
            waitTimeForSendable = 0;
          }
          if (!sender.sendable()) {
            const msg = `cannot send the message right now. Please try later.`;
            this.logger.warning(msg);
            const amqpError = {
              condition: coreAmqp.ErrorNameConditionMapper.SenderBusyError,
              description: msg
            };
            throw coreAmqp.translate(amqpError);
          }
          if (timeoutInMs <= timeTakenByInit + waitTimeForSendable) {
            const desc = `was not able to send the message right now, due to operation timeout.`;
            this.logger.warning(desc);
            const e = {
              condition: coreAmqp.ErrorNameConditionMapper.ServiceUnavailableError,
              description: desc
            };
            throw coreAmqp.translate(e);
          }
          try {
            const encodedMessage = transformEventsForSend(events, publishingProps, options);
            const delivery = await sender.send(encodedMessage, {
              format: 2147563264,
              timeoutInSeconds: (timeoutInMs - timeTakenByInit - waitTimeForSendable) / 1e3,
              abortSignal
            });
            this.logger.info("sent message with delivery id: %d", delivery.id);
          } catch (err) {
            const error = err.innerError || err;
            const translatedError = translateError(error);
            throw translatedError;
          }
        };
        const config = {
          operation: sendEventPromise,
          connectionId: this._context.connectionId,
          operationType: coreAmqp.RetryOperationType.sendMessage,
          abortSignal,
          retryOptions
        };
        try {
          await coreAmqp.retry(config);
        } catch (err) {
          const translatedError = coreAmqp.translate(err);
          this.logger.warning("an error occurred while sending the message %s", `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          logErrorStackTrace(translatedError);
          throw translatedError;
        }
      }
      async _getLink(options = {}) {
        if (this.isOpen() && this._sender) {
          return this._sender;
        }
        const retryOptions = options.retryOptions || {};
        const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);
        retryOptions.timeoutInMs = timeoutInMs;
        const senderOptions = this._createSenderOptions();
        const startTime = Date.now();
        const createLinkPromise = async () => {
          return coreAmqp.defaultCancellableLock.acquire(this.senderLock, () => {
            const taskStartTime = Date.now();
            const taskTimeoutInMs = timeoutInMs - (taskStartTime - startTime);
            return this._init(Object.assign(Object.assign({}, senderOptions), { abortSignal: options.abortSignal, timeoutInMs: taskTimeoutInMs }));
          }, { abortSignal: options.abortSignal, timeoutInMs });
        };
        const config = {
          operation: createLinkPromise,
          connectionId: this._context.connectionId,
          operationType: coreAmqp.RetryOperationType.senderLink,
          abortSignal: options.abortSignal,
          retryOptions
        };
        try {
          return await coreAmqp.retry(config);
        } catch (err) {
          const translatedError = coreAmqp.translate(err);
          this.logger.warning("an error occurred while creating: %s", `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          logErrorStackTrace(translatedError);
          throw translatedError;
        }
      }
      /**
       * Initializes the sender session on the connection.
       * Should only be called from _createLinkIfNotOpen
       */
      async _init(options) {
        const createSender = async () => {
          this.logger.verbose("trying to be created...");
          const sender = await this._context.connection.createAwaitableSender(options);
          this._sender = sender;
          this._populateLocalPublishingProperties(this._sender);
          this.isConnecting = false;
          this.logger.verbose("created with options: %O", options);
          if (!this._context.senders[this.name])
            this._context.senders[this.name] = this;
        };
        try {
          if (!this.isOpen() || !this._sender) {
            await this._context.readyToOpenLink();
            this.authLoop = await withAuth(createSender, this._context, this.audience, options.timeoutInMs, this.logger, { abortSignal: options.abortSignal });
            return this._sender;
          } else {
            this.logger.verbose("is open -> %s. Hence not reconnecting.", this.isOpen());
            return this._sender;
          }
        } catch (err) {
          const translatedError = coreAmqp.translate(err);
          this.logger.warning("an error occurred while being created: %s", `${translatedError === null || translatedError === void 0 ? void 0 : translatedError.name}: ${translatedError === null || translatedError === void 0 ? void 0 : translatedError.message}`);
          logErrorStackTrace(translatedError);
          throw translatedError;
        }
      }
      /**
       * Creates a new sender to the given event hub, and optionally to a given partition if it is
       * not present in the context or returns the one present in the context.
       * @hidden
       * @param options - Options used to configure the EventHubSender.
       */
      static create(context, senderId, options) {
        const ehSender = new _EventHubSender(context, senderId, options);
        if (!context.senders[ehSender.name]) {
          context.senders[ehSender.name] = ehSender;
        }
        return context.senders[ehSender.name];
      }
    };
    function generateIdempotentLinkProperties(userProvidedPublishingOptions, localPublishingOptions) {
      let ownerLevel;
      let producerGroupId;
      let sequenceNumber;
      if (localPublishingOptions) {
        ownerLevel = localPublishingOptions.ownerLevel;
        producerGroupId = localPublishingOptions.producerGroupId;
        sequenceNumber = localPublishingOptions.lastPublishedSequenceNumber;
      } else if (userProvidedPublishingOptions) {
        ownerLevel = userProvidedPublishingOptions.ownerLevel;
        producerGroupId = userProvidedPublishingOptions.producerGroupId;
        sequenceNumber = userProvidedPublishingOptions.startingSequenceNumber;
      } else {
        return {};
      }
      const idempotentLinkProperties = {
        [idempotentProducerAmqpPropertyNames.epoch]: coreUtil.isDefined(ownerLevel) ? rheaPromise.types.wrap_short(ownerLevel) : null,
        [idempotentProducerAmqpPropertyNames.producerId]: coreUtil.isDefined(producerGroupId) ? rheaPromise.types.wrap_long(producerGroupId) : null,
        [idempotentProducerAmqpPropertyNames.producerSequenceNumber]: coreUtil.isDefined(sequenceNumber) ? rheaPromise.types.wrap_int(sequenceNumber) : null
      };
      return idempotentLinkProperties;
    }
    function transformEventsForSend(events, publishingProps, options = {}) {
      var _a;
      if (isEventDataBatch(events)) {
        return events._generateMessage(publishingProps);
      } else {
        const eventCount = events.length;
        const rheaMessages = [];
        const tracingProperties = (_a = options.tracingProperties) !== null && _a !== void 0 ? _a : [];
        for (let i = 0; i < eventCount; i++) {
          const originalEvent = events[i];
          const tracingProperty = tracingProperties[i];
          const event = Object.assign(Object.assign({}, originalEvent), { properties: Object.assign(Object.assign({}, originalEvent.properties), tracingProperty) });
          const rheaMessage = toRheaMessage(event, options.partitionKey);
          const { lastPublishedSequenceNumber = 0 } = publishingProps;
          const startingSequenceNumber = lastPublishedSequenceNumber + 1;
          const pendingPublishSequenceNumber = startingSequenceNumber + i;
          populateIdempotentMessageAnnotations(rheaMessage, Object.assign(Object.assign({}, publishingProps), { publishSequenceNumber: pendingPublishSequenceNumber }));
          if (publishingProps.isIdempotentPublishingEnabled) {
            originalEvent[PENDING_PUBLISH_SEQ_NUM_SYMBOL] = pendingPublishSequenceNumber;
          }
          rheaMessages.push(rheaMessage);
        }
        const batchMessage = {
          body: rheaPromise.message.data_sections(rheaMessages.map(rheaPromise.message.encode))
        };
        if (rheaMessages[0].message_annotations) {
          batchMessage.message_annotations = Object.assign({}, rheaMessages[0].message_annotations);
        }
        return rheaPromise.message.encode(batchMessage);
      }
    }
    function commitIdempotentSequenceNumbers(events) {
      if (isEventDataBatch(events)) {
        events._commitPublish();
      } else {
        for (const event of events) {
          event._publishedSequenceNumber = event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];
          delete event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];
        }
      }
    }
    function rollbackIdempotentSequenceNumbers(events) {
      if (isEventDataBatch(events))
        ;
      else {
        for (const event of events) {
          delete event[PENDING_PUBLISH_SEQ_NUM_SYMBOL];
        }
      }
    }
    var EventHubProducerClient = class _EventHubProducerClient {
      /**
       * @readonly
       * The name of the Event Hub instance for which this client is created.
       */
      get eventHubName() {
        return this._context.config.entityPath;
      }
      /**
       * @readonly
       * The fully qualified namespace of the Event Hub instance for which this client is created.
       * This is likely to be similar to <yournamespace>.servicebus.windows.net.
       */
      get fullyQualifiedNamespace() {
        return this._context.config.host;
      }
      constructor(fullyQualifiedNamespaceOrConnectionString1, eventHubNameOrOptions2, credentialOrOptions3, options4) {
        var _a;
        this._context = createConnectionContext(fullyQualifiedNamespaceOrConnectionString1, eventHubNameOrOptions2, credentialOrOptions3, options4);
        if (typeof eventHubNameOrOptions2 !== "string") {
          this._clientOptions = eventHubNameOrOptions2 || {};
        } else if (!isCredential(credentialOrOptions3)) {
          this._clientOptions = credentialOrOptions3 || {};
        } else {
          this._clientOptions = options4 || {};
        }
        this.identifier = (_a = this._clientOptions.identifier) !== null && _a !== void 0 ? _a : getRandomName();
        this._sendersMap = /* @__PURE__ */ new Map();
      }
      /**
       * Creates an instance of `EventDataBatch` to which one can add events until the maximum supported size is reached.
       * The batch can be passed to the {@link sendBatch} method of the `EventHubProducerClient` to be sent to Azure Event Hubs.
       *
       * Events with different values for partitionKey or partitionId will need to be put into different batches.
       * To simplify such batch management across partitions or to have the client automatically batch events
       * and send them in specific intervals, use `EventHubBufferedProducerClient` instead.
       *
       * The below example assumes you have an array of events at hand to be batched safely.
       * If you have events coming in one by one, `EventHubBufferedProducerClient` is recommended instead
       * for effecient management of batches.
       *
       * Example usage:
       * ```ts
       * const client = new EventHubProducerClient(connectionString);
       * let batch = await client.createBatch();
       * for (let i = 0; i < messages.length; i++) {
       *  if (!batch.tryAdd(messages[i])) {
       *    await client.sendBatch(batch);
       *    batch = await client.createBatch();
       *    if (!batch.tryAdd(messages[i])) {
       *      throw new Error("Message too big to fit")
       *    }
       *    if (i === messages.length - 1) {
       *      await client.sendBatch(batch);
       *    }
       *   }
       * }
       * ```
       *
       * @param options -  Configures the behavior of the batch.
       * - `partitionKey`  : A value that is hashed and used by the Azure Event Hubs service to determine the partition to which
       * the events need to be sent.
       * - `partitionId`   : Id of the partition to which the batch of events need to be sent.
       * - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.
       * - `abortSignal`   : A signal the request to cancel the operation.
       * @returns Promise<EventDataBatch>
       * @throws Error if both `partitionId` and `partitionKey` are set in the options.
       * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal in the options.
       */
      async createBatch(options = {}) {
        var _a;
        throwErrorIfConnectionClosed(this._context);
        const partitionId = coreUtil.isDefined(options.partitionId) ? String(options.partitionId) : void 0;
        validateProducerPartitionSettings({
          enableIdempotentRetries: this._enableIdempotentRetries,
          partitionId,
          partitionKey: options.partitionKey
        });
        let sender = this._sendersMap.get(partitionId || "");
        if (!sender) {
          const partitionPublishingOptions = coreUtil.isDefined(partitionId) ? (_a = this._partitionOptions) === null || _a === void 0 ? void 0 : _a[partitionId] : void 0;
          sender = EventHubSender.create(this._context, this.identifier, {
            enableIdempotentProducer: Boolean(this._enableIdempotentRetries),
            partitionId,
            partitionPublishingOptions
          });
          this._sendersMap.set(partitionId || "", sender);
        }
        let maxMessageSize = await sender.getMaxMessageSize({
          retryOptions: this._clientOptions.retryOptions,
          abortSignal: options.abortSignal
        });
        if (options.maxSizeInBytes) {
          if (options.maxSizeInBytes > maxMessageSize) {
            const error = new Error(`Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link.`);
            logger2.warning(`[${this._context.connectionId}] ${error.message}`);
            logErrorStackTrace(error);
            throw error;
          }
          maxMessageSize = options.maxSizeInBytes;
        }
        return new EventDataBatchImpl(this._context, maxMessageSize, Boolean(this._enableIdempotentRetries), options.partitionKey, partitionId);
      }
      /**
       * Get the information about the state of publishing for a partition as observed by the `EventHubProducerClient`.
       * This data can always be read, but will only be populated with information relevant to the active features
       * for the producer client.
       *
       * @param partitionId - Id of the partition from which to retrieve publishing properties.
       * @param options - The set of options to apply to the operation call.
       * - `abortSignal`  : A signal the request to cancel the send operation.
       * @returns Promise<void>
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore this is called in EventHubBufferedProducerClient via cast-to-any workaround
      async getPartitionPublishingProperties(partitionId, options = {}) {
        var _a;
        if (!coreUtil.isDefined(partitionId)) {
          throw new TypeError(`getPartitionPublishingProperties called without required argument "partitionId"`);
        }
        if (typeof partitionId === "number") {
          partitionId = String(partitionId);
        }
        let sender = this._sendersMap.get(partitionId);
        if (!sender) {
          sender = EventHubSender.create(this._context, this.identifier, {
            enableIdempotentProducer: Boolean(this._enableIdempotentRetries),
            partitionId,
            partitionPublishingOptions: (_a = this._partitionOptions) === null || _a === void 0 ? void 0 : _a[partitionId]
          });
          this._sendersMap.set(partitionId, sender);
        }
        return sender.getPartitionPublishingProperties(options);
      }
      async sendBatch(batch, options = {}) {
        throwErrorIfConnectionClosed(this._context);
        throwTypeErrorIfParameterMissing(this._context.connectionId, "sendBatch", "batch", batch);
        let partitionId;
        let partitionKey;
        let spanContextsToLink = [];
        if (isEventDataBatch(batch)) {
          if (this._enableIdempotentRetries && coreUtil.isDefined(batch.startingPublishedSequenceNumber)) {
            throw new Error(idempotentAlreadyPublished);
          }
          const partitionAssignment = extractPartitionAssignmentFromBatch(batch, options);
          partitionId = partitionAssignment.partitionId;
          partitionKey = partitionAssignment.partitionKey;
          spanContextsToLink = batch._messageSpanContexts;
        } else {
          if (!Array.isArray(batch)) {
            batch = [batch];
          }
          if (batch.some((event) => coreUtil.isDefined(event._publishedSequenceNumber))) {
            throw new Error(idempotentSomeAlreadyPublished);
          }
          const partitionAssignment = extractPartitionAssignmentFromOptions(options);
          partitionId = partitionAssignment.partitionId;
          partitionKey = partitionAssignment.partitionKey;
          for (let i = 0; i < batch.length; i++) {
            batch[i] = instrumentEventData(batch[i], options, this._context.config.entityPath, this._context.config.host, "publish").event;
            batch[i].properties;
          }
        }
        validateProducerPartitionSettings({
          enableIdempotentRetries: this._enableIdempotentRetries,
          partitionId,
          partitionKey
        });
        return tracingClient.withSpan(`${_EventHubProducerClient.name}.${this.sendBatch.name}`, options, (updatedOptions) => {
          var _a;
          let sender = this._sendersMap.get(partitionId || "");
          if (!sender) {
            const partitionPublishingOptions = coreUtil.isDefined(partitionId) ? (_a = this._partitionOptions) === null || _a === void 0 ? void 0 : _a[partitionId] : void 0;
            sender = EventHubSender.create(this._context, this.identifier, {
              enableIdempotentProducer: Boolean(this._enableIdempotentRetries),
              partitionId,
              partitionPublishingOptions
            });
            this._sendersMap.set(partitionId || "", sender);
          }
          return sender.send(batch, Object.assign(Object.assign({}, updatedOptions), {
            partitionId,
            partitionKey,
            retryOptions: this._clientOptions.retryOptions
          }));
        }, Object.assign({ spanLinks: spanContextsToLink.map((tracingContext) => {
          return { tracingContext };
        }) }, toSpanOptions(this._context.config, "publish", "client")));
      }
      /**
       * Closes the AMQP connection to the Event Hub instance,
       * returning a promise that will be resolved when disconnection is completed.
       * @returns Promise<void>
       * @throws Error if the underlying connection encounters an error while closing.
       */
      async close() {
        await this._context.close();
        for (const pair of this._sendersMap) {
          await pair[1].close();
        }
        this._sendersMap.clear();
      }
      /**
       * Provides the Event Hub runtime information.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the Event Hub instance.
       * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getEventHubProperties(options = {}) {
        return this._context.managementSession.getEventHubProperties(Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions }));
      }
      /**
       * Provides the id for each partition associated with the Event Hub.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with an Array of strings representing the id for
       * each partition associated with the Event Hub.
       * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionIds(options = {}) {
        return this._context.managementSession.getEventHubProperties(Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions })).then((eventHubProperties) => {
          return eventHubProperties.partitionIds;
        });
      }
      /**
       * Provides information about the state of the specified partition.
       * @param partitionId - The id of the partition for which information is required.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the state of the partition .
       * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionProperties(partitionId, options = {}) {
        return this._context.managementSession.getPartitionProperties(partitionId, Object.assign(Object.assign({}, options), { retryOptions: this._clientOptions.retryOptions }));
      }
    };
    function extractPartitionAssignmentFromOptions(options = {}) {
      const result = {};
      const { partitionId, partitionKey } = options;
      if (coreUtil.isDefined(partitionId)) {
        result.partitionId = String(partitionId);
      }
      if (coreUtil.isDefined(partitionKey)) {
        result.partitionKey = String(partitionKey);
      }
      return result;
    }
    function extractPartitionAssignmentFromBatch(batch, options) {
      const result = {};
      const partitionId = batch.partitionId;
      const partitionKey = batch.partitionKey;
      const { partitionId: unexpectedPartitionId, partitionKey: unexpectedPartitionKey } = extractPartitionAssignmentFromOptions(options);
      if (unexpectedPartitionKey && partitionKey !== unexpectedPartitionKey) {
        throw new Error(`The partitionKey (${unexpectedPartitionKey}) set on sendBatch does not match the partitionKey (${partitionKey}) set when creating the batch.`);
      }
      if (unexpectedPartitionId && unexpectedPartitionId !== partitionId) {
        throw new Error(`The partitionId (${unexpectedPartitionId}) set on sendBatch does not match the partitionId (${partitionId}) set when creating the batch.`);
      }
      if (coreUtil.isDefined(partitionId)) {
        result.partitionId = String(partitionId);
      }
      if (coreUtil.isDefined(partitionKey)) {
        result.partitionKey = String(partitionKey);
      }
      return result;
    }
    var AwaitableQueue = class {
      constructor() {
        this._resolvers = [];
        this._items = [];
      }
      size() {
        return this._items.length;
      }
      /**
       * Returns a Promise that will resolve with the next item in the queue.
       */
      shift(options) {
        const item = this._items.shift();
        if (typeof item !== "undefined") {
          return Promise.resolve(item);
        }
        return coreUtil.createAbortablePromise((resolve) => this._resolvers.push(resolve), Object.assign(Object.assign({}, options), { cleanupBeforeAbort: () => this._resolvers.pop() }));
      }
      /**
       * Appends new item to the queue.
       */
      push(item) {
        if (!this._resolveNextItem(item)) {
          this._items.push(item);
        }
      }
      _resolveNextItem(item) {
        const resolver = this._resolvers.shift();
        if (!resolver) {
          return false;
        }
        resolver(item);
        return true;
      }
    };
    function getPromiseParts() {
      let resolver;
      let rejector;
      const promise = new Promise((resolve, reject) => {
        resolver = resolve;
        rejector = reject;
      });
      return {
        promise,
        resolve: resolver,
        reject: rejector
      };
    }
    var BatchingPartitionChannel = class {
      constructor({ loopAbortSignal, maxBufferSize, maxWaitTimeInMs, onSendEventsErrorHandler, onSendEventsSuccessHandler, partitionId, producer }) {
        this._eventQueue = new AwaitableQueue();
        this._batchedEvents = [];
        this._bufferCount = 0;
        this._readyQueue = [];
        this._flushState = {
          isFlushing: false
        };
        this._isRunning = false;
        this._lastBatchCreationTime = 0;
        this._loopAbortSignal = loopAbortSignal;
        this._maxBufferSize = maxBufferSize;
        this._maxWaitTimeInMs = maxWaitTimeInMs;
        this._onSendEventsErrorHandler = onSendEventsErrorHandler;
        this._onSendEventsSuccessHandler = onSendEventsSuccessHandler;
        this._partitionId = partitionId;
        this._producer = producer;
      }
      getCurrentBufferedCount() {
        return this._bufferCount;
      }
      async enqueueEvent(event) {
        await this._ready();
        this._eventQueue.push(event);
        this._bufferCount++;
        if (!this._isRunning) {
          this._isRunning = true;
          this._startPublishLoop().catch((e) => {
            logger2.error(`The following error occured during batch creation or sending: ${JSON.stringify(e, void 0, "  ")}`);
          });
        }
      }
      /**
       * Sets the flush state so that no new events can be enqueued until
       * all the currently buffered events are sent to the Event Hub.
       *
       * Returns a promise that resolves once flushing is complete.
       */
      async flush(_options = {}) {
        const state = this._flushState;
        if (state.isFlushing) {
          return state.currentPromise;
        }
        if (this.getCurrentBufferedCount() === 0) {
          return Promise.resolve();
        }
        const { promise, resolve } = getPromiseParts();
        this._flushState = { isFlushing: true, currentPromise: promise, resolve };
        return promise;
      }
      /**
       * Returns a promise that resolves once there is room for events to be added
       * to the buffer.
       */
      _ready() {
        const currentBufferedCount = this.getCurrentBufferedCount();
        if (currentBufferedCount < this._maxBufferSize && !this._readyQueue.length && !this._flushState.isFlushing) {
          return Promise.resolve();
        }
        const { promise: readyPromise, reject, resolve } = getPromiseParts();
        this._readyQueue.push({ resolve, reject });
        return readyPromise;
      }
      /**
       * Starts the loop that creates batches and sends them to the Event Hub.
       *
       * The loop will run until the `_loopAbortSignal` is aborted.
       */
      async _startPublishLoop() {
        let batch;
        let eventToAddToBatch;
        while (!this._loopAbortSignal.aborted) {
          try {
            if (!coreUtil.isDefined(batch)) {
              batch = await this._createBatch();
            }
            const timeSinceLastBatchCreation = Date.now() - this._lastBatchCreationTime;
            const maximumTimeToWaitForEvent = batch.count ? Math.max(this._maxWaitTimeInMs - timeSinceLastBatchCreation, 0) : this._maxWaitTimeInMs;
            const event = eventToAddToBatch !== null && eventToAddToBatch !== void 0 ? eventToAddToBatch : await coreUtil.cancelablePromiseRace([
              (abortOptions) => this._eventQueue.shift(abortOptions),
              (abortOptions) => coreAmqp.delay(maximumTimeToWaitForEvent, abortOptions.abortSignal, abortOptions.abortErrorMsg)
            ], { abortSignal: this._loopAbortSignal });
            if (!event) {
              if (batch.count) {
                await this._producer.sendBatch(batch);
                this._reportSuccess();
                batch = await this._createBatch();
              }
              continue;
            } else if (!eventToAddToBatch) {
              eventToAddToBatch = event;
            }
            const didAdd = batch.tryAdd(event);
            if (didAdd) {
              this._batchedEvents.push(event);
              eventToAddToBatch = void 0;
            }
            if (didAdd && batch.count >= this._maxBufferSize) {
              await this._producer.sendBatch(batch);
              this._reportSuccess();
              batch = await this._createBatch();
            } else if (!didAdd && batch.count) {
              await this._producer.sendBatch(batch);
              this._reportSuccess();
              batch = await this._createBatch();
            }
            if (!didAdd && !batch.tryAdd(event)) {
              this._reportFailure(new Error("Placeholder for max message size exceeded"), event);
            } else if (!didAdd) {
              this._batchedEvents.push(event);
            }
            eventToAddToBatch = void 0;
          } catch (err) {
            if (!coreUtil.isObjectWithProperties(err, ["name"]) || err.name !== "AbortError") {
              this._reportFailure(err);
              batch = void 0;
              this._batchedEvents = [];
            }
          }
        }
      }
      /**
       * Helper method that returns an `EventDataBatch`.
       * This also has the side effects of
       *  - keeping track of batch creation time: needed for maxWaitTime calculations.
       *  - clearing reference to batched events.
       *  - incrementing the readiness: creating a new batch indicates the buffer
       *    should have room, so we can resolve some pending `ready()` calls.
       */
      async _createBatch() {
        this._lastBatchCreationTime = Date.now();
        this._batchedEvents = [];
        const batch = await this._producer.createBatch({
          partitionId: this._partitionId
        });
        this._incrementReadiness();
        return batch;
      }
      /**
       * This method will resolve as many pending `ready()` calls as it can
       * based on how much space remains in the buffer.
       *
       * If the channel is currently flushing, this is a no-op. This prevents
       * `enqueueEvent` calls from adding the event to the buffer until flushing
       * completes.
       */
      _incrementReadiness() {
        var _a;
        if (this._flushState.isFlushing) {
          return;
        }
        const currentBufferedCount = this.getCurrentBufferedCount();
        const num = Math.min(this._maxBufferSize - currentBufferedCount, this._readyQueue.length);
        for (let i = 0; i < num; i++) {
          (_a = this._readyQueue.shift()) === null || _a === void 0 ? void 0 : _a.resolve();
        }
      }
      /**
       * Calls the user-provided `onSendEventsSuccessHandler` with the events
       * that were successfully sent.
       */
      _reportSuccess() {
        var _a;
        this._bufferCount = this._bufferCount - this._batchedEvents.length;
        this._updateFlushState();
        try {
          (_a = this._onSendEventsSuccessHandler) === null || _a === void 0 ? void 0 : _a.call(this, {
            events: this._batchedEvents,
            partitionId: this._partitionId
          });
        } catch (e) {
          logger2.error(`The following error occurred in the onSendEventsSuccessHandler: ${JSON.stringify(e, void 0, "  ")}`);
        }
      }
      /**
       * Calls the user-provided `onSendEventsErrorHandler` with an error and the events
       * that were not successfully sent.
       */
      _reportFailure(err, event) {
        this._bufferCount = this._bufferCount - (event ? 1 : this._batchedEvents.length);
        this._updateFlushState();
        try {
          this._onSendEventsErrorHandler({
            error: err,
            events: event ? [event] : this._batchedEvents,
            partitionId: this._partitionId
          });
        } catch (e) {
          logger2.error(`The following error occurred in the onSendEventsErrorHandler: ${JSON.stringify(e, void 0, "  ")}`);
        }
      }
      /**
       * Updates the channel's flush state once the size of the
       * event buffer has decreased to 0.
       */
      _updateFlushState() {
        const state = this._flushState;
        if (!state.isFlushing || this.getCurrentBufferedCount() !== 0) {
          return;
        }
        state.resolve();
        this._flushState = { isFlushing: false };
        this._incrementReadiness();
      }
    };
    function mapPartitionKeyToId(partitionKey, partitionCount) {
      const hashedParitionKey = hashPartitionKey(partitionKey);
      return Math.abs(hashedParitionKey % partitionCount);
    }
    function hashPartitionKey(partitionKey) {
      const hash = computeHash(Buffer.from(partitionKey, "utf8"));
      return castToInt16(hash.c ^ hash.b);
    }
    function readUInt32(data, offset) {
      return data.readUInt32LE(offset);
    }
    function castToInt16(n) {
      return new Int16Array([n])[0];
    }
    function computeHash(data, seed1 = 0, seed2 = 0) {
      let a, b, c;
      a = b = c = 3735928559 + data.length + seed1;
      c += seed2;
      let index = 0, size = data.length;
      while (size > 12) {
        a += readUInt32(data, index);
        b += readUInt32(data, index + 4);
        c += readUInt32(data, index + 8);
        a -= c;
        a ^= c << 4 | c >>> 28;
        c += b;
        b -= a;
        b ^= a << 6 | a >>> 26;
        a += c;
        c -= b;
        c ^= b << 8 | b >>> 24;
        b += a;
        a -= c;
        a ^= c << 16 | c >>> 16;
        c += b;
        b -= a;
        b ^= a << 19 | a >>> 13;
        a += c;
        c -= b;
        c ^= b << 4 | b >>> 28;
        b += a;
        index += 12;
        size -= 12;
      }
      let curr = size;
      switch (curr) {
        case 12:
          a += readUInt32(data, index);
          b += readUInt32(data, index + 4);
          c += readUInt32(data, index + 8);
          break;
        case 11:
          c += data[index + 10] << 16;
          curr = 10;
        case 10:
          c += data[index + 9] << 8;
          curr = 9;
        case 9:
          c += data[index + 8];
          curr = 8;
        case 8:
          b += readUInt32(data, index + 4);
          a += readUInt32(data, index);
          break;
        case 7:
          b += data[index + 6] << 16;
          curr = 6;
        case 6:
          b += data[index + 5] << 8;
          curr = 5;
        case 5:
          b += data[index + 4];
          curr = 4;
        case 4:
          a += readUInt32(data, index);
          break;
        case 3:
          a += data[index + 2] << 16;
          curr = 2;
        case 2:
          a += data[index + 1] << 8;
          curr = 1;
        case 1:
          a += data[index];
          break;
        case 0:
          return { b: b >>> 0, c: c >>> 0 };
      }
      c ^= b;
      c -= b << 14 | b >>> 18;
      a ^= c;
      a -= c << 11 | c >>> 21;
      b ^= a;
      b -= a << 25 | a >>> 7;
      c ^= b;
      c -= b << 16 | b >>> 16;
      a ^= c;
      a -= c << 4 | c >>> 28;
      b ^= a;
      b -= a << 14 | a >>> 18;
      c ^= b;
      c -= b << 24 | b >>> 8;
      return { b: b >>> 0, c: c >>> 0 };
    }
    var PartitionAssigner = class {
      constructor() {
        this._partitions = [];
        this._lastRoundRobinPartitionIndex = -1;
      }
      /**
       * Set the partition ids that can be used when assigning a partition.
       * @param partitionIds - All valid partition ids.
       */
      setPartitionIds(partitionIds) {
        this._partitions = partitionIds;
      }
      /**
       * Returns a partitionId from the list of partition ids set via `setPartitionIds`.
       *
       * If a partitionId is specified, then that will be returned directly.
       * If a partitionKey is specified, then a partitionId will be calculated based on the partitionKey.
       * Specifying both partitionId and partitionKey results in an error.
       *
       * If neither partitionId nor partitionKey are specified, then a partitionId will be selected
       * based on a round-robin approach.
       */
      assignPartition({ partitionId, partitionKey }) {
        if (coreUtil.isDefined(partitionId) && coreUtil.isDefined(partitionKey)) {
          throw new Error(`The partitionId (${partitionId}) and partitionKey (${partitionKey}) cannot both be specified.`);
        }
        if (!this._partitions.length) {
          throw new Error(`Unable to determine partitionIds, can't assign partitionId.`);
        }
        if (coreUtil.isDefined(partitionId) && this._partitions.includes(partitionId)) {
          return partitionId;
        }
        if (coreUtil.isDefined(partitionKey)) {
          return mapPartitionKeyToId(partitionKey, this._partitions.length).toString();
        }
        return this._assignRoundRobinPartition();
      }
      _assignRoundRobinPartition() {
        const maxPartitionIndex = this._partitions.length - 1;
        const proposedPartitionIndex = this._lastRoundRobinPartitionIndex + 1;
        const nextPartitionIndex = proposedPartitionIndex > maxPartitionIndex ? 0 : proposedPartitionIndex;
        this._lastRoundRobinPartitionIndex = nextPartitionIndex;
        return this._partitions[nextPartitionIndex];
      }
    };
    var EventHubBufferedProducerClient = class {
      /**
       * @readonly
       * The name of the Event Hub instance for which this client is created.
       */
      get eventHubName() {
        return this._producer.eventHubName;
      }
      /**
       * @readonly
       * The fully qualified namespace of the Event Hub instance for which this client is created.
       * This is likely to be similar to <yournamespace>.servicebus.windows.net.
       */
      get fullyQualifiedNamespace() {
        return this._producer.fullyQualifiedNamespace;
      }
      constructor(fullyQualifiedNamespaceOrConnectionString1, eventHubNameOrOptions2, credentialOrOptions3, options4) {
        var _a, _b, _c;
        this._abortController = new abortController.AbortController();
        this._isClosed = false;
        this._partitionAssigner = new PartitionAssigner();
        this._partitionIds = [];
        this._partitionChannels = /* @__PURE__ */ new Map();
        this._backgroundManagementInterval = 1e4;
        this._isBackgroundManagementRunning = false;
        if (typeof eventHubNameOrOptions2 !== "string") {
          this.identifier = (_a = eventHubNameOrOptions2.identifier) !== null && _a !== void 0 ? _a : getRandomName();
          this._producer = new EventHubProducerClient(fullyQualifiedNamespaceOrConnectionString1, Object.assign(Object.assign({}, eventHubNameOrOptions2), { identifier: this.identifier }));
          this._clientOptions = Object.assign({}, eventHubNameOrOptions2);
        } else if (!isCredential(credentialOrOptions3)) {
          this.identifier = (_b = credentialOrOptions3 === null || credentialOrOptions3 === void 0 ? void 0 : credentialOrOptions3.identifier) !== null && _b !== void 0 ? _b : getRandomName();
          this._producer = new EventHubProducerClient(fullyQualifiedNamespaceOrConnectionString1, eventHubNameOrOptions2, Object.assign(Object.assign({}, credentialOrOptions3), { identifier: this.identifier }));
          this._clientOptions = Object.assign({}, credentialOrOptions3);
        } else {
          this.identifier = (_c = options4 === null || options4 === void 0 ? void 0 : options4.identifier) !== null && _c !== void 0 ? _c : getRandomName();
          this._producer = new EventHubProducerClient(fullyQualifiedNamespaceOrConnectionString1, eventHubNameOrOptions2, credentialOrOptions3, Object.assign(Object.assign({}, options4), { identifier: this.identifier }));
          this._clientOptions = Object.assign({}, options4);
        }
        this._producer._enableIdempotentRetries = this._clientOptions.enableIdempotentRetries;
      }
      /**
       * Closes the AMQP connection to the Event Hub instance,
       * returning a promise that will be resolved when disconnection is completed.
       *
       * This will wait for enqueued events to be flushed to the service before closing
       * the connection.
       * To close without flushing, set the `flush` option to `false`.
       *
       * @param options - The set of options to apply to the operation call.
       * @returns Promise<void>
       * @throws Error if the underlying connection encounters an error while closing.
       */
      async close(options = {}) {
        logger2.verbose("closing buffered producer client...");
        if (!coreUtil.isDefined(options.flush) || options.flush === true) {
          await this.flush(options);
        }
        this._abortController.abort();
        await this._producer.close();
        this._isClosed = true;
      }
      /**
       * Enqueues an event into the buffer to be published to the Event Hub.
       * If there is no capacity in the buffer when this method is invoked,
       * it will wait for space to become available and ensure that the event
       * has been enqueued.
       *
       * When this call returns, the event has been accepted into the buffer,
       * but it may not have been published yet.
       * Publishing will take place at a nondeterministic point in the future as the buffer is processed.
       *
       * @param events - An {@link EventData} or `AmqpAnnotatedMessage`.
       * @param options - A set of options that can be specified to influence the way in which
       * the event is sent to the associated Event Hub.
       * - `abortSignal`  : A signal used to cancel the enqueueEvent operation.
       * - `partitionId`  : The partition this set of events will be sent to. If set, `partitionKey` can not be set.
       * - `partitionKey` : A value that is hashed to produce a partition assignment. If set, `partitionId` can not be set.
       * @returns The total number of events that are currently buffered and waiting to be published, across all partitions.
       */
      async enqueueEvent(event, options = {}) {
        if (this._isClosed) {
          throw new Error(`This EventHubBufferedProducerClient has already been closed. Create a new client to enqueue events.`);
        }
        if (!this._partitionIds.length) {
          await this._updatePartitionIds();
        }
        if (!this._isBackgroundManagementRunning) {
          this._startPartitionIdsUpdateLoop().catch((e) => {
            logger2.error(`The following error occured during batch creation or sending: ${JSON.stringify(e, void 0, "  ")}`);
          });
          this._isBackgroundManagementRunning = true;
        }
        const partitionId = this._partitionAssigner.assignPartition({
          partitionId: options.partitionId,
          partitionKey: options.partitionKey
        });
        const partitionChannel = this._getPartitionChannel(partitionId);
        await partitionChannel.enqueueEvent(event);
        return this._getTotalBufferedEventsCount();
      }
      /**
       * Enqueues events into the buffer to be published to the Event Hub.
       * If there is no capacity in the buffer when this method is invoked,
       * it will wait for space to become available and ensure that the events
       * have been enqueued.
       *
       * When this call returns, the events have been accepted into the buffer,
       * but it may not have been published yet.
       * Publishing will take place at a nondeterministic point in the future as the buffer is processed.
       *
       * @param events - An array of {@link EventData} or `AmqpAnnotatedMessage`.
       * @param options - A set of options that can be specified to influence the way in which
       * events are sent to the associated Event Hub.
       * - `abortSignal`  : A signal used to cancel the enqueueEvents operation.
       * - `partitionId`  : The partition this set of events will be sent to. If set, `partitionKey` can not be set.
       * - `partitionKey` : A value that is hashed to produce a partition assignment. If set, `partitionId` can not be set.
       * @returns The total number of events that are currently buffered and waiting to be published, across all partitions.
       */
      async enqueueEvents(events, options = {}) {
        for (const event of events) {
          await this.enqueueEvent(event, options);
        }
        return this._getTotalBufferedEventsCount();
      }
      /**
       * Attempts to publish all events in the buffer immediately.
       * This may result in multiple batches being published,
       * the outcome of each of which will be individually reported by
       * the `onSendEventsSuccessHandler` and `onSendEventsErrorHandler` handlers.
       *
       * @param options - The set of options to apply to the operation call.
       */
      async flush(options = {}) {
        await Promise.all(Array.from(this._partitionChannels.values()).map((channel) => channel.flush(options)));
      }
      /**
       * Provides the Event Hub runtime information.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the Event Hub instance.
       * @throws Error if the underlying connection has been closed, create a new EventHubBufferedProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getEventHubProperties(options = {}) {
        return this._producer.getEventHubProperties(options);
      }
      /**
       * Provides the id for each partition associated with the Event Hub.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with an Array of strings representing the id for
       * each partition associated with the Event Hub.
       * @throws Error if the underlying connection has been closed, create a new EventHubBufferedProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionIds(options = {}) {
        return this._producer.getPartitionIds(options);
      }
      /**
       * Provides information about the state of the specified partition.
       * @param partitionId - The id of the partition for which information is required.
       * @param options - The set of options to apply to the operation call.
       * @returns A promise that resolves with information about the state of the partition .
       * @throws Error if the underlying connection has been closed, create a new EventHubBufferedProducerClient.
       * @throws AbortError if the operation is cancelled via the abortSignal.
       */
      getPartitionProperties(partitionId, options = {}) {
        return this._producer.getPartitionProperties(partitionId, options);
      }
      /**
       * Gets the `BatchingPartitionChannel` associated with the partitionId.
       *
       * If one does not exist, it is created.
       */
      _getPartitionChannel(partitionId) {
        var _a;
        const partitionChannel = (_a = this._partitionChannels.get(partitionId)) !== null && _a !== void 0 ? _a : new BatchingPartitionChannel({
          loopAbortSignal: this._abortController.signal,
          maxBufferSize: this._clientOptions.maxEventBufferLengthPerPartition || 1500,
          maxWaitTimeInMs: this._clientOptions.maxWaitTimeInMs || 1e3,
          onSendEventsErrorHandler: this._clientOptions.onSendEventsErrorHandler,
          onSendEventsSuccessHandler: this._clientOptions.onSendEventsSuccessHandler,
          partitionId,
          producer: this._producer
        });
        this._partitionChannels.set(partitionId, partitionChannel);
        return partitionChannel;
      }
      /**
       * Returns the total number of buffered events across all partitions.
       */
      _getTotalBufferedEventsCount() {
        let total = 0;
        for (const [_, channel] of this._partitionChannels) {
          total += channel.getCurrentBufferedCount();
        }
        return total;
      }
      async _updatePartitionIds() {
        logger2.verbose("Checking for partition Id updates...");
        const queriedPartitionIds = await this.getPartitionIds();
        if (this._partitionIds.length !== queriedPartitionIds.length) {
          logger2.verbose("Applying partition Id updates");
          this._partitionIds = queriedPartitionIds;
          this._partitionAssigner.setPartitionIds(this._partitionIds);
        }
      }
      async _startPartitionIdsUpdateLoop() {
        logger2.verbose("Starting a background loop to check and apply partition id updates...");
        while (!this._abortController.signal.aborted && !this._isClosed) {
          await coreAmqp.delay(this._backgroundManagementInterval);
          if (!this._isClosed) {
            await this._updatePartitionIds();
          }
        }
      }
    };
    function createEventDataAdapter(params = {}) {
      return {
        produce: ({ data: body, contentType }) => {
          return Object.assign(Object.assign({}, params), {
            body,
            contentType
          });
        },
        consume: (message) => {
          const { body, contentType } = message;
          if (body === void 0) {
            throw new Error("Expected the body field to be defined");
          }
          if (contentType === void 0) {
            throw new Error("Expected the contentType field to be defined");
          }
          return {
            /**
             * If the raw response was parsed as JSON, we need to convert it to a Uint8Array,
             * otherwise, leave the payload as is.
             */
            data: typeof body === "object" ? Uint8Array.from(Object.values(body)) : body,
            contentType
          };
        }
      };
    }
    Object.defineProperty(exports, "MessagingError", {
      enumerable: true,
      get: function() {
        return coreAmqp.MessagingError;
      }
    });
    Object.defineProperty(exports, "RetryMode", {
      enumerable: true,
      get: function() {
        return coreAmqp.RetryMode;
      }
    });
    exports.EventHubBufferedProducerClient = EventHubBufferedProducerClient;
    exports.EventHubConsumerClient = EventHubConsumerClient2;
    exports.EventHubProducerClient = EventHubProducerClient;
    exports.createEventDataAdapter = createEventDataAdapter;
    exports.earliestEventPosition = earliestEventPosition2;
    exports.latestEventPosition = latestEventPosition;
    exports.logger = logger2;
    exports.parseEventHubConnectionString = parseEventHubConnectionString;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultRDSDataHttpAuthSchemeProvider = exports.defaultRDSDataHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var defaultRDSDataHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultRDSDataHttpAuthSchemeParametersProvider = defaultRDSDataHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "rds-data",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultRDSDataHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultRDSDataHttpAuthSchemeProvider = defaultRDSDataHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/package.json
var require_package5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-rds-data",
      description: "AWS SDK for JavaScript Rds Data Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-rds-data",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo rds-data"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.614.0",
        "@aws-sdk/client-sts": "3.614.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/credential-provider-node": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-rds-data",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-rds-data"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = { [s]: false, "type": "String" };
    var i = { [s]: true, "default": false, "type": "Boolean" };
    var j = { [v]: "Endpoint" };
    var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
    var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
    var m = {};
    var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
    var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
    var p = [k];
    var q = [l];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: "https://rds-data-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: "https://rds-data-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: "https://rds-data.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://rds-data.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset5();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider5();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2018-08-01",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultRDSDataHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "RDS Data",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-rds-data/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "../../node_modules/@aws-sdk/client-rds-data/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      ArrayValue: () => ArrayValue,
      BadRequestException: () => BadRequestException,
      BatchExecuteStatementCommand: () => BatchExecuteStatementCommand2,
      BeginTransactionCommand: () => BeginTransactionCommand2,
      CommitTransactionCommand: () => CommitTransactionCommand2,
      DatabaseErrorException: () => DatabaseErrorException,
      DatabaseNotFoundException: () => DatabaseNotFoundException,
      DatabaseUnavailableException: () => DatabaseUnavailableException,
      DecimalReturnType: () => DecimalReturnType,
      ExecuteSqlCommand: () => ExecuteSqlCommand,
      ExecuteStatementCommand: () => ExecuteStatementCommand2,
      Field: () => Field,
      ForbiddenException: () => ForbiddenException,
      HttpEndpointNotEnabledException: () => HttpEndpointNotEnabledException,
      InternalServerErrorException: () => InternalServerErrorException,
      InvalidSecretException: () => InvalidSecretException,
      LongReturnType: () => LongReturnType,
      NotFoundException: () => NotFoundException,
      RDSData: () => RDSData,
      RDSDataClient: () => RDSDataClient2,
      RDSDataServiceException: () => RDSDataServiceException,
      RecordsFormatType: () => RecordsFormatType,
      RollbackTransactionCommand: () => RollbackTransactionCommand,
      SecretsErrorException: () => SecretsErrorException,
      ServiceUnavailableError: () => ServiceUnavailableError,
      StatementTimeoutException: () => StatementTimeoutException,
      TransactionNotFoundException: () => TransactionNotFoundException,
      TypeHint: () => TypeHint,
      UnsupportedResultException: () => UnsupportedResultException,
      Value: () => Value,
      __Client: () => import_smithy_client5.Client
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs8();
    var import_config_resolver = require_dist_cjs11();
    var import_core2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_retry2 = require_dist_cjs33();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider5();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "rds-data"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig5();
    var import_region_config_resolver = require_dist_cjs43();
    var import_protocol_http5 = require_dist_cjs2();
    var import_smithy_client5 = require_dist_cjs32();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client5.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http5.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client5.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http5.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _RDSDataClient = class _RDSDataClient extends import_smithy_client5.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, import_middleware_endpoint2.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry2.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
          })
        );
        this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return import_httpAuthSchemeProvider.defaultRDSDataHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new import_core2.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    __name(_RDSDataClient, "RDSDataClient");
    var RDSDataClient2 = _RDSDataClient;
    var import_middleware_serde2 = require_dist_cjs17();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var _RDSDataServiceException = class _RDSDataServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _RDSDataServiceException2.prototype);
      }
    };
    __name(_RDSDataServiceException, "RDSDataServiceException");
    var RDSDataServiceException = _RDSDataServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _BadRequestException = class _BadRequestException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BadRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BadRequestException2.prototype);
      }
    };
    __name(_BadRequestException, "BadRequestException");
    var BadRequestException = _BadRequestException;
    var TypeHint = {
      DATE: "DATE",
      DECIMAL: "DECIMAL",
      JSON: "JSON",
      TIME: "TIME",
      TIMESTAMP: "TIMESTAMP",
      UUID: "UUID"
    };
    var _DatabaseErrorException = class _DatabaseErrorException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DatabaseErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "DatabaseErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DatabaseErrorException2.prototype);
      }
    };
    __name(_DatabaseErrorException, "DatabaseErrorException");
    var DatabaseErrorException = _DatabaseErrorException;
    var _DatabaseNotFoundException = class _DatabaseNotFoundException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DatabaseNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "DatabaseNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DatabaseNotFoundException2.prototype);
      }
    };
    __name(_DatabaseNotFoundException, "DatabaseNotFoundException");
    var DatabaseNotFoundException = _DatabaseNotFoundException;
    var _DatabaseUnavailableException = class _DatabaseUnavailableException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DatabaseUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "DatabaseUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _DatabaseUnavailableException2.prototype);
      }
    };
    __name(_DatabaseUnavailableException, "DatabaseUnavailableException");
    var DatabaseUnavailableException = _DatabaseUnavailableException;
    var _ForbiddenException = class _ForbiddenException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ForbiddenException",
          $fault: "client",
          ...opts
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ForbiddenException2.prototype);
      }
    };
    __name(_ForbiddenException, "ForbiddenException");
    var ForbiddenException = _ForbiddenException;
    var _HttpEndpointNotEnabledException = class _HttpEndpointNotEnabledException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "HttpEndpointNotEnabledException",
          $fault: "client",
          ...opts
        });
        this.name = "HttpEndpointNotEnabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HttpEndpointNotEnabledException2.prototype);
      }
    };
    __name(_HttpEndpointNotEnabledException, "HttpEndpointNotEnabledException");
    var HttpEndpointNotEnabledException = _HttpEndpointNotEnabledException;
    var _InternalServerErrorException = class _InternalServerErrorException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerErrorException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerErrorException2.prototype);
      }
    };
    __name(_InternalServerErrorException, "InternalServerErrorException");
    var InternalServerErrorException = _InternalServerErrorException;
    var _InvalidSecretException = class _InvalidSecretException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidSecretException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSecretException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSecretException2.prototype);
      }
    };
    __name(_InvalidSecretException, "InvalidSecretException");
    var InvalidSecretException = _InvalidSecretException;
    var _SecretsErrorException = class _SecretsErrorException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SecretsErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "SecretsErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SecretsErrorException2.prototype);
      }
    };
    __name(_SecretsErrorException, "SecretsErrorException");
    var SecretsErrorException = _SecretsErrorException;
    var _ServiceUnavailableError = class _ServiceUnavailableError2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceUnavailableError",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableError";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableError2.prototype);
      }
    };
    __name(_ServiceUnavailableError, "ServiceUnavailableError");
    var ServiceUnavailableError = _ServiceUnavailableError;
    var _StatementTimeoutException = class _StatementTimeoutException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StatementTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "StatementTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StatementTimeoutException2.prototype);
        this.dbConnectionId = opts.dbConnectionId;
      }
    };
    __name(_StatementTimeoutException, "StatementTimeoutException");
    var StatementTimeoutException = _StatementTimeoutException;
    var _TransactionNotFoundException = class _TransactionNotFoundException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TransactionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionNotFoundException2.prototype);
      }
    };
    __name(_TransactionNotFoundException, "TransactionNotFoundException");
    var TransactionNotFoundException = _TransactionNotFoundException;
    var _NotFoundException = class _NotFoundException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFoundException2.prototype);
      }
    };
    __name(_NotFoundException, "NotFoundException");
    var NotFoundException = _NotFoundException;
    var DecimalReturnType = {
      DOUBLE_OR_LONG: "DOUBLE_OR_LONG",
      STRING: "STRING"
    };
    var RecordsFormatType = {
      JSON: "JSON",
      NONE: "NONE"
    };
    var LongReturnType = {
      LONG: "LONG",
      STRING: "STRING"
    };
    var _UnsupportedResultException = class _UnsupportedResultException2 extends RDSDataServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedResultException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedResultException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedResultException2.prototype);
      }
    };
    __name(_UnsupportedResultException, "UnsupportedResultException");
    var UnsupportedResultException = _UnsupportedResultException;
    var ArrayValue;
    ((ArrayValue2) => {
      ArrayValue2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.booleanValues !== void 0)
          return visitor.booleanValues(value.booleanValues);
        if (value.longValues !== void 0)
          return visitor.longValues(value.longValues);
        if (value.doubleValues !== void 0)
          return visitor.doubleValues(value.doubleValues);
        if (value.stringValues !== void 0)
          return visitor.stringValues(value.stringValues);
        if (value.arrayValues !== void 0)
          return visitor.arrayValues(value.arrayValues);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(ArrayValue || (ArrayValue = {}));
    var Field;
    ((Field2) => {
      Field2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.isNull !== void 0)
          return visitor.isNull(value.isNull);
        if (value.booleanValue !== void 0)
          return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== void 0)
          return visitor.longValue(value.longValue);
        if (value.doubleValue !== void 0)
          return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== void 0)
          return visitor.stringValue(value.stringValue);
        if (value.blobValue !== void 0)
          return visitor.blobValue(value.blobValue);
        if (value.arrayValue !== void 0)
          return visitor.arrayValue(value.arrayValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(Field || (Field = {}));
    var Value;
    ((Value3) => {
      Value3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.isNull !== void 0)
          return visitor.isNull(value.isNull);
        if (value.bitValue !== void 0)
          return visitor.bitValue(value.bitValue);
        if (value.bigIntValue !== void 0)
          return visitor.bigIntValue(value.bigIntValue);
        if (value.intValue !== void 0)
          return visitor.intValue(value.intValue);
        if (value.doubleValue !== void 0)
          return visitor.doubleValue(value.doubleValue);
        if (value.realValue !== void 0)
          return visitor.realValue(value.realValue);
        if (value.stringValue !== void 0)
          return visitor.stringValue(value.stringValue);
        if (value.blobValue !== void 0)
          return visitor.blobValue(value.blobValue);
        if (value.arrayValues !== void 0)
          return visitor.arrayValues(value.arrayValues);
        if (value.structValue !== void 0)
          return visitor.structValue(value.structValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(Value || (Value = {}));
    var se_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/BatchExecute");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          database: [],
          parameterSets: (_) => se_SqlParameterSets(_, context),
          resourceArn: [],
          schema: [],
          secretArn: [],
          sql: [],
          transactionId: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_BatchExecuteStatementCommand");
    var se_BeginTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/BeginTransaction");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          database: [],
          resourceArn: [],
          schema: [],
          secretArn: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_BeginTransactionCommand");
    var se_CommitTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/CommitTransaction");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          resourceArn: [],
          secretArn: [],
          transactionId: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CommitTransactionCommand");
    var se_ExecuteSqlCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/ExecuteSql");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          awsSecretStoreArn: [],
          database: [],
          dbClusterOrInstanceArn: [],
          schema: [],
          sqlStatements: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ExecuteSqlCommand");
    var se_ExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/Execute");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          continueAfterTimeout: [],
          database: [],
          formatRecordsAs: [],
          includeResultMetadata: [],
          parameters: (_) => se_SqlParametersList(_, context),
          resourceArn: [],
          resultSetOptions: (_) => (0, import_smithy_client5._json)(_),
          schema: [],
          secretArn: [],
          sql: [],
          transactionId: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_ExecuteStatementCommand");
    var se_RollbackTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/RollbackTransaction");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          resourceArn: [],
          secretArn: [],
          transactionId: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RollbackTransactionCommand");
    var de_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        updateResults: (_) => de_UpdateResults(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_BatchExecuteStatementCommand");
    var de_BeginTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        transactionId: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_BeginTransactionCommand");
    var de_CommitTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        transactionStatus: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CommitTransactionCommand");
    var de_ExecuteSqlCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        sqlStatementResults: (_) => de_SqlStatementResults(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ExecuteSqlCommand");
    var de_ExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        columnMetadata: import_smithy_client5._json,
        formattedRecords: import_smithy_client5.expectString,
        generatedFields: (_) => de_FieldList(_, context),
        numberOfRecordsUpdated: import_smithy_client5.expectLong,
        records: (_) => de_SqlRecords(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ExecuteStatementCommand");
    var de_RollbackTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client5.take)(data, {
        transactionStatus: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RollbackTransactionCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "DatabaseErrorException":
        case "com.amazonaws.rdsdata#DatabaseErrorException":
          throw await de_DatabaseErrorExceptionRes(parsedOutput, context);
        case "DatabaseNotFoundException":
        case "com.amazonaws.rdsdata#DatabaseNotFoundException":
          throw await de_DatabaseNotFoundExceptionRes(parsedOutput, context);
        case "DatabaseUnavailableException":
        case "com.amazonaws.rdsdata#DatabaseUnavailableException":
          throw await de_DatabaseUnavailableExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "HttpEndpointNotEnabledException":
        case "com.amazonaws.rdsdata#HttpEndpointNotEnabledException":
          throw await de_HttpEndpointNotEnabledExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
          throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "InvalidSecretException":
        case "com.amazonaws.rdsdata#InvalidSecretException":
          throw await de_InvalidSecretExceptionRes(parsedOutput, context);
        case "SecretsErrorException":
        case "com.amazonaws.rdsdata#SecretsErrorException":
          throw await de_SecretsErrorExceptionRes(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
          throw await de_ServiceUnavailableErrorRes(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
          throw await de_StatementTimeoutExceptionRes(parsedOutput, context);
        case "TransactionNotFoundException":
        case "com.amazonaws.rdsdata#TransactionNotFoundException":
          throw await de_TransactionNotFoundExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.rdsdata#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedResultException":
        case "com.amazonaws.rdsdata#UnsupportedResultException":
          throw await de_UnsupportedResultExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(RDSDataServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_BadRequestExceptionRes");
    var de_DatabaseErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new DatabaseErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_DatabaseErrorExceptionRes");
    var de_DatabaseNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new DatabaseNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_DatabaseNotFoundExceptionRes");
    var de_DatabaseUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {});
      Object.assign(contents, doc);
      const exception = new DatabaseUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_DatabaseUnavailableExceptionRes");
    var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ForbiddenExceptionRes");
    var de_HttpEndpointNotEnabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new HttpEndpointNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_HttpEndpointNotEnabledExceptionRes");
    var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {});
      Object.assign(contents, doc);
      const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerErrorExceptionRes");
    var de_InvalidSecretExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidSecretException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidSecretExceptionRes");
    var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_NotFoundExceptionRes");
    var de_SecretsErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new SecretsErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_SecretsErrorExceptionRes");
    var de_ServiceUnavailableErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {});
      Object.assign(contents, doc);
      const exception = new ServiceUnavailableError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceUnavailableErrorRes");
    var de_StatementTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        dbConnectionId: import_smithy_client5.expectLong,
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new StatementTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_StatementTimeoutExceptionRes");
    var de_TransactionNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new TransactionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TransactionNotFoundExceptionRes");
    var de_UnsupportedResultExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        message: import_smithy_client5.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedResultException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedResultExceptionRes");
    var se_ArrayOfArray = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ArrayValue(entry, context);
      });
    }, "se_ArrayOfArray");
    var se_ArrayValue = /* @__PURE__ */ __name((input, context) => {
      return ArrayValue.visit(input, {
        arrayValues: (value) => ({ arrayValues: se_ArrayOfArray(value, context) }),
        booleanValues: (value) => ({ booleanValues: (0, import_smithy_client5._json)(value) }),
        doubleValues: (value) => ({ doubleValues: se_DoubleArray(value, context) }),
        longValues: (value) => ({ longValues: (0, import_smithy_client5._json)(value) }),
        stringValues: (value) => ({ stringValues: (0, import_smithy_client5._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    }, "se_ArrayValue");
    var se_DoubleArray = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client5.serializeFloat)(entry);
      });
    }, "se_DoubleArray");
    var se_Field = /* @__PURE__ */ __name((input, context) => {
      return Field.visit(input, {
        arrayValue: (value) => ({ arrayValue: se_ArrayValue(value, context) }),
        blobValue: (value) => ({ blobValue: context.base64Encoder(value) }),
        booleanValue: (value) => ({ booleanValue: value }),
        doubleValue: (value) => ({ doubleValue: (0, import_smithy_client5.serializeFloat)(value) }),
        isNull: (value) => ({ isNull: value }),
        longValue: (value) => ({ longValue: value }),
        stringValue: (value) => ({ stringValue: value }),
        _: (name, value) => ({ name: value })
      });
    }, "se_Field");
    var se_SqlParameter = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client5.take)(input, {
        name: [],
        typeHint: [],
        value: (_) => se_Field(_, context)
      });
    }, "se_SqlParameter");
    var se_SqlParameterSets = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_SqlParametersList(entry, context);
      });
    }, "se_SqlParameterSets");
    var se_SqlParametersList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_SqlParameter(entry, context);
      });
    }, "se_SqlParametersList");
    var de_ArrayOfArray = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ArrayValue((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_ArrayOfArray");
    var de_ArrayValue = /* @__PURE__ */ __name((output, context) => {
      if (output.arrayValues != null) {
        return {
          arrayValues: de_ArrayOfArray(output.arrayValues, context)
        };
      }
      if (output.booleanValues != null) {
        return {
          booleanValues: (0, import_smithy_client5._json)(output.booleanValues)
        };
      }
      if (output.doubleValues != null) {
        return {
          doubleValues: de_DoubleArray(output.doubleValues, context)
        };
      }
      if (output.longValues != null) {
        return {
          longValues: (0, import_smithy_client5._json)(output.longValues)
        };
      }
      if (output.stringValues != null) {
        return {
          stringValues: (0, import_smithy_client5._json)(output.stringValues)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_ArrayValue");
    var de_ArrayValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Value((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_ArrayValueList");
    var de_DoubleArray = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client5.limitedParseDouble)(entry);
      });
      return retVal;
    }, "de_DoubleArray");
    var de_Field = /* @__PURE__ */ __name((output, context) => {
      if (output.arrayValue != null) {
        return {
          arrayValue: de_ArrayValue((0, import_core22.awsExpectUnion)(output.arrayValue), context)
        };
      }
      if (output.blobValue != null) {
        return {
          blobValue: context.base64Decoder(output.blobValue)
        };
      }
      if ((0, import_smithy_client5.expectBoolean)(output.booleanValue) !== void 0) {
        return { booleanValue: (0, import_smithy_client5.expectBoolean)(output.booleanValue) };
      }
      if ((0, import_smithy_client5.limitedParseDouble)(output.doubleValue) !== void 0) {
        return { doubleValue: (0, import_smithy_client5.limitedParseDouble)(output.doubleValue) };
      }
      if ((0, import_smithy_client5.expectBoolean)(output.isNull) !== void 0) {
        return { isNull: (0, import_smithy_client5.expectBoolean)(output.isNull) };
      }
      if ((0, import_smithy_client5.expectLong)(output.longValue) !== void 0) {
        return { longValue: (0, import_smithy_client5.expectLong)(output.longValue) };
      }
      if ((0, import_smithy_client5.expectString)(output.stringValue) !== void 0) {
        return { stringValue: (0, import_smithy_client5.expectString)(output.stringValue) };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_Field");
    var de_FieldList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Field((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_FieldList");
    var de__Record = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        values: (_) => de_Row(_, context)
      });
    }, "de__Record");
    var de_Records = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de__Record(entry, context);
      });
      return retVal;
    }, "de_Records");
    var de_ResultFrame = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        records: (_) => de_Records(_, context),
        resultSetMetadata: import_smithy_client5._json
      });
    }, "de_ResultFrame");
    var de_Row = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Value((0, import_core22.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_Row");
    var de_SqlRecords = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_FieldList(entry, context);
      });
      return retVal;
    }, "de_SqlRecords");
    var de_SqlStatementResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        numberOfRecordsUpdated: import_smithy_client5.expectLong,
        resultFrame: (_) => de_ResultFrame(_, context)
      });
    }, "de_SqlStatementResult");
    var de_SqlStatementResults = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_SqlStatementResult(entry, context);
      });
      return retVal;
    }, "de_SqlStatementResults");
    var de_StructValue = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        attributes: (_) => de_ArrayValueList(_, context)
      });
    }, "de_StructValue");
    var de_UpdateResult = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client5.take)(output, {
        generatedFields: (_) => de_FieldList(_, context)
      });
    }, "de_UpdateResult");
    var de_UpdateResults = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_UpdateResult(entry, context);
      });
      return retVal;
    }, "de_UpdateResults");
    var de_Value = /* @__PURE__ */ __name((output, context) => {
      if (output.arrayValues != null) {
        return {
          arrayValues: de_ArrayValueList(output.arrayValues, context)
        };
      }
      if ((0, import_smithy_client5.expectLong)(output.bigIntValue) !== void 0) {
        return { bigIntValue: (0, import_smithy_client5.expectLong)(output.bigIntValue) };
      }
      if ((0, import_smithy_client5.expectBoolean)(output.bitValue) !== void 0) {
        return { bitValue: (0, import_smithy_client5.expectBoolean)(output.bitValue) };
      }
      if (output.blobValue != null) {
        return {
          blobValue: context.base64Decoder(output.blobValue)
        };
      }
      if ((0, import_smithy_client5.limitedParseDouble)(output.doubleValue) !== void 0) {
        return { doubleValue: (0, import_smithy_client5.limitedParseDouble)(output.doubleValue) };
      }
      if ((0, import_smithy_client5.expectInt32)(output.intValue) !== void 0) {
        return { intValue: (0, import_smithy_client5.expectInt32)(output.intValue) };
      }
      if ((0, import_smithy_client5.expectBoolean)(output.isNull) !== void 0) {
        return { isNull: (0, import_smithy_client5.expectBoolean)(output.isNull) };
      }
      if ((0, import_smithy_client5.limitedParseFloat32)(output.realValue) !== void 0) {
        return { realValue: (0, import_smithy_client5.limitedParseFloat32)(output.realValue) };
      }
      if ((0, import_smithy_client5.expectString)(output.stringValue) !== void 0) {
        return { stringValue: (0, import_smithy_client5.expectString)(output.stringValue) };
      }
      if (output.structValue != null) {
        return {
          structValue: de_StructValue(output.structValue, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_Value");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _BatchExecuteStatementCommand = class _BatchExecuteStatementCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "BatchExecuteStatement", {}).n("RDSDataClient", "BatchExecuteStatementCommand").f(void 0, void 0).ser(se_BatchExecuteStatementCommand).de(de_BatchExecuteStatementCommand).build() {
    };
    __name(_BatchExecuteStatementCommand, "BatchExecuteStatementCommand");
    var BatchExecuteStatementCommand2 = _BatchExecuteStatementCommand;
    var _BeginTransactionCommand = class _BeginTransactionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "BeginTransaction", {}).n("RDSDataClient", "BeginTransactionCommand").f(void 0, void 0).ser(se_BeginTransactionCommand).de(de_BeginTransactionCommand).build() {
    };
    __name(_BeginTransactionCommand, "BeginTransactionCommand");
    var BeginTransactionCommand2 = _BeginTransactionCommand;
    var _CommitTransactionCommand = class _CommitTransactionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "CommitTransaction", {}).n("RDSDataClient", "CommitTransactionCommand").f(void 0, void 0).ser(se_CommitTransactionCommand).de(de_CommitTransactionCommand).build() {
    };
    __name(_CommitTransactionCommand, "CommitTransactionCommand");
    var CommitTransactionCommand2 = _CommitTransactionCommand;
    var _ExecuteSqlCommand = class _ExecuteSqlCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "ExecuteSql", {}).n("RDSDataClient", "ExecuteSqlCommand").f(void 0, void 0).ser(se_ExecuteSqlCommand).de(de_ExecuteSqlCommand).build() {
    };
    __name(_ExecuteSqlCommand, "ExecuteSqlCommand");
    var ExecuteSqlCommand = _ExecuteSqlCommand;
    var _ExecuteStatementCommand = class _ExecuteStatementCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "ExecuteStatement", {}).n("RDSDataClient", "ExecuteStatementCommand").f(void 0, void 0).ser(se_ExecuteStatementCommand).de(de_ExecuteStatementCommand).build() {
    };
    __name(_ExecuteStatementCommand, "ExecuteStatementCommand");
    var ExecuteStatementCommand2 = _ExecuteStatementCommand;
    var _RollbackTransactionCommand = class _RollbackTransactionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("RdsDataService", "RollbackTransaction", {}).n("RDSDataClient", "RollbackTransactionCommand").f(void 0, void 0).ser(se_RollbackTransactionCommand).de(de_RollbackTransactionCommand).build() {
    };
    __name(_RollbackTransactionCommand, "RollbackTransactionCommand");
    var RollbackTransactionCommand = _RollbackTransactionCommand;
    var commands = {
      BatchExecuteStatementCommand: BatchExecuteStatementCommand2,
      BeginTransactionCommand: BeginTransactionCommand2,
      CommitTransactionCommand: CommitTransactionCommand2,
      ExecuteSqlCommand,
      ExecuteStatementCommand: ExecuteStatementCommand2,
      RollbackTransactionCommand
    };
    var _RDSData = class _RDSData extends RDSDataClient2 {
    };
    __name(_RDSData, "RDSData");
    var RDSData = _RDSData;
    (0, import_smithy_client5.createAggregatedClient)(commands, RDSData);
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSNSHttpAuthSchemeProvider = exports.defaultSNSHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs10();
    var defaultSNSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSNSHttpAuthSchemeParametersProvider = defaultSNSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sns",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultSNSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSNSHttpAuthSchemeProvider = defaultSNSHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sns/package.json
var require_package6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sns",
      description: "AWS SDK for JavaScript Sns Client for Node.js, Browser and React Native",
      version: "3.614.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sns",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sns"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.614.0",
        "@aws-sdk/client-sts": "3.614.0",
        "@aws-sdk/core": "3.614.0",
        "@aws-sdk/credential-provider-node": "3.614.0",
        "@aws-sdk/middleware-host-header": "3.609.0",
        "@aws-sdk/middleware-logger": "3.609.0",
        "@aws-sdk/middleware-recursion-detection": "3.609.0",
        "@aws-sdk/middleware-user-agent": "3.614.0",
        "@aws-sdk/region-config-resolver": "3.614.0",
        "@aws-sdk/types": "3.609.0",
        "@aws-sdk/util-endpoints": "3.614.0",
        "@aws-sdk/util-user-agent-browser": "3.609.0",
        "@aws-sdk/util-user-agent-node": "3.614.0",
        "@smithy/config-resolver": "^3.0.5",
        "@smithy/core": "^2.2.6",
        "@smithy/fetch-http-handler": "^3.2.1",
        "@smithy/hash-node": "^3.0.3",
        "@smithy/invalid-dependency": "^3.0.3",
        "@smithy/middleware-content-length": "^3.0.3",
        "@smithy/middleware-endpoint": "^3.0.5",
        "@smithy/middleware-retry": "^3.0.9",
        "@smithy/middleware-serde": "^3.0.3",
        "@smithy/middleware-stack": "^3.0.3",
        "@smithy/node-config-provider": "^3.1.4",
        "@smithy/node-http-handler": "^3.1.2",
        "@smithy/protocol-http": "^4.0.3",
        "@smithy/smithy-client": "^3.1.7",
        "@smithy/types": "^3.3.0",
        "@smithy/url-parser": "^3.0.3",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.9",
        "@smithy/util-defaults-mode-node": "^3.0.9",
        "@smithy/util-endpoints": "^2.0.5",
        "@smithy/util-middleware": "^3.0.3",
        "@smithy/util-retry": "^3.0.3",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sns",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sns"
      }
    };
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/endpoint/ruleset.js
var require_ruleset6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "stringEquals";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [x]: "Region" };
    var p = { [v]: "getAttr", [w]: [{ [x]: g }, "supportsFIPS"] };
    var q = { [v]: c, [w]: [true, { [v]: "getAttr", [w]: [{ [x]: g }, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [o];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, p] }, q], rules: [{ endpoint: { url: "https://sns-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [p, a] }], rules: [{ conditions: [{ [v]: h, [w]: [o, "us-gov-east-1"] }], endpoint: { url: "https://sns.us-gov-east-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [v]: h, [w]: [o, "us-gov-west-1"] }], endpoint: { url: "https://sns.us-gov-west-1.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://sns-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://sns.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://sns.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs7();
    var util_endpoints_2 = require_dist_cjs6();
    var ruleset_1 = require_ruleset6();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs32();
    var url_parser_1 = require_dist_cjs16();
    var util_base64_1 = require_dist_cjs25();
    var util_utf8_1 = require_dist_cjs24();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider6();
    var endpointResolver_1 = require_endpointResolver6();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2010-03-31",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSNSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SNS",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/runtimeConfig.js
var require_runtimeConfig6 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs39();
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs40();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs14();
    var node_http_handler_1 = require_dist_cjs28();
    var util_body_length_node_1 = require_dist_cjs41();
    var util_retry_1 = require_dist_cjs20();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared6();
    var smithy_client_1 = require_dist_cjs32();
    var util_defaults_mode_node_1 = require_dist_cjs42();
    var smithy_client_2 = require_dist_cjs32();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/@aws-sdk/client-sns/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "../../node_modules/@aws-sdk/client-sns/dist-cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AddPermissionCommand: () => AddPermissionCommand,
      AuthorizationErrorException: () => AuthorizationErrorException,
      BatchEntryIdsNotDistinctException: () => BatchEntryIdsNotDistinctException,
      BatchRequestTooLongException: () => BatchRequestTooLongException,
      CheckIfPhoneNumberIsOptedOutCommand: () => CheckIfPhoneNumberIsOptedOutCommand,
      CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog: () => CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog,
      ConcurrentAccessException: () => ConcurrentAccessException,
      ConfirmSubscriptionCommand: () => ConfirmSubscriptionCommand,
      CreatePlatformApplicationCommand: () => CreatePlatformApplicationCommand,
      CreatePlatformEndpointCommand: () => CreatePlatformEndpointCommand,
      CreateSMSSandboxPhoneNumberCommand: () => CreateSMSSandboxPhoneNumberCommand,
      CreateSMSSandboxPhoneNumberInputFilterSensitiveLog: () => CreateSMSSandboxPhoneNumberInputFilterSensitiveLog,
      CreateTopicCommand: () => CreateTopicCommand,
      DeleteEndpointCommand: () => DeleteEndpointCommand,
      DeletePlatformApplicationCommand: () => DeletePlatformApplicationCommand,
      DeleteSMSSandboxPhoneNumberCommand: () => DeleteSMSSandboxPhoneNumberCommand,
      DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog: () => DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog,
      DeleteTopicCommand: () => DeleteTopicCommand,
      EmptyBatchRequestException: () => EmptyBatchRequestException,
      EndpointDisabledException: () => EndpointDisabledException,
      FilterPolicyLimitExceededException: () => FilterPolicyLimitExceededException,
      GetDataProtectionPolicyCommand: () => GetDataProtectionPolicyCommand,
      GetEndpointAttributesCommand: () => GetEndpointAttributesCommand,
      GetPlatformApplicationAttributesCommand: () => GetPlatformApplicationAttributesCommand,
      GetSMSAttributesCommand: () => GetSMSAttributesCommand,
      GetSMSSandboxAccountStatusCommand: () => GetSMSSandboxAccountStatusCommand,
      GetSubscriptionAttributesCommand: () => GetSubscriptionAttributesCommand,
      GetTopicAttributesCommand: () => GetTopicAttributesCommand,
      InternalErrorException: () => InternalErrorException,
      InvalidBatchEntryIdException: () => InvalidBatchEntryIdException,
      InvalidParameterException: () => InvalidParameterException,
      InvalidParameterValueException: () => InvalidParameterValueException,
      InvalidSecurityException: () => InvalidSecurityException,
      InvalidStateException: () => InvalidStateException,
      KMSAccessDeniedException: () => KMSAccessDeniedException,
      KMSDisabledException: () => KMSDisabledException,
      KMSInvalidStateException: () => KMSInvalidStateException,
      KMSNotFoundException: () => KMSNotFoundException,
      KMSOptInRequired: () => KMSOptInRequired,
      KMSThrottlingException: () => KMSThrottlingException,
      LanguageCodeString: () => LanguageCodeString,
      ListEndpointsByPlatformApplicationCommand: () => ListEndpointsByPlatformApplicationCommand,
      ListOriginationNumbersCommand: () => ListOriginationNumbersCommand,
      ListOriginationNumbersResultFilterSensitiveLog: () => ListOriginationNumbersResultFilterSensitiveLog,
      ListPhoneNumbersOptedOutCommand: () => ListPhoneNumbersOptedOutCommand,
      ListPhoneNumbersOptedOutResponseFilterSensitiveLog: () => ListPhoneNumbersOptedOutResponseFilterSensitiveLog,
      ListPlatformApplicationsCommand: () => ListPlatformApplicationsCommand,
      ListSMSSandboxPhoneNumbersCommand: () => ListSMSSandboxPhoneNumbersCommand,
      ListSMSSandboxPhoneNumbersResultFilterSensitiveLog: () => ListSMSSandboxPhoneNumbersResultFilterSensitiveLog,
      ListSubscriptionsByTopicCommand: () => ListSubscriptionsByTopicCommand,
      ListSubscriptionsCommand: () => ListSubscriptionsCommand,
      ListTagsForResourceCommand: () => ListTagsForResourceCommand,
      ListTopicsCommand: () => ListTopicsCommand,
      NotFoundException: () => NotFoundException,
      NumberCapability: () => NumberCapability,
      OptInPhoneNumberCommand: () => OptInPhoneNumberCommand,
      OptInPhoneNumberInputFilterSensitiveLog: () => OptInPhoneNumberInputFilterSensitiveLog,
      OptedOutException: () => OptedOutException,
      PhoneNumberInformationFilterSensitiveLog: () => PhoneNumberInformationFilterSensitiveLog,
      PlatformApplicationDisabledException: () => PlatformApplicationDisabledException,
      PublishBatchCommand: () => PublishBatchCommand,
      PublishCommand: () => PublishCommand,
      PublishInputFilterSensitiveLog: () => PublishInputFilterSensitiveLog,
      PutDataProtectionPolicyCommand: () => PutDataProtectionPolicyCommand,
      RemovePermissionCommand: () => RemovePermissionCommand,
      ReplayLimitExceededException: () => ReplayLimitExceededException,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RouteType: () => RouteType,
      SMSSandboxPhoneNumberFilterSensitiveLog: () => SMSSandboxPhoneNumberFilterSensitiveLog,
      SMSSandboxPhoneNumberVerificationStatus: () => SMSSandboxPhoneNumberVerificationStatus,
      SNS: () => SNS2,
      SNSClient: () => SNSClient,
      SNSServiceException: () => SNSServiceException,
      SetEndpointAttributesCommand: () => SetEndpointAttributesCommand,
      SetPlatformApplicationAttributesCommand: () => SetPlatformApplicationAttributesCommand,
      SetSMSAttributesCommand: () => SetSMSAttributesCommand,
      SetSubscriptionAttributesCommand: () => SetSubscriptionAttributesCommand,
      SetTopicAttributesCommand: () => SetTopicAttributesCommand,
      StaleTagException: () => StaleTagException,
      SubscribeCommand: () => SubscribeCommand,
      SubscriptionLimitExceededException: () => SubscriptionLimitExceededException,
      TagLimitExceededException: () => TagLimitExceededException,
      TagPolicyException: () => TagPolicyException,
      TagResourceCommand: () => TagResourceCommand,
      ThrottledException: () => ThrottledException,
      TooManyEntriesInBatchRequestException: () => TooManyEntriesInBatchRequestException,
      TopicLimitExceededException: () => TopicLimitExceededException,
      UnsubscribeCommand: () => UnsubscribeCommand,
      UntagResourceCommand: () => UntagResourceCommand,
      UserErrorException: () => UserErrorException,
      ValidationException: () => ValidationException,
      VerificationException: () => VerificationException,
      VerifySMSSandboxPhoneNumberCommand: () => VerifySMSSandboxPhoneNumberCommand,
      VerifySMSSandboxPhoneNumberInputFilterSensitiveLog: () => VerifySMSSandboxPhoneNumberInputFilterSensitiveLog,
      __Client: () => import_smithy_client5.Client,
      paginateListEndpointsByPlatformApplication: () => paginateListEndpointsByPlatformApplication,
      paginateListOriginationNumbers: () => paginateListOriginationNumbers,
      paginateListPhoneNumbersOptedOut: () => paginateListPhoneNumbersOptedOut,
      paginateListPlatformApplications: () => paginateListPlatformApplications,
      paginateListSMSSandboxPhoneNumbers: () => paginateListSMSSandboxPhoneNumbers,
      paginateListSubscriptions: () => paginateListSubscriptions,
      paginateListSubscriptionsByTopic: () => paginateListSubscriptionsByTopic,
      paginateListTopics: () => paginateListTopics
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs8();
    var import_config_resolver = require_dist_cjs11();
    var import_core2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint2 = require_dist_cjs18();
    var import_middleware_retry2 = require_dist_cjs33();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider6();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sns"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig6();
    var import_region_config_resolver = require_dist_cjs43();
    var import_protocol_http5 = require_dist_cjs2();
    var import_smithy_client5 = require_dist_cjs32();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client5.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http5.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client5.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http5.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SNSClient = class _SNSClient extends import_smithy_client5.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, import_middleware_endpoint2.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry2.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
          })
        );
        this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return import_httpAuthSchemeProvider.defaultSNSHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new import_core2.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
    __name(_SNSClient, "SNSClient");
    var SNSClient = _SNSClient;
    var import_middleware_serde2 = require_dist_cjs17();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var _SNSServiceException = class _SNSServiceException2 extends import_smithy_client5.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SNSServiceException2.prototype);
      }
    };
    __name(_SNSServiceException, "SNSServiceException");
    var SNSServiceException = _SNSServiceException;
    var _AuthorizationErrorException = class _AuthorizationErrorException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AuthorizationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationErrorException2.prototype);
      }
    };
    __name(_AuthorizationErrorException, "AuthorizationErrorException");
    var AuthorizationErrorException = _AuthorizationErrorException;
    var _InternalErrorException = class _InternalErrorException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalErrorException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalErrorException2.prototype);
      }
    };
    __name(_InternalErrorException, "InternalErrorException");
    var InternalErrorException = _InternalErrorException;
    var _InvalidParameterException = class _InvalidParameterException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterException2.prototype);
      }
    };
    __name(_InvalidParameterException, "InvalidParameterException");
    var InvalidParameterException = _InvalidParameterException;
    var _NotFoundException = class _NotFoundException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFoundException2.prototype);
      }
    };
    __name(_NotFoundException, "NotFoundException");
    var NotFoundException = _NotFoundException;
    var _ThrottledException = class _ThrottledException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ThrottledException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottledException2.prototype);
      }
    };
    __name(_ThrottledException, "ThrottledException");
    var ThrottledException = _ThrottledException;
    var _FilterPolicyLimitExceededException = class _FilterPolicyLimitExceededException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "FilterPolicyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "FilterPolicyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _FilterPolicyLimitExceededException2.prototype);
      }
    };
    __name(_FilterPolicyLimitExceededException, "FilterPolicyLimitExceededException");
    var FilterPolicyLimitExceededException = _FilterPolicyLimitExceededException;
    var _ReplayLimitExceededException = class _ReplayLimitExceededException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ReplayLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ReplayLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplayLimitExceededException2.prototype);
      }
    };
    __name(_ReplayLimitExceededException, "ReplayLimitExceededException");
    var ReplayLimitExceededException = _ReplayLimitExceededException;
    var _SubscriptionLimitExceededException = class _SubscriptionLimitExceededException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SubscriptionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubscriptionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SubscriptionLimitExceededException2.prototype);
      }
    };
    __name(_SubscriptionLimitExceededException, "SubscriptionLimitExceededException");
    var SubscriptionLimitExceededException = _SubscriptionLimitExceededException;
    var LanguageCodeString = {
      de_DE: "de-DE",
      en_GB: "en-GB",
      en_US: "en-US",
      es_419: "es-419",
      es_ES: "es-ES",
      fr_CA: "fr-CA",
      fr_FR: "fr-FR",
      it_IT: "it-IT",
      jp_JP: "ja-JP",
      kr_KR: "kr-KR",
      pt_BR: "pt-BR",
      zh_CN: "zh-CN",
      zh_TW: "zh-TW"
    };
    var _OptedOutException = class _OptedOutException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OptedOutException",
          $fault: "client",
          ...opts
        });
        this.name = "OptedOutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OptedOutException2.prototype);
      }
    };
    __name(_OptedOutException, "OptedOutException");
    var OptedOutException = _OptedOutException;
    var _UserErrorException = class _UserErrorException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UserErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "UserErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserErrorException2.prototype);
      }
    };
    __name(_UserErrorException, "UserErrorException");
    var UserErrorException = _UserErrorException;
    var _ConcurrentAccessException = class _ConcurrentAccessException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConcurrentAccessException",
          $fault: "client",
          ...opts
        });
        this.name = "ConcurrentAccessException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConcurrentAccessException2.prototype);
      }
    };
    __name(_ConcurrentAccessException, "ConcurrentAccessException");
    var ConcurrentAccessException = _ConcurrentAccessException;
    var _InvalidSecurityException = class _InvalidSecurityException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidSecurityException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSecurityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSecurityException2.prototype);
      }
    };
    __name(_InvalidSecurityException, "InvalidSecurityException");
    var InvalidSecurityException = _InvalidSecurityException;
    var _StaleTagException = class _StaleTagException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StaleTagException",
          $fault: "client",
          ...opts
        });
        this.name = "StaleTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StaleTagException2.prototype);
      }
    };
    __name(_StaleTagException, "StaleTagException");
    var StaleTagException = _StaleTagException;
    var _TagLimitExceededException = class _TagLimitExceededException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TagLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TagLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TagLimitExceededException2.prototype);
      }
    };
    __name(_TagLimitExceededException, "TagLimitExceededException");
    var TagLimitExceededException = _TagLimitExceededException;
    var _TagPolicyException = class _TagPolicyException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TagPolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "TagPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TagPolicyException2.prototype);
      }
    };
    __name(_TagPolicyException, "TagPolicyException");
    var TagPolicyException = _TagPolicyException;
    var _TopicLimitExceededException = class _TopicLimitExceededException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TopicLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TopicLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TopicLimitExceededException2.prototype);
      }
    };
    __name(_TopicLimitExceededException, "TopicLimitExceededException");
    var TopicLimitExceededException = _TopicLimitExceededException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _InvalidStateException = class _InvalidStateException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidStateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidStateException2.prototype);
      }
    };
    __name(_InvalidStateException, "InvalidStateException");
    var InvalidStateException = _InvalidStateException;
    var NumberCapability = {
      MMS: "MMS",
      SMS: "SMS",
      VOICE: "VOICE"
    };
    var RouteType = {
      Premium: "Premium",
      Promotional: "Promotional",
      Transactional: "Transactional"
    };
    var _ValidationException = class _ValidationException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ValidationException",
          $fault: "client",
          ...opts
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ValidationException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ValidationException, "ValidationException");
    var ValidationException = _ValidationException;
    var SMSSandboxPhoneNumberVerificationStatus = {
      Pending: "Pending",
      Verified: "Verified"
    };
    var _EndpointDisabledException = class _EndpointDisabledException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "EndpointDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "EndpointDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EndpointDisabledException2.prototype);
      }
    };
    __name(_EndpointDisabledException, "EndpointDisabledException");
    var EndpointDisabledException = _EndpointDisabledException;
    var _InvalidParameterValueException = class _InvalidParameterValueException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidParameterValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterValueException2.prototype);
      }
    };
    __name(_InvalidParameterValueException, "InvalidParameterValueException");
    var InvalidParameterValueException = _InvalidParameterValueException;
    var _KMSAccessDeniedException = class _KMSAccessDeniedException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSAccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSAccessDeniedException2.prototype);
      }
    };
    __name(_KMSAccessDeniedException, "KMSAccessDeniedException");
    var KMSAccessDeniedException = _KMSAccessDeniedException;
    var _KMSDisabledException = class _KMSDisabledException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSDisabledException2.prototype);
      }
    };
    __name(_KMSDisabledException, "KMSDisabledException");
    var KMSDisabledException = _KMSDisabledException;
    var _KMSInvalidStateException = class _KMSInvalidStateException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSInvalidStateException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSInvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSInvalidStateException2.prototype);
      }
    };
    __name(_KMSInvalidStateException, "KMSInvalidStateException");
    var KMSInvalidStateException = _KMSInvalidStateException;
    var _KMSNotFoundException = class _KMSNotFoundException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSNotFoundException2.prototype);
      }
    };
    __name(_KMSNotFoundException, "KMSNotFoundException");
    var KMSNotFoundException = _KMSNotFoundException;
    var _KMSOptInRequired = class _KMSOptInRequired2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSOptInRequired",
          $fault: "client",
          ...opts
        });
        this.name = "KMSOptInRequired";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSOptInRequired2.prototype);
      }
    };
    __name(_KMSOptInRequired, "KMSOptInRequired");
    var KMSOptInRequired = _KMSOptInRequired;
    var _KMSThrottlingException = class _KMSThrottlingException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "KMSThrottlingException",
          $fault: "client",
          ...opts
        });
        this.name = "KMSThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _KMSThrottlingException2.prototype);
      }
    };
    __name(_KMSThrottlingException, "KMSThrottlingException");
    var KMSThrottlingException = _KMSThrottlingException;
    var _PlatformApplicationDisabledException = class _PlatformApplicationDisabledException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PlatformApplicationDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "PlatformApplicationDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PlatformApplicationDisabledException2.prototype);
      }
    };
    __name(_PlatformApplicationDisabledException, "PlatformApplicationDisabledException");
    var PlatformApplicationDisabledException = _PlatformApplicationDisabledException;
    var _BatchEntryIdsNotDistinctException = class _BatchEntryIdsNotDistinctException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BatchEntryIdsNotDistinctException",
          $fault: "client",
          ...opts
        });
        this.name = "BatchEntryIdsNotDistinctException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BatchEntryIdsNotDistinctException2.prototype);
      }
    };
    __name(_BatchEntryIdsNotDistinctException, "BatchEntryIdsNotDistinctException");
    var BatchEntryIdsNotDistinctException = _BatchEntryIdsNotDistinctException;
    var _BatchRequestTooLongException = class _BatchRequestTooLongException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BatchRequestTooLongException",
          $fault: "client",
          ...opts
        });
        this.name = "BatchRequestTooLongException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BatchRequestTooLongException2.prototype);
      }
    };
    __name(_BatchRequestTooLongException, "BatchRequestTooLongException");
    var BatchRequestTooLongException = _BatchRequestTooLongException;
    var _EmptyBatchRequestException = class _EmptyBatchRequestException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "EmptyBatchRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "EmptyBatchRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EmptyBatchRequestException2.prototype);
      }
    };
    __name(_EmptyBatchRequestException, "EmptyBatchRequestException");
    var EmptyBatchRequestException = _EmptyBatchRequestException;
    var _InvalidBatchEntryIdException = class _InvalidBatchEntryIdException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidBatchEntryIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidBatchEntryIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidBatchEntryIdException2.prototype);
      }
    };
    __name(_InvalidBatchEntryIdException, "InvalidBatchEntryIdException");
    var InvalidBatchEntryIdException = _InvalidBatchEntryIdException;
    var _TooManyEntriesInBatchRequestException = class _TooManyEntriesInBatchRequestException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyEntriesInBatchRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyEntriesInBatchRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyEntriesInBatchRequestException2.prototype);
      }
    };
    __name(_TooManyEntriesInBatchRequestException, "TooManyEntriesInBatchRequestException");
    var TooManyEntriesInBatchRequestException = _TooManyEntriesInBatchRequestException;
    var _VerificationException = class _VerificationException2 extends SNSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "VerificationException",
          $fault: "client",
          ...opts
        });
        this.name = "VerificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _VerificationException2.prototype);
        this.Message = opts.Message;
        this.Status = opts.Status;
      }
    };
    __name(_VerificationException, "VerificationException");
    var VerificationException = _VerificationException;
    var CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.phoneNumber && { phoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog");
    var CreateSMSSandboxPhoneNumberInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "CreateSMSSandboxPhoneNumberInputFilterSensitiveLog");
    var DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog");
    var PhoneNumberInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "PhoneNumberInformationFilterSensitiveLog");
    var ListOriginationNumbersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumbers && {
        PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberInformationFilterSensitiveLog(item))
      }
    }), "ListOriginationNumbersResultFilterSensitiveLog");
    var ListPhoneNumbersOptedOutResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.phoneNumbers && { phoneNumbers: import_smithy_client5.SENSITIVE_STRING }
    }), "ListPhoneNumbersOptedOutResponseFilterSensitiveLog");
    var SMSSandboxPhoneNumberFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "SMSSandboxPhoneNumberFilterSensitiveLog");
    var ListSMSSandboxPhoneNumbersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumbers && {
        PhoneNumbers: obj.PhoneNumbers.map((item) => SMSSandboxPhoneNumberFilterSensitiveLog(item))
      }
    }), "ListSMSSandboxPhoneNumbersResultFilterSensitiveLog");
    var OptInPhoneNumberInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.phoneNumber && { phoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "OptInPhoneNumberInputFilterSensitiveLog");
    var PublishInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "PublishInputFilterSensitiveLog");
    var VerifySMSSandboxPhoneNumberInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: import_smithy_client5.SENSITIVE_STRING }
    }), "VerifySMSSandboxPhoneNumberInputFilterSensitiveLog");
    var se_AddPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AddPermissionInput(input, context),
        [_A]: _AP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AddPermissionCommand");
    var se_CheckIfPhoneNumberIsOptedOutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CheckIfPhoneNumberIsOptedOutInput(input, context),
        [_A]: _CIPNIOO,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CheckIfPhoneNumberIsOptedOutCommand");
    var se_ConfirmSubscriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ConfirmSubscriptionInput(input, context),
        [_A]: _CS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ConfirmSubscriptionCommand");
    var se_CreatePlatformApplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreatePlatformApplicationInput(input, context),
        [_A]: _CPA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreatePlatformApplicationCommand");
    var se_CreatePlatformEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreatePlatformEndpointInput(input, context),
        [_A]: _CPE,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreatePlatformEndpointCommand");
    var se_CreateSMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateSMSSandboxPhoneNumberInput(input, context),
        [_A]: _CSMSSPN,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateSMSSandboxPhoneNumberCommand");
    var se_CreateTopicCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateTopicInput(input, context),
        [_A]: _CT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateTopicCommand");
    var se_DeleteEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteEndpointInput(input, context),
        [_A]: _DE,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteEndpointCommand");
    var se_DeletePlatformApplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeletePlatformApplicationInput(input, context),
        [_A]: _DPA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeletePlatformApplicationCommand");
    var se_DeleteSMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteSMSSandboxPhoneNumberInput(input, context),
        [_A]: _DSMSSPN,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteSMSSandboxPhoneNumberCommand");
    var se_DeleteTopicCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteTopicInput(input, context),
        [_A]: _DT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteTopicCommand");
    var se_GetDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetDataProtectionPolicyInput(input, context),
        [_A]: _GDPP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetDataProtectionPolicyCommand");
    var se_GetEndpointAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetEndpointAttributesInput(input, context),
        [_A]: _GEA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetEndpointAttributesCommand");
    var se_GetPlatformApplicationAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetPlatformApplicationAttributesInput(input, context),
        [_A]: _GPAA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetPlatformApplicationAttributesCommand");
    var se_GetSMSAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSMSAttributesInput(input, context),
        [_A]: _GSMSA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSMSAttributesCommand");
    var se_GetSMSSandboxAccountStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSMSSandboxAccountStatusInput(input, context),
        [_A]: _GSMSSAS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSMSSandboxAccountStatusCommand");
    var se_GetSubscriptionAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSubscriptionAttributesInput(input, context),
        [_A]: _GSA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSubscriptionAttributesCommand");
    var se_GetTopicAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetTopicAttributesInput(input, context),
        [_A]: _GTA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetTopicAttributesCommand");
    var se_ListEndpointsByPlatformApplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListEndpointsByPlatformApplicationInput(input, context),
        [_A]: _LEBPA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListEndpointsByPlatformApplicationCommand");
    var se_ListOriginationNumbersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListOriginationNumbersRequest(input, context),
        [_A]: _LON,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListOriginationNumbersCommand");
    var se_ListPhoneNumbersOptedOutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListPhoneNumbersOptedOutInput(input, context),
        [_A]: _LPNOO,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListPhoneNumbersOptedOutCommand");
    var se_ListPlatformApplicationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListPlatformApplicationsInput(input, context),
        [_A]: _LPA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListPlatformApplicationsCommand");
    var se_ListSMSSandboxPhoneNumbersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListSMSSandboxPhoneNumbersInput(input, context),
        [_A]: _LSMSSPN,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListSMSSandboxPhoneNumbersCommand");
    var se_ListSubscriptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListSubscriptionsInput(input, context),
        [_A]: _LS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListSubscriptionsCommand");
    var se_ListSubscriptionsByTopicCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListSubscriptionsByTopicInput(input, context),
        [_A]: _LSBT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListSubscriptionsByTopicCommand");
    var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTagsForResourceRequest(input, context),
        [_A]: _LTFR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTagsForResourceCommand");
    var se_ListTopicsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTopicsInput(input, context),
        [_A]: _LT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTopicsCommand");
    var se_OptInPhoneNumberCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_OptInPhoneNumberInput(input, context),
        [_A]: _OIPN,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_OptInPhoneNumberCommand");
    var se_PublishCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_PublishInput(input, context),
        [_A]: _P,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PublishCommand");
    var se_PublishBatchCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_PublishBatchInput(input, context),
        [_A]: _PB,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PublishBatchCommand");
    var se_PutDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_PutDataProtectionPolicyInput(input, context),
        [_A]: _PDPP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PutDataProtectionPolicyCommand");
    var se_RemovePermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RemovePermissionInput(input, context),
        [_A]: _RP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RemovePermissionCommand");
    var se_SetEndpointAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetEndpointAttributesInput(input, context),
        [_A]: _SEA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetEndpointAttributesCommand");
    var se_SetPlatformApplicationAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetPlatformApplicationAttributesInput(input, context),
        [_A]: _SPAA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetPlatformApplicationAttributesCommand");
    var se_SetSMSAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetSMSAttributesInput(input, context),
        [_A]: _SSMSA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetSMSAttributesCommand");
    var se_SetSubscriptionAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetSubscriptionAttributesInput(input, context),
        [_A]: _SSA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetSubscriptionAttributesCommand");
    var se_SetTopicAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetTopicAttributesInput(input, context),
        [_A]: _STA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetTopicAttributesCommand");
    var se_SubscribeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SubscribeInput(input, context),
        [_A]: _S,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SubscribeCommand");
    var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_TagResourceRequest(input, context),
        [_A]: _TR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_TagResourceCommand");
    var se_UnsubscribeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UnsubscribeInput(input, context),
        [_A]: _U,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UnsubscribeCommand");
    var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UntagResourceRequest(input, context),
        [_A]: _UR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UntagResourceCommand");
    var se_VerifySMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_VerifySMSSandboxPhoneNumberInput(input, context),
        [_A]: _VSMSSPN,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_VerifySMSSandboxPhoneNumberCommand");
    var de_AddPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_AddPermissionCommand");
    var de_CheckIfPhoneNumberIsOptedOutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CheckIfPhoneNumberIsOptedOutResponse(data.CheckIfPhoneNumberIsOptedOutResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CheckIfPhoneNumberIsOptedOutCommand");
    var de_ConfirmSubscriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ConfirmSubscriptionResponse(data.ConfirmSubscriptionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ConfirmSubscriptionCommand");
    var de_CreatePlatformApplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreatePlatformApplicationResponse(data.CreatePlatformApplicationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreatePlatformApplicationCommand");
    var de_CreatePlatformEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateEndpointResponse(data.CreatePlatformEndpointResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreatePlatformEndpointCommand");
    var de_CreateSMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateSMSSandboxPhoneNumberResult(data.CreateSMSSandboxPhoneNumberResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateSMSSandboxPhoneNumberCommand");
    var de_CreateTopicCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateTopicResponse(data.CreateTopicResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateTopicCommand");
    var de_DeleteEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_DeleteEndpointCommand");
    var de_DeletePlatformApplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_DeletePlatformApplicationCommand");
    var de_DeleteSMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeleteSMSSandboxPhoneNumberResult(data.DeleteSMSSandboxPhoneNumberResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteSMSSandboxPhoneNumberCommand");
    var de_DeleteTopicCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_DeleteTopicCommand");
    var de_GetDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetDataProtectionPolicyResponse(data.GetDataProtectionPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetDataProtectionPolicyCommand");
    var de_GetEndpointAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetEndpointAttributesResponse(data.GetEndpointAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetEndpointAttributesCommand");
    var de_GetPlatformApplicationAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetPlatformApplicationAttributesResponse(data.GetPlatformApplicationAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetPlatformApplicationAttributesCommand");
    var de_GetSMSAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSMSAttributesResponse(data.GetSMSAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSMSAttributesCommand");
    var de_GetSMSSandboxAccountStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSMSSandboxAccountStatusResult(data.GetSMSSandboxAccountStatusResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSMSSandboxAccountStatusCommand");
    var de_GetSubscriptionAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSubscriptionAttributesResponse(data.GetSubscriptionAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSubscriptionAttributesCommand");
    var de_GetTopicAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetTopicAttributesResponse(data.GetTopicAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetTopicAttributesCommand");
    var de_ListEndpointsByPlatformApplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListEndpointsByPlatformApplicationResponse(data.ListEndpointsByPlatformApplicationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListEndpointsByPlatformApplicationCommand");
    var de_ListOriginationNumbersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListOriginationNumbersResult(data.ListOriginationNumbersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListOriginationNumbersCommand");
    var de_ListPhoneNumbersOptedOutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListPhoneNumbersOptedOutResponse(data.ListPhoneNumbersOptedOutResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListPhoneNumbersOptedOutCommand");
    var de_ListPlatformApplicationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListPlatformApplicationsResponse(data.ListPlatformApplicationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListPlatformApplicationsCommand");
    var de_ListSMSSandboxPhoneNumbersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListSMSSandboxPhoneNumbersResult(data.ListSMSSandboxPhoneNumbersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListSMSSandboxPhoneNumbersCommand");
    var de_ListSubscriptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListSubscriptionsResponse(data.ListSubscriptionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListSubscriptionsCommand");
    var de_ListSubscriptionsByTopicCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListSubscriptionsByTopicResponse(data.ListSubscriptionsByTopicResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListSubscriptionsByTopicCommand");
    var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListTagsForResourceResponse(data.ListTagsForResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTagsForResourceCommand");
    var de_ListTopicsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListTopicsResponse(data.ListTopicsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTopicsCommand");
    var de_OptInPhoneNumberCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_OptInPhoneNumberResponse(data.OptInPhoneNumberResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_OptInPhoneNumberCommand");
    var de_PublishCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_PublishResponse(data.PublishResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PublishCommand");
    var de_PublishBatchCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_PublishBatchResponse(data.PublishBatchResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PublishBatchCommand");
    var de_PutDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_PutDataProtectionPolicyCommand");
    var de_RemovePermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_RemovePermissionCommand");
    var de_SetEndpointAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SetEndpointAttributesCommand");
    var de_SetPlatformApplicationAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SetPlatformApplicationAttributesCommand");
    var de_SetSMSAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_SetSMSAttributesResponse(data.SetSMSAttributesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SetSMSAttributesCommand");
    var de_SetSubscriptionAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SetSubscriptionAttributesCommand");
    var de_SetTopicAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SetTopicAttributesCommand");
    var de_SubscribeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_SubscribeResponse(data.SubscribeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SubscribeCommand");
    var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_TagResourceResponse(data.TagResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_TagResourceCommand");
    var de_UnsubscribeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client5.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_UnsubscribeCommand");
    var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UntagResourceResponse(data.UntagResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UntagResourceCommand");
    var de_VerifySMSSandboxPhoneNumberCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_VerifySMSSandboxPhoneNumberResult(data.VerifySMSSandboxPhoneNumberResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_VerifySMSSandboxPhoneNumberCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationError":
        case "com.amazonaws.sns#AuthorizationErrorException":
          throw await de_AuthorizationErrorExceptionRes(parsedOutput, context);
        case "InternalError":
        case "com.amazonaws.sns#InternalErrorException":
          throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidParameter":
        case "com.amazonaws.sns#InvalidParameterException":
          throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NotFound":
        case "com.amazonaws.sns#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "Throttled":
        case "com.amazonaws.sns#ThrottledException":
          throw await de_ThrottledExceptionRes(parsedOutput, context);
        case "FilterPolicyLimitExceeded":
        case "com.amazonaws.sns#FilterPolicyLimitExceededException":
          throw await de_FilterPolicyLimitExceededExceptionRes(parsedOutput, context);
        case "ReplayLimitExceeded":
        case "com.amazonaws.sns#ReplayLimitExceededException":
          throw await de_ReplayLimitExceededExceptionRes(parsedOutput, context);
        case "SubscriptionLimitExceeded":
        case "com.amazonaws.sns#SubscriptionLimitExceededException":
          throw await de_SubscriptionLimitExceededExceptionRes(parsedOutput, context);
        case "OptedOut":
        case "com.amazonaws.sns#OptedOutException":
          throw await de_OptedOutExceptionRes(parsedOutput, context);
        case "UserError":
        case "com.amazonaws.sns#UserErrorException":
          throw await de_UserErrorExceptionRes(parsedOutput, context);
        case "ConcurrentAccess":
        case "com.amazonaws.sns#ConcurrentAccessException":
          throw await de_ConcurrentAccessExceptionRes(parsedOutput, context);
        case "InvalidSecurity":
        case "com.amazonaws.sns#InvalidSecurityException":
          throw await de_InvalidSecurityExceptionRes(parsedOutput, context);
        case "StaleTag":
        case "com.amazonaws.sns#StaleTagException":
          throw await de_StaleTagExceptionRes(parsedOutput, context);
        case "TagLimitExceeded":
        case "com.amazonaws.sns#TagLimitExceededException":
          throw await de_TagLimitExceededExceptionRes(parsedOutput, context);
        case "TagPolicy":
        case "com.amazonaws.sns#TagPolicyException":
          throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "TopicLimitExceeded":
        case "com.amazonaws.sns#TopicLimitExceededException":
          throw await de_TopicLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sns#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "InvalidState":
        case "com.amazonaws.sns#InvalidStateException":
          throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.sns#ValidationException":
          throw await de_ValidationExceptionRes(parsedOutput, context);
        case "EndpointDisabled":
        case "com.amazonaws.sns#EndpointDisabledException":
          throw await de_EndpointDisabledExceptionRes(parsedOutput, context);
        case "KMSAccessDenied":
        case "com.amazonaws.sns#KMSAccessDeniedException":
          throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);
        case "KMSDisabled":
        case "com.amazonaws.sns#KMSDisabledException":
          throw await de_KMSDisabledExceptionRes(parsedOutput, context);
        case "KMSInvalidState":
        case "com.amazonaws.sns#KMSInvalidStateException":
          throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
        case "KMSNotFound":
        case "com.amazonaws.sns#KMSNotFoundException":
          throw await de_KMSNotFoundExceptionRes(parsedOutput, context);
        case "KMSOptInRequired":
        case "com.amazonaws.sns#KMSOptInRequired":
          throw await de_KMSOptInRequiredRes(parsedOutput, context);
        case "KMSThrottling":
        case "com.amazonaws.sns#KMSThrottlingException":
          throw await de_KMSThrottlingExceptionRes(parsedOutput, context);
        case "ParameterValueInvalid":
        case "com.amazonaws.sns#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "PlatformApplicationDisabled":
        case "com.amazonaws.sns#PlatformApplicationDisabledException":
          throw await de_PlatformApplicationDisabledExceptionRes(parsedOutput, context);
        case "BatchEntryIdsNotDistinct":
        case "com.amazonaws.sns#BatchEntryIdsNotDistinctException":
          throw await de_BatchEntryIdsNotDistinctExceptionRes(parsedOutput, context);
        case "BatchRequestTooLong":
        case "com.amazonaws.sns#BatchRequestTooLongException":
          throw await de_BatchRequestTooLongExceptionRes(parsedOutput, context);
        case "EmptyBatchRequest":
        case "com.amazonaws.sns#EmptyBatchRequestException":
          throw await de_EmptyBatchRequestExceptionRes(parsedOutput, context);
        case "InvalidBatchEntryId":
        case "com.amazonaws.sns#InvalidBatchEntryIdException":
          throw await de_InvalidBatchEntryIdExceptionRes(parsedOutput, context);
        case "TooManyEntriesInBatchRequest":
        case "com.amazonaws.sns#TooManyEntriesInBatchRequestException":
          throw await de_TooManyEntriesInBatchRequestExceptionRes(parsedOutput, context);
        case "VerificationException":
        case "com.amazonaws.sns#VerificationException":
          throw await de_VerificationExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_AuthorizationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_AuthorizationErrorException(body.Error, context);
      const exception = new AuthorizationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_AuthorizationErrorExceptionRes");
    var de_BatchEntryIdsNotDistinctExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_BatchEntryIdsNotDistinctException(body.Error, context);
      const exception = new BatchEntryIdsNotDistinctException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_BatchEntryIdsNotDistinctExceptionRes");
    var de_BatchRequestTooLongExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_BatchRequestTooLongException(body.Error, context);
      const exception = new BatchRequestTooLongException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_BatchRequestTooLongExceptionRes");
    var de_ConcurrentAccessExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ConcurrentAccessException(body.Error, context);
      const exception = new ConcurrentAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ConcurrentAccessExceptionRes");
    var de_EmptyBatchRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_EmptyBatchRequestException(body.Error, context);
      const exception = new EmptyBatchRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_EmptyBatchRequestExceptionRes");
    var de_EndpointDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_EndpointDisabledException(body.Error, context);
      const exception = new EndpointDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_EndpointDisabledExceptionRes");
    var de_FilterPolicyLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_FilterPolicyLimitExceededException(body.Error, context);
      const exception = new FilterPolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_FilterPolicyLimitExceededExceptionRes");
    var de_InternalErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InternalErrorException(body.Error, context);
      const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InternalErrorExceptionRes");
    var de_InvalidBatchEntryIdExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidBatchEntryIdException(body.Error, context);
      const exception = new InvalidBatchEntryIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidBatchEntryIdExceptionRes");
    var de_InvalidParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidParameterException(body.Error, context);
      const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidParameterExceptionRes");
    var de_InvalidParameterValueExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidParameterValueException(body.Error, context);
      const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidParameterValueExceptionRes");
    var de_InvalidSecurityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidSecurityException(body.Error, context);
      const exception = new InvalidSecurityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidSecurityExceptionRes");
    var de_InvalidStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidStateException(body.Error, context);
      const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_InvalidStateExceptionRes");
    var de_KMSAccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSAccessDeniedException(body.Error, context);
      const exception = new KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSAccessDeniedExceptionRes");
    var de_KMSDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSDisabledException(body.Error, context);
      const exception = new KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSDisabledExceptionRes");
    var de_KMSInvalidStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSInvalidStateException(body.Error, context);
      const exception = new KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSInvalidStateExceptionRes");
    var de_KMSNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSNotFoundException(body.Error, context);
      const exception = new KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSNotFoundExceptionRes");
    var de_KMSOptInRequiredRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSOptInRequired(body.Error, context);
      const exception = new KMSOptInRequired({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSOptInRequiredRes");
    var de_KMSThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_KMSThrottlingException(body.Error, context);
      const exception = new KMSThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_KMSThrottlingExceptionRes");
    var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NotFoundException(body.Error, context);
      const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_NotFoundExceptionRes");
    var de_OptedOutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_OptedOutException(body.Error, context);
      const exception = new OptedOutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_OptedOutExceptionRes");
    var de_PlatformApplicationDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PlatformApplicationDisabledException(body.Error, context);
      const exception = new PlatformApplicationDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_PlatformApplicationDisabledExceptionRes");
    var de_ReplayLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReplayLimitExceededException(body.Error, context);
      const exception = new ReplayLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ReplayLimitExceededExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ResourceNotFoundException(body.Error, context);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_StaleTagExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StaleTagException(body.Error, context);
      const exception = new StaleTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_StaleTagExceptionRes");
    var de_SubscriptionLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SubscriptionLimitExceededException(body.Error, context);
      const exception = new SubscriptionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_SubscriptionLimitExceededExceptionRes");
    var de_TagLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TagLimitExceededException(body.Error, context);
      const exception = new TagLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TagLimitExceededExceptionRes");
    var de_TagPolicyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TagPolicyException(body.Error, context);
      const exception = new TagPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TagPolicyExceptionRes");
    var de_ThrottledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ThrottledException(body.Error, context);
      const exception = new ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ThrottledExceptionRes");
    var de_TooManyEntriesInBatchRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TooManyEntriesInBatchRequestException(body.Error, context);
      const exception = new TooManyEntriesInBatchRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TooManyEntriesInBatchRequestExceptionRes");
    var de_TopicLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TopicLimitExceededException(body.Error, context);
      const exception = new TopicLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_TopicLimitExceededExceptionRes");
    var de_UserErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserErrorException(body.Error, context);
      const exception = new UserErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_UserErrorExceptionRes");
    var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ValidationException(body.Error, context);
      const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_ValidationExceptionRes");
    var de_VerificationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_VerificationException(body.Error, context);
      const exception = new VerificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client5.decorateServiceException)(exception, body);
    }, "de_VerificationExceptionRes");
    var se_ActionsList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_ActionsList");
    var se_AddPermissionInput = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b;
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_L] != null) {
        entries[_L] = input[_L];
      }
      if (input[_AWSAI] != null) {
        const memberEntries = se_DelegatesList(input[_AWSAI], context);
        if (((_a2 = input[_AWSAI]) == null ? void 0 : _a2.length) === 0) {
          entries.AWSAccountId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AWSAccountId.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_AN] != null) {
        const memberEntries = se_ActionsList(input[_AN], context);
        if (((_b = input[_AN]) == null ? void 0 : _b.length) === 0) {
          entries.ActionName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ActionName.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_AddPermissionInput");
    var se_CheckIfPhoneNumberIsOptedOutInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_pN] != null) {
        entries[_pN] = input[_pN];
      }
      return entries;
    }, "se_CheckIfPhoneNumberIsOptedOutInput");
    var se_ConfirmSubscriptionInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_AOU] != null) {
        entries[_AOU] = input[_AOU];
      }
      return entries;
    }, "se_ConfirmSubscriptionInput");
    var se_CreatePlatformApplicationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_Pl] != null) {
        entries[_Pl] = input[_Pl];
      }
      if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_CreatePlatformApplicationInput");
    var se_CreatePlatformEndpointInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_CUD] != null) {
        entries[_CUD] = input[_CUD];
      }
      if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_CreatePlatformEndpointInput");
    var se_CreateSMSSandboxPhoneNumberInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PN] != null) {
        entries[_PN] = input[_PN];
      }
      if (input[_LC] != null) {
        entries[_LC] = input[_LC];
      }
      return entries;
    }, "se_CreateSMSSandboxPhoneNumberInput");
    var se_CreateTopicInput = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_At] != null) {
        const memberEntries = se_TopicAttributesMap(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (((_a2 = input[_Ta]) == null ? void 0 : _a2.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DPP] != null) {
        entries[_DPP] = input[_DPP];
      }
      return entries;
    }, "se_CreateTopicInput");
    var se_DelegatesList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_DelegatesList");
    var se_DeleteEndpointInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EA] != null) {
        entries[_EA] = input[_EA];
      }
      return entries;
    }, "se_DeleteEndpointInput");
    var se_DeletePlatformApplicationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
      }
      return entries;
    }, "se_DeletePlatformApplicationInput");
    var se_DeleteSMSSandboxPhoneNumberInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PN] != null) {
        entries[_PN] = input[_PN];
      }
      return entries;
    }, "se_DeleteSMSSandboxPhoneNumberInput");
    var se_DeleteTopicInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      return entries;
    }, "se_DeleteTopicInput");
    var se_GetDataProtectionPolicyInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      return entries;
    }, "se_GetDataProtectionPolicyInput");
    var se_GetEndpointAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EA] != null) {
        entries[_EA] = input[_EA];
      }
      return entries;
    }, "se_GetEndpointAttributesInput");
    var se_GetPlatformApplicationAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
      }
      return entries;
    }, "se_GetPlatformApplicationAttributesInput");
    var se_GetSMSAttributesInput = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_a] != null) {
        const memberEntries = se_ListString(input[_a], context);
        if (((_a2 = input[_a]) == null ? void 0 : _a2.length) === 0) {
          entries.attributes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetSMSAttributesInput");
    var se_GetSMSSandboxAccountStatusInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_GetSMSSandboxAccountStatusInput");
    var se_GetSubscriptionAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SA] != null) {
        entries[_SA] = input[_SA];
      }
      return entries;
    }, "se_GetSubscriptionAttributesInput");
    var se_GetTopicAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      return entries;
    }, "se_GetTopicAttributesInput");
    var se_ListEndpointsByPlatformApplicationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListEndpointsByPlatformApplicationInput");
    var se_ListOriginationNumbersRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListOriginationNumbersRequest");
    var se_ListPhoneNumbersOptedOutInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_nT] != null) {
        entries[_nT] = input[_nT];
      }
      return entries;
    }, "se_ListPhoneNumbersOptedOutInput");
    var se_ListPlatformApplicationsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListPlatformApplicationsInput");
    var se_ListSMSSandboxPhoneNumbersInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListSMSSandboxPhoneNumbersInput");
    var se_ListString = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_ListString");
    var se_ListSubscriptionsByTopicInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListSubscriptionsByTopicInput");
    var se_ListSubscriptionsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListSubscriptionsInput");
    var se_ListTagsForResourceRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      return entries;
    }, "se_ListTagsForResourceRequest");
    var se_ListTopicsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListTopicsInput");
    var se_MapStringToString = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    }, "se_MapStringToString");
    var se_MessageAttributeMap = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.Name`] = key;
        const memberEntries = se_MessageAttributeValue(input[key], context);
        Object.entries(memberEntries).forEach(([key2, value]) => {
          entries[`entry.${counter}.Value.${key2}`] = value;
        });
        counter++;
      });
      return entries;
    }, "se_MessageAttributeMap");
    var se_MessageAttributeValue = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DTa] != null) {
        entries[_DTa] = input[_DTa];
      }
      if (input[_SV] != null) {
        entries[_SV] = input[_SV];
      }
      if (input[_BV] != null) {
        entries[_BV] = context.base64Encoder(input[_BV]);
      }
      return entries;
    }, "se_MessageAttributeValue");
    var se_OptInPhoneNumberInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_pN] != null) {
        entries[_pN] = input[_pN];
      }
      return entries;
    }, "se_OptInPhoneNumberInput");
    var se_PublishBatchInput = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_PBRE] != null) {
        const memberEntries = se_PublishBatchRequestEntryList(input[_PBRE], context);
        if (((_a2 = input[_PBRE]) == null ? void 0 : _a2.length) === 0) {
          entries.PublishBatchRequestEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PublishBatchRequestEntries.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_PublishBatchInput");
    var se_PublishBatchRequestEntry = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_I] != null) {
        entries[_I] = input[_I];
      }
      if (input[_M] != null) {
        entries[_M] = input[_M];
      }
      if (input[_Su] != null) {
        entries[_Su] = input[_Su];
      }
      if (input[_MS] != null) {
        entries[_MS] = input[_MS];
      }
      if (input[_MA] != null) {
        const memberEntries = se_MessageAttributeMap(input[_MA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `MessageAttributes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_MDI] != null) {
        entries[_MDI] = input[_MDI];
      }
      if (input[_MGI] != null) {
        entries[_MGI] = input[_MGI];
      }
      return entries;
    }, "se_PublishBatchRequestEntry");
    var se_PublishBatchRequestEntryList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PublishBatchRequestEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_PublishBatchRequestEntryList");
    var se_PublishInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_TAa] != null) {
        entries[_TAa] = input[_TAa];
      }
      if (input[_PN] != null) {
        entries[_PN] = input[_PN];
      }
      if (input[_M] != null) {
        entries[_M] = input[_M];
      }
      if (input[_Su] != null) {
        entries[_Su] = input[_Su];
      }
      if (input[_MS] != null) {
        entries[_MS] = input[_MS];
      }
      if (input[_MA] != null) {
        const memberEntries = se_MessageAttributeMap(input[_MA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `MessageAttributes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_MDI] != null) {
        entries[_MDI] = input[_MDI];
      }
      if (input[_MGI] != null) {
        entries[_MGI] = input[_MGI];
      }
      return entries;
    }, "se_PublishInput");
    var se_PutDataProtectionPolicyInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_DPP] != null) {
        entries[_DPP] = input[_DPP];
      }
      return entries;
    }, "se_PutDataProtectionPolicyInput");
    var se_RemovePermissionInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_L] != null) {
        entries[_L] = input[_L];
      }
      return entries;
    }, "se_RemovePermissionInput");
    var se_SetEndpointAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EA] != null) {
        entries[_EA] = input[_EA];
      }
      if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_SetEndpointAttributesInput");
    var se_SetPlatformApplicationAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
      }
      if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_SetPlatformApplicationAttributesInput");
    var se_SetSMSAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        const memberEntries = se_MapStringToString(input[_a], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `attributes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_SetSMSAttributesInput");
    var se_SetSubscriptionAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SA] != null) {
        entries[_SA] = input[_SA];
      }
      if (input[_ANt] != null) {
        entries[_ANt] = input[_ANt];
      }
      if (input[_AV] != null) {
        entries[_AV] = input[_AV];
      }
      return entries;
    }, "se_SetSubscriptionAttributesInput");
    var se_SetTopicAttributesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_ANt] != null) {
        entries[_ANt] = input[_ANt];
      }
      if (input[_AV] != null) {
        entries[_AV] = input[_AV];
      }
      return entries;
    }, "se_SetTopicAttributesInput");
    var se_SubscribeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_Pr] != null) {
        entries[_Pr] = input[_Pr];
      }
      if (input[_E] != null) {
        entries[_E] = input[_E];
      }
      if (input[_At] != null) {
        const memberEntries = se_SubscriptionAttributesMap(input[_At], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Attributes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RSA] != null) {
        entries[_RSA] = input[_RSA];
      }
      return entries;
    }, "se_SubscribeInput");
    var se_SubscriptionAttributesMap = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    }, "se_SubscriptionAttributesMap");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_Tag");
    var se_TagKeyList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_TagKeyList");
    var se_TagList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_TagList");
    var se_TagResourceRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (((_a2 = input[_Ta]) == null ? void 0 : _a2.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_TagResourceRequest");
    var se_TopicAttributesMap = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    }, "se_TopicAttributesMap");
    var se_UnsubscribeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SA] != null) {
        entries[_SA] = input[_SA];
      }
      return entries;
    }, "se_UnsubscribeInput");
    var se_UntagResourceRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_TK] != null) {
        const memberEntries = se_TagKeyList(input[_TK], context);
        if (((_a2 = input[_TK]) == null ? void 0 : _a2.length) === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_UntagResourceRequest");
    var se_VerifySMSSandboxPhoneNumberInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PN] != null) {
        entries[_PN] = input[_PN];
      }
      if (input[_OTP] != null) {
        entries[_OTP] = input[_OTP];
      }
      return entries;
    }, "se_VerifySMSSandboxPhoneNumberInput");
    var de_AuthorizationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_AuthorizationErrorException");
    var de_BatchEntryIdsNotDistinctException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_BatchEntryIdsNotDistinctException");
    var de_BatchRequestTooLongException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_BatchRequestTooLongException");
    var de_BatchResultErrorEntry = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client5.expectString)(output[_I]);
      }
      if (output[_C] != null) {
        contents[_C] = (0, import_smithy_client5.expectString)(output[_C]);
      }
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client5.expectString)(output[_M]);
      }
      if (output[_SF] != null) {
        contents[_SF] = (0, import_smithy_client5.parseBoolean)(output[_SF]);
      }
      return contents;
    }, "de_BatchResultErrorEntry");
    var de_BatchResultErrorEntryList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_BatchResultErrorEntry(entry, context);
      });
    }, "de_BatchResultErrorEntryList");
    var de_CheckIfPhoneNumberIsOptedOutResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_iOO] != null) {
        contents[_iOO] = (0, import_smithy_client5.parseBoolean)(output[_iOO]);
      }
      return contents;
    }, "de_CheckIfPhoneNumberIsOptedOutResponse");
    var de_ConcurrentAccessException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_ConcurrentAccessException");
    var de_ConfirmSubscriptionResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SA] != null) {
        contents[_SA] = (0, import_smithy_client5.expectString)(output[_SA]);
      }
      return contents;
    }, "de_ConfirmSubscriptionResponse");
    var de_CreateEndpointResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_EA] != null) {
        contents[_EA] = (0, import_smithy_client5.expectString)(output[_EA]);
      }
      return contents;
    }, "de_CreateEndpointResponse");
    var de_CreatePlatformApplicationResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PAA] != null) {
        contents[_PAA] = (0, import_smithy_client5.expectString)(output[_PAA]);
      }
      return contents;
    }, "de_CreatePlatformApplicationResponse");
    var de_CreateSMSSandboxPhoneNumberResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_CreateSMSSandboxPhoneNumberResult");
    var de_CreateTopicResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client5.expectString)(output[_TA]);
      }
      return contents;
    }, "de_CreateTopicResponse");
    var de_DeleteSMSSandboxPhoneNumberResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeleteSMSSandboxPhoneNumberResult");
    var de_EmptyBatchRequestException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_EmptyBatchRequestException");
    var de_Endpoint = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_EA] != null) {
        contents[_EA] = (0, import_smithy_client5.expectString)(output[_EA]);
      }
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_Endpoint");
    var de_EndpointDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_EndpointDisabledException");
    var de_FilterPolicyLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_FilterPolicyLimitExceededException");
    var de_GetDataProtectionPolicyResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DPP] != null) {
        contents[_DPP] = (0, import_smithy_client5.expectString)(output[_DPP]);
      }
      return contents;
    }, "de_GetDataProtectionPolicyResponse");
    var de_GetEndpointAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_GetEndpointAttributesResponse");
    var de_GetPlatformApplicationAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_GetPlatformApplicationAttributesResponse");
    var de_GetSMSAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.attributes === "") {
        contents[_a] = {};
      } else if (output[_a] != null && output[_a][_e] != null) {
        contents[_a] = de_MapStringToString((0, import_smithy_client5.getArrayIfSingleItem)(output[_a][_e]), context);
      }
      return contents;
    }, "de_GetSMSAttributesResponse");
    var de_GetSMSSandboxAccountStatusResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_IIS] != null) {
        contents[_IIS] = (0, import_smithy_client5.parseBoolean)(output[_IIS]);
      }
      return contents;
    }, "de_GetSMSSandboxAccountStatusResult");
    var de_GetSubscriptionAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_SubscriptionAttributesMap((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_GetSubscriptionAttributesResponse");
    var de_GetTopicAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_TopicAttributesMap((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_GetTopicAttributesResponse");
    var de_InternalErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InternalErrorException");
    var de_InvalidBatchEntryIdException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidBatchEntryIdException");
    var de_InvalidParameterException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidParameterException");
    var de_InvalidParameterValueException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidParameterValueException");
    var de_InvalidSecurityException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidSecurityException");
    var de_InvalidStateException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidStateException");
    var de_KMSAccessDeniedException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSAccessDeniedException");
    var de_KMSDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSDisabledException");
    var de_KMSInvalidStateException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSInvalidStateException");
    var de_KMSNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSNotFoundException");
    var de_KMSOptInRequired = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSOptInRequired");
    var de_KMSThrottlingException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_KMSThrottlingException");
    var de_ListEndpointsByPlatformApplicationResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Endpoints === "") {
        contents[_En] = [];
      } else if (output[_En] != null && output[_En][_me] != null) {
        contents[_En] = de_ListOfEndpoints((0, import_smithy_client5.getArrayIfSingleItem)(output[_En][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListEndpointsByPlatformApplicationResponse");
    var de_ListOfEndpoints = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Endpoint(entry, context);
      });
    }, "de_ListOfEndpoints");
    var de_ListOfPlatformApplications = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PlatformApplication(entry, context);
      });
    }, "de_ListOfPlatformApplications");
    var de_ListOriginationNumbersResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      if (output.PhoneNumbers === "") {
        contents[_PNh] = [];
      } else if (output[_PNh] != null && output[_PNh][_me] != null) {
        contents[_PNh] = de_PhoneNumberInformationList((0, import_smithy_client5.getArrayIfSingleItem)(output[_PNh][_me]), context);
      }
      return contents;
    }, "de_ListOriginationNumbersResult");
    var de_ListPhoneNumbersOptedOutResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.phoneNumbers === "") {
        contents[_pNh] = [];
      } else if (output[_pNh] != null && output[_pNh][_me] != null) {
        contents[_pNh] = de_PhoneNumberList((0, import_smithy_client5.getArrayIfSingleItem)(output[_pNh][_me]), context);
      }
      if (output[_nT] != null) {
        contents[_nT] = (0, import_smithy_client5.expectString)(output[_nT]);
      }
      return contents;
    }, "de_ListPhoneNumbersOptedOutResponse");
    var de_ListPlatformApplicationsResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.PlatformApplications === "") {
        contents[_PA] = [];
      } else if (output[_PA] != null && output[_PA][_me] != null) {
        contents[_PA] = de_ListOfPlatformApplications((0, import_smithy_client5.getArrayIfSingleItem)(output[_PA][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListPlatformApplicationsResponse");
    var de_ListSMSSandboxPhoneNumbersResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.PhoneNumbers === "") {
        contents[_PNh] = [];
      } else if (output[_PNh] != null && output[_PNh][_me] != null) {
        contents[_PNh] = de_SMSSandboxPhoneNumberList((0, import_smithy_client5.getArrayIfSingleItem)(output[_PNh][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListSMSSandboxPhoneNumbersResult");
    var de_ListSubscriptionsByTopicResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Subscriptions === "") {
        contents[_Sub] = [];
      } else if (output[_Sub] != null && output[_Sub][_me] != null) {
        contents[_Sub] = de_SubscriptionsList((0, import_smithy_client5.getArrayIfSingleItem)(output[_Sub][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListSubscriptionsByTopicResponse");
    var de_ListSubscriptionsResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Subscriptions === "") {
        contents[_Sub] = [];
      } else if (output[_Sub] != null && output[_Sub][_me] != null) {
        contents[_Sub] = de_SubscriptionsList((0, import_smithy_client5.getArrayIfSingleItem)(output[_Sub][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListSubscriptionsResponse");
    var de_ListTagsForResourceResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Tags === "") {
        contents[_Ta] = [];
      } else if (output[_Ta] != null && output[_Ta][_me] != null) {
        contents[_Ta] = de_TagList((0, import_smithy_client5.getArrayIfSingleItem)(output[_Ta][_me]), context);
      }
      return contents;
    }, "de_ListTagsForResourceResponse");
    var de_ListTopicsResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Topics === "") {
        contents[_To] = [];
      } else if (output[_To] != null && output[_To][_me] != null) {
        contents[_To] = de_TopicsList((0, import_smithy_client5.getArrayIfSingleItem)(output[_To][_me]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client5.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListTopicsResponse");
    var de_MapStringToString = /* @__PURE__ */ __name((output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, import_smithy_client5.expectString)(pair["value"]);
        return acc;
      }, {});
    }, "de_MapStringToString");
    var de_NotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_NotFoundException");
    var de_NumberCapabilityList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client5.expectString)(entry);
      });
    }, "de_NumberCapabilityList");
    var de_OptedOutException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_OptedOutException");
    var de_OptInPhoneNumberResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_OptInPhoneNumberResponse");
    var de_PhoneNumberInformation = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_CA] != null) {
        contents[_CA] = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.parseRfc3339DateTimeWithOffset)(output[_CA]));
      }
      if (output[_PN] != null) {
        contents[_PN] = (0, import_smithy_client5.expectString)(output[_PN]);
      }
      if (output[_St] != null) {
        contents[_St] = (0, import_smithy_client5.expectString)(output[_St]);
      }
      if (output[_ICC] != null) {
        contents[_ICC] = (0, import_smithy_client5.expectString)(output[_ICC]);
      }
      if (output[_RT] != null) {
        contents[_RT] = (0, import_smithy_client5.expectString)(output[_RT]);
      }
      if (output.NumberCapabilities === "") {
        contents[_NC] = [];
      } else if (output[_NC] != null && output[_NC][_me] != null) {
        contents[_NC] = de_NumberCapabilityList((0, import_smithy_client5.getArrayIfSingleItem)(output[_NC][_me]), context);
      }
      return contents;
    }, "de_PhoneNumberInformation");
    var de_PhoneNumberInformationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PhoneNumberInformation(entry, context);
      });
    }, "de_PhoneNumberInformationList");
    var de_PhoneNumberList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client5.expectString)(entry);
      });
    }, "de_PhoneNumberList");
    var de_PlatformApplication = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PAA] != null) {
        contents[_PAA] = (0, import_smithy_client5.expectString)(output[_PAA]);
      }
      if (output.Attributes === "") {
        contents[_At] = {};
      } else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString((0, import_smithy_client5.getArrayIfSingleItem)(output[_At][_e]), context);
      }
      return contents;
    }, "de_PlatformApplication");
    var de_PlatformApplicationDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_PlatformApplicationDisabledException");
    var de_PublishBatchResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Successful === "") {
        contents[_Suc] = [];
      } else if (output[_Suc] != null && output[_Suc][_me] != null) {
        contents[_Suc] = de_PublishBatchResultEntryList((0, import_smithy_client5.getArrayIfSingleItem)(output[_Suc][_me]), context);
      }
      if (output.Failed === "") {
        contents[_F] = [];
      } else if (output[_F] != null && output[_F][_me] != null) {
        contents[_F] = de_BatchResultErrorEntryList((0, import_smithy_client5.getArrayIfSingleItem)(output[_F][_me]), context);
      }
      return contents;
    }, "de_PublishBatchResponse");
    var de_PublishBatchResultEntry = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client5.expectString)(output[_I]);
      }
      if (output[_MI] != null) {
        contents[_MI] = (0, import_smithy_client5.expectString)(output[_MI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client5.expectString)(output[_SN]);
      }
      return contents;
    }, "de_PublishBatchResultEntry");
    var de_PublishBatchResultEntryList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PublishBatchResultEntry(entry, context);
      });
    }, "de_PublishBatchResultEntryList");
    var de_PublishResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_MI] != null) {
        contents[_MI] = (0, import_smithy_client5.expectString)(output[_MI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client5.expectString)(output[_SN]);
      }
      return contents;
    }, "de_PublishResponse");
    var de_ReplayLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_ReplayLimitExceededException");
    var de_ResourceNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_ResourceNotFoundException");
    var de_SetSMSAttributesResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_SetSMSAttributesResponse");
    var de_SMSSandboxPhoneNumber = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = (0, import_smithy_client5.expectString)(output[_PN]);
      }
      if (output[_St] != null) {
        contents[_St] = (0, import_smithy_client5.expectString)(output[_St]);
      }
      return contents;
    }, "de_SMSSandboxPhoneNumber");
    var de_SMSSandboxPhoneNumberList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_SMSSandboxPhoneNumber(entry, context);
      });
    }, "de_SMSSandboxPhoneNumberList");
    var de_StaleTagException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_StaleTagException");
    var de_SubscribeResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SA] != null) {
        contents[_SA] = (0, import_smithy_client5.expectString)(output[_SA]);
      }
      return contents;
    }, "de_SubscribeResponse");
    var de_Subscription = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SA] != null) {
        contents[_SA] = (0, import_smithy_client5.expectString)(output[_SA]);
      }
      if (output[_O] != null) {
        contents[_O] = (0, import_smithy_client5.expectString)(output[_O]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client5.expectString)(output[_Pr]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client5.expectString)(output[_E]);
      }
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client5.expectString)(output[_TA]);
      }
      return contents;
    }, "de_Subscription");
    var de_SubscriptionAttributesMap = /* @__PURE__ */ __name((output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, import_smithy_client5.expectString)(pair["value"]);
        return acc;
      }, {});
    }, "de_SubscriptionAttributesMap");
    var de_SubscriptionLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_SubscriptionLimitExceededException");
    var de_SubscriptionsList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Subscription(entry, context);
      });
    }, "de_SubscriptionsList");
    var de_Tag = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client5.expectString)(output[_K]);
      }
      if (output[_Va] != null) {
        contents[_Va] = (0, import_smithy_client5.expectString)(output[_Va]);
      }
      return contents;
    }, "de_Tag");
    var de_TagLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_TagLimitExceededException");
    var de_TagList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tag(entry, context);
      });
    }, "de_TagList");
    var de_TagPolicyException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_TagPolicyException");
    var de_TagResourceResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_TagResourceResponse");
    var de_ThrottledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_ThrottledException");
    var de_TooManyEntriesInBatchRequestException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_TooManyEntriesInBatchRequestException");
    var de_Topic = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client5.expectString)(output[_TA]);
      }
      return contents;
    }, "de_Topic");
    var de_TopicAttributesMap = /* @__PURE__ */ __name((output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, import_smithy_client5.expectString)(pair["value"]);
        return acc;
      }, {});
    }, "de_TopicAttributesMap");
    var de_TopicLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_TopicLimitExceededException");
    var de_TopicsList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Topic(entry, context);
      });
    }, "de_TopicsList");
    var de_UntagResourceResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_UntagResourceResponse");
    var de_UserErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client5.expectString)(output[_m]);
      }
      return contents;
    }, "de_UserErrorException");
    var de_ValidationException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client5.expectString)(output[_M]);
      }
      return contents;
    }, "de_ValidationException");
    var de_VerificationException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client5.expectString)(output[_M]);
      }
      if (output[_St] != null) {
        contents[_St] = (0, import_smithy_client5.expectString)(output[_St]);
      }
      return contents;
    }, "de_VerificationException");
    var de_VerifySMSSandboxPhoneNumberResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_VerifySMSSandboxPhoneNumberResult");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(SNSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http5.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2010-03-31";
    var _A = "Action";
    var _AN = "ActionName";
    var _ANt = "AttributeName";
    var _AOU = "AuthenticateOnUnsubscribe";
    var _AP = "AddPermission";
    var _AV = "AttributeValue";
    var _AWSAI = "AWSAccountId";
    var _At = "Attributes";
    var _BV = "BinaryValue";
    var _C = "Code";
    var _CA = "CreatedAt";
    var _CIPNIOO = "CheckIfPhoneNumberIsOptedOut";
    var _CPA = "CreatePlatformApplication";
    var _CPE = "CreatePlatformEndpoint";
    var _CS = "ConfirmSubscription";
    var _CSMSSPN = "CreateSMSSandboxPhoneNumber";
    var _CT = "CreateTopic";
    var _CUD = "CustomUserData";
    var _DE = "DeleteEndpoint";
    var _DPA = "DeletePlatformApplication";
    var _DPP = "DataProtectionPolicy";
    var _DSMSSPN = "DeleteSMSSandboxPhoneNumber";
    var _DT = "DeleteTopic";
    var _DTa = "DataType";
    var _E = "Endpoint";
    var _EA = "EndpointArn";
    var _En = "Endpoints";
    var _F = "Failed";
    var _GDPP = "GetDataProtectionPolicy";
    var _GEA = "GetEndpointAttributes";
    var _GPAA = "GetPlatformApplicationAttributes";
    var _GSA = "GetSubscriptionAttributes";
    var _GSMSA = "GetSMSAttributes";
    var _GSMSSAS = "GetSMSSandboxAccountStatus";
    var _GTA = "GetTopicAttributes";
    var _I = "Id";
    var _ICC = "Iso2CountryCode";
    var _IIS = "IsInSandbox";
    var _K = "Key";
    var _L = "Label";
    var _LC = "LanguageCode";
    var _LEBPA = "ListEndpointsByPlatformApplication";
    var _LON = "ListOriginationNumbers";
    var _LPA = "ListPlatformApplications";
    var _LPNOO = "ListPhoneNumbersOptedOut";
    var _LS = "ListSubscriptions";
    var _LSBT = "ListSubscriptionsByTopic";
    var _LSMSSPN = "ListSMSSandboxPhoneNumbers";
    var _LT = "ListTopics";
    var _LTFR = "ListTagsForResource";
    var _M = "Message";
    var _MA = "MessageAttributes";
    var _MDI = "MessageDeduplicationId";
    var _MGI = "MessageGroupId";
    var _MI = "MessageId";
    var _MR = "MaxResults";
    var _MS = "MessageStructure";
    var _N = "Name";
    var _NC = "NumberCapabilities";
    var _NT = "NextToken";
    var _O = "Owner";
    var _OIPN = "OptInPhoneNumber";
    var _OTP = "OneTimePassword";
    var _P = "Publish";
    var _PA = "PlatformApplications";
    var _PAA = "PlatformApplicationArn";
    var _PB = "PublishBatch";
    var _PBRE = "PublishBatchRequestEntries";
    var _PDPP = "PutDataProtectionPolicy";
    var _PN = "PhoneNumber";
    var _PNh = "PhoneNumbers";
    var _Pl = "Platform";
    var _Pr = "Protocol";
    var _RA = "ResourceArn";
    var _RP = "RemovePermission";
    var _RSA = "ReturnSubscriptionArn";
    var _RT = "RouteType";
    var _S = "Subscribe";
    var _SA = "SubscriptionArn";
    var _SEA = "SetEndpointAttributes";
    var _SF = "SenderFault";
    var _SN = "SequenceNumber";
    var _SPAA = "SetPlatformApplicationAttributes";
    var _SSA = "SetSubscriptionAttributes";
    var _SSMSA = "SetSMSAttributes";
    var _STA = "SetTopicAttributes";
    var _SV = "StringValue";
    var _St = "Status";
    var _Su = "Subject";
    var _Sub = "Subscriptions";
    var _Suc = "Successful";
    var _T = "Token";
    var _TA = "TopicArn";
    var _TAa = "TargetArn";
    var _TK = "TagKeys";
    var _TR = "TagResource";
    var _Ta = "Tags";
    var _To = "Topics";
    var _U = "Unsubscribe";
    var _UR = "UntagResource";
    var _V = "Version";
    var _VSMSSPN = "VerifySMSSandboxPhoneNumber";
    var _Va = "Value";
    var _a = "attributes";
    var _e = "entry";
    var _iOO = "isOptedOut";
    var _m = "message";
    var _me = "member";
    var _nT = "nextToken";
    var _pN = "phoneNumber";
    var _pNh = "phoneNumbers";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client5.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client5.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a2;
      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _AddPermissionCommand = class _AddPermissionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "AddPermission", {}).n("SNSClient", "AddPermissionCommand").f(void 0, void 0).ser(se_AddPermissionCommand).de(de_AddPermissionCommand).build() {
    };
    __name(_AddPermissionCommand, "AddPermissionCommand");
    var AddPermissionCommand = _AddPermissionCommand;
    var _CheckIfPhoneNumberIsOptedOutCommand = class _CheckIfPhoneNumberIsOptedOutCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "CheckIfPhoneNumberIsOptedOut", {}).n("SNSClient", "CheckIfPhoneNumberIsOptedOutCommand").f(CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog, void 0).ser(se_CheckIfPhoneNumberIsOptedOutCommand).de(de_CheckIfPhoneNumberIsOptedOutCommand).build() {
    };
    __name(_CheckIfPhoneNumberIsOptedOutCommand, "CheckIfPhoneNumberIsOptedOutCommand");
    var CheckIfPhoneNumberIsOptedOutCommand = _CheckIfPhoneNumberIsOptedOutCommand;
    var _ConfirmSubscriptionCommand = class _ConfirmSubscriptionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ConfirmSubscription", {}).n("SNSClient", "ConfirmSubscriptionCommand").f(void 0, void 0).ser(se_ConfirmSubscriptionCommand).de(de_ConfirmSubscriptionCommand).build() {
    };
    __name(_ConfirmSubscriptionCommand, "ConfirmSubscriptionCommand");
    var ConfirmSubscriptionCommand = _ConfirmSubscriptionCommand;
    var _CreatePlatformApplicationCommand = class _CreatePlatformApplicationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "CreatePlatformApplication", {}).n("SNSClient", "CreatePlatformApplicationCommand").f(void 0, void 0).ser(se_CreatePlatformApplicationCommand).de(de_CreatePlatformApplicationCommand).build() {
    };
    __name(_CreatePlatformApplicationCommand, "CreatePlatformApplicationCommand");
    var CreatePlatformApplicationCommand = _CreatePlatformApplicationCommand;
    var _CreatePlatformEndpointCommand = class _CreatePlatformEndpointCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "CreatePlatformEndpoint", {}).n("SNSClient", "CreatePlatformEndpointCommand").f(void 0, void 0).ser(se_CreatePlatformEndpointCommand).de(de_CreatePlatformEndpointCommand).build() {
    };
    __name(_CreatePlatformEndpointCommand, "CreatePlatformEndpointCommand");
    var CreatePlatformEndpointCommand = _CreatePlatformEndpointCommand;
    var _CreateSMSSandboxPhoneNumberCommand = class _CreateSMSSandboxPhoneNumberCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "CreateSMSSandboxPhoneNumber", {}).n("SNSClient", "CreateSMSSandboxPhoneNumberCommand").f(CreateSMSSandboxPhoneNumberInputFilterSensitiveLog, void 0).ser(se_CreateSMSSandboxPhoneNumberCommand).de(de_CreateSMSSandboxPhoneNumberCommand).build() {
    };
    __name(_CreateSMSSandboxPhoneNumberCommand, "CreateSMSSandboxPhoneNumberCommand");
    var CreateSMSSandboxPhoneNumberCommand = _CreateSMSSandboxPhoneNumberCommand;
    var _CreateTopicCommand = class _CreateTopicCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "CreateTopic", {}).n("SNSClient", "CreateTopicCommand").f(void 0, void 0).ser(se_CreateTopicCommand).de(de_CreateTopicCommand).build() {
    };
    __name(_CreateTopicCommand, "CreateTopicCommand");
    var CreateTopicCommand = _CreateTopicCommand;
    var _DeleteEndpointCommand = class _DeleteEndpointCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "DeleteEndpoint", {}).n("SNSClient", "DeleteEndpointCommand").f(void 0, void 0).ser(se_DeleteEndpointCommand).de(de_DeleteEndpointCommand).build() {
    };
    __name(_DeleteEndpointCommand, "DeleteEndpointCommand");
    var DeleteEndpointCommand = _DeleteEndpointCommand;
    var _DeletePlatformApplicationCommand = class _DeletePlatformApplicationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "DeletePlatformApplication", {}).n("SNSClient", "DeletePlatformApplicationCommand").f(void 0, void 0).ser(se_DeletePlatformApplicationCommand).de(de_DeletePlatformApplicationCommand).build() {
    };
    __name(_DeletePlatformApplicationCommand, "DeletePlatformApplicationCommand");
    var DeletePlatformApplicationCommand = _DeletePlatformApplicationCommand;
    var _DeleteSMSSandboxPhoneNumberCommand = class _DeleteSMSSandboxPhoneNumberCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "DeleteSMSSandboxPhoneNumber", {}).n("SNSClient", "DeleteSMSSandboxPhoneNumberCommand").f(DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog, void 0).ser(se_DeleteSMSSandboxPhoneNumberCommand).de(de_DeleteSMSSandboxPhoneNumberCommand).build() {
    };
    __name(_DeleteSMSSandboxPhoneNumberCommand, "DeleteSMSSandboxPhoneNumberCommand");
    var DeleteSMSSandboxPhoneNumberCommand = _DeleteSMSSandboxPhoneNumberCommand;
    var _DeleteTopicCommand = class _DeleteTopicCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "DeleteTopic", {}).n("SNSClient", "DeleteTopicCommand").f(void 0, void 0).ser(se_DeleteTopicCommand).de(de_DeleteTopicCommand).build() {
    };
    __name(_DeleteTopicCommand, "DeleteTopicCommand");
    var DeleteTopicCommand = _DeleteTopicCommand;
    var _GetDataProtectionPolicyCommand = class _GetDataProtectionPolicyCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetDataProtectionPolicy", {}).n("SNSClient", "GetDataProtectionPolicyCommand").f(void 0, void 0).ser(se_GetDataProtectionPolicyCommand).de(de_GetDataProtectionPolicyCommand).build() {
    };
    __name(_GetDataProtectionPolicyCommand, "GetDataProtectionPolicyCommand");
    var GetDataProtectionPolicyCommand = _GetDataProtectionPolicyCommand;
    var _GetEndpointAttributesCommand = class _GetEndpointAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetEndpointAttributes", {}).n("SNSClient", "GetEndpointAttributesCommand").f(void 0, void 0).ser(se_GetEndpointAttributesCommand).de(de_GetEndpointAttributesCommand).build() {
    };
    __name(_GetEndpointAttributesCommand, "GetEndpointAttributesCommand");
    var GetEndpointAttributesCommand = _GetEndpointAttributesCommand;
    var _GetPlatformApplicationAttributesCommand = class _GetPlatformApplicationAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetPlatformApplicationAttributes", {}).n("SNSClient", "GetPlatformApplicationAttributesCommand").f(void 0, void 0).ser(se_GetPlatformApplicationAttributesCommand).de(de_GetPlatformApplicationAttributesCommand).build() {
    };
    __name(_GetPlatformApplicationAttributesCommand, "GetPlatformApplicationAttributesCommand");
    var GetPlatformApplicationAttributesCommand = _GetPlatformApplicationAttributesCommand;
    var _GetSMSAttributesCommand = class _GetSMSAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetSMSAttributes", {}).n("SNSClient", "GetSMSAttributesCommand").f(void 0, void 0).ser(se_GetSMSAttributesCommand).de(de_GetSMSAttributesCommand).build() {
    };
    __name(_GetSMSAttributesCommand, "GetSMSAttributesCommand");
    var GetSMSAttributesCommand = _GetSMSAttributesCommand;
    var _GetSMSSandboxAccountStatusCommand = class _GetSMSSandboxAccountStatusCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetSMSSandboxAccountStatus", {}).n("SNSClient", "GetSMSSandboxAccountStatusCommand").f(void 0, void 0).ser(se_GetSMSSandboxAccountStatusCommand).de(de_GetSMSSandboxAccountStatusCommand).build() {
    };
    __name(_GetSMSSandboxAccountStatusCommand, "GetSMSSandboxAccountStatusCommand");
    var GetSMSSandboxAccountStatusCommand = _GetSMSSandboxAccountStatusCommand;
    var _GetSubscriptionAttributesCommand = class _GetSubscriptionAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetSubscriptionAttributes", {}).n("SNSClient", "GetSubscriptionAttributesCommand").f(void 0, void 0).ser(se_GetSubscriptionAttributesCommand).de(de_GetSubscriptionAttributesCommand).build() {
    };
    __name(_GetSubscriptionAttributesCommand, "GetSubscriptionAttributesCommand");
    var GetSubscriptionAttributesCommand = _GetSubscriptionAttributesCommand;
    var _GetTopicAttributesCommand = class _GetTopicAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "GetTopicAttributes", {}).n("SNSClient", "GetTopicAttributesCommand").f(void 0, void 0).ser(se_GetTopicAttributesCommand).de(de_GetTopicAttributesCommand).build() {
    };
    __name(_GetTopicAttributesCommand, "GetTopicAttributesCommand");
    var GetTopicAttributesCommand = _GetTopicAttributesCommand;
    var _ListEndpointsByPlatformApplicationCommand = class _ListEndpointsByPlatformApplicationCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListEndpointsByPlatformApplication", {}).n("SNSClient", "ListEndpointsByPlatformApplicationCommand").f(void 0, void 0).ser(se_ListEndpointsByPlatformApplicationCommand).de(de_ListEndpointsByPlatformApplicationCommand).build() {
    };
    __name(_ListEndpointsByPlatformApplicationCommand, "ListEndpointsByPlatformApplicationCommand");
    var ListEndpointsByPlatformApplicationCommand = _ListEndpointsByPlatformApplicationCommand;
    var _ListOriginationNumbersCommand = class _ListOriginationNumbersCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListOriginationNumbers", {}).n("SNSClient", "ListOriginationNumbersCommand").f(void 0, ListOriginationNumbersResultFilterSensitiveLog).ser(se_ListOriginationNumbersCommand).de(de_ListOriginationNumbersCommand).build() {
    };
    __name(_ListOriginationNumbersCommand, "ListOriginationNumbersCommand");
    var ListOriginationNumbersCommand = _ListOriginationNumbersCommand;
    var _ListPhoneNumbersOptedOutCommand = class _ListPhoneNumbersOptedOutCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListPhoneNumbersOptedOut", {}).n("SNSClient", "ListPhoneNumbersOptedOutCommand").f(void 0, ListPhoneNumbersOptedOutResponseFilterSensitiveLog).ser(se_ListPhoneNumbersOptedOutCommand).de(de_ListPhoneNumbersOptedOutCommand).build() {
    };
    __name(_ListPhoneNumbersOptedOutCommand, "ListPhoneNumbersOptedOutCommand");
    var ListPhoneNumbersOptedOutCommand = _ListPhoneNumbersOptedOutCommand;
    var _ListPlatformApplicationsCommand = class _ListPlatformApplicationsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListPlatformApplications", {}).n("SNSClient", "ListPlatformApplicationsCommand").f(void 0, void 0).ser(se_ListPlatformApplicationsCommand).de(de_ListPlatformApplicationsCommand).build() {
    };
    __name(_ListPlatformApplicationsCommand, "ListPlatformApplicationsCommand");
    var ListPlatformApplicationsCommand = _ListPlatformApplicationsCommand;
    var _ListSMSSandboxPhoneNumbersCommand = class _ListSMSSandboxPhoneNumbersCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListSMSSandboxPhoneNumbers", {}).n("SNSClient", "ListSMSSandboxPhoneNumbersCommand").f(void 0, ListSMSSandboxPhoneNumbersResultFilterSensitiveLog).ser(se_ListSMSSandboxPhoneNumbersCommand).de(de_ListSMSSandboxPhoneNumbersCommand).build() {
    };
    __name(_ListSMSSandboxPhoneNumbersCommand, "ListSMSSandboxPhoneNumbersCommand");
    var ListSMSSandboxPhoneNumbersCommand = _ListSMSSandboxPhoneNumbersCommand;
    var _ListSubscriptionsByTopicCommand = class _ListSubscriptionsByTopicCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListSubscriptionsByTopic", {}).n("SNSClient", "ListSubscriptionsByTopicCommand").f(void 0, void 0).ser(se_ListSubscriptionsByTopicCommand).de(de_ListSubscriptionsByTopicCommand).build() {
    };
    __name(_ListSubscriptionsByTopicCommand, "ListSubscriptionsByTopicCommand");
    var ListSubscriptionsByTopicCommand = _ListSubscriptionsByTopicCommand;
    var _ListSubscriptionsCommand = class _ListSubscriptionsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListSubscriptions", {}).n("SNSClient", "ListSubscriptionsCommand").f(void 0, void 0).ser(se_ListSubscriptionsCommand).de(de_ListSubscriptionsCommand).build() {
    };
    __name(_ListSubscriptionsCommand, "ListSubscriptionsCommand");
    var ListSubscriptionsCommand = _ListSubscriptionsCommand;
    var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListTagsForResource", {}).n("SNSClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    };
    __name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
    var ListTagsForResourceCommand = _ListTagsForResourceCommand;
    var _ListTopicsCommand = class _ListTopicsCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "ListTopics", {}).n("SNSClient", "ListTopicsCommand").f(void 0, void 0).ser(se_ListTopicsCommand).de(de_ListTopicsCommand).build() {
    };
    __name(_ListTopicsCommand, "ListTopicsCommand");
    var ListTopicsCommand = _ListTopicsCommand;
    var _OptInPhoneNumberCommand = class _OptInPhoneNumberCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "OptInPhoneNumber", {}).n("SNSClient", "OptInPhoneNumberCommand").f(OptInPhoneNumberInputFilterSensitiveLog, void 0).ser(se_OptInPhoneNumberCommand).de(de_OptInPhoneNumberCommand).build() {
    };
    __name(_OptInPhoneNumberCommand, "OptInPhoneNumberCommand");
    var OptInPhoneNumberCommand = _OptInPhoneNumberCommand;
    var _PublishBatchCommand = class _PublishBatchCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "PublishBatch", {}).n("SNSClient", "PublishBatchCommand").f(void 0, void 0).ser(se_PublishBatchCommand).de(de_PublishBatchCommand).build() {
    };
    __name(_PublishBatchCommand, "PublishBatchCommand");
    var PublishBatchCommand = _PublishBatchCommand;
    var _PublishCommand = class _PublishCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "Publish", {}).n("SNSClient", "PublishCommand").f(PublishInputFilterSensitiveLog, void 0).ser(se_PublishCommand).de(de_PublishCommand).build() {
    };
    __name(_PublishCommand, "PublishCommand");
    var PublishCommand = _PublishCommand;
    var _PutDataProtectionPolicyCommand = class _PutDataProtectionPolicyCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "PutDataProtectionPolicy", {}).n("SNSClient", "PutDataProtectionPolicyCommand").f(void 0, void 0).ser(se_PutDataProtectionPolicyCommand).de(de_PutDataProtectionPolicyCommand).build() {
    };
    __name(_PutDataProtectionPolicyCommand, "PutDataProtectionPolicyCommand");
    var PutDataProtectionPolicyCommand = _PutDataProtectionPolicyCommand;
    var _RemovePermissionCommand = class _RemovePermissionCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "RemovePermission", {}).n("SNSClient", "RemovePermissionCommand").f(void 0, void 0).ser(se_RemovePermissionCommand).de(de_RemovePermissionCommand).build() {
    };
    __name(_RemovePermissionCommand, "RemovePermissionCommand");
    var RemovePermissionCommand = _RemovePermissionCommand;
    var _SetEndpointAttributesCommand = class _SetEndpointAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "SetEndpointAttributes", {}).n("SNSClient", "SetEndpointAttributesCommand").f(void 0, void 0).ser(se_SetEndpointAttributesCommand).de(de_SetEndpointAttributesCommand).build() {
    };
    __name(_SetEndpointAttributesCommand, "SetEndpointAttributesCommand");
    var SetEndpointAttributesCommand = _SetEndpointAttributesCommand;
    var _SetPlatformApplicationAttributesCommand = class _SetPlatformApplicationAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "SetPlatformApplicationAttributes", {}).n("SNSClient", "SetPlatformApplicationAttributesCommand").f(void 0, void 0).ser(se_SetPlatformApplicationAttributesCommand).de(de_SetPlatformApplicationAttributesCommand).build() {
    };
    __name(_SetPlatformApplicationAttributesCommand, "SetPlatformApplicationAttributesCommand");
    var SetPlatformApplicationAttributesCommand = _SetPlatformApplicationAttributesCommand;
    var _SetSMSAttributesCommand = class _SetSMSAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "SetSMSAttributes", {}).n("SNSClient", "SetSMSAttributesCommand").f(void 0, void 0).ser(se_SetSMSAttributesCommand).de(de_SetSMSAttributesCommand).build() {
    };
    __name(_SetSMSAttributesCommand, "SetSMSAttributesCommand");
    var SetSMSAttributesCommand = _SetSMSAttributesCommand;
    var _SetSubscriptionAttributesCommand = class _SetSubscriptionAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "SetSubscriptionAttributes", {}).n("SNSClient", "SetSubscriptionAttributesCommand").f(void 0, void 0).ser(se_SetSubscriptionAttributesCommand).de(de_SetSubscriptionAttributesCommand).build() {
    };
    __name(_SetSubscriptionAttributesCommand, "SetSubscriptionAttributesCommand");
    var SetSubscriptionAttributesCommand = _SetSubscriptionAttributesCommand;
    var _SetTopicAttributesCommand = class _SetTopicAttributesCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "SetTopicAttributes", {}).n("SNSClient", "SetTopicAttributesCommand").f(void 0, void 0).ser(se_SetTopicAttributesCommand).de(de_SetTopicAttributesCommand).build() {
    };
    __name(_SetTopicAttributesCommand, "SetTopicAttributesCommand");
    var SetTopicAttributesCommand = _SetTopicAttributesCommand;
    var _SubscribeCommand = class _SubscribeCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "Subscribe", {}).n("SNSClient", "SubscribeCommand").f(void 0, void 0).ser(se_SubscribeCommand).de(de_SubscribeCommand).build() {
    };
    __name(_SubscribeCommand, "SubscribeCommand");
    var SubscribeCommand = _SubscribeCommand;
    var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "TagResource", {}).n("SNSClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    };
    __name(_TagResourceCommand, "TagResourceCommand");
    var TagResourceCommand = _TagResourceCommand;
    var _UnsubscribeCommand = class _UnsubscribeCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "Unsubscribe", {}).n("SNSClient", "UnsubscribeCommand").f(void 0, void 0).ser(se_UnsubscribeCommand).de(de_UnsubscribeCommand).build() {
    };
    __name(_UnsubscribeCommand, "UnsubscribeCommand");
    var UnsubscribeCommand = _UnsubscribeCommand;
    var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "UntagResource", {}).n("SNSClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    };
    __name(_UntagResourceCommand, "UntagResourceCommand");
    var UntagResourceCommand = _UntagResourceCommand;
    var _VerifySMSSandboxPhoneNumberCommand = class _VerifySMSSandboxPhoneNumberCommand extends import_smithy_client5.Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonSimpleNotificationService", "VerifySMSSandboxPhoneNumber", {}).n("SNSClient", "VerifySMSSandboxPhoneNumberCommand").f(VerifySMSSandboxPhoneNumberInputFilterSensitiveLog, void 0).ser(se_VerifySMSSandboxPhoneNumberCommand).de(de_VerifySMSSandboxPhoneNumberCommand).build() {
    };
    __name(_VerifySMSSandboxPhoneNumberCommand, "VerifySMSSandboxPhoneNumberCommand");
    var VerifySMSSandboxPhoneNumberCommand = _VerifySMSSandboxPhoneNumberCommand;
    var commands = {
      AddPermissionCommand,
      CheckIfPhoneNumberIsOptedOutCommand,
      ConfirmSubscriptionCommand,
      CreatePlatformApplicationCommand,
      CreatePlatformEndpointCommand,
      CreateSMSSandboxPhoneNumberCommand,
      CreateTopicCommand,
      DeleteEndpointCommand,
      DeletePlatformApplicationCommand,
      DeleteSMSSandboxPhoneNumberCommand,
      DeleteTopicCommand,
      GetDataProtectionPolicyCommand,
      GetEndpointAttributesCommand,
      GetPlatformApplicationAttributesCommand,
      GetSMSAttributesCommand,
      GetSMSSandboxAccountStatusCommand,
      GetSubscriptionAttributesCommand,
      GetTopicAttributesCommand,
      ListEndpointsByPlatformApplicationCommand,
      ListOriginationNumbersCommand,
      ListPhoneNumbersOptedOutCommand,
      ListPlatformApplicationsCommand,
      ListSMSSandboxPhoneNumbersCommand,
      ListSubscriptionsCommand,
      ListSubscriptionsByTopicCommand,
      ListTagsForResourceCommand,
      ListTopicsCommand,
      OptInPhoneNumberCommand,
      PublishCommand,
      PublishBatchCommand,
      PutDataProtectionPolicyCommand,
      RemovePermissionCommand,
      SetEndpointAttributesCommand,
      SetPlatformApplicationAttributesCommand,
      SetSMSAttributesCommand,
      SetSubscriptionAttributesCommand,
      SetTopicAttributesCommand,
      SubscribeCommand,
      TagResourceCommand,
      UnsubscribeCommand,
      UntagResourceCommand,
      VerifySMSSandboxPhoneNumberCommand
    };
    var _SNS = class _SNS extends SNSClient {
    };
    __name(_SNS, "SNS");
    var SNS2 = _SNS;
    (0, import_smithy_client5.createAggregatedClient)(commands, SNS2);
    var paginateListEndpointsByPlatformApplication = (0, import_core2.createPaginator)(SNSClient, ListEndpointsByPlatformApplicationCommand, "NextToken", "NextToken", "");
    var paginateListOriginationNumbers = (0, import_core2.createPaginator)(SNSClient, ListOriginationNumbersCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListPhoneNumbersOptedOut = (0, import_core2.createPaginator)(SNSClient, ListPhoneNumbersOptedOutCommand, "nextToken", "nextToken", "");
    var paginateListPlatformApplications = (0, import_core2.createPaginator)(SNSClient, ListPlatformApplicationsCommand, "NextToken", "NextToken", "");
    var paginateListSMSSandboxPhoneNumbers = (0, import_core2.createPaginator)(SNSClient, ListSMSSandboxPhoneNumbersCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListSubscriptionsByTopic = (0, import_core2.createPaginator)(SNSClient, ListSubscriptionsByTopicCommand, "NextToken", "NextToken", "");
    var paginateListSubscriptions = (0, import_core2.createPaginator)(SNSClient, ListSubscriptionsCommand, "NextToken", "NextToken", "");
    var paginateListTopics = (0, import_core2.createPaginator)(SNSClient, ListTopicsCommand, "NextToken", "NextToken", "");
  }
});

// functions/v1/handlerAsyncIngest.ts
var handlerAsyncIngest_exports = {};
__export(handlerAsyncIngest_exports, {
  ingestEvents: () => ingestEvents
});
module.exports = __toCommonJS(handlerAsyncIngest_exports);

// ../../lib/ts/v1/initConstants.ts
var IS_DEPLOYED = true;
var ACCOUNT_ID;
if (process.env.STAGE && process.env.STAGE === "local") {
  IS_DEPLOYED = false;
  ACCOUNT_ID = "123456789012";
} else {
  ACCOUNT_ID = process.env.ACCOUNT_ID || "N/A";
}
var SERVICE = process.env.SERVICE || "N/A";
var STAGE = process.env.STAGE || "local";
var REGION = process.env.REGION || "N/A";
var initConstants_default = {
  IS_DEPLOYED,
  SERVICE,
  STAGE,
  ACCOUNT_ID,
  REGION
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/typeUtils.js
var isRecord = (value) => {
  return Object.prototype.toString.call(value) === "[object Object]" && !Object.is(value, null);
};
var isString = (value) => {
  return typeof value === "string";
};
var isNull = (value) => {
  return Object.is(value, null);
};
var isNullOrUndefined = (value) => {
  return isNull(value) || Object.is(value, void 0);
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/Utility.js
var Utility = class {
  coldStart = true;
  defaultServiceName = "service_undefined";
  /**
   * Get the cold start status of the current execution environment.
   *
   * @example
   * ```typescript
   * import { Utility } from '@aws-lambda-powertools/commons';
   *
   * const utility = new Utility();
   * utility.isColdStart(); // true
   * utility.isColdStart(); // false
   * ```
   *
   * The method also flips the cold start status to `false` after the first invocation.
   */
  getColdStart() {
    if (this.coldStart) {
      this.coldStart = false;
      return true;
    }
    return false;
  }
  /**
   * Get the cold start status of the current execution environment.
   *
   * @example
   * ```typescript
   * import { Utility } from '@aws-lambda-powertools/commons';
   *
   * const utility = new Utility();
   * utility.isColdStart(); // true
   * utility.isColdStart(); // false
   * ```
   *
   * @see {@link getColdStart}
   */
  isColdStart() {
    return this.getColdStart();
  }
  /**
   * Get the default service name.
   */
  getDefaultServiceName() {
    return this.defaultServiceName;
  }
  /**
   * Validate that the service name provided is valid.
   * Used internally during initialization.
   *
   * @param serviceName Service name to validate
   */
  isValidServiceName(serviceName) {
    return typeof serviceName === "string" && serviceName.trim().length > 0;
  }
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/config/EnvironmentVariablesService.js
var EnvironmentVariablesService = class {
  /**
   * Increase JSON indentation for Logger to ease debugging when running functions locally or in a non-production environment
   */
  devModeVariable = "POWERTOOLS_DEV";
  /**
   * Set service name used for tracing namespace, metrics dimension and structured logging
   */
  serviceNameVariable = "POWERTOOLS_SERVICE_NAME";
  /**
   * AWS X-Ray Trace ID environment variable
   * @private
   */
  xRayTraceIdVariable = "_X_AMZN_TRACE_ID";
  /**
   * Get the value of an environment variable by name.
   *
   * @param {string} name The name of the environment variable to fetch.
   */
  get(name) {
    return process.env[name]?.trim() || "";
  }
  /**
   * Get the value of the `POWERTOOLS_SERVICE_NAME` environment variable.
   */
  getServiceName() {
    return this.get(this.serviceNameVariable);
  }
  /**
   * Get the value of the `_X_AMZN_TRACE_ID` environment variable.
   *
   * The AWS X-Ray Trace data available in the environment variable has this format:
   * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,
   *
   * The actual Trace ID is: `1-5759e988-bd862e3fe1be46a994272793`.
   */
  getXrayTraceId() {
    const xRayTraceData = this.getXrayTraceData();
    return xRayTraceData?.Root;
  }
  /**
   * Determine if the current invocation is part of a sampled X-Ray trace.
   *
   * The AWS X-Ray Trace data available in the environment variable has this format:
   * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,
   */
  getXrayTraceSampled() {
    const xRayTraceData = this.getXrayTraceData();
    return xRayTraceData?.Sampled === "1";
  }
  /**
   * Determine if the current invocation is running in a development environment.
   */
  isDevMode() {
    return this.isValueTrue(this.get(this.devModeVariable));
  }
  /**
   * Helper function to determine if a value is considered thruthy.
   *
   * @param value The value to check for truthiness.
   */
  isValueTrue(value) {
    const truthyValues = ["1", "y", "yes", "t", "true", "on"];
    return truthyValues.includes(value.toLowerCase());
  }
  /**
   * Get the AWS X-Ray Trace data from the environment variable.
   *
   * The method parses the environment variable `_X_AMZN_TRACE_ID` and returns an object with the key-value pairs.
   */
  getXrayTraceData() {
    const xRayTraceEnv = this.get(this.xRayTraceIdVariable);
    if (xRayTraceEnv === "")
      return void 0;
    if (!xRayTraceEnv.includes("="))
      return { Root: xRayTraceEnv };
    const xRayTraceData = {};
    xRayTraceEnv.split(";").forEach((field) => {
      const [key, value] = field.split("=");
      xRayTraceData[key] = value;
    });
    return xRayTraceData;
  }
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/version.js
var PT_VERSION = "2.4.0";

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/awsSdkUtils.js
var EXEC_ENV = process.env.AWS_EXECUTION_ENV || "NA";
var middlewareOptions = {
  relation: "after",
  toMiddleware: "getUserAgentMiddleware",
  name: "addPowertoolsToUserAgent",
  tags: ["POWERTOOLS", "USER_AGENT"]
};
var isSdkClient = (client2) => typeof client2 === "object" && client2 !== null && "send" in client2 && typeof client2.send === "function" && "config" in client2 && client2.config !== void 0 && typeof client2.config === "object" && client2.config !== null && "middlewareStack" in client2 && client2.middlewareStack !== void 0 && typeof client2.middlewareStack === "object" && client2.middlewareStack !== null && "identify" in client2.middlewareStack && typeof client2.middlewareStack.identify === "function" && "addRelativeTo" in client2.middlewareStack && typeof client2.middlewareStack.addRelativeTo === "function";
var customUserAgentMiddleware = (feature) => {
  return (next) => async (args) => {
    const powertoolsUserAgent = `PT/${feature}/${PT_VERSION} PTEnv/${EXEC_ENV}`;
    args.request.headers["user-agent"] = `${args.request.headers["user-agent"]} ${powertoolsUserAgent}`;
    return await next(args);
  };
};
var hasPowertools = (middlewareStack) => {
  let found = false;
  for (const middleware of middlewareStack) {
    if (middleware.includes("addPowertoolsToUserAgent")) {
      found = true;
    }
  }
  return found;
};
var addUserAgentMiddleware = (client2, feature) => {
  try {
    if (isSdkClient(client2)) {
      if (hasPowertools(client2.middlewareStack.identify())) {
        return;
      }
      client2.middlewareStack.addRelativeTo(customUserAgentMiddleware(feature), middlewareOptions);
    } else {
      throw new Error(`The client provided does not match the expected interface`);
    }
  } catch (error) {
    console.warn("Failed to add user agent middleware", error);
  }
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/middleware/constants.js
var PREFIX = "powertools-for-aws";
var TRACER_KEY = `${PREFIX}.tracer`;
var METRICS_KEY = `${PREFIX}.metrics`;
var LOGGER_KEY = `${PREFIX}.logger`;
var IDEMPOTENCY_KEY = `${PREFIX}.idempotency`;

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/Logger.js
var import_lodash2 = __toESM(require_lodash(), 1);
var import_node_console = require("node:console");
var import_node_crypto = require("node:crypto");

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/config/EnvironmentVariablesService.js
var EnvironmentVariablesService2 = class extends EnvironmentVariablesService {
  // Reserved environment variables
  awsLogLevelVariable = "AWS_LAMBDA_LOG_LEVEL";
  awsRegionVariable = "AWS_REGION";
  currentEnvironmentVariable = "ENVIRONMENT";
  functionNameVariable = "AWS_LAMBDA_FUNCTION_NAME";
  functionVersionVariable = "AWS_LAMBDA_FUNCTION_VERSION";
  logEventVariable = "POWERTOOLS_LOGGER_LOG_EVENT";
  logLevelVariable = "POWERTOOLS_LOG_LEVEL";
  logLevelVariableLegacy = "LOG_LEVEL";
  memoryLimitInMBVariable = "AWS_LAMBDA_FUNCTION_MEMORY_SIZE";
  sampleRateValueVariable = "POWERTOOLS_LOGGER_SAMPLE_RATE";
  tzVariable = "TZ";
  /**
   * It returns the value of the `AWS_LAMBDA_LOG_LEVEL` environment variable.
   *
   * The `AWS_LAMBDA_LOG_LEVEL` environment variable is set by AWS Lambda when configuring
   * the function's log level using the Advanced Logging Controls feature. This value always
   * takes precedence over other means of configuring the log level.
   *
   * @note we need to map the `FATAL` log level to `CRITICAL`, see {@link https://docs.aws.amazon.com/lambda/latest/dg/configuration-logging.html#configuration-logging-log-levels AWS Lambda Log Levels}.
   *
   * @returns {string}
   */
  getAwsLogLevel() {
    const awsLogLevelVariable = this.get(this.awsLogLevelVariable);
    return awsLogLevelVariable === "FATAL" ? "CRITICAL" : awsLogLevelVariable;
  }
  /**
   * It returns the value of the AWS_REGION environment variable.
   *
   * @returns {string}
   */
  getAwsRegion() {
    return this.get(this.awsRegionVariable);
  }
  /**
   * It returns the value of the ENVIRONMENT environment variable.
   *
   * @returns {string}
   */
  getCurrentEnvironment() {
    return this.get(this.currentEnvironmentVariable);
  }
  /**
   * It returns the value of the AWS_LAMBDA_FUNCTION_MEMORY_SIZE environment variable.
   *
   * @returns {string}
   */
  getFunctionMemory() {
    const value = this.get(this.memoryLimitInMBVariable);
    return Number(value);
  }
  /**
   * It returns the value of the AWS_LAMBDA_FUNCTION_NAME environment variable.
   *
   * @returns {string}
   */
  getFunctionName() {
    return this.get(this.functionNameVariable);
  }
  /**
   * It returns the value of the AWS_LAMBDA_FUNCTION_VERSION environment variable.
   *
   * @returns {string}
   */
  getFunctionVersion() {
    return this.get(this.functionVersionVariable);
  }
  /**
   * It returns the value of the POWERTOOLS_LOGGER_LOG_EVENT environment variable.
   *
   * @returns {boolean}
   */
  getLogEvent() {
    const value = this.get(this.logEventVariable);
    return this.isValueTrue(value);
  }
  /**
   * It returns the value of the `POWERTOOLS_LOG_LEVEL, or `LOG_LEVEL` (legacy) environment variables
   * when the first one is not set.
   *
   * @note The `LOG_LEVEL` environment variable is considered legacy and will be removed in a future release.
   * @note The `AWS_LAMBDA_LOG_LEVEL` environment variable always takes precedence over the ones above.
   *
   * @returns {string}
   */
  getLogLevel() {
    const logLevelVariable = this.get(this.logLevelVariable);
    const logLevelVariableAlias = this.get(this.logLevelVariableLegacy);
    return logLevelVariable !== "" ? logLevelVariable : logLevelVariableAlias;
  }
  /**
   * It returns the value of the POWERTOOLS_LOGGER_SAMPLE_RATE environment variable.
   *
   * @returns {number|undefined}
   */
  getSampleRateValue() {
    const value = this.get(this.sampleRateValueVariable);
    return value && value.length > 0 ? Number(value) : void 0;
  }
  /**
   * It returns the value of the `TZ` environment variable or `UTC` if it is not set.
   *
   * @returns {string}
   */
  getTimezone() {
    const value = this.get(this.tzVariable);
    return value.length > 0 ? value : "UTC";
  }
};

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/constants.js
var LogJsonIndent = {
  PRETTY: 4,
  COMPACT: 0
};

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogFormatter.js
var LogFormatter = class {
  /**
   * EnvironmentVariablesService instance.
   * If set, it allows to access environment variables.
   */
  envVarsService;
  constructor(options) {
    this.envVarsService = options?.envVarsService;
  }
  /**
   * It formats a given Error parameter.
   *
   * @param {Error} error
   * @returns {LogAttributes}
   */
  formatError(error) {
    return {
      name: error.name,
      location: this.getCodeLocation(error.stack),
      message: error.message,
      stack: error.stack,
      cause: error.cause instanceof Error ? this.formatError(error.cause) : error.cause
    };
  }
  /**
   * Formats a given date into an ISO 8601 string, considering the configured timezone.
   * If `envVarsService` is set and the configured timezone differs from 'UTC',
   * the date is formatted to that timezone. Otherwise, it defaults to 'UTC'.
   *
   * @param {Date} now
   * @returns {string}
   */
  formatTimestamp(now) {
    const defaultTimezone = "UTC";
    const configuredTimezone = this.envVarsService?.getTimezone();
    if (configuredTimezone && !configuredTimezone.includes(defaultTimezone))
      return this.#generateISOTimestampWithOffset(now, configuredTimezone);
    return now.toISOString();
  }
  /**
   * It returns a string containing the location of an error, given a particular stack trace.
   *
   * @param stack
   * @returns {string}
   */
  getCodeLocation(stack) {
    if (!stack) {
      return "";
    }
    const stackLines = stack.split("\n");
    const regex = /\(([^)]*?):(\d+?):(\d+?)\)\\?$/;
    let i;
    for (i = 0; i < stackLines.length; i++) {
      const match = regex.exec(stackLines[i]);
      if (Array.isArray(match)) {
        return `${match[1]}:${Number(match[2])}`;
      }
    }
    return "";
  }
  /**
   * Generates a new Intl.DateTimeFormat object configured with the specified time zone
   * and formatting options. The time is displayed in 24-hour format (hour12: false).
   *
   * @param {string} timeZone - the IANA time zone identifier (e.g., "Asia/Dhaka").
   */
  #getDateFormatter = (timeZone) => {
    const twoDigitFormatOption = "2-digit";
    return new Intl.DateTimeFormat("en", {
      year: "numeric",
      month: twoDigitFormatOption,
      day: twoDigitFormatOption,
      hour: twoDigitFormatOption,
      minute: twoDigitFormatOption,
      second: twoDigitFormatOption,
      hour12: false,
      timeZone
    });
  };
  /**
   * Generates an ISO 8601 timestamp string with the specified time zone and the local time zone offset.
   *
   * @param {Date} date - the date to format
   * @param {string} timeZone - the IANA time zone identifier (e.g., "Asia/Dhaka").
   */
  #generateISOTimestampWithOffset(date, timeZone) {
    const { year, month, day, hour, minute, second } = this.#getDateFormatter(timeZone).formatToParts(date).reduce((acc, item) => {
      acc[item.type] = item.value;
      return acc;
    }, {});
    const datePart = `${year}-${month}-${day}T${hour}:${minute}:${second}`;
    const offset = -date.getTimezoneOffset();
    const offsetSign = offset >= 0 ? "+" : "-";
    const offsetHours = Math.abs(Math.floor(offset / 60)).toString().padStart(2, "0");
    const offsetMinutes = Math.abs(offset % 60).toString().padStart(2, "0");
    const millisecondPart = date.getMilliseconds().toString().padStart(3, "0");
    const offsetPart = `${offsetSign}${offsetHours}:${offsetMinutes}`;
    return `${datePart}.${millisecondPart}${offsetPart}`;
  }
};

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogItem.js
var import_lodash = __toESM(require_lodash(), 1);
var LogItem = class {
  attributes = {};
  constructor(params) {
    this.addAttributes(params.attributes);
  }
  addAttributes(attributes) {
    (0, import_lodash.default)(this.attributes, attributes);
    return this;
  }
  getAttributes() {
    return this.attributes;
  }
  prepareForPrint() {
    this.setAttributes(this.removeEmptyKeys(this.getAttributes()));
  }
  removeEmptyKeys(attributes) {
    const newAttributes = {};
    for (const key in attributes) {
      if (attributes[key] !== void 0 && attributes[key] !== "" && attributes[key] !== null) {
        newAttributes[key] = attributes[key];
      }
    }
    return newAttributes;
  }
  setAttributes(attributes) {
    this.attributes = attributes;
  }
};

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/PowertoolsLogFormatter.js
var PowertoolsLogFormatter = class extends LogFormatter {
  /**
   * It formats key-value pairs of log attributes.
   *
   * @param {UnformattedAttributes} attributes
   * @param {LogAttributes} additionalLogAttributes
   * @returns {LogItem}
   */
  formatAttributes(attributes, additionalLogAttributes) {
    const baseAttributes = {
      cold_start: attributes.lambdaContext?.coldStart,
      function_arn: attributes.lambdaContext?.invokedFunctionArn,
      function_memory_size: attributes.lambdaContext?.memoryLimitInMB,
      function_name: attributes.lambdaContext?.functionName,
      function_request_id: attributes.lambdaContext?.awsRequestId,
      level: attributes.logLevel,
      message: attributes.message,
      sampling_rate: attributes.sampleRateValue,
      service: attributes.serviceName,
      timestamp: this.formatTimestamp(attributes.timestamp),
      xray_trace_id: attributes.xRayTraceId
    };
    const powertoolsLogItem = new LogItem({ attributes: baseAttributes });
    powertoolsLogItem.addAttributes(additionalLogAttributes);
    return powertoolsLogItem;
  }
};

// ../../node_modules/@aws-lambda-powertools/logger/lib/esm/Logger.js
var Logger = class _Logger extends Utility {
  /**
   * Console instance used to print logs.
   *
   * In AWS Lambda, we create a new instance of the Console class so that we can have
   * full control over the output of the logs. In testing environments, we use the
   * default console instance.
   *
   * This property is initialized in the constructor in setOptions().
   *
   * @private
   */
  console;
  /**
   * Custom config service instance used to configure the logger.
   */
  customConfigService;
  /**
   * Environment variables service instance used to fetch environment variables.
   */
  envVarsService = new EnvironmentVariablesService2();
  /**
   * Whether to print the Lambda invocation event in the logs.
   */
  logEvent = false;
  /**
   * Formatter used to format the log items.
   * @default new PowertoolsLogFormatter()
   */
  logFormatter;
  /**
   * JSON indentation used to format the logs.
   */
  logIndentation = LogJsonIndent.COMPACT;
  /**
   * Log level used internally by the current instance of Logger.
   */
  logLevel = 12;
  /**
   * Log level thresholds used internally by the current instance of Logger.
   *
   * The levels are in ascending order from the most verbose to the least verbose (no logs).
   */
  logLevelThresholds = {
    DEBUG: 8,
    INFO: 12,
    WARN: 16,
    ERROR: 20,
    CRITICAL: 24,
    SILENT: 28
  };
  /**
   * Persistent log attributes that will be logged in all log items.
   */
  persistentLogAttributes = {};
  /**
   * Standard attributes managed by Powertools that will be logged in all log items.
   */
  powertoolsLogData = {};
  /**
   * Temporary log attributes that can be appended with `appendKeys()` method.
   */
  temporaryLogAttributes = {};
  /**
   * Buffer used to store logs until the logger is initialized.
   *
   * Sometimes we need to log warnings before the logger is fully initialized, however we can't log them
   * immediately because the logger is not ready yet. This buffer stores those logs until the logger is ready.
   */
  #buffer = [];
  /**
   * Flag used to determine if the logger is initialized.
   */
  #isInitialized = false;
  /**
   * Map used to hold the list of keys and their type.
   *
   * Because keys of different types can be overwritten, we keep a list of keys that were added and their last
   * type. We then use this map at log preparation time to pick the last one.
   */
  #keys = /* @__PURE__ */ new Map();
  /**
   * This is the initial log leval as set during the initialization of the logger.
   *
   * We keep this value to be able to reset the log level to the initial value when the sample rate is refreshed.
   */
  #initialLogLevel = 12;
  /**
   * Log level used by the current instance of Logger.
   *
   * Returns the log level as a number. The higher the number, the less verbose the logs.
   * To get the log level name, use the {@link getLevelName()} method.
   */
  get level() {
    return this.logLevel;
  }
  /**
   * It initializes the Logger class with an optional set of options (settings).
   * *
   * @param {ConstructorOptions} options
   */
  constructor(options = {}) {
    super();
    const { customConfigService, ...rest } = options;
    this.setCustomConfigService(customConfigService);
    this.setOptions(rest);
    this.#isInitialized = true;
    for (const [level, log] of this.#buffer) {
      this.printLog(level, this.createAndPopulateLogItem(...log));
    }
    this.#buffer = [];
  }
  /**
   * It adds the current Lambda function's invocation context data to the powertoolLogData property of the instance.
   * This context data will be part of all printed log items.
   *
   * @param {Context} context
   * @returns {void}
   */
  addContext(context) {
    this.addToPowertoolsLogData({
      lambdaContext: {
        invokedFunctionArn: context.invokedFunctionArn,
        coldStart: this.getColdStart(),
        awsRequestId: context.awsRequestId,
        memoryLimitInMB: context.memoryLimitInMB,
        functionName: context.functionName,
        functionVersion: context.functionVersion
      }
    });
  }
  /**
   * It adds the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.
   *
   * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.
   *
   * @param {LogAttributes} attributes
   * @returns {void}
   */
  addPersistentLogAttributes(attributes) {
    this.appendPersistentKeys(attributes);
  }
  /**
   * It adds the given temporary attributes (key-value pairs) to all log items generated by this Logger instance.
   *
   * @param {LogAttributes} attributes
   * @returns {void}
   */
  appendKeys(attributes) {
    for (const attributeKey of Object.keys(attributes)) {
      this.#keys.set(attributeKey, "temp");
    }
    (0, import_lodash2.default)(this.temporaryLogAttributes, attributes);
  }
  /**
   * It adds the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.
   *
   * @param attributes - The attributes to add to all log items.
   */
  appendPersistentKeys(attributes) {
    for (const attributeKey of Object.keys(attributes)) {
      this.#keys.set(attributeKey, "persistent");
    }
    (0, import_lodash2.default)(this.persistentLogAttributes, attributes);
  }
  /**
   * It creates a separate Logger instance, identical to the current one
   * It's possible to overwrite the new instance options by passing them.
   *
   * @param {ConstructorOptions} options
   * @returns {Logger}
   */
  createChild(options = {}) {
    const childLogger = this.createLogger(
      // Merge parent logger options with options passed to createChild,
      // the latter having precedence.
      (0, import_lodash2.default)({}, {
        logLevel: this.getLevelName(),
        serviceName: this.powertoolsLogData.serviceName,
        sampleRateValue: this.powertoolsLogData.sampleRateValue,
        logFormatter: this.getLogFormatter(),
        customConfigService: this.getCustomConfigService(),
        environment: this.powertoolsLogData.environment,
        persistentLogAttributes: this.persistentLogAttributes,
        temporaryLogAttributes: this.temporaryLogAttributes
      }, options)
    );
    if (this.powertoolsLogData.lambdaContext)
      childLogger.addContext(this.powertoolsLogData.lambdaContext);
    return childLogger;
  }
  /**
   * It prints a log item with level CRITICAL.
   *
   * @param {LogItemMessage} input
   * @param {Error | LogAttributes | string} extraInput
   */
  critical(input, ...extraInput) {
    this.processLogItem(24, input, extraInput);
  }
  /**
   * It prints a log item with level DEBUG.
   *
   * @param {LogItemMessage} input
   * @param {Error | LogAttributes | string} extraInput
   * @returns {void}
   */
  debug(input, ...extraInput) {
    this.processLogItem(8, input, extraInput);
  }
  /**
   * It prints a log item with level ERROR.
   *
   * @param {LogItemMessage} input
   * @param {Error | LogAttributes | string} extraInput
   * @returns {void}
   */
  error(input, ...extraInput) {
    this.processLogItem(20, input, extraInput);
  }
  /**
   * Get the log level name of the current instance of Logger.
   *
   * It returns the log level name, i.e. `INFO`, `DEBUG`, etc.
   * To get the log level as a number, use the {@link Logger.level} property.
   *
   * @returns {Uppercase<LogLevel>} The log level name.
   */
  getLevelName() {
    return this.getLogLevelNameFromNumber(this.logLevel);
  }
  /**
   * It returns a boolean value. True means that the Lambda invocation events
   * are printed in the logs.
   *
   * @returns {boolean}
   */
  getLogEvent() {
    return this.logEvent;
  }
  /**
   * It returns the persistent log attributes, which are the attributes
   * that will be logged in all log items.
   *
   * @private
   * @returns {LogAttributes}
   */
  getPersistentLogAttributes() {
    return this.persistentLogAttributes;
  }
  /**
   * It prints a log item with level INFO.
   *
   * @param {LogItemMessage} input
   * @param {Error | LogAttributes | string} extraInput
   * @returns {void}
   */
  info(input, ...extraInput) {
    this.processLogItem(12, input, extraInput);
  }
  /**
   * Method decorator that adds the current Lambda function context as extra
   * information in all log items.
   *
   * The decorator can be used only when attached to a Lambda function handler which
   * is written as method of a class, and should be declared just before the handler declaration.
   *
   * Note: Currently TypeScript only supports decorators on classes and methods. If you are using the
   * function syntax, you should use the middleware instead.
   *
   * @example
   * ```typescript
   * import { Logger } from '@aws-lambda-powertools/logger';
   * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';
   *
   * const logger = new Logger();
   *
   * class Lambda implements LambdaInterface {
   *     // Decorate your handler class method
   *     ⁣@logger.injectLambdaContext()
   *     public async handler(_event: unknown, _context: unknown): Promise<void> {
   *         logger.info('This is an INFO log with some context');
   *     }
   * }
   *
   * const handlerClass = new Lambda();
   * export const handler = handlerClass.handler.bind(handlerClass);
   * ```
   *
   * @see https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators
   * @returns {HandlerMethodDecorator}
   */
  injectLambdaContext(options) {
    return (_target, _propertyKey, descriptor) => {
      const originalMethod = descriptor.value;
      const loggerRef = this;
      descriptor.value = async function(event, context, callback) {
        _Logger.injectLambdaContextBefore(loggerRef, event, context, options);
        let result;
        try {
          result = await originalMethod.apply(this, [event, context, callback]);
        } catch (error) {
          throw error;
        } finally {
          if (options?.clearState || options?.resetKeys)
            loggerRef.resetKeys();
        }
        return result;
      };
    };
  }
  /**
   * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link resetKeys()} instead.
   */
  /* istanbul ignore next */
  static injectLambdaContextAfterOrOnError(logger2, _persistentAttributes, options) {
    if (options && (options.clearState || options?.resetKeys)) {
      logger2.resetKeys();
    }
  }
  static injectLambdaContextBefore(logger2, event, context, options) {
    logger2.addContext(context);
    let shouldLogEvent = void 0;
    if (options && Object.hasOwn(options, "logEvent")) {
      shouldLogEvent = options.logEvent;
    }
    logger2.logEventIfEnabled(event, shouldLogEvent);
  }
  /**
   * Logs a Lambda invocation event, if it *should*.
   *
   ** @param {unknown} event
   * @param {boolean} [overwriteValue]
   * @returns {void}
   */
  logEventIfEnabled(event, overwriteValue) {
    if (!this.shouldLogEvent(overwriteValue))
      return;
    this.info("Lambda invocation event", { event });
  }
  /**
   * This method allows recalculating the initial sampling decision for changing
   * the log level to DEBUG based on a sample rate value used during initialization,
   * potentially yielding a different outcome.
   *
   * @returns {void}
   */
  refreshSampleRateCalculation() {
    this.setInitialSampleRate(this.powertoolsLogData.sampleRateValue);
  }
  /**
   * It removes temporary attributes based on provided keys to all log items generated by this Logger instance.
   *
   * @param {string[]} keys
   * @returns {void}
   */
  removeKeys(keys) {
    for (const key of keys) {
      this.temporaryLogAttributes[key] = void 0;
      if (this.persistentLogAttributes[key]) {
        this.#keys.set(key, "persistent");
      } else {
        this.#keys.delete(key);
      }
    }
  }
  /**
   * Remove the given keys from the persistent keys.
   *
   * @example
   * ```typescript
   * import { Logger } from '@aws-lambda-powertools/logger';
   *
   * const logger = new Logger({
   *   persistentKeys: {
   *     environment: 'prod',
   *   },
   * });
   *
   * logger.removePersistentKeys(['environment']);
   * ```
   *
   * @param keys - The keys to remove from the persistent attributes.
   */
  removePersistentKeys(keys) {
    for (const key of keys) {
      this.persistentLogAttributes[key] = void 0;
      if (this.temporaryLogAttributes[key]) {
        this.#keys.set(key, "temp");
      } else {
        this.#keys.delete(key);
      }
    }
  }
  /**
   * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link removePersistentKeys()} instead.
   *
   * @param {string[]} keys
   * @returns {void}
   */
  removePersistentLogAttributes(keys) {
    this.removePersistentKeys(keys);
  }
  /**
   * It removes all temporary log attributes added with `appendKeys()` method.
   */
  resetKeys() {
    for (const key of Object.keys(this.temporaryLogAttributes)) {
      if (this.persistentLogAttributes[key]) {
        this.#keys.set(key, "persistent");
      } else {
        this.#keys.delete(key);
      }
    }
    this.temporaryLogAttributes = {};
  }
  /**
   * Set the log level for this Logger instance.
   *
   * If the log level is set using AWS Lambda Advanced Logging Controls, it sets it
   * instead of the given log level to avoid data loss.
   *
   * @param logLevel The log level to set, i.e. `error`, `warn`, `info`, `debug`, etc.
   */
  setLogLevel(logLevel) {
    if (this.awsLogLevelShortCircuit(logLevel))
      return;
    if (this.isValidLogLevel(logLevel)) {
      this.logLevel = this.logLevelThresholds[logLevel];
    } else {
      throw new Error(`Invalid log level: ${logLevel}`);
    }
  }
  /**
   * It sets the given attributes (key-value pairs) to all log items generated by this Logger instance.
   * Note: this replaces the pre-existing value.
   *
   * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.
   *
   * @param {LogAttributes} attributes
   * @returns {void}
   */
  setPersistentLogAttributes(attributes) {
    this.persistentLogAttributes = attributes;
  }
  /**
   * It checks whether the current Lambda invocation event should be printed in the logs or not.
   *
   * @private
   * @param {boolean} [overwriteValue]
   * @returns {boolean}
   */
  shouldLogEvent(overwriteValue) {
    if (typeof overwriteValue === "boolean") {
      return overwriteValue;
    }
    return this.getLogEvent();
  }
  /**
   * It prints a log item with level WARN.
   *
   * @param {LogItemMessage} input
   * @param {Error | LogAttributes | string} extraInput
   * @returns {void}
   */
  warn(input, ...extraInput) {
    this.processLogItem(16, input, extraInput);
  }
  /**
   * Factory method for instantiating logger instances. Used by `createChild` method.
   * Important for customization and subclassing. It allows subclasses, like `MyOwnLogger`,
   * to override its behavior while keeping the main business logic in `createChild` intact.
   *
   * @example
   * ```typescript
   * // MyOwnLogger subclass
   * class MyOwnLogger extends Logger {
   *   protected createLogger(options?: ConstructorOptions): MyOwnLogger {
   *     return new MyOwnLogger(options);
   *   }
   *   // No need to re-implement business logic from `createChild` and keep track on changes
   *   public createChild(options?: ConstructorOptions): MyOwnLogger {
   *     return super.createChild(options) as MyOwnLogger;
   *   }
   * }
   * ```
   *
   * @param {ConstructorOptions} [options] Logger configuration options.
   * @returns {Logger} A new logger instance.
   */
  createLogger(options) {
    return new _Logger(options);
  }
  /**
   * It stores information that is printed in all log items.
   *
   * @param {Partial<PowertoolsLogData>} attributes
   * @private
   * @returns {void}
   */
  addToPowertoolsLogData(attributes) {
    (0, import_lodash2.default)(this.powertoolsLogData, attributes);
  }
  awsLogLevelShortCircuit(selectedLogLevel) {
    const awsLogLevel = this.getEnvVarsService().getAwsLogLevel();
    if (this.isValidLogLevel(awsLogLevel)) {
      this.logLevel = this.logLevelThresholds[awsLogLevel];
      if (this.isValidLogLevel(selectedLogLevel) && this.logLevel > this.logLevelThresholds[selectedLogLevel]) {
        this.warn(`Current log level (${selectedLogLevel}) does not match AWS Lambda Advanced Logging Controls minimum log level (${awsLogLevel}). This can lead to data loss, consider adjusting them.`);
      }
      return true;
    }
    return false;
  }
  /**
   * Create a log item and populate it with the given log level, input, and extra input.
   *
   * We start with creating an object with base attributes managed by Powertools.
   * Then we create a second object with persistent attributes provided by customers either
   * directly to the log entry or through initial configuration and `appendKeys` method.
   *
   * Once we have the two objects, we pass them to the formatter that will apply the desired
   * formatting to the log item.
   *
   * @param logLevel The log level of the log item to be printed
   * @param input The main input of the log item, this can be a string or an object with additional attributes
   * @param extraInput Additional attributes to be added to the log item
   */
  createAndPopulateLogItem(logLevel, input, extraInput) {
    let message = "";
    let otherInput = {};
    if (typeof input === "string") {
      message = input;
    } else {
      const { message: inputMessage, ...rest } = input;
      message = inputMessage;
      otherInput = rest;
    }
    const unformattedBaseAttributes = {
      logLevel: this.getLogLevelNameFromNumber(logLevel),
      timestamp: /* @__PURE__ */ new Date(),
      message,
      xRayTraceId: this.envVarsService.getXrayTraceId(),
      ...this.getPowertoolsLogData()
    };
    const additionalAttributes = {};
    for (const [key, type] of this.#keys) {
      if (type === "persistent") {
        additionalAttributes[key] = this.persistentLogAttributes[key];
      } else {
        additionalAttributes[key] = this.temporaryLogAttributes[key];
      }
    }
    (0, import_lodash2.default)(additionalAttributes, otherInput);
    for (const item of extraInput) {
      const attributes = item instanceof Error ? { error: item } : typeof item === "string" ? { extra: item } : item;
      (0, import_lodash2.default)(additionalAttributes, attributes);
    }
    return this.getLogFormatter().formatAttributes(unformattedBaseAttributes, additionalAttributes);
  }
  /**
   * It returns the custom config service, an abstraction used to fetch environment variables.
   *
   * @private
   * @returns {ConfigServiceInterface | undefined}
   */
  getCustomConfigService() {
    return this.customConfigService;
  }
  /**
   * It returns the instance of a service that fetches environment variables.
   *
   * @private
   * @returns {EnvironmentVariablesService}
   */
  getEnvVarsService() {
    return this.envVarsService;
  }
  /**
   * It returns the instance of a service that formats the structure of a
   * log item's keys and values in the desired way.
   *
   * @private
   * @returns {LogFormatterInterface}
   */
  getLogFormatter() {
    return this.logFormatter;
  }
  /**
   * Get the log level name from the log level number.
   *
   * For example, if the log level is 16, it will return 'WARN'.
   *
   * @param logLevel - The log level to get the name of
   * @returns - The name of the log level
   */
  getLogLevelNameFromNumber(logLevel) {
    let found;
    for (const [key, value] of Object.entries(this.logLevelThresholds)) {
      if (value === logLevel) {
        found = key;
        break;
      }
    }
    return found;
  }
  /**
   * It returns information that will be added in all log item by
   * this Logger instance (different from user-provided persistent attributes).
   *
   * @private
   * @returns {LogAttributes}
   */
  getPowertoolsLogData() {
    return this.powertoolsLogData;
  }
  /**
   * When the data added in the log item contains object references or BigInt values,
   * `JSON.stringify()` can't handle them and instead throws errors:
   * `TypeError: cyclic object value` or `TypeError: Do not know how to serialize a BigInt`.
   * To mitigate these issues, this method will find and remove all cyclic references and convert BigInt values to strings.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions
   * @private
   */
  getReplacer() {
    const references = /* @__PURE__ */ new WeakSet();
    return (key, value) => {
      let item = value;
      if (item instanceof Error) {
        item = this.getLogFormatter().formatError(item);
      }
      if (typeof item === "bigint") {
        return item.toString();
      }
      if (typeof item === "object" && value !== null) {
        if (references.has(item)) {
          return;
        }
        references.add(item);
      }
      return item;
    };
  }
  /**
   * It returns true and type guards the log level if a given log level is valid.
   *
   * @param {LogLevel} logLevel
   * @private
   * @returns {boolean}
   */
  isValidLogLevel(logLevel) {
    return typeof logLevel === "string" && logLevel in this.logLevelThresholds;
  }
  /**
   * It returns true and type guards the sample rate value if a given value is valid.
   *
   * @param sampleRateValue
   * @private
   * @returns {boolean}
   */
  isValidSampleRate(sampleRateValue) {
    return typeof sampleRateValue === "number" && 0 <= sampleRateValue && sampleRateValue <= 1;
  }
  /**
   * It prints a given log with given log level.
   *
   * @param {number} logLevel
   * @param {LogItem} log
   * @private
   */
  printLog(logLevel, log) {
    log.prepareForPrint();
    const consoleMethod = logLevel === 24 ? "error" : this.getLogLevelNameFromNumber(logLevel).toLowerCase();
    this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getReplacer(), this.logIndentation));
  }
  /**
   * It prints a given log with given log level.
   *
   * @param {number} logLevel
   * @param {LogItemMessage} input
   * @param {LogItemExtraInput} extraInput
   * @private
   */
  processLogItem(logLevel, input, extraInput) {
    if (logLevel >= this.logLevel) {
      if (this.#isInitialized) {
        this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));
      } else {
        this.#buffer.push([logLevel, [logLevel, input, extraInput]]);
      }
    }
  }
  /**
   * It initializes console property as an instance of the internal version of Console() class (PR #748)
   * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.
   *
   * @private
   * @returns {void}
   */
  setConsole() {
    if (!this.getEnvVarsService().isDevMode()) {
      this.console = new import_node_console.Console({
        stdout: process.stdout,
        stderr: process.stderr
      });
    } else {
      this.console = console;
    }
  }
  /**
   * Sets the Logger's customer config service instance, which will be used
   * to fetch environment variables.
   *
   * @private
   * @param {ConfigServiceInterface} customConfigService
   * @returns {void}
   */
  setCustomConfigService(customConfigService) {
    this.customConfigService = customConfigService ? customConfigService : void 0;
  }
  /**
   * Sets the initial Logger log level based on the following order:
   * 1. If a log level is set using AWS Lambda Advanced Logging Controls, it sets it.
   * 2. If a log level is passed to the constructor, it sets it.
   * 3. If a log level is set via custom config service, it sets it.
   * 4. If a log level is set via env variables, it sets it.
   *
   * If none of the above is true, the default log level applies (`INFO`).
   *
   * @private
   * @param {LogLevel} [logLevel] - Log level passed to the constructor
   */
  setInitialLogLevel(logLevel) {
    const constructorLogLevel = logLevel?.toUpperCase();
    if (this.awsLogLevelShortCircuit(constructorLogLevel))
      return;
    if (this.isValidLogLevel(constructorLogLevel)) {
      this.logLevel = this.logLevelThresholds[constructorLogLevel];
      this.#initialLogLevel = this.logLevel;
      return;
    }
    const customConfigValue = this.getCustomConfigService()?.getLogLevel()?.toUpperCase();
    if (this.isValidLogLevel(customConfigValue)) {
      this.logLevel = this.logLevelThresholds[customConfigValue];
      this.#initialLogLevel = this.logLevel;
      return;
    }
    const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();
    if (this.isValidLogLevel(envVarsValue)) {
      this.logLevel = this.logLevelThresholds[envVarsValue];
      this.#initialLogLevel = this.logLevel;
      return;
    }
  }
  /**
   * It sets sample rate value with the following prioprity:
   * 1. Constructor value
   * 2. Custom config service value
   * 3. Environment variable value
   * 4. Default value (zero)
   *
   * @private
   * @param {number} [sampleRateValue]
   * @returns {void}
   */
  setInitialSampleRate(sampleRateValue) {
    this.powertoolsLogData.sampleRateValue = 0;
    const constructorValue = sampleRateValue;
    const customConfigValue = this.getCustomConfigService()?.getSampleRateValue();
    const envVarsValue = this.getEnvVarsService().getSampleRateValue();
    for (const value of [constructorValue, customConfigValue, envVarsValue]) {
      if (this.isValidSampleRate(value)) {
        this.powertoolsLogData.sampleRateValue = value;
        if (value && (0, import_node_crypto.randomInt)(0, 100) / 100 <= value) {
          this.setLogLevel("DEBUG");
          this.debug("Setting log level to DEBUG due to sampling rate");
        } else {
          this.setLogLevel(this.getLogLevelNameFromNumber(this.#initialLogLevel));
        }
        return;
      }
    }
  }
  /**
   * If the log event feature is enabled via env variable, it sets a property that tracks whether
   * the event passed to the Lambda function handler should be logged or not.
   *
   * @private
   * @returns {void}
   */
  setLogEvent() {
    if (this.getEnvVarsService().getLogEvent()) {
      this.logEvent = true;
    }
  }
  /**
   * It sets the log formatter instance, in charge of giving a custom format
   * to the structured logs
   *
   * @private
   * @param {LogFormatterInterface} logFormatter
   * @returns {void}
   */
  setLogFormatter(logFormatter) {
    this.logFormatter = logFormatter ?? new PowertoolsLogFormatter({ envVarsService: this.getEnvVarsService() });
  }
  /**
   * If the `POWERTOOLS_DEV` env variable is set,
   * it adds JSON indentation for pretty printing logs.
   *
   * @private
   * @returns {void}
   */
  setLogIndentation() {
    if (this.getEnvVarsService().isDevMode()) {
      this.logIndentation = LogJsonIndent.PRETTY;
    }
  }
  /**
   * It configures the Logger instance settings that will affect the Logger's behaviour
   * and the content of all logs.
   *
   * @private
   * @param options Options to configure the Logger instance
   */
  setOptions(options) {
    const {
      logLevel,
      serviceName,
      sampleRateValue,
      logFormatter,
      persistentKeys,
      persistentLogAttributes,
      // deprecated in favor of persistentKeys
      environment
    } = options;
    if (persistentLogAttributes && persistentKeys) {
      this.warn("Both persistentLogAttributes and persistentKeys options were provided. Using persistentKeys as persistentLogAttributes is deprecated and will be removed in future releases");
    }
    this.setPowertoolsLogData(serviceName, environment, persistentKeys || persistentLogAttributes);
    this.setLogEvent();
    this.setInitialLogLevel(logLevel);
    this.setInitialSampleRate(sampleRateValue);
    this.setLogFormatter(logFormatter);
    this.setConsole();
    this.setLogIndentation();
    return this;
  }
  /**
   * It adds important data to the Logger instance that will affect the content of all logs.
   *
   * @param {string} serviceName
   * @param {Environment} environment
   * @param {LogAttributes} persistentLogAttributes
   * @private
   * @returns {void}
   */
  setPowertoolsLogData(serviceName, environment, persistentLogAttributes = {}) {
    this.addToPowertoolsLogData({
      awsRegion: this.getEnvVarsService().getAwsRegion(),
      environment: environment || this.getCustomConfigService()?.getCurrentEnvironment() || this.getEnvVarsService().getCurrentEnvironment(),
      serviceName: serviceName || this.getCustomConfigService()?.getServiceName() || this.getEnvVarsService().getServiceName() || this.getDefaultServiceName()
    });
    this.appendPersistentKeys(persistentLogAttributes);
  }
};

// ../../node_modules/@aws-lambda-powertools/metrics/lib/esm/Metrics.js
var import_node_console2 = require("node:console");

// ../../node_modules/@aws-lambda-powertools/metrics/lib/esm/config/EnvironmentVariablesService.js
var EnvironmentVariablesService3 = class extends EnvironmentVariablesService {
  namespaceVariable = "POWERTOOLS_METRICS_NAMESPACE";
  /**
   * It returns the value of the POWERTOOLS_METRICS_NAMESPACE environment variable.
   *
   * @returns {string}
   */
  getNamespace() {
    return this.get(this.namespaceVariable);
  }
};

// ../../node_modules/@aws-lambda-powertools/metrics/lib/esm/constants.js
var COLD_START_METRIC = "ColdStart";
var DEFAULT_NAMESPACE = "default_namespace";
var MAX_METRICS_SIZE = 100;
var MAX_METRIC_VALUES_SIZE = 100;
var MAX_DIMENSION_COUNT = 29;
var MetricUnit = {
  Seconds: "Seconds",
  Microseconds: "Microseconds",
  Milliseconds: "Milliseconds",
  Bytes: "Bytes",
  Kilobytes: "Kilobytes",
  Megabytes: "Megabytes",
  Gigabytes: "Gigabytes",
  Terabytes: "Terabytes",
  Bits: "Bits",
  Kilobits: "Kilobits",
  Megabits: "Megabits",
  Gigabits: "Gigabits",
  Terabits: "Terabits",
  Percent: "Percent",
  Count: "Count",
  BytesPerSecond: "Bytes/Second",
  KilobytesPerSecond: "Kilobytes/Second",
  MegabytesPerSecond: "Megabytes/Second",
  GigabytesPerSecond: "Gigabytes/Second",
  TerabytesPerSecond: "Terabytes/Second",
  BitsPerSecond: "Bits/Second",
  KilobitsPerSecond: "Kilobits/Second",
  MegabitsPerSecond: "Megabits/Second",
  GigabitsPerSecond: "Gigabits/Second",
  TerabitsPerSecond: "Terabits/Second",
  CountPerSecond: "Count/Second"
};
var MetricResolution = {
  Standard: 60,
  High: 1
};

// ../../node_modules/@aws-lambda-powertools/metrics/lib/esm/Metrics.js
var Metrics = class _Metrics extends Utility {
  /**
   * Console instance used to print logs.
   *
   * In AWS Lambda, we create a new instance of the Console class so that we can have
   * full control over the output of the logs. In testing environments, we use the
   * default console instance.
   *
   * This property is initialized in the constructor in setOptions().
   *
   * @private
   */
  console;
  customConfigService;
  defaultDimensions = {};
  dimensions = {};
  envVarsService;
  functionName;
  isSingleMetric = false;
  metadata = {};
  namespace;
  shouldThrowOnEmptyMetrics = false;
  storedMetrics = {};
  constructor(options = {}) {
    super();
    this.dimensions = {};
    this.setOptions(options);
  }
  /**
   * Add a dimension to the metrics.
   *
   * A dimension is a key-value pair that is used to group metrics.
   *
   * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension for more details.
   * @param name
   * @param value
   */
  addDimension(name, value) {
    if (MAX_DIMENSION_COUNT <= this.getCurrentDimensionsCount()) {
      throw new RangeError(`The number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);
    }
    this.dimensions[name] = value;
  }
  /**
   * Add multiple dimensions to the metrics.
   *
   * A dimension is a key-value pair that is used to group metrics.
   *
   * @param dimensions A key-value pair of dimensions
   */
  addDimensions(dimensions) {
    const newDimensions = { ...this.dimensions };
    Object.keys(dimensions).forEach((dimensionName) => {
      newDimensions[dimensionName] = dimensions[dimensionName];
    });
    if (Object.keys(newDimensions).length > MAX_DIMENSION_COUNT) {
      throw new RangeError(`Unable to add ${Object.keys(dimensions).length} dimensions: the number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);
    }
    this.dimensions = newDimensions;
  }
  /**
   * A high-cardinality data part of your Metrics log.
   *
   * This is useful when you want to search highly contextual information along with your metrics in your logs.
   *
   * @param key The key of the metadata
   * @param value The value of the metadata
   */
  addMetadata(key, value) {
    this.metadata[key] = value;
  }
  /**
   * Add a metric to the metrics buffer.
   *
   * By default, metrics are buffered and flushed at the end of the Lambda invocation
   * or when calling {@link Metrics.publishStoredMetrics}.
   *
   * You can add a metric by specifying the metric name, unit, and value. For convenience,
   * we provide a set of constants for the most common units in {@link MetricUnit}.
   *
   * @example
   * ```typescript
   * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });
   *
   * metrics.addMetric('successfulBooking', MetricUnit.Count, 1);
   * ```
   *
   * Optionally, you can specify the metric resolution, which can be either `High` or `Standard`.
   * By default, metrics are published with a resolution of `Standard`, click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Resolution_definition)
   * to learn more about metric resolutions.
   *
   * @example
   * ```typescript
   * import { Metrics, MetricUnit, MetricResolution } from '@aws-lambda-powertools/metrics';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });
   *
   * metrics.addMetric('successfulBooking', MetricUnit.Count, 1, MetricResolution.High);
   * ```
   *
   * @param name - The metric name
   * @param unit - The metric unit
   * @param value - The metric value
   * @param resolution - The metric resolution
   */
  addMetric(name, unit, value, resolution = MetricResolution.Standard) {
    this.storeMetric(name, unit, value, resolution);
    if (this.isSingleMetric)
      this.publishStoredMetrics();
  }
  /**
   * Create a singleMetric to capture cold start.
   *
   * If it's a cold start invocation, this feature will:
   *   * Create a separate EMF blob that contains a single metric named ColdStart
   *   * Add function_name and service dimensions
   *
   * This has the advantage of keeping cold start metric separate from your application metrics, where you might have unrelated dimensions,
   * as well as avoiding potential data loss from metrics not being published for other reasons.
   *
   * @example
   * ```typescript
   * import { Metrics } from '@aws-lambda-powertools/metrics';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });
   *
   * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {
   *     metrics.captureColdStartMetric();
   * };
   * ```
   */
  captureColdStartMetric() {
    if (!this.isColdStart())
      return;
    const singleMetric = this.singleMetric();
    if (this.defaultDimensions.service) {
      singleMetric.setDefaultDimensions({
        service: this.defaultDimensions.service
      });
    }
    if (this.functionName != null) {
      singleMetric.addDimension("function_name", this.functionName);
    }
    singleMetric.addMetric(COLD_START_METRIC, MetricUnit.Count, 1);
  }
  /**
   * Clear all default dimensions.
   */
  clearDefaultDimensions() {
    this.defaultDimensions = {};
  }
  /**
   * Clear all dimensions.
   */
  clearDimensions() {
    this.dimensions = {};
  }
  /**
   * Clear all metadata.
   */
  clearMetadata() {
    this.metadata = {};
  }
  /**
   * Clear all the metrics stored in the buffer.
   */
  clearMetrics() {
    this.storedMetrics = {};
  }
  /**
   * A decorator automating coldstart capture, throw on empty metrics and publishing metrics on handler exit.
   *
   * @example
   *
   * ```typescript
   * import { Metrics } from '@aws-lambda-powertools/metrics';
   * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });
   *
   * class Lambda implements LambdaInterface {
   *   @metrics.logMetrics({ captureColdStartMetric: true })
   *   public handler(_event: unknown, __context: unknown): Promise<void> {
   *     // ...
   *   }
   * }
   *
   * const handlerClass = new Lambda();
   * export const handler = handlerClass.handler.bind(handlerClass);
   * ```
   *
   * @decorator Class
   */
  logMetrics(options = {}) {
    const { throwOnEmptyMetrics, defaultDimensions, captureColdStartMetric } = options;
    if (throwOnEmptyMetrics) {
      this.throwOnEmptyMetrics();
    }
    if (defaultDimensions !== void 0) {
      this.setDefaultDimensions(defaultDimensions);
    }
    return (_target, _propertyKey, descriptor) => {
      const originalMethod = descriptor.value;
      const metricsRef = this;
      descriptor.value = async function(event, context, callback) {
        metricsRef.functionName = context.functionName;
        if (captureColdStartMetric)
          metricsRef.captureColdStartMetric();
        let result;
        try {
          result = await originalMethod.apply(this, [event, context, callback]);
        } catch (error) {
          throw error;
        } finally {
          metricsRef.publishStoredMetrics();
        }
        return result;
      };
      return descriptor;
    };
  }
  /**
   * Synchronous function to actually publish your metrics. (Not needed if using logMetrics decorator).
   * It will create a new EMF blob and log it to standard output to be then ingested by Cloudwatch logs and processed automatically for metrics creation.
   *
   * @example
   *
   * ```typescript
   * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' }); // Sets metric namespace, and service as a metric dimension
   *
   * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {
   *   metrics.addMetric('test-metric', MetricUnit.Count, 10);
   *   metrics.publishStoredMetrics();
   * };
   * ```
   */
  publishStoredMetrics() {
    if (!this.shouldThrowOnEmptyMetrics && Object.keys(this.storedMetrics).length === 0) {
      console.warn("No application metrics to publish. The cold-start metric may be published if enabled. If application metrics should never be empty, consider using `throwOnEmptyMetrics`");
    }
    const target = this.serializeMetrics();
    this.console.log(JSON.stringify(target));
    this.clearMetrics();
    this.clearDimensions();
    this.clearMetadata();
  }
  /**
   * Function to create a new metric object compliant with the EMF (Embedded Metric Format) schema which
   * includes the metric name, unit, and optionally storage resolution.
   *
   * The function will create a new EMF blob and log it to standard output to be then ingested by Cloudwatch
   * logs and processed automatically for metrics creation.
   *
   * @returns metrics as JSON object compliant EMF Schema Specification
   * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Specification.html for more details
   */
  serializeMetrics() {
    const metricDefinitions = Object.values(this.storedMetrics).map((metricDefinition) => ({
      Name: metricDefinition.name,
      Unit: metricDefinition.unit,
      ...metricDefinition.resolution === MetricResolution.High ? { StorageResolution: metricDefinition.resolution } : {}
    }));
    if (metricDefinitions.length === 0 && this.shouldThrowOnEmptyMetrics) {
      throw new RangeError("The number of metrics recorded must be higher than zero");
    }
    if (!this.namespace)
      console.warn("Namespace should be defined, default used");
    const metricValues = Object.values(this.storedMetrics).reduce((result, { name, value }) => {
      result[name] = value;
      return result;
    }, {});
    const dimensionNames = [
      .../* @__PURE__ */ new Set([
        ...Object.keys(this.defaultDimensions),
        ...Object.keys(this.dimensions)
      ])
    ];
    return {
      _aws: {
        Timestamp: (/* @__PURE__ */ new Date()).getTime(),
        CloudWatchMetrics: [
          {
            Namespace: this.namespace || DEFAULT_NAMESPACE,
            Dimensions: [dimensionNames],
            Metrics: metricDefinitions
          }
        ]
      },
      ...this.defaultDimensions,
      ...this.dimensions,
      ...metricValues,
      ...this.metadata
    };
  }
  /**
   * Sets default dimensions that will be added to all metrics.
   *
   * @param dimensions The default dimensions to be added to all metrics.
   */
  setDefaultDimensions(dimensions) {
    const targetDimensions = {
      ...this.defaultDimensions,
      ...dimensions
    };
    if (MAX_DIMENSION_COUNT <= Object.keys(targetDimensions).length) {
      throw new Error("Max dimension count hit");
    }
    this.defaultDimensions = targetDimensions;
  }
  /**
   * Sets the function name to be added to the metric.
   *
   * @param value The function name to be added to the metric.
   */
  setFunctionName(value) {
    this.functionName = value;
  }
  /**
   * CloudWatch EMF uses the same dimensions across all your metrics. Use singleMetric if you have a metric that should have different dimensions.
   *
   * You don't need to call publishStoredMetrics() after calling addMetric for a singleMetrics, they will be flushed directly.
   *
   * @example
   *
   * ```typescript
   * const singleMetric = metrics.singleMetric();
   * singleMetric.addDimension('InnerDimension', 'true');
   * singleMetric.addMetric('single-metric', MetricUnit.Percent, 50);
   * ```
   *
   * @returns the Metrics
   */
  singleMetric() {
    return new _Metrics({
      namespace: this.namespace,
      serviceName: this.dimensions.service,
      defaultDimensions: this.defaultDimensions,
      singleMetric: true
    });
  }
  /**
   * Throw an Error if the metrics buffer is empty.
   *
   * @example
   *
   * ```typescript
   * import { Metrics } from '@aws-lambda-powertools/metrics';
   *
   * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName:'orders' });
   *
   * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {
   *     metrics.throwOnEmptyMetrics();
   *     metrics.publishStoredMetrics(); // will throw since no metrics added.
   * };
   * ```
   */
  throwOnEmptyMetrics() {
    this.shouldThrowOnEmptyMetrics = true;
  }
  /**
   * Gets the current number of dimensions stored.
   *
   * @returns the number of dimensions currently stored
   */
  getCurrentDimensionsCount() {
    return Object.keys(this.dimensions).length + Object.keys(this.defaultDimensions).length;
  }
  /**
   * Gets the custom config service if it exists.
   *
   * @returns the custom config service if it exists, undefined otherwise
   */
  getCustomConfigService() {
    return this.customConfigService;
  }
  /**
   * Gets the environment variables service.
   *
   * @returns the environment variables service
   */
  getEnvVarsService() {
    return this.envVarsService;
  }
  /**
   * Checks if a metric is new or not.
   *
   * A metric is considered new if there is no metric with the same name already stored.
   *
   * When a metric is not new, we also check if the unit is consistent with the stored metric with
   * the same name. If the units are inconsistent, we throw an error as this is likely a bug or typo.
   * This can happen if a metric is added without using the `MetricUnit` helper in JavaScript codebases.
   *
   * @param name The name of the metric
   * @param unit The unit of the metric
   * @returns true if the metric is new, false if another metric with the same name already exists
   */
  isNewMetric(name, unit) {
    if (this.storedMetrics[name]) {
      if (this.storedMetrics[name].unit !== unit) {
        const currentUnit = this.storedMetrics[name].unit;
        throw new Error(`Metric "${name}" has already been added with unit "${currentUnit}", but we received unit "${unit}". Did you mean to use metric unit "${currentUnit}"?`);
      }
      return false;
    } else {
      return true;
    }
  }
  /**
   * It initializes console property as an instance of the internal version of Console() class (PR #748)
   * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.
   *
   * @private
   * @returns {void}
   */
  setConsole() {
    if (!this.getEnvVarsService().isDevMode()) {
      this.console = new import_node_console2.Console({
        stdout: process.stdout,
        stderr: process.stderr
      });
    } else {
      this.console = console;
    }
  }
  /**
   * Sets the custom config service to be used.
   *
   * @param customConfigService The custom config service to be used
   */
  setCustomConfigService(customConfigService) {
    this.customConfigService = customConfigService ? customConfigService : void 0;
  }
  /**
   * Sets the environment variables service to be used.
   */
  setEnvVarsService() {
    this.envVarsService = new EnvironmentVariablesService3();
  }
  /**
   * Sets the namespace to be used.
   *
   * @param namespace The namespace to be used
   */
  setNamespace(namespace) {
    this.namespace = namespace || this.getCustomConfigService()?.getNamespace() || this.getEnvVarsService().getNamespace();
  }
  /**
   * Sets the options to be used by the Metrics instance.
   *
   * This method is used during the initialization of the Metrics instance.
   *
   * @param options The options to be used
   * @returns the Metrics instance
   */
  setOptions(options) {
    const { customConfigService, namespace, serviceName, singleMetric, defaultDimensions } = options;
    this.setEnvVarsService();
    this.setConsole();
    this.setCustomConfigService(customConfigService);
    this.setNamespace(namespace);
    this.setService(serviceName);
    this.setDefaultDimensions(defaultDimensions);
    this.isSingleMetric = singleMetric || false;
    return this;
  }
  /**
   * Sets the service to be used.
   *
   * @param service The service to be used
   */
  setService(service) {
    const targetService = service || this.getCustomConfigService()?.getServiceName() || this.getEnvVarsService().getServiceName() || this.getDefaultServiceName();
    if (targetService.length > 0) {
      this.setDefaultDimensions({ service: targetService });
    }
  }
  /**
   * Stores a metric in the buffer.
   *
   * If the buffer is full, or the metric reaches the maximum number of values,
   * the buffer is published to stdout.
   *
   * @param name The name of the metric to store
   * @param unit The unit of the metric to store
   * @param value The value of the metric to store
   * @param resolution The resolution of the metric to store
   */
  storeMetric(name, unit, value, resolution) {
    if (Object.keys(this.storedMetrics).length >= MAX_METRICS_SIZE) {
      this.publishStoredMetrics();
    }
    if (this.isNewMetric(name, unit)) {
      this.storedMetrics[name] = {
        unit,
        value,
        name,
        resolution
      };
    } else {
      const storedMetric = this.storedMetrics[name];
      if (!Array.isArray(storedMetric.value)) {
        storedMetric.value = [storedMetric.value];
      }
      storedMetric.value.push(value);
      if (storedMetric.value.length === MAX_METRIC_VALUES_SIZE) {
        this.publishStoredMetrics();
      }
    }
  }
};

// ../../lib/ts/v1/utilities.ts
var LocalLogger = class {
  _formatMessages(messages) {
    return messages.map(
      (m) => typeof m === "object" ? JSON.stringify(m) : m
    ).join(" ");
  }
  debug(...messages) {
    console.log(`[DEBUG]:`, (/* @__PURE__ */ new Date()).toISOString(), `:`, this._formatMessages(messages));
  }
  info(...messages) {
    console.log(`[INFO]:`, (/* @__PURE__ */ new Date()).toISOString(), `:`, this._formatMessages(messages));
  }
  error(...messages) {
    console.error(`[ERROR]:`, (/* @__PURE__ */ new Date()).toISOString(), `:`, this._formatMessages(messages));
  }
  warn(...messages) {
    console.warn(`[WARNING]:`, (/* @__PURE__ */ new Date()).toISOString(), `:`, this._formatMessages(messages));
  }
  addContext() {
  }
};
var logger = initConstants_default.IS_DEPLOYED ? new Logger({
  persistentLogAttributes: {
    aws_account_id: initConstants_default.ACCOUNT_ID,
    aws_region: initConstants_default.REGION
  }
}) : new LocalLogger();
var metrics = new Metrics({
  defaultDimensions: {
    aws_account_id: initConstants_default.ACCOUNT_ID,
    aws_region: initConstants_default.REGION
  }
});

// ../../lib/ts/v1/parameters.ts
var import_fs = require("fs");

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/constants.js
var DEFAULT_MAX_AGE_SECS = 5;
var TRANSFORM_METHOD_JSON = "json";
var TRANSFORM_METHOD_BINARY = "binary";
var APPCONFIG_TOKEN_EXPIRATION = 23 * 60 * 60 * 1e3 + 45 * 60 * 1e3;

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/GetOptions.js
var GetOptions = class {
  forceFetch = false;
  maxAge;
  sdkOptions;
  transform;
  constructor(options = {}, envVarsService) {
    Object.assign(this, options);
    if (options.maxAge === void 0) {
      this.maxAge = envVarsService.getParametersMaxAge() ?? DEFAULT_MAX_AGE_SECS;
    }
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/GetMultipleOptions.js
var GetMultipleOptions = class extends GetOptions {
  throwOnTransformError = false;
  constructor(options = {}, envVarsService) {
    super(options, envVarsService);
    if (options.throwOnTransformError !== void 0) {
      this.throwOnTransformError = options.throwOnTransformError;
    }
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/ExpirableValue.js
var ExpirableValue = class {
  ttl;
  value;
  /**
   *
   * @param value - Value to be cached
   * @param maxAge - Maximum age in seconds for the value to be cached
   */
  constructor(value, maxAge) {
    this.value = value;
    const timeNow = /* @__PURE__ */ new Date();
    this.ttl = timeNow.setSeconds(timeNow.getSeconds() + maxAge);
  }
  /**
   * Check if the value has expired.
   *
   * @returns {boolean} - True if the value has expired, false otherwise
   */
  isExpired() {
    return this.ttl < Date.now();
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/errors.js
var GetParameterError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "GetParameterError";
  }
};
var TransformParameterError = class extends Error {
  constructor(transform, message) {
    super(message);
    this.name = "TransformParameterError";
    this.message = `Unable to transform value using '${transform}' transform: ${message}`;
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/config/EnvironmentVariablesService.js
var EnvironmentVariablesService4 = class extends EnvironmentVariablesService {
  // Environment variables
  parametersMaxAgeVariable = "POWERTOOLS_PARAMETERS_MAX_AGE";
  ssmDecryptVariable = "POWERTOOLS_PARAMETERS_SSM_DECRYPT";
  /**
   * It returns the value of the POWERTOOLS_PARAMETERS_MAX_AGE environment variable.
   *
   * @returns {number|undefined}
   */
  getParametersMaxAge() {
    const maxAge = this.get(this.parametersMaxAgeVariable);
    if (maxAge.length === 0)
      return void 0;
    const maxAgeAsNumber = parseInt(maxAge, 10);
    if (isNaN(maxAgeAsNumber)) {
      console.warn(`Invalid value for ${this.parametersMaxAgeVariable} environment variable: [${maxAge}], using default value of ${DEFAULT_MAX_AGE_SECS} seconds`);
    } else {
      return maxAgeAsNumber;
    }
  }
  /**
   * It returns the value of the POWERTOOLS_PARAMETERS_SSM_DECRYPT environment variable.
   *
   * @returns {string}
   */
  getSSMDecrypt() {
    return this.get(this.ssmDecryptVariable);
  }
};

// ../../node_modules/@aws-lambda-powertools/commons/lib/esm/fromBase64.js
var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
var fromBase642 = (input, encoding) => {
  if (input.length * 3 % 4 !== 0) {
    throw new TypeError(`Incorrect padding on base64 string.`);
  }
  if (!BASE64_REGEX.exec(input)) {
    throw new TypeError(`Invalid base64 string.`);
  }
  const buffer = encoding ? Buffer.from(input, encoding) : Buffer.from(input);
  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/transformValue.js
var transformValue = (value, transform, throwOnTransformError, key) => {
  const normalizedTransform = transform.toLowerCase();
  const isAutoTransform = normalizedTransform === "auto";
  const isAutoJsonTransform = isAutoTransform && key.toLowerCase().endsWith(`.${TRANSFORM_METHOD_JSON}`);
  const isAutoBinaryTransform = isAutoTransform && key.toLowerCase().endsWith(`.${TRANSFORM_METHOD_BINARY}`);
  const isJsonTransform = normalizedTransform === TRANSFORM_METHOD_JSON;
  const isBinaryTransform = normalizedTransform === TRANSFORM_METHOD_BINARY;
  if (!(value instanceof Uint8Array || isString(value)) || isAutoTransform && !isAutoJsonTransform && !isAutoBinaryTransform) {
    return value;
  }
  try {
    if (value instanceof Uint8Array) {
      value = new TextDecoder("utf-8").decode(value);
    }
    if (isJsonTransform || isAutoJsonTransform) {
      return JSON.parse(value);
    } else if (isBinaryTransform || isAutoBinaryTransform) {
      return new TextDecoder("utf-8").decode(fromBase642(value, "base64"));
    }
  } catch (error) {
    if (throwOnTransformError)
      throw new TransformParameterError(transform, error.message);
    return;
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/BaseProvider.js
var BaseProvider = class {
  envVarsService;
  client;
  store;
  constructor({ awsSdkV3Client, clientConfig, proto }) {
    this.store = /* @__PURE__ */ new Map();
    this.envVarsService = new EnvironmentVariablesService4();
    if (awsSdkV3Client) {
      if (!isSdkClient(awsSdkV3Client)) {
        console.warn("awsSdkV3Client is not an AWS SDK v3 client, using default client");
        this.client = new proto(clientConfig ?? {});
      } else {
        this.client = awsSdkV3Client;
      }
    } else {
      this.client = new proto(clientConfig ?? {});
    }
    addUserAgentMiddleware(this.client, "parameters");
  }
  /**
   * Add a value to the cache.
   *
   * @param {string} key - Key of the cached value
   * @param {string | Uint8Array | Record<string, unknown>} value - Value to be cached
   * @param {number} maxAge - Maximum age in seconds for the value to be cached
   */
  addToCache(key, value, maxAge) {
    if (maxAge <= 0)
      return;
    this.store.set(key, new ExpirableValue(value, maxAge));
  }
  /**
   * Clear the cache.
   */
  clearCache() {
    this.store.clear();
  }
  /**
   * Retrieve a parameter value or return the cached value.
   *
   * @param {string} name - Parameter name
   * @param {GetOptionsInterface} options - Options to configure maximum age, trasformation, AWS SDK options, or force fetch
   */
  async get(name, options) {
    const configs = new GetOptions(options, this.envVarsService);
    const key = [name, configs.transform].toString();
    if (!configs.forceFetch && !this.hasKeyExpiredInCache(key)) {
      return this.store.get(key)?.value;
    }
    try {
      let value = await this._get(name, options);
      if (isNullOrUndefined(value))
        return void 0;
      if (configs.transform && (isString(value) || value instanceof Uint8Array)) {
        value = transformValue(value, configs.transform, true, name);
      }
      this.addToCache(key, value, configs.maxAge);
      return value;
    } catch (error) {
      if (error instanceof TransformParameterError)
        throw error;
      throw new GetParameterError(error.message);
    }
  }
  /**
   * Retrieve multiple parameter values or return the cached values.
   *
   * @param {string} path - Parameters path
   * @param {GetMultipleOptionsInterface} options - Options to configure maximum age, trasformation, AWS SDK options, or force fetch
   * @returns
   */
  async getMultiple(path, options) {
    const configs = new GetMultipleOptions(options, this.envVarsService);
    const key = [path, configs.transform].toString();
    if (!configs.forceFetch && !this.hasKeyExpiredInCache(key)) {
      return this.store.get(key).value;
    }
    let values;
    try {
      values = await this._getMultiple(path, options);
      if (!isRecord(values)) {
        throw new GetParameterError(`Expected result to be a Record<string, unknown> but got ${typeof values}`);
      }
    } catch (error) {
      throw new GetParameterError(error.message);
    }
    if (configs.transform) {
      for (const [entryKey, entryValue] of Object.entries(values)) {
        if (!(isString(entryValue) || entryValue instanceof Uint8Array))
          continue;
        try {
          values[entryKey] = transformValue(entryValue, configs.transform, configs.throwOnTransformError, entryKey);
        } catch (error) {
          if (configs.throwOnTransformError)
            throw new TransformParameterError(configs.transform, error.message);
        }
      }
    }
    if (Object.keys(values).length !== 0) {
      this.addToCache(key, values, configs.maxAge);
    }
    return values;
  }
  /**
   * Check whether a key has expired in the cache or not.
   *
   * It returns true if the key is expired or not present in the cache.
   *
   * @param {string} key - Stringified representation of the key to retrieve
   */
  hasKeyExpiredInCache(key) {
    const value = this.store.get(key);
    if (value)
      return value.isExpired();
    return true;
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/ssm/SSMProvider.js
var import_client_ssm = __toESM(require_dist_cjs54(), 1);
var SSMProvider = class _SSMProvider extends BaseProvider {
  errorsKey = "_errors";
  maxGetParametersItems = 10;
  /**
   * It initializes the SSMProvider class.
   *
   * @param {SSMProviderOptions} config - The configuration object.
   */
  constructor(config) {
    super({
      proto: import_client_ssm.SSMClient,
      ...config ?? {}
    });
  }
  /**
   * Retrieve a value from AWS Systems Manager.
   *
   * @example
   * ```typescript
   * import { SSMProvider } from '@aws-lambda-powertools/parameters/ssm';
   *
   * const parametersProvider = new SSMProvider();
   *
   * export const handler = async (): Promise<void> => {
   *   // Retrieve a parameter from SSM
   *   const parameter = await parametersProvider.get('/my-parameter');
   * };
   * ```
   *
   * You can customize the retrieval of the value by passing options to the function:
   * * `maxAge` - The maximum age of the value in cache before fetching a new one (in seconds) (default: 5)
   * * `forceFetch` - Whether to always fetch a new value from the store regardless if already available in cache
   * * `transform` - Whether to transform the value before returning it. Supported values: `json`, `binary`
   * * `sdkOptions` - Extra options to pass to the AWS SDK v3 for JavaScript client
   * * `decrypt` - Whether to decrypt the value before returning it.
   *
   * For usage examples check {@link SSMProvider}.
   *
   * @param {string} name - The name of the value to retrieve (i.e. the partition key)
   * @param {SSMGetOptions} options - Options to configure the provider
   * @see https://docs.powertools.aws.dev/lambda/typescript/latest/utilities/parameters/
   */
  async get(name, options) {
    return super.get(name, options);
  }
  /**
   * Retrieve multiple values from AWS Systems Manager.
   *
   * @example
   * ```typescript
   * import { SSMProvider } from '@aws-lambda-powertools/parameters/ssm';
   *
   * const parametersProvider = new SSMProvider();
   *
   * export const handler = async (): Promise<void> => {
   *   // Retrieve multiple parameters from SSM
   *   const parameters = await parametersProvider.getMultiple('/my-parameters-path');
   * };
   * ```
   *
   * You can customize the retrieval of the values by passing options to the function:
   * * `maxAge` - The maximum age of the value in cache before fetching a new one (in seconds) (default: 5)
   * * `forceFetch` - Whether to always fetch a new value from the store regardless if already available in cache
   * * `transform` - Whether to transform the value before returning it. Supported values: `json`, `binary`
   * * `sdkOptions` - Extra options to pass to the AWS SDK v3 for JavaScript client
   * * `throwOnTransformError` - Whether to throw an error if the transform fails (default: `true`)
   * * `decrypt` - Whether to decrypt the value before returning it.
   * * `recursive` - Whether to recursively retrieve all parameters under the given path (default: `false`)
   *
   * For usage examples check {@link SSMProvider}.
   *
   * @param {string} path - The path of the parameters to retrieve
   * @param {SSMGetMultipleOptions} options - Options to configure the retrieval
   * @see https://docs.powertools.aws.dev/lambda/typescript/latest/utilities/parameters/
   */
  async getMultiple(path, options) {
    return super.getMultiple(path, options);
  }
  /**
   * Retrieve multiple parameters by name from AWS Systems Manager.
   *
   * @example
   * ```typescript
   * import { SSMProvider } from '@aws-lambda-powertools/parameters/ssm';
   *
   * const parametersProvider = new SSMProvider();
   *
   * export const handler = async (): Promise<void> => {
   *   // Retrieve multiple parameters by name from SSM
   *   const parameters = await parametersProvider.getParametersByName({
   *     '/my-parameter-1': {}, // Use default options
   *     '/my-parameter-2': { transform: 'json' }, // Parse the value as JSON
   *   });
   * };
   * ```
   * You can customize the retrieval of the values by passing options to **both the function and the parameter**:
   * * `maxAge` - The maximum age of the value in cache before fetching a new one (in seconds) (default: 5)
   * * `forceFetch` - Whether to always fetch a new value from the store regardless if already available in cache
   * * `transform` - Whether to transform the value before returning it. Supported values: `json`, `binary`
   * * `sdkOptions` - Extra options to pass to the AWS SDK v3 for JavaScript client
   * * `throwOnTransformError` - Whether to throw an error if the transform fails (default: `true`)
   * * `decrypt` - Whether to decrypt the value before returning it
   *
   * `throwOnError` decides whether to throw an error if a parameter is not found:
   * - A) Default fail-fast behavior: Throws a `GetParameterError` error upon any failure.
   * - B) Gracefully aggregate all parameters that failed under "_errors" key.
   *
   * It transparently uses GetParameter and/or GetParameters depending on decryption requirements.
   *
   * ```sh
   *                                ┌────────────────────────┐
   *                            ┌───▶  Decrypt entire batch  │─────┐
   *                            │   └────────────────────────┘     │     ┌────────────────────┐
   *                            │                                  ├─────▶ GetParameters API  │
   *    ┌──────────────────┐    │   ┌────────────────────────┐     │     └────────────────────┘
   *    │   Split batch    │─── ┼──▶│ No decryption required │─────┘
   *    └──────────────────┘    │   └────────────────────────┘
   *                            │                                        ┌────────────────────┐
   *                            │   ┌────────────────────────┐           │  GetParameter API  │
   *                            └──▶│Decrypt some but not all│───────────▶────────────────────┤
   *                                └────────────────────────┘           │ GetParameters API  │
   *                                                                     └────────────────────┘
   * ```
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - Object containing parameter names and any optional overrides
   * @param {SSMGetParametersByNameOptions} options - Options to configure the retrieval
   * @see https://docs.powertools.aws.dev/lambda/typescript/latest/utilities/parameters/
   */
  async getParametersByName(parameters, options) {
    const configs = {
      ...{
        decrypt: this.resolveDecryptionConfigValue({}) || false,
        maxAge: DEFAULT_MAX_AGE_SECS,
        throwOnError: true
      },
      ...options
    };
    let response = {};
    _SSMProvider.throwIfErrorsKeyIsPresent(parameters, this.errorsKey, configs.throwOnError);
    const { parametersToFetchInBatch, parametersToDecrypt } = _SSMProvider.splitBatchAndDecryptParameters(parameters, configs);
    if (Object.keys(parametersToDecrypt).length !== Object.keys(parameters).length) {
      const { response: decryptResponse, errors: decryptErrors } = await this.getParametersByNameWithDecryptOption(parametersToDecrypt, configs.throwOnError);
      const { response: batchResponse, errors: batchErrors } = await this.getParametersBatchByName(parametersToFetchInBatch, configs.throwOnError, false);
      response = { ...decryptResponse, ...batchResponse };
      if (!configs.throwOnError) {
        response[this.errorsKey] = [...decryptErrors, ...batchErrors];
      }
    } else {
      const { response: batchResponse, errors: batchErrors } = await this.getParametersBatchByName(parametersToDecrypt, configs.throwOnError, true);
      response = batchResponse;
      if (!configs.throwOnError) {
        response[this.errorsKey] = [...batchErrors];
      }
    }
    return response;
  }
  /**
   * Retrieve a parameter from AWS Systems Manager.
   *
   * @param {string} name - Name of the parameter to retrieve
   * @param {SSMGetOptions} options - Options to customize the retrieval
   */
  async _get(name, options) {
    const sdkOptions = {
      ...options?.sdkOptions || {},
      Name: name
    };
    sdkOptions.WithDecryption = this.resolveDecryptionConfigValue(options, sdkOptions);
    const result = await this.client.send(new import_client_ssm.GetParameterCommand(sdkOptions));
    return result.Parameter?.Value;
  }
  /**
   * Retrieve multiple items from AWS Systems Manager.
   *
   * @param {string} path - The path of the parameters to retrieve
   * @param {SSMGetMultipleOptions} options - Options to configure the provider
   */
  async _getMultiple(path, options) {
    const sdkOptions = {
      ...options?.sdkOptions || {},
      Path: path
    };
    const paginationOptions = {
      client: this.client
    };
    sdkOptions.WithDecryption = this.resolveDecryptionConfigValue(options, sdkOptions);
    sdkOptions.Recursive = options?.recursive !== void 0 ? options.recursive : sdkOptions.Recursive;
    paginationOptions.pageSize = sdkOptions.MaxResults !== void 0 ? sdkOptions.MaxResults : void 0;
    const parameters = {};
    for await (const page of (0, import_client_ssm.paginateGetParametersByPath)(paginationOptions, sdkOptions)) {
      for (const parameter of page.Parameters || []) {
        let name = parameter.Name;
        name = name.replace(path, "");
        if (name.startsWith("/")) {
          name = name.replace("/", "");
        }
        parameters[name] = parameter.Value;
      }
    }
    return parameters;
  }
  /**
   * Retrieve multiple items by name from AWS Systems Manager.
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {throwOnError} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   * @param {boolean} decrypt - Whether to decrypt the parameters or not
   */
  async _getParametersByName(parameters, throwOnError, decrypt) {
    const sdkOptions = {
      Names: Object.keys(parameters)
    };
    if (decrypt) {
      sdkOptions.WithDecryption = true;
    }
    const result = await this.client.send(new import_client_ssm.GetParametersCommand(sdkOptions));
    const errors = _SSMProvider.handleAnyInvalidGetParameterErrors(result, throwOnError);
    const response = this.transformAndCacheGetParametersResponse(result, parameters, throwOnError);
    return {
      response,
      errors
    };
  }
  /**
   * Slice batch and fetch parameters using GetPrameters API by max permissible batch size
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {throwOnError} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   * @param {boolean} decrypt - Whether to decrypt the parameters or not
   */
  async getParametersBatchByName(parameters, throwOnError, decrypt) {
    let response = {};
    let errors = [];
    const { cached, toFetch } = await this.getParametersByNameFromCache(parameters);
    if (Object.keys(cached).length >= Object.keys(parameters).length) {
      response = cached;
      return {
        response,
        errors
      };
    }
    const { response: batchResponse, errors: batchErrors } = await this.getParametersByNameInChunks(toFetch, throwOnError, decrypt);
    response = { ...cached, ...batchResponse };
    errors = batchErrors;
    return {
      response,
      errors
    };
  }
  /**
   * Fetch each parameter from batch that hasn't expired from cache
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   */
  async getParametersByNameFromCache(parameters) {
    const cached = {};
    const toFetch = {};
    for (const [parameterName, parameterOptions] of Object.entries(parameters)) {
      const cacheKey = [parameterName, parameterOptions.transform].toString();
      if (!this.hasKeyExpiredInCache(cacheKey)) {
        cached[parameterName] = this.store.get(cacheKey).value;
      } else {
        toFetch[parameterName] = parameterOptions;
      }
    }
    return {
      cached,
      toFetch
    };
  }
  /**
   * Slice object into chunks of max permissible batch size and fetch parameters
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {boolean} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   * @param {boolean} decrypt - Whether to decrypt the parameters or not
   */
  async getParametersByNameInChunks(parameters, throwOnError, decrypt) {
    let response = {};
    let errors = [];
    const chunks = Object.entries(parameters).reduce((acc, [parameterName, parameterOptions], index) => {
      const chunkIndex = Math.floor(index / this.maxGetParametersItems);
      if (!acc[chunkIndex]) {
        acc[chunkIndex] = {};
      }
      acc[chunkIndex][parameterName] = parameterOptions;
      return acc;
    }, []);
    for (const chunk of chunks) {
      const { response: chunkResponse, errors: chunkErrors } = await this._getParametersByName(chunk, throwOnError, decrypt);
      response = { ...response, ...chunkResponse };
      errors = [...errors, ...chunkErrors];
    }
    return {
      response,
      errors
    };
  }
  /**
   * Fetch parameters by name while also decrypting them
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {boolean} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   */
  async getParametersByNameWithDecryptOption(parameters, throwOnError) {
    const response = {};
    const errors = [];
    for (const [parameterName, parameterOptions] of Object.entries(parameters)) {
      try {
        response[parameterName] = await this._get(parameterName, parameterOptions);
      } catch (error) {
        if (throwOnError) {
          throw error;
        }
        errors.push(parameterName);
      }
    }
    return {
      response,
      errors
    };
  }
  /**
   * Handle any invalid parameters returned by GetParameters API
   * GetParameters is non-atomic. Failures don't always reflect in exceptions so we need to collect.
   *
   * @param {GetParametersCommandOutput} result - The result of the GetParameters API call
   * @param {boolean} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   */
  static handleAnyInvalidGetParameterErrors(result, throwOnError) {
    const errors = [];
    if (result.InvalidParameters && result.InvalidParameters.length > 0) {
      if (throwOnError) {
        throw new GetParameterError(`Failed to fetch parameters: ${result.InvalidParameters.join(", ")}`);
      }
      errors.push(...result.InvalidParameters);
    }
    return errors;
  }
  resolveDecryptionConfigValue(options = {}, sdkOptions) {
    if (options?.decrypt !== void 0)
      return options.decrypt;
    if (sdkOptions?.WithDecryption !== void 0)
      return sdkOptions.WithDecryption;
    if (this.envVarsService.getSSMDecrypt() !== "") {
      return this.envVarsService.isValueTrue(this.envVarsService.getSSMDecrypt());
    }
    return void 0;
  }
  /**
   * Split parameters that can be fetched by GetParameters vs GetParameter.
   *
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {SSMGetParametersByNameOptions} configs - The configs passed down
   */
  static splitBatchAndDecryptParameters(parameters, configs) {
    const parametersToFetchInBatch = {};
    const parametersToDecrypt = {};
    for (const [parameterName, parameterOptions] of Object.entries(parameters)) {
      const overrides = parameterOptions;
      overrides.transform = overrides.transform || configs.transform;
      overrides.decrypt = overrides.decrypt !== void 0 ? overrides.decrypt : configs.decrypt;
      overrides.maxAge = overrides.maxAge !== void 0 ? overrides.maxAge : configs.maxAge;
      if (overrides.decrypt) {
        parametersToDecrypt[parameterName] = overrides;
      } else {
        parametersToFetchInBatch[parameterName] = overrides;
      }
    }
    return {
      parametersToFetchInBatch,
      parametersToDecrypt
    };
  }
  /**
   * Throw a GetParameterError if fail-fast is disabled and `_errors` key is in parameters list.
   *
   * @param {Record<string, unknown>} parameters
   * @param {string} reservedParameter
   * @param {boolean} throwOnError
   */
  static throwIfErrorsKeyIsPresent(parameters, reservedParameter, throwOnError) {
    if (!throwOnError && Object.hasOwn(parameters, reservedParameter)) {
      throw new GetParameterError(`You cannot fetch a parameter named ${reservedParameter} in graceful error mode.`);
    }
  }
  /**
   * Transform and cache the response from GetParameters API call
   *
   * @param {GetParametersCommandOutput} response - The response from the GetParameters API call
   * @param {Record<string, SSMGetParametersByNameOptions>} parameters - An object of parameter names and their options
   * @param {boolean} throwOnError - Whether to throw an error if any of the parameters' retrieval throws an error or handle them gracefully
   */
  transformAndCacheGetParametersResponse(response, parameters, throwOnError) {
    const processedParameters = {};
    for (const parameter of response.Parameters || []) {
      const parameterName = parameter.Name;
      const parameterValue = parameter.Value;
      const parameterOptions = parameters[parameterName];
      let value;
      if (parameterValue && parameterOptions.transform) {
        value = transformValue(parameterValue, parameterOptions.transform, throwOnError, parameterName);
      } else if (parameterValue) {
        value = parameterValue;
      }
      if (value) {
        const cacheKey = [parameterName, parameterOptions.transform].toString();
        this.addToCache(cacheKey, value, parameterOptions.maxAge || DEFAULT_MAX_AGE_SECS);
      }
      processedParameters[parameterName] = value;
    }
    return processedParameters;
  }
};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/base/DefaultProviders.js
var DEFAULT_PROVIDERS = {};

// ../../node_modules/@aws-lambda-powertools/parameters/lib/esm/ssm/getParametersByName.js
var getParametersByName = async (parameters, options) => {
  if (!Object.hasOwn(DEFAULT_PROVIDERS, "ssm")) {
    DEFAULT_PROVIDERS.ssm = new SSMProvider();
  }
  return DEFAULT_PROVIDERS.ssm.getParametersByName(parameters, options);
};

// ../../lib/ts/v1/parameters.ts
var TTL_PARAM_CACHE = 300;
var LOCAL_ENV_PATH = "./.env";
async function _awsGetParameters(fullyQualifiedParamNames) {
  logger.debug("Fetching following parameters from AWS: ", { params: fullyQualifiedParamNames });
  const paramOptions = { maxAge: TTL_PARAM_CACHE };
  const props = fullyQualifiedParamNames.reduce((acc, param) => {
    acc[param] = paramOptions;
    return acc;
  }, {});
  const { _errors: errors, ...results } = await getParametersByName(props, {
    throwOnError: false,
    decrypt: true
  });
  if (errors && errors.length) {
    throw Error(`Unable to retrieve parameters: ${errors.join(",")}`);
  }
  const params = /* @__PURE__ */ new Map();
  for (const paramName of fullyQualifiedParamNames) {
    if (results[paramName]) {
      params.set(paramName, results[paramName]);
    } else {
      throw Error(`Parameter ${paramName} not found.`);
    }
  }
  return params;
}
async function _localGetParameters(fullyQualifiedParamNames) {
  logger.debug("Fetching following parameters from file (local mode): ", { params: fullyQualifiedParamNames });
  const params = /* @__PURE__ */ new Map();
  const lines = (0, import_fs.readFileSync)(LOCAL_ENV_PATH, { encoding: "utf-8" }).trim().split("\n");
  for (const line of lines) {
    const firstEqualsIndex = line.indexOf("=");
    if (firstEqualsIndex !== -1) {
      const key = line.substring(0, firstEqualsIndex);
      const value = line.substring(firstEqualsIndex + 1);
      if (value && fullyQualifiedParamNames.includes(key)) {
        params.set(key, value);
      }
    }
  }
  const paramsObject = Object.fromEntries(params);
  logger.debug("Returning parameters: " + JSON.stringify(paramsObject));
  return params;
}
async function _getParameters(paramShortNames, service) {
  const fullyQualifiedParamNames = paramShortNames.map((paramName) => `/${service}/${initConstants_default.STAGE}/${paramName}`);
  const shouldUseLocal2 = initConstants_default.IS_DEPLOYED !== true;
  const getParametersFunction = shouldUseLocal2 ? _localGetParameters : _awsGetParameters;
  const result = await getParametersFunction(fullyQualifiedParamNames);
  const params = /* @__PURE__ */ new Map();
  fullyQualifiedParamNames.forEach((fqParam, idx) => {
    const paramShortName = paramShortNames[idx];
    params.set(paramShortName, result.get(fqParam));
  });
  logger.info(`Successfully fetched values from SSM for params ${Array.from(params.keys())}.`);
  return params;
}
async function getParameters2(params, service) {
  if (typeof params === "string") {
    params = new Array(params);
  }
  return _getParameters(params, service);
}

// ../../lib/ts/v1/eventHubIngest.ts
var import_event_hubs = __toESM(require_dist2());

// ../../lib/ts/v1/eventHubDbCheckpointStore.ts
init_esm_node();

// ../../lib/ts/v1/database.ts
var import_client_rds_data = __toESM(require_dist_cjs55());

// ../../lib/ts/v1/dataApiUtil.ts
function encodeRow(row) {
  return Object.entries(row).map(([k, v]) => encodeItem(k, v));
}
function encodeParams(params) {
  if (params === void 0) {
    return [];
  }
  return Object.entries(params).map(([k, v]) => encodeItem(k, v));
}
function encodeItem(name, value) {
  const [val2, typeHint] = encodeValue(value);
  return { name, value: val2, ...typeHint };
}
function decodeRows(records, colNames, colTypeNames) {
  const results = [];
  records.forEach((record) => {
    const resultRow = {};
    record.forEach((val2, idx) => {
      resultRow[colNames.at(idx)] = decodeValue(val2, colTypeNames.at(idx));
    });
    results.push(resultRow);
  });
  return results;
}
function decodeValue(s, colTypeName) {
  const result = s.stringValue || s.longValue || s.doubleValue || s.booleanValue || s.$unknown;
  return colTypeName == "JSON" ? JSON.parse(s.stringValue) : result;
}
function encodeValue(value) {
  const valueType = typeof value;
  switch (valueType) {
    case "string": {
      const result = { stringValue: value };
      if (containsDateTime(value)) {
        result["stringValue"] = result["stringValue"].replace("T", " ");
        return [result, { typeHint: "TIMESTAMP" }];
      } else if (containsDate(value)) {
        return [result, { typeHint: "DATE" }];
      } else {
        return [result];
      }
    }
    case "boolean": {
      return [{ booleanValue: Boolean(value) }];
    }
    case "number": {
      if (Number.isInteger(value)) {
        return [{ longValue: Number(value) }];
      } else {
        return [{ doubleValue: Number(value) }];
      }
    }
    case "object": {
      return [{ stringValue: JSON.stringify(value) }];
    }
  }
  if (Array.isArray(value)) {
    return [{ stringValue: JSON.stringify(value).replace("[", "{").replace("]", "}") }];
  } else if (value === "IS NULL" || value === null) {
    return [{ isNull: true }];
  } else if (value === "IS NOT NULL") {
    return [{ isNull: false }];
  }
  return [{ stringValue: String(value) }];
}
function containsDateTime(value) {
  const datetimeRegex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/;
  return datetimeRegex.test(value);
}
function containsDate(value) {
  const datetimeRegex = /^\d{4}-\d{2}-\d{2}$/;
  return datetimeRegex.test(value);
}

// ../../lib/ts/v1/database.ts
var LONG_RUNNING_QUERY_SECS = 10;
var neededParams = ["database-resource-arn", "database-endpoint"];
var rdsConfig;
var client;
var baseDbConnectionParams;
async function loadDatabaseParams(service, secretArnShortName) {
  neededParams.push(secretArnShortName);
  const params = await getParameters2(neededParams, service);
  rdsConfig = {
    region: process.env.REGION
  };
  if (!initConstants_default.IS_DEPLOYED) {
    rdsConfig.credentials = { accessKeyId: "aaa", secretAccessKey: "bbb" };
    rdsConfig.endpoint = params.get("database-endpoint");
    logger.info(`Using local database at ${rdsConfig.endpoint}.`);
  }
  client = new import_client_rds_data.RDSDataClient(rdsConfig);
  baseDbConnectionParams = {
    // Init now, augment with additional arguments later
    resourceArn: params.get("database-resource-arn"),
    // required
    secretArn: params.get(secretArnShortName),
    // required
    includeResultMetadata: true
  };
}
function isExecuteStatementResponse(response) {
  return "numberOfRecordsUpdated" in response;
}
async function beginTransaction(database) {
  await loadDatabaseParams;
  if (!client || !baseDbConnectionParams) {
    throw new Error("RDS client or connection params not initialized! Check database configuration.");
  }
  const inputBeginTrans = {
    resourceArn: baseDbConnectionParams["resourceArn"],
    secretArn: baseDbConnectionParams["secretArn"],
    database
  };
  const commandBeginTrans = new import_client_rds_data.BeginTransactionCommand(inputBeginTrans);
  const responseBeginTrans = await client.send(commandBeginTrans);
  return responseBeginTrans["transactionId"];
}
async function commitTransaction(transactionId) {
  await loadDatabaseParams;
  if (!client || !baseDbConnectionParams) {
    throw new Error("RDS client or connection params not initialized! Check database configuration.");
  }
  const inputCommitTrans = {
    resourceArn: baseDbConnectionParams["resourceArn"],
    secretArn: baseDbConnectionParams["secretArn"],
    transactionId
  };
  const commandCommitTrans = new import_client_rds_data.CommitTransactionCommand(inputCommitTrans);
  client.send(commandCommitTrans);
}
async function executeStatement(database, sql, parameters, batch, transactionId) {
  await loadDatabaseParams;
  if (!client || !baseDbConnectionParams) {
    throw new Error("RDS client or connection params not initialized! Check database configuration.");
  }
  const mergedParams = {
    ...baseDbConnectionParams,
    sql,
    database,
    ...transactionId !== void 0 ? { transactionId } : {},
    ...!batch ? { parameters } : { parameterSets: parameters }
  };
  const command = !batch ? new import_client_rds_data.ExecuteStatementCommand(mergedParams) : new import_client_rds_data.BatchExecuteStatementCommand(mergedParams);
  logger.debug(
    `Executing SQL ${sql} on database ${database} with parameters ${JSON.stringify(parameters)}....`
  );
  let response;
  const startTime = Date.now();
  try {
    response = !batch ? await client.send(command) : await client.send(command);
  } catch (e) {
    logger.warn(`Error executing SQL: ${e.message}: ${e.stack}.`);
    throw e;
  }
  const endTime = Date.now();
  logger.debug(`Response from database: ${JSON.stringify(response).replace(/\n/g, " ")}.`);
  const duration = (endTime - startTime) / 1e3;
  if (duration > LONG_RUNNING_QUERY_SECS) {
    logger.info(`Long-running query took ${duration}s to process: ${sql} with parameters ${parameters}.`);
  }
  return response;
}
async function readFromDatabase(database, sql, parameters, transactionId) {
  const encodedParameters = encodeParams(parameters);
  const response = await executeStatement(database, sql, encodedParameters, false, transactionId);
  if (isExecuteStatementResponse(response)) {
    const decodedRows = decodeRows(
      response.records,
      response.columnMetadata.map((col) => col.label),
      response.columnMetadata.map((col) => col.typeName)
    );
    logger.debug(`${decodedRows.length} rows returned from database:
${JSON.stringify(decodedRows)}.`);
    return decodedRows;
  } else {
    throw Error(`Unexpected response type encountered from Data API: ${typeof response}.`);
  }
}
async function writeToDatabase(database, sql, row, transactionId) {
  const encodedRow = encodeRow(row);
  const response = await executeStatement(database, sql, encodedRow, false, transactionId);
  if (isExecuteStatementResponse(response)) {
    logger.debug(`${response.numberOfRecordsUpdated} records updated.`);
    return response;
  } else {
    throw Error(`Unexpected response type encountered from Data API: ${typeof response}.`);
  }
}

// ../../lib/ts/v1/eventHubDbCheckpoint.ts
var tableName = "ctl.event_hub_checkpoint";
var DbCheckpoint = class _DbCheckpoint {
  static database;
  fullyQualifiedNamespace;
  eventHubName;
  consumerGroup;
  partitionId;
  sequenceNumber;
  offset;
  etag;
  constructor(database, fullyQualifiedNamespace, eventHubName, consumerGroup, partitionId, sequenceNumber, offset, etag) {
    _DbCheckpoint.database = database;
    this.fullyQualifiedNamespace = fullyQualifiedNamespace;
    this.eventHubName = eventHubName;
    this.consumerGroup = consumerGroup;
    this.partitionId = partitionId;
    this.sequenceNumber = sequenceNumber;
    this.offset = offset;
    this.etag = etag;
  }
  static getSelectCheckpointsSql(database) {
    return `
      SELECT fully_qualified_namespace, event_hub_name, consumer_group, partition_id, sequence_number, "offset", e_tag
      FROM ${database}.${tableName}
      WHERE fully_qualified_namespace = :fully_qualified_namespace 
        AND event_hub_name = :event_hub_name AND consumer_group = :consumer_group;
      `;
  }
  /**
  * Generate PostgresSQL INSERT that handles maintenance of offset value in checkpoint table.
  * key = fqn || ehn || cg || pid
  *
  * @param database - The name of the database to be accessed.
  *
  * MySQL Equivalent:
  *    return `
  *      INSERT INTO ${database}.${tableName} (
  *        fully_qualified_namespace, event_hub_name, consumer_group, partition_id, "offset", sequence_number, e_tag
  *      ) VALUES (
  *        :fully_qualified_namespace, :event_hub_name, :consumer_group, :partition_id, :offset, :sequence_number, :e_tag
  *      ) ON duplicate KEY UPDATE
  *        offset = VALUES(offset), sequence_number = VALUES(sequence_number);
  *      `;
  */
  static getUpsertCheckpointSql(database) {
    return `
      insert into ${database}.${tableName} (
        fully_qualified_namespace, event_hub_name, consumer_group, partition_id, "offset", sequence_number, e_tag
      ) values (
        :fully_qualified_namespace, :event_hub_name, :consumer_group, :partition_id, :offset, :sequence_number, :e_tag::uuid
      )
      on conflict (fully_qualified_namespace, event_hub_name, consumer_group, partition_id) do update
      set
        "offset" = excluded."offset",
        sequence_number = excluded.sequence_number;
      `;
  }
  static getUpdateCheckpointTimestampSql(database) {
    return `
      UPDATE ${database}.${tableName}
      SET sequence_number = sequence_number
      WHERE fully_qualified_namespace = :fully_qualified_namespace
        AND event_hub_name = :event_hub_name AND consumer_group = :consumer_group
        AND partition_id = :partition_id;
      `;
  }
  static buildSelectSqlParameters(fullyQualifiedNamespace, eventHubName, consumerGroup) {
    return {
      fully_qualified_namespace: fullyQualifiedNamespace,
      event_hub_name: eventHubName,
      consumer_group: consumerGroup
    };
  }
  buildUpsertSqlParameters() {
    return {
      fully_qualified_namespace: this.fullyQualifiedNamespace,
      event_hub_name: this.eventHubName,
      consumer_group: this.consumerGroup,
      partition_id: this.partitionId,
      offset: this.offset,
      sequence_number: this.sequenceNumber,
      e_tag: this.etag
    };
  }
  toString() {
    return `DbCheckpoint(database: ${_DbCheckpoint.database}, fullyQualifiedNamespace: ${this.fullyQualifiedNamespace}, eventHubName: ${this.eventHubName}, consumerGroup: ${this.consumerGroup}, partitionId: ${this.partitionId}, sequenceNumber: ${this.sequenceNumber}, offset: ${this.offset}, etag: ${this.etag})`;
  }
  static async getCurrentCheckpoint(database, fullyQualifiedNamespace, eventHubName, consumerGroup, partitionId) {
    const parameters = {
      fully_qualified_namespace: fullyQualifiedNamespace,
      event_hub_name: eventHubName,
      consumer_group: consumerGroup,
      partition_id: partitionId
    };
    const records = await readFromDatabase(
      database,
      `
        SELECT fully_qualified_namespace, event_hub_name, consumer_group, partition_id, "offset", sequence_number, e_tag
        FROM ${database}.${tableName}
        WHERE fully_qualified_namespace = :fully_qualified_namespace AND event_hub_name = :event_hub_name
          AND consumer_group = :consumer_group AND partition_id = :partition_id;
    `,
      parameters
    );
    if (records !== void 0 && records.length > 0) {
      const r = records[0];
      return new _DbCheckpoint(
        _DbCheckpoint.database,
        r.fully_qualified_namespace,
        r.event_hub_name,
        r.consumer_group,
        r.partition_id,
        r.sequence_number,
        r.offset,
        r.e_tag
      );
    } else {
      return void 0;
    }
  }
};

// ../../lib/ts/v1/eventHubDbPartitionOwnership.ts
var tableName2 = "ctl.event_hub_partition_ownership";
var DbPartitionOwnership = class _DbPartitionOwnership {
  static database;
  fullyQualifiedNamespace;
  eventHubName;
  consumerGroup;
  partitionId;
  ownerId;
  lastModifiedTimeInMs;
  etag;
  constructor(database, fullyQualifiedNamespace, eventHubName, consumerGroup, partitionId, ownerId, lastModifiedTimeInMs, etag) {
    _DbPartitionOwnership.database = database;
    this.fullyQualifiedNamespace = fullyQualifiedNamespace;
    this.eventHubName = eventHubName;
    this.consumerGroup = consumerGroup;
    this.partitionId = partitionId;
    this.ownerId = ownerId;
    this.lastModifiedTimeInMs = lastModifiedTimeInMs;
    this.etag = etag;
  }
  // Select specific ownership
  static getSelectOwnershipSql(database) {
    return `
      SELECT fully_qualified_namespace, event_hub_name, consumer_group, partition_id, owner_id, last_modified_time_in_ms, e_tag
      FROM ${database}.${tableName2}
      WHERE fully_qualified_namespace = :fully_qualified_namespace 
        AND event_hub_name = :event_hub_name 
        AND consumer_group = :consumer_group
        AND partition_id = :partition_id
        AND owner_id = :owner_id
        AND last_modified_time_in_ms = :last_modified_time_in_ms;
      `;
  }
  // All ownerships for given fqn / ehn / cg
  static getSelectOwnershipsSql(database) {
    return `
      SELECT fully_qualified_namespace, event_hub_name, consumer_group, partition_id, owner_id, last_modified_time_in_ms, e_tag
      FROM ${database}.${tableName2}
      WHERE fully_qualified_namespace = :fully_qualified_namespace 
        AND event_hub_name = :event_hub_name 
        AND consumer_group = :consumer_group;
      `;
  }
  /**
   * Generate PostgresSQL INSERT that handles maintenance of operational fields in the partition ownership table.
   * key = fqn || ehn || cg || pid
   *
   * @param database - The name of the database to be accessed.
   *
   * MySQL Equivalent:
   *    return `
   *      INSERT INTO ${database}.${tableName} (
   *        fully_qualified_namespace, event_hub_name, consumer_group, partition_id, owner_id, last_modified_time_in_ms, e_tag
   *      )
   *      VALUES (:fully_qualified_namespace, :event_hub_name, :consumer_group, :partition_id, :owner_id, :last_modified_time_in_ms, :e_tag)
   *      ON DUPLICATE KEY UPDATE
   *        owner_id = IF (e_tag IS NULL OR e_tag = VALUES (e_tag), VALUES (owner_id), owner_id),
   *        last_modified_time_in_ms = IF (e_tag IS NULL OR e_tag = VALUES (e_tag), VALUES (last_modified_time_in_ms), last_modified_time_in_ms),
   *        e_tag = IF (e_tag IS NULL OR e_tag = VALUES (e_tag), UUID(), e_tag);
   *     `;
   */
  static getUpsertOwnershipSql(database) {
    return `
      insert into ${database}.${tableName2} (
        fully_qualified_namespace, event_hub_name, consumer_group, partition_id, owner_id, last_modified_time_in_ms, e_tag
      )
      values (
        :fully_qualified_namespace, :event_hub_name, :consumer_group, :partition_id, :owner_id, :last_modified_time_in_ms, :e_tag::uuid
      )
      on conflict (fully_qualified_namespace, event_hub_name, consumer_group, partition_id) do update
      set
        owner_id = case 
          when excluded.e_tag is null or excluded.e_tag = ${database}.${tableName2}.e_tag
          then excluded.owner_id 
          else ${database}.${tableName2}.owner_id 
        end,
        last_modified_time_in_ms = case 
          when excluded.e_tag is null or excluded.e_tag = ${database}.${tableName2}.e_tag
          then excluded.last_modified_time_in_ms
          else ${database}.${tableName2}.last_modified_time_in_ms 
        end,
        e_tag = case 
          when excluded.e_tag is null or excluded.e_tag = ${database}.${tableName2}.e_tag
          then gen_random_uuid()
          else ${database}.${tableName2}.e_tag::uuid
        end;
      `;
  }
  static buildSelectOwnershipsSqlParameters(fullyQualifiedNamespace, eventHubName, consumerGroup) {
    return {
      fully_qualified_namespace: fullyQualifiedNamespace,
      event_hub_name: eventHubName,
      consumer_group: consumerGroup
    };
  }
  buildSelectOwnershipSqlParameters() {
    return {
      fully_qualified_namespace: this.fullyQualifiedNamespace,
      event_hub_name: this.eventHubName,
      consumer_group: this.consumerGroup,
      partition_id: this.partitionId,
      owner_id: this.ownerId,
      last_modified_time_in_ms: this.lastModifiedTimeInMs
    };
  }
  buildOwnershipUpsertSqlParameters() {
    return {
      fully_qualified_namespace: this.fullyQualifiedNamespace,
      event_hub_name: this.eventHubName,
      consumer_group: this.consumerGroup,
      partition_id: this.partitionId,
      owner_id: this.ownerId,
      last_modified_time_in_ms: this.lastModifiedTimeInMs,
      e_tag: this.etag
    };
  }
  async fetchPersistedRecordFromDatabase(transactionID) {
    const rows = await readFromDatabase(
      _DbPartitionOwnership.database,
      _DbPartitionOwnership.getSelectOwnershipSql(_DbPartitionOwnership.database),
      this.buildSelectOwnershipSqlParameters(),
      transactionID
    );
    if (rows.length === 0) {
      return void 0;
    } else {
      const row = rows[0];
      return new _DbPartitionOwnership(
        _DbPartitionOwnership.database,
        row.fully_qualified_namespace,
        row.event_hub_name,
        row.consumer_group,
        row.partition_id,
        row.owner_id,
        row.last_modified_time_in_ms,
        row.e_tag
      );
    }
  }
  toString() {
    return `DbPartitionOwnership(database: ${_DbPartitionOwnership.database}, fullyQualifiedNamespace: ${this.fullyQualifiedNamespace}, eventHubName: ${this.eventHubName}, consumerGroup: ${this.consumerGroup}, partitionId: ${this.partitionId}, ownerId: ${this.ownerId}, etag: ${this.etag})`;
  }
};

// ../../lib/ts/v1/eventHubDbCheckpointStore.ts
var DbCheckpointStore = class _DbCheckpointStore {
  static database;
  constructor(database) {
    _DbCheckpointStore.database = database;
  }
  // https://learn.microsoft.com/en-us/javascript/api/%40azure/event-hubs/operationoptions?view=azure-node-latest
  async listOwnership(fullyQualifiedNamespace, eventHubName, consumerGroup) {
    logger.info(`Listing ownerships for ${fullyQualifiedNamespace}, ${eventHubName}, ${consumerGroup}....`);
    let ownershipRecords;
    try {
      ownershipRecords = await readFromDatabase(
        _DbCheckpointStore.database,
        DbPartitionOwnership.getSelectOwnershipsSql(_DbCheckpointStore.database),
        DbPartitionOwnership.buildSelectOwnershipsSqlParameters(
          fullyQualifiedNamespace,
          eventHubName,
          consumerGroup
        )
      );
    } catch (e) {
      logger.warn(`Error encountered: ${e.message}.`);
    }
    const ownerships = [];
    ownershipRecords.forEach((record) => {
      ownerships.push(new DbPartitionOwnership(
        _DbCheckpointStore.database,
        record.fully_qualified_namespace,
        record.event_hub_name,
        record.consumer_group,
        record.partition_id,
        record.owner_id,
        record.last_modified_time_in_ms,
        record.e_tag
      ));
    });
    logger.info(`${ownerships.length} partition ownership(s) returned: ${JSON.stringify(ownerships)}`);
    return ownerships;
  }
  listCheckpoints(fullyQualifiedNamespace, eventHubName, consumerGroup) {
    logger.info(`Listing checkpoints for ${fullyQualifiedNamespace}, ${eventHubName}, ${consumerGroup}....`);
    return readFromDatabase(
      _DbCheckpointStore.database,
      DbCheckpoint.getSelectCheckpointsSql(_DbCheckpointStore.database),
      DbCheckpoint.buildSelectSqlParameters(fullyQualifiedNamespace, eventHubName, consumerGroup)
    ).then((checkpoint_records) => {
      const checkpoints = [];
      checkpoint_records.forEach((record) => {
        const checkpoint = new DbCheckpoint(
          _DbCheckpointStore.database,
          record.fully_qualified_namespace,
          record.event_hub_name,
          record.consumer_group,
          record.partition_id,
          record.sequence_number,
          record.offset,
          record.e_tag
        );
        checkpoints.push(checkpoint);
        logger.debug(`Adding checkpoint ${checkpoint} to response.`);
      });
      logger.info(`Returning ${checkpoints.length} checkpoints.`);
      return checkpoints;
    }).catch((e) => {
      logger.warn(`Error occurred: ${e.message}: ${e.stack}.`);
      throw e;
    });
  }
  async claimOwnership(requestedPartitionOwnerships) {
    if (!requestedPartitionOwnerships || requestedPartitionOwnerships.length === 0) {
      return [];
    }
    logger.debug(`Processing claim request for ${requestedPartitionOwnerships.length} partition(s): ${JSON.stringify(requestedPartitionOwnerships)}....`);
    const currentPartitionOwnerships = [];
    for (const partitionOwnership of requestedPartitionOwnerships) {
      const dbPartitionOwnership = new DbPartitionOwnership(
        _DbCheckpointStore.database,
        partitionOwnership.fullyQualifiedNamespace,
        partitionOwnership.eventHubName,
        partitionOwnership.consumerGroup,
        partitionOwnership.partitionId,
        partitionOwnership.ownerId,
        partitionOwnership.lastModifiedTimeInMs,
        partitionOwnership.etag
      );
      dbPartitionOwnership.etag = dbPartitionOwnership.etag === void 0 ? v4_default() : dbPartitionOwnership.etag;
      dbPartitionOwnership.lastModifiedTimeInMs = Date.now();
      logger.info(`Processing claim for partition ownership ${dbPartitionOwnership}....`);
      const transactionId = await beginTransaction(_DbCheckpointStore.database);
      let updatedPartitionOwnership;
      try {
        await writeToDatabase(
          _DbCheckpointStore.database,
          DbPartitionOwnership.getUpsertOwnershipSql(_DbCheckpointStore.database),
          dbPartitionOwnership.buildOwnershipUpsertSqlParameters(),
          transactionId
        );
        logger.debug(`Fetching updated record from database for partition ownership ${dbPartitionOwnership} in order to get the latest etag generated by the row insertion/update.`);
        updatedPartitionOwnership = await dbPartitionOwnership.fetchPersistedRecordFromDatabase(transactionId);
      } catch (e) {
        logger.warn(`Error encountered during partition claim processing: ${e.message}: ${e.stack}.`);
        continue;
      } finally {
        await commitTransaction(transactionId);
      }
      if (updatedPartitionOwnership === void 0) {
        logger.info(
          `Partition ownership ${dbPartitionOwnership} represents possible conflicting request for ownership of partition ${dbPartitionOwnership.partitionId}, claim request denied.`
        );
        continue;
      }
      currentPartitionOwnerships.push(updatedPartitionOwnership);
      logger.info(
        updatedPartitionOwnership.ownerId ? `${updatedPartitionOwnership.ownerId} claimed ownership of partition ${updatedPartitionOwnership.partitionId}, last modified time of ${updatedPartitionOwnership.lastModifiedTimeInMs}.` : `Partition ${updatedPartitionOwnership.partitionId} gracefully released from ownership with last modified time of ${updatedPartitionOwnership.lastModifiedTimeInMs}.`
      );
    }
    return currentPartitionOwnerships;
  }
  async updateCheckpoint(checkpoint) {
    const dbCheckpoint = new DbCheckpoint(
      _DbCheckpointStore.database,
      checkpoint.fullyQualifiedNamespace,
      checkpoint.eventHubName,
      checkpoint.consumerGroup,
      checkpoint.partitionId,
      checkpoint.sequenceNumber,
      checkpoint.offset,
      v4_default()
    );
    logger.info(`Updating checkpoint to ${dbCheckpoint}....`);
    await writeToDatabase(
      _DbCheckpointStore.database,
      DbCheckpoint.getUpsertCheckpointSql(_DbCheckpointStore.database),
      dbCheckpoint.buildUpsertSqlParameters()
    );
    logger.info(`Updated checkpoint for partition ${checkpoint.partitionId} with sequence number ${checkpoint.sequenceNumber}.`);
  }
};

// ../../lib/ts/v1/sns.ts
var import_client_sns = __toESM(require_dist_cjs56());
var shouldUseLocal = initConstants_default.IS_DEPLOYED !== true;
var snsConfig = {
  region: initConstants_default.REGION,
  ...shouldUseLocal && { endpoint: "http://127.0.0.1:4002" }
  // Bypass DNS (ipv4 vs ipv6 resolution in node)
};
var snsClient = new import_client_sns.SNS(snsConfig);
function buildTopicArnFromName(topicName) {
  return `arn:aws:sns:${initConstants_default.REGION}:${initConstants_default.ACCOUNT_ID}:${topicName}`;
}
function encodeAttribute(val2) {
  return {
    DataType: typeof val2 === "string" ? "String" : "Number",
    StringValue: val2.toString()
  };
}
async function publishSnsMessage(topicName, message, messageAttributes, shortTopicName) {
  const encodedMessageAttributes = Object.fromEntries(
    Object.entries(messageAttributes).map(([key, value]) => {
      return value !== void 0 ? [key, encodeAttribute(value)] : void 0;
    }).filter(Boolean)
  );
  const targetTopic = shortTopicName === true ? `${initConstants_default.SERVICE}-${topicName}-${initConstants_default.STAGE}` : topicName;
  const pubCommandInput = {
    TopicArn: buildTopicArnFromName(targetTopic),
    Message: message,
    MessageAttributes: encodedMessageAttributes
  };
  logger.info(`Publishing message on topic ${targetTopic} with ${JSON.stringify(pubCommandInput)}`);
  return snsClient.publish(pubCommandInput);
}

// ../../lib/ts/v1/eventHubIngest.ts
var INGEST_OPTIONS = {
  startPosition: import_event_hubs.earliestEventPosition,
  maxWaitTimeInSeconds: 60,
  maxBatchSize: 100
  // Impacts checkpointing frequency, should be able to do it in well under 10000
};
var LAMBDA_SHUTDOWN_HEADROOM = 1e4;
var EVENTS_DESTINATION_TOPIC_SHORT_NAME = "hydrated-events-topic-v1";
var DATABASE_SECRET_ARN = "database-runtime-secret-arn";
var EventHubIngestEngine = class {
  eventHubParameters;
  checkpointDatabase;
  snsMessageAttributeParser;
  databaseSecretArn;
  snsDestinationTopicShortName;
  checkpointStore;
  consumerClient;
  processedEventCount;
  batchLowestSequenceNumber;
  constructor(eventHubParameters2, checkpointDatabase2, snsMessageAttributeParser, databaseSecretArn = DATABASE_SECRET_ARN, snsDestinationTopicShortName = EVENTS_DESTINATION_TOPIC_SHORT_NAME) {
    this.eventHubParameters = eventHubParameters2;
    this.checkpointDatabase = checkpointDatabase2;
    this.snsMessageAttributeParser = snsMessageAttributeParser;
    this.databaseSecretArn = databaseSecretArn;
    this.snsDestinationTopicShortName = snsDestinationTopicShortName;
    this.checkpointStore = new DbCheckpointStore(this.checkpointDatabase);
    this.consumerClient = new import_event_hubs.EventHubConsumerClient(
      this.eventHubParameters.consumerGroup,
      this.eventHubParameters.connectionString,
      this.eventHubParameters.eventHubName,
      this.checkpointStore,
      {}
    );
    this.processedEventCount = 0;
    this.batchLowestSequenceNumber = Infinity;
  }
  async processEvent(event) {
    const messageAttributes = typeof this.snsMessageAttributeParser === "function" ? this.snsMessageAttributeParser(event) : {};
    await publishSnsMessage(
      this.snsDestinationTopicShortName,
      JSON.stringify(event),
      messageAttributes,
      true
    );
    this.batchLowestSequenceNumber = event.sequenceNumber < this.batchLowestSequenceNumber ? event.sequenceNumber : this.batchLowestSequenceNumber;
    this.processedEventCount += 1;
  }
  async checkBatchSequenceNumber(events, context) {
    const formerCheckpoint = await DbCheckpoint.getCurrentCheckpoint(
      this.checkpointDatabase,
      context.fullyQualifiedNamespace,
      context.eventHubName,
      context.consumerGroup,
      context.partitionId
    );
    if (events !== void 0 && events.length > 0) {
      await context.updateCheckpoint(events[events.length - 1]);
      if (formerCheckpoint !== void 0) {
        if (this.batchLowestSequenceNumber - formerCheckpoint.sequenceNumber > 1 && this.batchLowestSequenceNumber !== Infinity) {
          logger.warn(
            `There is a gap between the former checkpoint sequence number of ${formerCheckpoint.sequenceNumber} and lowest sequence number of ${this.batchLowestSequenceNumber} found in this batch of events. This may indicate an issue in processing.`
          );
        }
      }
    }
  }
  async run(context) {
    await loadDatabaseParams(initConstants_default.SERVICE, this.databaseSecretArn);
    logger.debug(
      `Event hub ingest engine initialized, fetching events from ${this.eventHubParameters.eventHubName} using checkpoint database ${this.checkpointDatabase}....`
    );
    await new Promise(() => {
      const subscription = this.consumerClient.subscribe(
        {
          processEvents: async (events, context2) => {
            logger.info(`Processing events from partition ${context2.partitionId}....`);
            this.batchLowestSequenceNumber = Infinity;
            await Promise.all(events.map((event) => this.processEvent(event)));
            await this.checkBatchSequenceNumber(events, context2);
          },
          processError: async (err, context2) => {
            logger.warn(`Error on partition "${context2.partitionId}": ${JSON.stringify(err.message)}: ${JSON.stringify(err.stack)}. And context is ${JSON.stringify(context2)}.`);
          }
        },
        INGEST_OPTIONS
      );
      setTimeout(async () => {
        await subscription.close();
        await this.consumerClient.close();
        logger.info(`Done with this Lambda execution, shutting down after collecting ${this.processedEventCount} events.`);
      }, context.getRemainingTimeInMillis() - LAMBDA_SHUTDOWN_HEADROOM);
    });
  }
};

// functions/v1/handlerAsyncIngest.ts
var SSM_PARAMS = ["event-hub-connection-string", "event-hub-name", "event-hub-consumer-group", "database-name"];
var checkpointDatabase;
var eventHubParamsPromise = getParameters2(SSM_PARAMS, initConstants_default.SERVICE);
var eventHubParameters = {};
eventHubParamsPromise.then((params) => {
  eventHubParameters.connectionString = params.get("event-hub-connection-string");
  eventHubParameters.eventHubName = params.get("event-hub-name");
  eventHubParameters.consumerGroup = params.get("event-hub-consumer-group");
  checkpointDatabase = params.get("database-name");
});
function parseMessageAttributesFromEvent(event) {
  return {
    fieldOne: event.body.field_one,
    fieldTwo: event.body.field_two
  };
}
var ingestEvents = async (event, context) => {
  await eventHubParamsPromise;
  const eventHubIngestEngine = new EventHubIngestEngine(
    eventHubParameters,
    checkpointDatabase,
    parseMessageAttributesFromEvent
  );
  await eventHubIngestEngine.run(context);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ingestEvents
});
/*! Bundled license information:

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
