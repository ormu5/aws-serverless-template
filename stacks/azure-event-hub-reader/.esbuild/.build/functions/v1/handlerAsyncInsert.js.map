{
  "version": 3,
  "sources": ["../../../../../../node_modules/lodash.merge/index.js", "../../../../functions/v1/handlerAsyncInsert.ts", "../../../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/Utility.js", "../../../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/config/EnvironmentVariablesService.js", "../../../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/awsSdkUtils.js", "../../../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/middleware/constants.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/Logger.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/config/EnvironmentVariablesService.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/constants.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogFormatter.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogItem.js", "../../../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/PowertoolsLogFormatter.js", "../../../../../../node_modules/@aws-lambda-powertools/metrics/lib/esm/Metrics.js", "../../../../../../node_modules/@aws-lambda-powertools/metrics/lib/esm/config/EnvironmentVariablesService.js", "../../../../../../node_modules/@aws-lambda-powertools/metrics/lib/esm/constants.js", "../../../../../../lib/ts/v1/initConstants.ts", "../../../../../../lib/ts/v1/utilities.ts"],
  "sourcesContent": ["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n", "import {Handler, SQSEvent} from \"aws-lambda\";\n\nimport { logger } from \"lib/ts/v1/utilities\";\n\nconst insertHydratedEvents: Handler = async (event: SQSEvent) => {\n\n  logger.info(`Logging only in insertEvents, event: ${JSON.stringify(event)}.`);\n\n}\n\nconst insertHydratedEventsDlq: Handler = async (event: SQSEvent) => {\n\n  logger.info(`Logging only in insertEventsDlq, event: ${JSON.stringify(event)}.`);\n\n}\n\nexport { insertHydratedEvents, insertHydratedEventsDlq }", "/**\n * `Utility` is a base class that other Powertools for AWS Lambda (TypeScript) utilites can extend to inherit shared logic.\n *\n * Its main purpose is to encapsulate the cold start heuristic logic. Cold start is a term commonly used to describe the `Init` phase of a Lambda function.\n * In this phase, Lambda creates or unfreezes an execution environment with the configured resources, downloads the code for the function and all layers,\n * initializes any extensions, initializes the runtime, and then runs the function\u2019s initialization code (the code outside the main handler).\n *\n * The Init phase happens either during the first invocation, or in advance of function invocations if you have enabled provisioned concurrency.\n *\n * To learn more about the Lambda execution environment lifecycle, see the [Execution environment section](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html) of the AWS Lambda documentation.\n *\n * As a Powertools for AWS Lambda (TypeScript) user you probably won't be using this class directly, in fact if you use other Powertools for AWS utilities the cold start heuristic found here is already used to:\n * * Add a `coldStart` key to the structured logs when injecting context information in `Logger`\n * * Emit a metric during a cold start function invocation in `Metrics`\n * * Annotate the invocation segment with a `coldStart` key in `Tracer`\n *\n * If you want to use this logic in your own utilities, `Utility` provides two methods:\n *\n * `Utility.getColdStart()`\n *\n * Since the `Utility` class is instantiated outside of the Lambda handler it will persist across invocations of the same execution environment. This means that if you call `getColdStart()` multiple times, it will return `true` during the first invocation, and `false` afterwards.\n *\n * @example\n * ```typescript\n * import { Utility } from '@aws-lambda-powertools/commons';\n *\n * const utility = new Utility();\n *\n * export const handler = async (_event: any, _context: any) => {\n *   utility.getColdStart();\n * };\n * ```\n *\n * `Utility.isColdStart()`\n *\n * This method is an alias of `getColdStart()` and is exposed for convenience and better readability in certain usages.\n *\n * @example\n * ```typescript\n * import { Utility } from '@aws-lambda-powertools/commons';\n *\n * const utility = new Utility();\n *\n * export const handler = async (_event: any, _context: any) => {\n *   if (utility.isColdStart()) {\n *     // do something, this block is only executed on the first invocation of the function\n *   } else {\n *     // do something else, this block gets executed on all subsequent invocations\n *   }\n * };\n * ```\n */\nexport class Utility {\n    coldStart = true;\n    defaultServiceName = 'service_undefined';\n    /**\n     * Get the cold start status of the current execution environment.\n     *\n     * @example\n     * ```typescript\n     * import { Utility } from '@aws-lambda-powertools/commons';\n     *\n     * const utility = new Utility();\n     * utility.isColdStart(); // true\n     * utility.isColdStart(); // false\n     * ```\n     *\n     * The method also flips the cold start status to `false` after the first invocation.\n     */\n    getColdStart() {\n        if (this.coldStart) {\n            this.coldStart = false;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Get the cold start status of the current execution environment.\n     *\n     * @example\n     * ```typescript\n     * import { Utility } from '@aws-lambda-powertools/commons';\n     *\n     * const utility = new Utility();\n     * utility.isColdStart(); // true\n     * utility.isColdStart(); // false\n     * ```\n     *\n     * @see {@link getColdStart}\n     */\n    isColdStart() {\n        return this.getColdStart();\n    }\n    /**\n     * Get the default service name.\n     */\n    getDefaultServiceName() {\n        return this.defaultServiceName;\n    }\n    /**\n     * Validate that the service name provided is valid.\n     * Used internally during initialization.\n     *\n     * @param serviceName Service name to validate\n     */\n    isValidServiceName(serviceName) {\n        return typeof serviceName === 'string' && serviceName.trim().length > 0;\n    }\n}\n", "/**\n * This class is used to fetch environment variables that are available in the execution environment.\n *\n * These variables can be a mix of runtime environment variables set by AWS and\n * other environment variables that are set by the developer to configure Powertools for AWS Lambda.\n *\n * @example\n * ```typescript\n * import { EnvironmentVariablesService } from '@aws-lambda-powertools/commons/';\n *\n * const config = new EnvironmentVariablesService();\n * const serviceName = config.getServiceName();\n * ```\n *\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables\n *\n * @class\n * @implements {ConfigServiceInterface}\n */\nclass EnvironmentVariablesService {\n    /**\n     * Increase JSON indentation for Logger to ease debugging when running functions locally or in a non-production environment\n     */\n    devModeVariable = 'POWERTOOLS_DEV';\n    /**\n     * Set service name used for tracing namespace, metrics dimension and structured logging\n     */\n    serviceNameVariable = 'POWERTOOLS_SERVICE_NAME';\n    /**\n     * AWS X-Ray Trace ID environment variable\n     * @private\n     */\n    xRayTraceIdVariable = '_X_AMZN_TRACE_ID';\n    /**\n     * Get the value of an environment variable by name.\n     *\n     * @param {string} name The name of the environment variable to fetch.\n     */\n    get(name) {\n        return process.env[name]?.trim() || '';\n    }\n    /**\n     * Get the value of the `POWERTOOLS_SERVICE_NAME` environment variable.\n     */\n    getServiceName() {\n        return this.get(this.serviceNameVariable);\n    }\n    /**\n     * Get the value of the `_X_AMZN_TRACE_ID` environment variable.\n     *\n     * The AWS X-Ray Trace data available in the environment variable has this format:\n     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,\n     *\n     * The actual Trace ID is: `1-5759e988-bd862e3fe1be46a994272793`.\n     */\n    getXrayTraceId() {\n        const xRayTraceData = this.getXrayTraceData();\n        return xRayTraceData?.Root;\n    }\n    /**\n     * Determine if the current invocation is part of a sampled X-Ray trace.\n     *\n     * The AWS X-Ray Trace data available in the environment variable has this format:\n     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,\n     */\n    getXrayTraceSampled() {\n        const xRayTraceData = this.getXrayTraceData();\n        return xRayTraceData?.Sampled === '1';\n    }\n    /**\n     * Determine if the current invocation is running in a development environment.\n     */\n    isDevMode() {\n        return this.isValueTrue(this.get(this.devModeVariable));\n    }\n    /**\n     * Helper function to determine if a value is considered thruthy.\n     *\n     * @param value The value to check for truthiness.\n     */\n    isValueTrue(value) {\n        const truthyValues = ['1', 'y', 'yes', 't', 'true', 'on'];\n        return truthyValues.includes(value.toLowerCase());\n    }\n    /**\n     * Get the AWS X-Ray Trace data from the environment variable.\n     *\n     * The method parses the environment variable `_X_AMZN_TRACE_ID` and returns an object with the key-value pairs.\n     */\n    getXrayTraceData() {\n        const xRayTraceEnv = this.get(this.xRayTraceIdVariable);\n        if (xRayTraceEnv === '')\n            return undefined;\n        if (!xRayTraceEnv.includes('='))\n            return { Root: xRayTraceEnv };\n        const xRayTraceData = {};\n        xRayTraceEnv.split(';').forEach((field) => {\n            const [key, value] = field.split('=');\n            xRayTraceData[key] = value;\n        });\n        return xRayTraceData;\n    }\n}\nexport { EnvironmentVariablesService };\n", "import { PT_VERSION } from './version.js';\nconst EXEC_ENV = process.env.AWS_EXECUTION_ENV || 'NA';\nconst middlewareOptions = {\n    relation: 'after',\n    toMiddleware: 'getUserAgentMiddleware',\n    name: 'addPowertoolsToUserAgent',\n    tags: ['POWERTOOLS', 'USER_AGENT'],\n};\n/**\n * Type guard to check if the client provided is a valid AWS SDK v3 client.\n *\n * @internal\n */\nconst isSdkClient = (client) => typeof client === 'object' &&\n    client !== null &&\n    'send' in client &&\n    typeof client.send === 'function' &&\n    'config' in client &&\n    client.config !== undefined &&\n    typeof client.config === 'object' &&\n    client.config !== null &&\n    'middlewareStack' in client &&\n    client.middlewareStack !== undefined &&\n    typeof client.middlewareStack === 'object' &&\n    client.middlewareStack !== null &&\n    'identify' in client.middlewareStack &&\n    typeof client.middlewareStack.identify === 'function' &&\n    'addRelativeTo' in client.middlewareStack &&\n    typeof client.middlewareStack.addRelativeTo === 'function';\n/**\n * Helper function to create a custom user agent middleware for the AWS SDK v3 clients.\n *\n * The middleware will append the provided feature name and the current version of\n * the Powertools for AWS Lambda library to the user agent string.\n *\n * @example \"PT/Tracer/2.1.0 PTEnv/nodejs20x\"\n *\n * @param feature The feature name to be added to the user agent\n *\n * @internal\n */\nconst customUserAgentMiddleware = (feature) => {\n    return (next) => async (args) => {\n        const powertoolsUserAgent = `PT/${feature}/${PT_VERSION} PTEnv/${EXEC_ENV}`;\n        args.request.headers['user-agent'] =\n            `${args.request.headers['user-agent']} ${powertoolsUserAgent}`;\n        return await next(args);\n    };\n};\n/**\n * Check if the provided middleware stack already has the Powertools for AWS Lambda\n * user agent middleware.\n *\n * @param middlewareStack The middleware stack to check\n *\n * @internal\n */\nconst hasPowertools = (middlewareStack) => {\n    let found = false;\n    for (const middleware of middlewareStack) {\n        if (middleware.includes('addPowertoolsToUserAgent')) {\n            found = true;\n        }\n    }\n    return found;\n};\n/**\n * Add the Powertools for AWS Lambda user agent middleware to the\n * AWS SDK v3 client provided.\n *\n * We use this middleware to unbotrusively track the usage of the library\n * and secure continued investment in the project.\n *\n * @param client The AWS SDK v3 client to add the middleware to\n * @param feature The feature name to be added to the user agent\n */\nconst addUserAgentMiddleware = (client, feature) => {\n    try {\n        if (isSdkClient(client)) {\n            if (hasPowertools(client.middlewareStack.identify())) {\n                return;\n            }\n            client.middlewareStack.addRelativeTo(customUserAgentMiddleware(feature), middlewareOptions);\n        }\n        else {\n            throw new Error(`The client provided does not match the expected interface`);\n        }\n    }\n    catch (error) {\n        console.warn('Failed to add user agent middleware', error);\n    }\n};\nexport { customUserAgentMiddleware, addUserAgentMiddleware, isSdkClient };\n", "/**\n * These constants are used to store cleanup functions in Middy's `request.internal` object.\n * They are used by the `cleanupPowertools` function to check if any cleanup function\n * is present and execute it.\n */\nconst PREFIX = 'powertools-for-aws';\n/**\n * Key to store the tracer instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst TRACER_KEY = `${PREFIX}.tracer`;\n/**\n * Key to store the metrics instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst METRICS_KEY = `${PREFIX}.metrics`;\n/**\n * Key to store the logger instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst LOGGER_KEY = `${PREFIX}.logger`;\n/**\n * Key to store the idempotency instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst IDEMPOTENCY_KEY = `${PREFIX}.idempotency`;\nexport { PREFIX, TRACER_KEY, METRICS_KEY, LOGGER_KEY, IDEMPOTENCY_KEY };\n", "import { Utility } from '@aws-lambda-powertools/commons';\nimport merge from 'lodash.merge';\nimport { Console } from 'node:console';\nimport { randomInt } from 'node:crypto';\nimport { EnvironmentVariablesService } from './config/EnvironmentVariablesService.js';\nimport { LogJsonIndent } from './constants.js';\nimport { PowertoolsLogFormatter } from './formatter/PowertoolsLogFormatter.js';\n/**\n * ## Intro\n * The Logger utility provides an opinionated logger with output structured as JSON.\n *\n * ## Key features\n *  * Capture key fields from Lambda context, cold start and structures logging output as JSON\n *  * Log Lambda context when instructed (disabled by default)\n *  * Log sampling prints all logs for a percentage of invocations (disabled by default)\n *  * Append additional keys to structured log at any point in time\n *\n * ## Usage\n *\n * For more usage examples, see [our documentation](https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/).\n *\n * ### Basic usage\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n *\n * // Logger parameters fetched from the environment variables:\n * const logger = new Logger();\n * ```\n *\n * ### Functions usage with middleware\n *\n * If you use function-based Lambda handlers you can use the [injectLambdaContext()](#injectLambdaContext)\n * middy middleware to automatically add context to your Lambda logs.\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n * import { injectLambdaContext } from '@aws-lambda-powertools/logger/middleware';\n * import middy from '@middy/core';\n *\n * const logger = new Logger();\n *\n * const lambdaHandler = async (_event: unknown, _context: unknown) => {\n *     logger.info('This is an INFO log with some context');\n * };\n *\n * export const handler = middy(lambdaHandler).use(injectLambdaContext(logger));\n * ```\n *\n * ### Object oriented usage with decorators\n *\n * If instead you use TypeScript classes to wrap your Lambda handler you can use the [@logger.injectLambdaContext()](./_aws_lambda_powertools_logger.Logger.html#injectLambdaContext) decorator.\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';\n *\n * const logger = new Logger();\n *\n * class Lambda implements LambdaInterface {\n *     // Decorate your handler class method\n *     \u2063@logger.injectLambdaContext()\n *     public async handler(_event: unknown, _context: unknown): Promise<void> {\n *         logger.info('This is an INFO log with some context');\n *     }\n * }\n *\n * const handlerClass = new Lambda();\n * export const handler = handlerClass.handler.bind(handlerClass);\n * ```\n *\n * ### Functions usage with manual instrumentation\n *\n * If you prefer to manually instrument your Lambda handler you can use the methods in the Logger class directly.\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n *\n * const logger = new Logger();\n *\n * export const handler = async (_event, context) => {\n *     logger.addContext(context);\n *     logger.info('This is an INFO log with some context');\n * };\n * ```\n *\n * @class\n * @implements {ClassThatLogs}\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/\n */\nclass Logger extends Utility {\n    /**\n     * Console instance used to print logs.\n     *\n     * In AWS Lambda, we create a new instance of the Console class so that we can have\n     * full control over the output of the logs. In testing environments, we use the\n     * default console instance.\n     *\n     * This property is initialized in the constructor in setOptions().\n     *\n     * @private\n     */\n    console;\n    /**\n     * Custom config service instance used to configure the logger.\n     */\n    customConfigService;\n    /**\n     * Environment variables service instance used to fetch environment variables.\n     */\n    envVarsService = new EnvironmentVariablesService();\n    /**\n     * Whether to print the Lambda invocation event in the logs.\n     */\n    logEvent = false;\n    /**\n     * Formatter used to format the log items.\n     * @default new PowertoolsLogFormatter()\n     */\n    logFormatter;\n    /**\n     * JSON indentation used to format the logs.\n     */\n    logIndentation = LogJsonIndent.COMPACT;\n    /**\n     * Log level used internally by the current instance of Logger.\n     */\n    logLevel = 12;\n    /**\n     * Log level thresholds used internally by the current instance of Logger.\n     *\n     * The levels are in ascending order from the most verbose to the least verbose (no logs).\n     */\n    logLevelThresholds = {\n        DEBUG: 8,\n        INFO: 12,\n        WARN: 16,\n        ERROR: 20,\n        CRITICAL: 24,\n        SILENT: 28,\n    };\n    /**\n     * Persistent log attributes that will be logged in all log items.\n     */\n    persistentLogAttributes = {};\n    /**\n     * Standard attributes managed by Powertools that will be logged in all log items.\n     */\n    powertoolsLogData = {};\n    /**\n     * Temporary log attributes that can be appended with `appendKeys()` method.\n     */\n    temporaryLogAttributes = {};\n    /**\n     * Buffer used to store logs until the logger is initialized.\n     *\n     * Sometimes we need to log warnings before the logger is fully initialized, however we can't log them\n     * immediately because the logger is not ready yet. This buffer stores those logs until the logger is ready.\n     */\n    #buffer = [];\n    /**\n     * Flag used to determine if the logger is initialized.\n     */\n    #isInitialized = false;\n    /**\n     * Map used to hold the list of keys and their type.\n     *\n     * Because keys of different types can be overwritten, we keep a list of keys that were added and their last\n     * type. We then use this map at log preparation time to pick the last one.\n     */\n    #keys = new Map();\n    /**\n     * This is the initial log leval as set during the initialization of the logger.\n     *\n     * We keep this value to be able to reset the log level to the initial value when the sample rate is refreshed.\n     */\n    #initialLogLevel = 12;\n    /**\n     * Log level used by the current instance of Logger.\n     *\n     * Returns the log level as a number. The higher the number, the less verbose the logs.\n     * To get the log level name, use the {@link getLevelName()} method.\n     */\n    get level() {\n        return this.logLevel;\n    }\n    /**\n     * It initializes the Logger class with an optional set of options (settings).\n     * *\n     * @param {ConstructorOptions} options\n     */\n    constructor(options = {}) {\n        super();\n        const { customConfigService, ...rest } = options;\n        this.setCustomConfigService(customConfigService);\n        // all logs are buffered until the logger is initialized\n        this.setOptions(rest);\n        this.#isInitialized = true;\n        for (const [level, log] of this.#buffer) {\n            // we call the method directly and create the log item just in time\n            this.printLog(level, this.createAndPopulateLogItem(...log));\n        }\n        this.#buffer = [];\n    }\n    /**\n     * It adds the current Lambda function's invocation context data to the powertoolLogData property of the instance.\n     * This context data will be part of all printed log items.\n     *\n     * @param {Context} context\n     * @returns {void}\n     */\n    addContext(context) {\n        this.addToPowertoolsLogData({\n            lambdaContext: {\n                invokedFunctionArn: context.invokedFunctionArn,\n                coldStart: this.getColdStart(),\n                awsRequestId: context.awsRequestId,\n                memoryLimitInMB: context.memoryLimitInMB,\n                functionName: context.functionName,\n                functionVersion: context.functionVersion,\n            },\n        });\n    }\n    /**\n     * It adds the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.\n     *\n     * @param {LogAttributes} attributes\n     * @returns {void}\n     */\n    addPersistentLogAttributes(attributes) {\n        this.appendPersistentKeys(attributes);\n    }\n    /**\n     * It adds the given temporary attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @param {LogAttributes} attributes\n     * @returns {void}\n     */\n    appendKeys(attributes) {\n        for (const attributeKey of Object.keys(attributes)) {\n            this.#keys.set(attributeKey, 'temp');\n        }\n        merge(this.temporaryLogAttributes, attributes);\n    }\n    /**\n     * It adds the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @param attributes - The attributes to add to all log items.\n     */\n    appendPersistentKeys(attributes) {\n        for (const attributeKey of Object.keys(attributes)) {\n            this.#keys.set(attributeKey, 'persistent');\n        }\n        merge(this.persistentLogAttributes, attributes);\n    }\n    /**\n     * It creates a separate Logger instance, identical to the current one\n     * It's possible to overwrite the new instance options by passing them.\n     *\n     * @param {ConstructorOptions} options\n     * @returns {Logger}\n     */\n    createChild(options = {}) {\n        const childLogger = this.createLogger(\n        // Merge parent logger options with options passed to createChild,\n        // the latter having precedence.\n        merge({}, {\n            logLevel: this.getLevelName(),\n            serviceName: this.powertoolsLogData.serviceName,\n            sampleRateValue: this.powertoolsLogData.sampleRateValue,\n            logFormatter: this.getLogFormatter(),\n            customConfigService: this.getCustomConfigService(),\n            environment: this.powertoolsLogData.environment,\n            persistentLogAttributes: this.persistentLogAttributes,\n            temporaryLogAttributes: this.temporaryLogAttributes,\n        }, options));\n        if (this.powertoolsLogData.lambdaContext)\n            childLogger.addContext(this.powertoolsLogData.lambdaContext);\n        return childLogger;\n    }\n    /**\n     * It prints a log item with level CRITICAL.\n     *\n     * @param {LogItemMessage} input\n     * @param {Error | LogAttributes | string} extraInput\n     */\n    critical(input, ...extraInput) {\n        this.processLogItem(24, input, extraInput);\n    }\n    /**\n     * It prints a log item with level DEBUG.\n     *\n     * @param {LogItemMessage} input\n     * @param {Error | LogAttributes | string} extraInput\n     * @returns {void}\n     */\n    debug(input, ...extraInput) {\n        this.processLogItem(8, input, extraInput);\n    }\n    /**\n     * It prints a log item with level ERROR.\n     *\n     * @param {LogItemMessage} input\n     * @param {Error | LogAttributes | string} extraInput\n     * @returns {void}\n     */\n    error(input, ...extraInput) {\n        this.processLogItem(20, input, extraInput);\n    }\n    /**\n     * Get the log level name of the current instance of Logger.\n     *\n     * It returns the log level name, i.e. `INFO`, `DEBUG`, etc.\n     * To get the log level as a number, use the {@link Logger.level} property.\n     *\n     * @returns {Uppercase<LogLevel>} The log level name.\n     */\n    getLevelName() {\n        return this.getLogLevelNameFromNumber(this.logLevel);\n    }\n    /**\n     * It returns a boolean value. True means that the Lambda invocation events\n     * are printed in the logs.\n     *\n     * @returns {boolean}\n     */\n    getLogEvent() {\n        return this.logEvent;\n    }\n    /**\n     * It returns the persistent log attributes, which are the attributes\n     * that will be logged in all log items.\n     *\n     * @private\n     * @returns {LogAttributes}\n     */\n    getPersistentLogAttributes() {\n        return this.persistentLogAttributes;\n    }\n    /**\n     * It prints a log item with level INFO.\n     *\n     * @param {LogItemMessage} input\n     * @param {Error | LogAttributes | string} extraInput\n     * @returns {void}\n     */\n    info(input, ...extraInput) {\n        this.processLogItem(12, input, extraInput);\n    }\n    /**\n     * Method decorator that adds the current Lambda function context as extra\n     * information in all log items.\n     *\n     * The decorator can be used only when attached to a Lambda function handler which\n     * is written as method of a class, and should be declared just before the handler declaration.\n     *\n     * Note: Currently TypeScript only supports decorators on classes and methods. If you are using the\n     * function syntax, you should use the middleware instead.\n     *\n     * @example\n     * ```typescript\n     * import { Logger } from '@aws-lambda-powertools/logger';\n     * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';\n     *\n     * const logger = new Logger();\n     *\n     * class Lambda implements LambdaInterface {\n     *     // Decorate your handler class method\n     *     \u2063@logger.injectLambdaContext()\n     *     public async handler(_event: unknown, _context: unknown): Promise<void> {\n     *         logger.info('This is an INFO log with some context');\n     *     }\n     * }\n     *\n     * const handlerClass = new Lambda();\n     * export const handler = handlerClass.handler.bind(handlerClass);\n     * ```\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators\n     * @returns {HandlerMethodDecorator}\n     */\n    injectLambdaContext(options) {\n        return (_target, _propertyKey, descriptor) => {\n            /**\n             * The descriptor.value is the method this decorator decorates, it cannot be undefined.\n             */\n            /* eslint-disable  @typescript-eslint/no-non-null-assertion */\n            const originalMethod = descriptor.value;\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const loggerRef = this;\n            // Use a function() {} instead of an () => {} arrow function so that we can\n            // access `myClass` as `this` in a decorated `myClass.myMethod()`.\n            descriptor.value = async function (event, context, callback) {\n                Logger.injectLambdaContextBefore(loggerRef, event, context, options);\n                let result;\n                try {\n                    result = await originalMethod.apply(this, [event, context, callback]);\n                }\n                catch (error) {\n                    throw error;\n                }\n                finally {\n                    if (options?.clearState || options?.resetKeys)\n                        loggerRef.resetKeys();\n                }\n                return result;\n            };\n        };\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link resetKeys()} instead.\n     */\n    /* istanbul ignore next */\n    static injectLambdaContextAfterOrOnError(logger, _persistentAttributes, options) {\n        if (options && (options.clearState || options?.resetKeys)) {\n            logger.resetKeys();\n        }\n    }\n    static injectLambdaContextBefore(logger, event, context, options) {\n        logger.addContext(context);\n        let shouldLogEvent = undefined;\n        if (options && Object.hasOwn(options, 'logEvent')) {\n            shouldLogEvent = options.logEvent;\n        }\n        logger.logEventIfEnabled(event, shouldLogEvent);\n    }\n    /**\n     * Logs a Lambda invocation event, if it *should*.\n     *\n     ** @param {unknown} event\n     * @param {boolean} [overwriteValue]\n     * @returns {void}\n     */\n    logEventIfEnabled(event, overwriteValue) {\n        if (!this.shouldLogEvent(overwriteValue))\n            return;\n        this.info('Lambda invocation event', { event });\n    }\n    /**\n     * This method allows recalculating the initial sampling decision for changing\n     * the log level to DEBUG based on a sample rate value used during initialization,\n     * potentially yielding a different outcome.\n     *\n     * @returns {void}\n     */\n    refreshSampleRateCalculation() {\n        this.setInitialSampleRate(this.powertoolsLogData.sampleRateValue);\n    }\n    /**\n     * It removes temporary attributes based on provided keys to all log items generated by this Logger instance.\n     *\n     * @param {string[]} keys\n     * @returns {void}\n     */\n    removeKeys(keys) {\n        for (const key of keys) {\n            this.temporaryLogAttributes[key] = undefined;\n            if (this.persistentLogAttributes[key]) {\n                this.#keys.set(key, 'persistent');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n    }\n    /**\n     * Remove the given keys from the persistent keys.\n     *\n     * @example\n     * ```typescript\n     * import { Logger } from '@aws-lambda-powertools/logger';\n     *\n     * const logger = new Logger({\n     *   persistentKeys: {\n     *     environment: 'prod',\n     *   },\n     * });\n     *\n     * logger.removePersistentKeys(['environment']);\n     * ```\n     *\n     * @param keys - The keys to remove from the persistent attributes.\n     */\n    removePersistentKeys(keys) {\n        for (const key of keys) {\n            this.persistentLogAttributes[key] = undefined;\n            if (this.temporaryLogAttributes[key]) {\n                this.#keys.set(key, 'temp');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link removePersistentKeys()} instead.\n     *\n     * @param {string[]} keys\n     * @returns {void}\n     */\n    removePersistentLogAttributes(keys) {\n        this.removePersistentKeys(keys);\n    }\n    /**\n     * It removes all temporary log attributes added with `appendKeys()` method.\n     */\n    resetKeys() {\n        for (const key of Object.keys(this.temporaryLogAttributes)) {\n            if (this.persistentLogAttributes[key]) {\n                this.#keys.set(key, 'persistent');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n        this.temporaryLogAttributes = {};\n    }\n    /**\n     * Set the log level for this Logger instance.\n     *\n     * If the log level is set using AWS Lambda Advanced Logging Controls, it sets it\n     * instead of the given log level to avoid data loss.\n     *\n     * @param logLevel The log level to set, i.e. `error`, `warn`, `info`, `debug`, etc.\n     */\n    setLogLevel(logLevel) {\n        if (this.awsLogLevelShortCircuit(logLevel))\n            return;\n        if (this.isValidLogLevel(logLevel)) {\n            this.logLevel = this.logLevelThresholds[logLevel];\n        }\n        else {\n            throw new Error(`Invalid log level: ${logLevel}`);\n        }\n    }\n    /**\n     * It sets the given attributes (key-value pairs) to all log items generated by this Logger instance.\n     * Note: this replaces the pre-existing value.\n     *\n     * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.\n     *\n     * @param {LogAttributes} attributes\n     * @returns {void}\n     */\n    setPersistentLogAttributes(attributes) {\n        this.persistentLogAttributes = attributes;\n    }\n    /**\n     * It checks whether the current Lambda invocation event should be printed in the logs or not.\n     *\n     * @private\n     * @param {boolean} [overwriteValue]\n     * @returns {boolean}\n     */\n    shouldLogEvent(overwriteValue) {\n        if (typeof overwriteValue === 'boolean') {\n            return overwriteValue;\n        }\n        return this.getLogEvent();\n    }\n    /**\n     * It prints a log item with level WARN.\n     *\n     * @param {LogItemMessage} input\n     * @param {Error | LogAttributes | string} extraInput\n     * @returns {void}\n     */\n    warn(input, ...extraInput) {\n        this.processLogItem(16, input, extraInput);\n    }\n    /**\n     * Factory method for instantiating logger instances. Used by `createChild` method.\n     * Important for customization and subclassing. It allows subclasses, like `MyOwnLogger`,\n     * to override its behavior while keeping the main business logic in `createChild` intact.\n     *\n     * @example\n     * ```typescript\n     * // MyOwnLogger subclass\n     * class MyOwnLogger extends Logger {\n     *   protected createLogger(options?: ConstructorOptions): MyOwnLogger {\n     *     return new MyOwnLogger(options);\n     *   }\n     *   // No need to re-implement business logic from `createChild` and keep track on changes\n     *   public createChild(options?: ConstructorOptions): MyOwnLogger {\n     *     return super.createChild(options) as MyOwnLogger;\n     *   }\n     * }\n     * ```\n     *\n     * @param {ConstructorOptions} [options] Logger configuration options.\n     * @returns {Logger} A new logger instance.\n     */\n    createLogger(options) {\n        return new Logger(options);\n    }\n    /**\n     * It stores information that is printed in all log items.\n     *\n     * @param {Partial<PowertoolsLogData>} attributes\n     * @private\n     * @returns {void}\n     */\n    addToPowertoolsLogData(attributes) {\n        merge(this.powertoolsLogData, attributes);\n    }\n    awsLogLevelShortCircuit(selectedLogLevel) {\n        const awsLogLevel = this.getEnvVarsService().getAwsLogLevel();\n        if (this.isValidLogLevel(awsLogLevel)) {\n            this.logLevel = this.logLevelThresholds[awsLogLevel];\n            if (this.isValidLogLevel(selectedLogLevel) &&\n                this.logLevel > this.logLevelThresholds[selectedLogLevel]) {\n                this.warn(`Current log level (${selectedLogLevel}) does not match AWS Lambda Advanced Logging Controls minimum log level (${awsLogLevel}). This can lead to data loss, consider adjusting them.`);\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Create a log item and populate it with the given log level, input, and extra input.\n     *\n     * We start with creating an object with base attributes managed by Powertools.\n     * Then we create a second object with persistent attributes provided by customers either\n     * directly to the log entry or through initial configuration and `appendKeys` method.\n     *\n     * Once we have the two objects, we pass them to the formatter that will apply the desired\n     * formatting to the log item.\n     *\n     * @param logLevel The log level of the log item to be printed\n     * @param input The main input of the log item, this can be a string or an object with additional attributes\n     * @param extraInput Additional attributes to be added to the log item\n     */\n    createAndPopulateLogItem(logLevel, input, extraInput) {\n        let message = '';\n        let otherInput = {};\n        if (typeof input === 'string') {\n            message = input;\n        }\n        else {\n            const { message: inputMessage, ...rest } = input;\n            message = inputMessage;\n            otherInput = rest;\n        }\n        // create base attributes\n        const unformattedBaseAttributes = {\n            logLevel: this.getLogLevelNameFromNumber(logLevel),\n            timestamp: new Date(),\n            message,\n            xRayTraceId: this.envVarsService.getXrayTraceId(),\n            ...this.getPowertoolsLogData(),\n        };\n        const additionalAttributes = {};\n        // gradually add additional attributes picking only the last added for each key\n        for (const [key, type] of this.#keys) {\n            if (type === 'persistent') {\n                additionalAttributes[key] = this.persistentLogAttributes[key];\n            }\n            else {\n                additionalAttributes[key] = this.temporaryLogAttributes[key];\n            }\n        }\n        // if the main input is not a string, then it's an object with additional attributes, so we merge it\n        merge(additionalAttributes, otherInput);\n        // then we merge the extra input attributes (if any)\n        for (const item of extraInput) {\n            const attributes = item instanceof Error\n                ? { error: item }\n                : typeof item === 'string'\n                    ? { extra: item }\n                    : item;\n            merge(additionalAttributes, attributes);\n        }\n        return this.getLogFormatter().formatAttributes(unformattedBaseAttributes, additionalAttributes);\n    }\n    /**\n     * It returns the custom config service, an abstraction used to fetch environment variables.\n     *\n     * @private\n     * @returns {ConfigServiceInterface | undefined}\n     */\n    getCustomConfigService() {\n        return this.customConfigService;\n    }\n    /**\n     * It returns the instance of a service that fetches environment variables.\n     *\n     * @private\n     * @returns {EnvironmentVariablesService}\n     */\n    getEnvVarsService() {\n        return this.envVarsService;\n    }\n    /**\n     * It returns the instance of a service that formats the structure of a\n     * log item's keys and values in the desired way.\n     *\n     * @private\n     * @returns {LogFormatterInterface}\n     */\n    getLogFormatter() {\n        return this.logFormatter;\n    }\n    /**\n     * Get the log level name from the log level number.\n     *\n     * For example, if the log level is 16, it will return 'WARN'.\n     *\n     * @param logLevel - The log level to get the name of\n     * @returns - The name of the log level\n     */\n    getLogLevelNameFromNumber(logLevel) {\n        let found;\n        for (const [key, value] of Object.entries(this.logLevelThresholds)) {\n            if (value === logLevel) {\n                found = key;\n                break;\n            }\n        }\n        return found;\n    }\n    /**\n     * It returns information that will be added in all log item by\n     * this Logger instance (different from user-provided persistent attributes).\n     *\n     * @private\n     * @returns {LogAttributes}\n     */\n    getPowertoolsLogData() {\n        return this.powertoolsLogData;\n    }\n    /**\n     * When the data added in the log item contains object references or BigInt values,\n     * `JSON.stringify()` can't handle them and instead throws errors:\n     * `TypeError: cyclic object value` or `TypeError: Do not know how to serialize a BigInt`.\n     * To mitigate these issues, this method will find and remove all cyclic references and convert BigInt values to strings.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions\n     * @private\n     */\n    getReplacer() {\n        const references = new WeakSet();\n        return (key, value) => {\n            let item = value;\n            if (item instanceof Error) {\n                item = this.getLogFormatter().formatError(item);\n            }\n            if (typeof item === 'bigint') {\n                return item.toString();\n            }\n            if (typeof item === 'object' && value !== null) {\n                if (references.has(item)) {\n                    return;\n                }\n                references.add(item);\n            }\n            return item;\n        };\n    }\n    /**\n     * It returns true and type guards the log level if a given log level is valid.\n     *\n     * @param {LogLevel} logLevel\n     * @private\n     * @returns {boolean}\n     */\n    isValidLogLevel(logLevel) {\n        return typeof logLevel === 'string' && logLevel in this.logLevelThresholds;\n    }\n    /**\n     * It returns true and type guards the sample rate value if a given value is valid.\n     *\n     * @param sampleRateValue\n     * @private\n     * @returns {boolean}\n     */\n    isValidSampleRate(sampleRateValue) {\n        return (typeof sampleRateValue === 'number' &&\n            0 <= sampleRateValue &&\n            sampleRateValue <= 1);\n    }\n    /**\n     * It prints a given log with given log level.\n     *\n     * @param {number} logLevel\n     * @param {LogItem} log\n     * @private\n     */\n    printLog(logLevel, log) {\n        log.prepareForPrint();\n        const consoleMethod = logLevel === 24\n            ? 'error'\n            : this.getLogLevelNameFromNumber(logLevel).toLowerCase();\n        this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getReplacer(), this.logIndentation));\n    }\n    /**\n     * It prints a given log with given log level.\n     *\n     * @param {number} logLevel\n     * @param {LogItemMessage} input\n     * @param {LogItemExtraInput} extraInput\n     * @private\n     */\n    processLogItem(logLevel, input, extraInput) {\n        if (logLevel >= this.logLevel) {\n            if (this.#isInitialized) {\n                this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));\n            }\n            else {\n                this.#buffer.push([logLevel, [logLevel, input, extraInput]]);\n            }\n        }\n    }\n    /**\n     * It initializes console property as an instance of the internal version of Console() class (PR #748)\n     * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.\n     *\n     * @private\n     * @returns {void}\n     */\n    setConsole() {\n        if (!this.getEnvVarsService().isDevMode()) {\n            this.console = new Console({\n                stdout: process.stdout,\n                stderr: process.stderr,\n            });\n        }\n        else {\n            this.console = console;\n        }\n    }\n    /**\n     * Sets the Logger's customer config service instance, which will be used\n     * to fetch environment variables.\n     *\n     * @private\n     * @param {ConfigServiceInterface} customConfigService\n     * @returns {void}\n     */\n    setCustomConfigService(customConfigService) {\n        this.customConfigService = customConfigService\n            ? customConfigService\n            : undefined;\n    }\n    /**\n     * Sets the initial Logger log level based on the following order:\n     * 1. If a log level is set using AWS Lambda Advanced Logging Controls, it sets it.\n     * 2. If a log level is passed to the constructor, it sets it.\n     * 3. If a log level is set via custom config service, it sets it.\n     * 4. If a log level is set via env variables, it sets it.\n     *\n     * If none of the above is true, the default log level applies (`INFO`).\n     *\n     * @private\n     * @param {LogLevel} [logLevel] - Log level passed to the constructor\n     */\n    setInitialLogLevel(logLevel) {\n        const constructorLogLevel = logLevel?.toUpperCase();\n        if (this.awsLogLevelShortCircuit(constructorLogLevel))\n            return;\n        if (this.isValidLogLevel(constructorLogLevel)) {\n            this.logLevel = this.logLevelThresholds[constructorLogLevel];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n        const customConfigValue = this.getCustomConfigService()\n            ?.getLogLevel()\n            ?.toUpperCase();\n        if (this.isValidLogLevel(customConfigValue)) {\n            this.logLevel = this.logLevelThresholds[customConfigValue];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n        const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();\n        if (this.isValidLogLevel(envVarsValue)) {\n            this.logLevel = this.logLevelThresholds[envVarsValue];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n    }\n    /**\n     * It sets sample rate value with the following prioprity:\n     * 1. Constructor value\n     * 2. Custom config service value\n     * 3. Environment variable value\n     * 4. Default value (zero)\n     *\n     * @private\n     * @param {number} [sampleRateValue]\n     * @returns {void}\n     */\n    setInitialSampleRate(sampleRateValue) {\n        this.powertoolsLogData.sampleRateValue = 0;\n        const constructorValue = sampleRateValue;\n        const customConfigValue = this.getCustomConfigService()?.getSampleRateValue();\n        const envVarsValue = this.getEnvVarsService().getSampleRateValue();\n        for (const value of [constructorValue, customConfigValue, envVarsValue]) {\n            if (this.isValidSampleRate(value)) {\n                this.powertoolsLogData.sampleRateValue = value;\n                if (value && randomInt(0, 100) / 100 <= value) {\n                    this.setLogLevel('DEBUG');\n                    this.debug('Setting log level to DEBUG due to sampling rate');\n                }\n                else {\n                    this.setLogLevel(this.getLogLevelNameFromNumber(this.#initialLogLevel));\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * If the log event feature is enabled via env variable, it sets a property that tracks whether\n     * the event passed to the Lambda function handler should be logged or not.\n     *\n     * @private\n     * @returns {void}\n     */\n    setLogEvent() {\n        if (this.getEnvVarsService().getLogEvent()) {\n            this.logEvent = true;\n        }\n    }\n    /**\n     * It sets the log formatter instance, in charge of giving a custom format\n     * to the structured logs\n     *\n     * @private\n     * @param {LogFormatterInterface} logFormatter\n     * @returns {void}\n     */\n    setLogFormatter(logFormatter) {\n        this.logFormatter =\n            logFormatter ??\n                new PowertoolsLogFormatter({ envVarsService: this.getEnvVarsService() });\n    }\n    /**\n     * If the `POWERTOOLS_DEV` env variable is set,\n     * it adds JSON indentation for pretty printing logs.\n     *\n     * @private\n     * @returns {void}\n     */\n    setLogIndentation() {\n        if (this.getEnvVarsService().isDevMode()) {\n            this.logIndentation = LogJsonIndent.PRETTY;\n        }\n    }\n    /**\n     * It configures the Logger instance settings that will affect the Logger's behaviour\n     * and the content of all logs.\n     *\n     * @private\n     * @param options Options to configure the Logger instance\n     */\n    setOptions(options) {\n        const { logLevel, serviceName, sampleRateValue, logFormatter, persistentKeys, persistentLogAttributes, // deprecated in favor of persistentKeys\n        environment, } = options;\n        if (persistentLogAttributes && persistentKeys) {\n            this.warn('Both persistentLogAttributes and persistentKeys options were provided. Using persistentKeys as persistentLogAttributes is deprecated and will be removed in future releases');\n        }\n        // configurations that affect log content\n        this.setPowertoolsLogData(serviceName, environment, persistentKeys || persistentLogAttributes);\n        // configurations that affect Logger behavior\n        this.setLogEvent();\n        this.setInitialLogLevel(logLevel);\n        this.setInitialSampleRate(sampleRateValue);\n        // configurations that affect how logs are printed\n        this.setLogFormatter(logFormatter);\n        this.setConsole();\n        this.setLogIndentation();\n        return this;\n    }\n    /**\n     * It adds important data to the Logger instance that will affect the content of all logs.\n     *\n     * @param {string} serviceName\n     * @param {Environment} environment\n     * @param {LogAttributes} persistentLogAttributes\n     * @private\n     * @returns {void}\n     */\n    setPowertoolsLogData(serviceName, environment, persistentLogAttributes = {}) {\n        this.addToPowertoolsLogData({\n            awsRegion: this.getEnvVarsService().getAwsRegion(),\n            environment: environment ||\n                this.getCustomConfigService()?.getCurrentEnvironment() ||\n                this.getEnvVarsService().getCurrentEnvironment(),\n            serviceName: serviceName ||\n                this.getCustomConfigService()?.getServiceName() ||\n                this.getEnvVarsService().getServiceName() ||\n                this.getDefaultServiceName(),\n        });\n        this.appendPersistentKeys(persistentLogAttributes);\n    }\n}\nexport { Logger };\n", "import { EnvironmentVariablesService as CommonEnvironmentVariablesService } from '@aws-lambda-powertools/commons';\n/**\n * Class EnvironmentVariablesService\n *\n * This class is used to return environment variables that are available in the runtime of\n * the current Lambda invocation.\n * These variables can be a mix of runtime environment variables set by AWS and\n * variables that can be set by the developer additionally.\n *\n * @class\n * @extends {CommonEnvironmentVariablesService}\n * @implements {ConfigServiceInterface}\n * @see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables\n */\nclass EnvironmentVariablesService extends CommonEnvironmentVariablesService {\n    // Reserved environment variables\n    awsLogLevelVariable = 'AWS_LAMBDA_LOG_LEVEL';\n    awsRegionVariable = 'AWS_REGION';\n    currentEnvironmentVariable = 'ENVIRONMENT';\n    functionNameVariable = 'AWS_LAMBDA_FUNCTION_NAME';\n    functionVersionVariable = 'AWS_LAMBDA_FUNCTION_VERSION';\n    logEventVariable = 'POWERTOOLS_LOGGER_LOG_EVENT';\n    logLevelVariable = 'POWERTOOLS_LOG_LEVEL';\n    logLevelVariableLegacy = 'LOG_LEVEL';\n    memoryLimitInMBVariable = 'AWS_LAMBDA_FUNCTION_MEMORY_SIZE';\n    sampleRateValueVariable = 'POWERTOOLS_LOGGER_SAMPLE_RATE';\n    tzVariable = 'TZ';\n    /**\n     * It returns the value of the `AWS_LAMBDA_LOG_LEVEL` environment variable.\n     *\n     * The `AWS_LAMBDA_LOG_LEVEL` environment variable is set by AWS Lambda when configuring\n     * the function's log level using the Advanced Logging Controls feature. This value always\n     * takes precedence over other means of configuring the log level.\n     *\n     * @note we need to map the `FATAL` log level to `CRITICAL`, see {@link https://docs.aws.amazon.com/lambda/latest/dg/configuration-logging.html#configuration-logging-log-levels AWS Lambda Log Levels}.\n     *\n     * @returns {string}\n     */\n    getAwsLogLevel() {\n        const awsLogLevelVariable = this.get(this.awsLogLevelVariable);\n        return awsLogLevelVariable === 'FATAL' ? 'CRITICAL' : awsLogLevelVariable;\n    }\n    /**\n     * It returns the value of the AWS_REGION environment variable.\n     *\n     * @returns {string}\n     */\n    getAwsRegion() {\n        return this.get(this.awsRegionVariable);\n    }\n    /**\n     * It returns the value of the ENVIRONMENT environment variable.\n     *\n     * @returns {string}\n     */\n    getCurrentEnvironment() {\n        return this.get(this.currentEnvironmentVariable);\n    }\n    /**\n     * It returns the value of the AWS_LAMBDA_FUNCTION_MEMORY_SIZE environment variable.\n     *\n     * @returns {string}\n     */\n    getFunctionMemory() {\n        const value = this.get(this.memoryLimitInMBVariable);\n        return Number(value);\n    }\n    /**\n     * It returns the value of the AWS_LAMBDA_FUNCTION_NAME environment variable.\n     *\n     * @returns {string}\n     */\n    getFunctionName() {\n        return this.get(this.functionNameVariable);\n    }\n    /**\n     * It returns the value of the AWS_LAMBDA_FUNCTION_VERSION environment variable.\n     *\n     * @returns {string}\n     */\n    getFunctionVersion() {\n        return this.get(this.functionVersionVariable);\n    }\n    /**\n     * It returns the value of the POWERTOOLS_LOGGER_LOG_EVENT environment variable.\n     *\n     * @returns {boolean}\n     */\n    getLogEvent() {\n        const value = this.get(this.logEventVariable);\n        return this.isValueTrue(value);\n    }\n    /**\n     * It returns the value of the `POWERTOOLS_LOG_LEVEL, or `LOG_LEVEL` (legacy) environment variables\n     * when the first one is not set.\n     *\n     * @note The `LOG_LEVEL` environment variable is considered legacy and will be removed in a future release.\n     * @note The `AWS_LAMBDA_LOG_LEVEL` environment variable always takes precedence over the ones above.\n     *\n     * @returns {string}\n     */\n    getLogLevel() {\n        const logLevelVariable = this.get(this.logLevelVariable);\n        const logLevelVariableAlias = this.get(this.logLevelVariableLegacy);\n        return logLevelVariable !== '' ? logLevelVariable : logLevelVariableAlias;\n    }\n    /**\n     * It returns the value of the POWERTOOLS_LOGGER_SAMPLE_RATE environment variable.\n     *\n     * @returns {number|undefined}\n     */\n    getSampleRateValue() {\n        const value = this.get(this.sampleRateValueVariable);\n        return value && value.length > 0 ? Number(value) : undefined;\n    }\n    /**\n     * It returns the value of the `TZ` environment variable or `UTC` if it is not set.\n     *\n     * @returns {string}\n     */\n    getTimezone() {\n        const value = this.get(this.tzVariable);\n        return value.length > 0 ? value : 'UTC';\n    }\n}\nexport { EnvironmentVariablesService };\n", "/**\n * The indent level for JSON logs.\n *\n * By default Logger will use the `LogJsonIndent.COMPACT` indent level, which\n * produces logs on a single line. This is the most efficient option for\n * CloudWatch Logs.\n *\n * When enabling the `POWERTOOLS_DEV` environment variable, Logger will use the\n * `LogJsonIndent.PRETTY` indent level, which indents the JSON logs for easier\n * reading.\n */\nconst LogJsonIndent = {\n    PRETTY: 4,\n    COMPACT: 0,\n};\nexport { LogJsonIndent };\n", "/**\n * This class defines and implements common methods for the formatting of log attributes.\n *\n * @class\n * @abstract\n * @implements {LogFormatterInterface}\n */\nclass LogFormatter {\n    /**\n     * EnvironmentVariablesService instance.\n     * If set, it allows to access environment variables.\n     */\n    envVarsService;\n    constructor(options) {\n        this.envVarsService = options?.envVarsService;\n    }\n    /**\n     * It formats a given Error parameter.\n     *\n     * @param {Error} error\n     * @returns {LogAttributes}\n     */\n    formatError(error) {\n        return {\n            name: error.name,\n            location: this.getCodeLocation(error.stack),\n            message: error.message,\n            stack: error.stack,\n            cause: error.cause instanceof Error\n                ? this.formatError(error.cause)\n                : error.cause,\n        };\n    }\n    /**\n     * Formats a given date into an ISO 8601 string, considering the configured timezone.\n     * If `envVarsService` is set and the configured timezone differs from 'UTC',\n     * the date is formatted to that timezone. Otherwise, it defaults to 'UTC'.\n     *\n     * @param {Date} now\n     * @returns {string}\n     */\n    formatTimestamp(now) {\n        const defaultTimezone = 'UTC';\n        /**\n         * If a specific timezone is configured and it's not the default `UTC`,\n         * format the timestamp with the appropriate timezone offset.\n         **/\n        const configuredTimezone = this.envVarsService?.getTimezone();\n        if (configuredTimezone && !configuredTimezone.includes(defaultTimezone))\n            return this.#generateISOTimestampWithOffset(now, configuredTimezone);\n        return now.toISOString();\n    }\n    /**\n     * It returns a string containing the location of an error, given a particular stack trace.\n     *\n     * @param stack\n     * @returns {string}\n     */\n    getCodeLocation(stack) {\n        if (!stack) {\n            return '';\n        }\n        const stackLines = stack.split('\\n');\n        const regex = /\\(([^)]*?):(\\d+?):(\\d+?)\\)\\\\?$/;\n        let i;\n        for (i = 0; i < stackLines.length; i++) {\n            const match = regex.exec(stackLines[i]);\n            if (Array.isArray(match)) {\n                return `${match[1]}:${Number(match[2])}`;\n            }\n        }\n        return '';\n    }\n    /**\n     * Generates a new Intl.DateTimeFormat object configured with the specified time zone\n     * and formatting options. The time is displayed in 24-hour format (hour12: false).\n     *\n     * @param {string} timeZone - the IANA time zone identifier (e.g., \"Asia/Dhaka\").\n     */\n    #getDateFormatter = (timeZone) => {\n        const twoDigitFormatOption = '2-digit';\n        return new Intl.DateTimeFormat('en', {\n            year: 'numeric',\n            month: twoDigitFormatOption,\n            day: twoDigitFormatOption,\n            hour: twoDigitFormatOption,\n            minute: twoDigitFormatOption,\n            second: twoDigitFormatOption,\n            hour12: false,\n            timeZone,\n        });\n    };\n    /**\n     * Generates an ISO 8601 timestamp string with the specified time zone and the local time zone offset.\n     *\n     * @param {Date} date - the date to format\n     * @param {string} timeZone - the IANA time zone identifier (e.g., \"Asia/Dhaka\").\n     */\n    #generateISOTimestampWithOffset(date, timeZone) {\n        const { year, month, day, hour, minute, second } = this.#getDateFormatter(timeZone)\n            .formatToParts(date)\n            .reduce((acc, item) => {\n            acc[item.type] = item.value;\n            return acc;\n        }, {});\n        const datePart = `${year}-${month}-${day}T${hour}:${minute}:${second}`;\n        const offset = -date.getTimezoneOffset();\n        const offsetSign = offset >= 0 ? '+' : '-';\n        const offsetHours = Math.abs(Math.floor(offset / 60))\n            .toString()\n            .padStart(2, '0');\n        const offsetMinutes = Math.abs(offset % 60)\n            .toString()\n            .padStart(2, '0');\n        const millisecondPart = date.getMilliseconds().toString().padStart(3, '0');\n        const offsetPart = `${offsetSign}${offsetHours}:${offsetMinutes}`;\n        return `${datePart}.${millisecondPart}${offsetPart}`;\n    }\n}\nexport { LogFormatter };\n", "import merge from 'lodash.merge';\nclass LogItem {\n    attributes = {};\n    constructor(params) {\n        // Add attributes in the log item in this order:\n        // - Base attributes supported by the Powertool by default\n        // - Persistent attributes provided by developer, not formatted (done later)\n        // - Ephemeral attributes provided as parameters for a single log item (done later)\n        this.addAttributes(params.attributes);\n    }\n    addAttributes(attributes) {\n        merge(this.attributes, attributes);\n        return this;\n    }\n    getAttributes() {\n        return this.attributes;\n    }\n    prepareForPrint() {\n        this.setAttributes(this.removeEmptyKeys(this.getAttributes()));\n    }\n    removeEmptyKeys(attributes) {\n        const newAttributes = {};\n        for (const key in attributes) {\n            if (attributes[key] !== undefined &&\n                attributes[key] !== '' &&\n                attributes[key] !== null) {\n                newAttributes[key] = attributes[key];\n            }\n        }\n        return newAttributes;\n    }\n    setAttributes(attributes) {\n        this.attributes = attributes;\n    }\n}\nexport { LogItem };\n", "import { LogFormatter } from './LogFormatter.js';\nimport { LogItem } from './LogItem.js';\n/**\n * This class is used to transform a set of log key-value pairs\n * in the Powertools for AWS Lambda default structure log format.\n *\n * @class\n * @extends {LogFormatter}\n */\nclass PowertoolsLogFormatter extends LogFormatter {\n    /**\n     * It formats key-value pairs of log attributes.\n     *\n     * @param {UnformattedAttributes} attributes\n     * @param {LogAttributes} additionalLogAttributes\n     * @returns {LogItem}\n     */\n    formatAttributes(attributes, additionalLogAttributes) {\n        const baseAttributes = {\n            cold_start: attributes.lambdaContext?.coldStart,\n            function_arn: attributes.lambdaContext?.invokedFunctionArn,\n            function_memory_size: attributes.lambdaContext?.memoryLimitInMB,\n            function_name: attributes.lambdaContext?.functionName,\n            function_request_id: attributes.lambdaContext?.awsRequestId,\n            level: attributes.logLevel,\n            message: attributes.message,\n            sampling_rate: attributes.sampleRateValue,\n            service: attributes.serviceName,\n            timestamp: this.formatTimestamp(attributes.timestamp),\n            xray_trace_id: attributes.xRayTraceId,\n        };\n        const powertoolsLogItem = new LogItem({ attributes: baseAttributes });\n        powertoolsLogItem.addAttributes(additionalLogAttributes);\n        return powertoolsLogItem;\n    }\n}\nexport { PowertoolsLogFormatter };\n", "import { Console } from 'node:console';\nimport { Utility } from '@aws-lambda-powertools/commons';\nimport { EnvironmentVariablesService } from './config/EnvironmentVariablesService.js';\nimport { MAX_DIMENSION_COUNT, MAX_METRICS_SIZE, DEFAULT_NAMESPACE, COLD_START_METRIC, MAX_METRIC_VALUES_SIZE, MetricUnit as MetricUnits, MetricResolution as MetricResolutions, } from './constants.js';\n/**\n * ## Intro\n * Metrics creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF).\n *\n * These metrics can be visualized through Amazon CloudWatch Console.\n *\n * ## Key features\n *   * Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob)\n *   * Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc)\n *   * Metrics are created asynchronously by CloudWatch service, no custom stacks needed\n *   * Context manager to create a one off metric with a different dimension\n *\n * ## Usage\n *\n * ### Functions usage with middleware\n *\n * Using this middleware on your handler function will automatically flush metrics after the function returns or throws an error.\n * Additionally, you can configure the middleware to easily:\n * * ensure that at least one metric is emitted before you flush them\n * * capture a `ColdStart` a metric\n * * set default dimensions for all your metrics\n *\n * @example\n * ```typescript\n * import { Metrics } from '@aws-lambda-powertools/metrics';\n * import { logMetrics } from '@aws-lambda-powertools/metrics/middleware';\n * import middy from '@middy/core';\n *\n * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n *\n * const lambdaHandler = async (_event: unknown, _context: unknown) => {\n *   ...\n * };\n *\n * export const handler = middy(lambdaHandler).use(logMetrics(metrics));\n * ```\n *\n * ### Object oriented way with decorator\n *\n * If you are used to TypeScript Class usage to encapsulate your Lambda handler you can leverage the [@metrics.logMetrics()](./_aws_lambda_powertools_metrics.Metrics.html#logMetrics) decorator to automatically:\n *   * capture a `ColdStart` metric\n *   * flush buffered metrics\n *   * throw on empty metrics\n *\n * @example\n *\n * ```typescript\n * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';\n * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';\n *\n * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n *\n * class Lambda implements LambdaInterface {\n *   // Decorate your handler with the logMetrics decorator\n *   \u2063@metrics.logMetrics({ captureColdStartMetric: true, throwOnEmptyMetrics: true })\n *   public handler(_event: unknown, _context: unknown): Promise<void> {\n *     // ...\n *     metrics.addMetric('test-metric', MetricUnit.Count, 10);\n *     // ...\n *   }\n * }\n *\n * const handlerClass = new Lambda();\n * export const handler = handlerClass.handler.bind(handlerClass);\n * ```\n *\n * ### Standard function\n *\n * If you are used to classic JavaScript functions, you can leverage the different methods provided to create and publish metrics.\n *\n * @example\n *\n * ```typescript\n * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';\n *\n * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n *\n * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {\n *   metrics.captureColdStartMetric();\n *   metrics.addMetric('test-metric', MetricUnit.Count, 10);\n *   metrics.publishStoredMetrics();\n * };\n * ```\n */\nclass Metrics extends Utility {\n    /**\n     * Console instance used to print logs.\n     *\n     * In AWS Lambda, we create a new instance of the Console class so that we can have\n     * full control over the output of the logs. In testing environments, we use the\n     * default console instance.\n     *\n     * This property is initialized in the constructor in setOptions().\n     *\n     * @private\n     */\n    console;\n    customConfigService;\n    defaultDimensions = {};\n    dimensions = {};\n    envVarsService;\n    functionName;\n    isSingleMetric = false;\n    metadata = {};\n    namespace;\n    shouldThrowOnEmptyMetrics = false;\n    storedMetrics = {};\n    constructor(options = {}) {\n        super();\n        this.dimensions = {};\n        this.setOptions(options);\n    }\n    /**\n     * Add a dimension to the metrics.\n     *\n     * A dimension is a key-value pair that is used to group metrics.\n     *\n     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension for more details.\n     * @param name\n     * @param value\n     */\n    addDimension(name, value) {\n        if (MAX_DIMENSION_COUNT <= this.getCurrentDimensionsCount()) {\n            throw new RangeError(`The number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);\n        }\n        this.dimensions[name] = value;\n    }\n    /**\n     * Add multiple dimensions to the metrics.\n     *\n     * A dimension is a key-value pair that is used to group metrics.\n     *\n     * @param dimensions A key-value pair of dimensions\n     */\n    addDimensions(dimensions) {\n        const newDimensions = { ...this.dimensions };\n        Object.keys(dimensions).forEach((dimensionName) => {\n            newDimensions[dimensionName] = dimensions[dimensionName];\n        });\n        if (Object.keys(newDimensions).length > MAX_DIMENSION_COUNT) {\n            throw new RangeError(`Unable to add ${Object.keys(dimensions).length} dimensions: the number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);\n        }\n        this.dimensions = newDimensions;\n    }\n    /**\n     * A high-cardinality data part of your Metrics log.\n     *\n     * This is useful when you want to search highly contextual information along with your metrics in your logs.\n     *\n     * @param key The key of the metadata\n     * @param value The value of the metadata\n     */\n    addMetadata(key, value) {\n        this.metadata[key] = value;\n    }\n    /**\n     * Add a metric to the metrics buffer.\n     *\n     * By default, metrics are buffered and flushed at the end of the Lambda invocation\n     * or when calling {@link Metrics.publishStoredMetrics}.\n     *\n     * You can add a metric by specifying the metric name, unit, and value. For convenience,\n     * we provide a set of constants for the most common units in {@link MetricUnit}.\n     *\n     * @example\n     * ```typescript\n     * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n     *\n     * metrics.addMetric('successfulBooking', MetricUnit.Count, 1);\n     * ```\n     *\n     * Optionally, you can specify the metric resolution, which can be either `High` or `Standard`.\n     * By default, metrics are published with a resolution of `Standard`, click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Resolution_definition)\n     * to learn more about metric resolutions.\n     *\n     * @example\n     * ```typescript\n     * import { Metrics, MetricUnit, MetricResolution } from '@aws-lambda-powertools/metrics';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n     *\n     * metrics.addMetric('successfulBooking', MetricUnit.Count, 1, MetricResolution.High);\n     * ```\n     *\n     * @param name - The metric name\n     * @param unit - The metric unit\n     * @param value - The metric value\n     * @param resolution - The metric resolution\n     */\n    addMetric(name, unit, value, resolution = MetricResolutions.Standard) {\n        this.storeMetric(name, unit, value, resolution);\n        if (this.isSingleMetric)\n            this.publishStoredMetrics();\n    }\n    /**\n     * Create a singleMetric to capture cold start.\n     *\n     * If it's a cold start invocation, this feature will:\n     *   * Create a separate EMF blob that contains a single metric named ColdStart\n     *   * Add function_name and service dimensions\n     *\n     * This has the advantage of keeping cold start metric separate from your application metrics, where you might have unrelated dimensions,\n     * as well as avoiding potential data loss from metrics not being published for other reasons.\n     *\n     * @example\n     * ```typescript\n     * import { Metrics } from '@aws-lambda-powertools/metrics';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n     *\n     * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {\n     *     metrics.captureColdStartMetric();\n     * };\n     * ```\n     */\n    captureColdStartMetric() {\n        if (!this.isColdStart())\n            return;\n        const singleMetric = this.singleMetric();\n        if (this.defaultDimensions.service) {\n            singleMetric.setDefaultDimensions({\n                service: this.defaultDimensions.service,\n            });\n        }\n        if (this.functionName != null) {\n            singleMetric.addDimension('function_name', this.functionName);\n        }\n        singleMetric.addMetric(COLD_START_METRIC, MetricUnits.Count, 1);\n    }\n    /**\n     * Clear all default dimensions.\n     */\n    clearDefaultDimensions() {\n        this.defaultDimensions = {};\n    }\n    /**\n     * Clear all dimensions.\n     */\n    clearDimensions() {\n        this.dimensions = {};\n    }\n    /**\n     * Clear all metadata.\n     */\n    clearMetadata() {\n        this.metadata = {};\n    }\n    /**\n     * Clear all the metrics stored in the buffer.\n     */\n    clearMetrics() {\n        this.storedMetrics = {};\n    }\n    /**\n     * A decorator automating coldstart capture, throw on empty metrics and publishing metrics on handler exit.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { Metrics } from '@aws-lambda-powertools/metrics';\n     * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' });\n     *\n     * class Lambda implements LambdaInterface {\n     *   @metrics.logMetrics({ captureColdStartMetric: true })\n     *   public handler(_event: unknown, __context: unknown): Promise<void> {\n     *     // ...\n     *   }\n     * }\n     *\n     * const handlerClass = new Lambda();\n     * export const handler = handlerClass.handler.bind(handlerClass);\n     * ```\n     *\n     * @decorator Class\n     */\n    logMetrics(options = {}) {\n        const { throwOnEmptyMetrics, defaultDimensions, captureColdStartMetric } = options;\n        if (throwOnEmptyMetrics) {\n            this.throwOnEmptyMetrics();\n        }\n        if (defaultDimensions !== undefined) {\n            this.setDefaultDimensions(defaultDimensions);\n        }\n        return (_target, _propertyKey, descriptor) => {\n            /**\n             * The descriptor.value is the method this decorator decorates, it cannot be undefined.\n             */\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const originalMethod = descriptor.value;\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const metricsRef = this;\n            // Use a function() {} instead of an () => {} arrow function so that we can\n            // access `myClass` as `this` in a decorated `myClass.myMethod()`.\n            descriptor.value = async function (event, context, callback) {\n                metricsRef.functionName = context.functionName;\n                if (captureColdStartMetric)\n                    metricsRef.captureColdStartMetric();\n                let result;\n                try {\n                    result = await originalMethod.apply(this, [event, context, callback]);\n                }\n                catch (error) {\n                    throw error;\n                }\n                finally {\n                    metricsRef.publishStoredMetrics();\n                }\n                return result;\n            };\n            return descriptor;\n        };\n    }\n    /**\n     * Synchronous function to actually publish your metrics. (Not needed if using logMetrics decorator).\n     * It will create a new EMF blob and log it to standard output to be then ingested by Cloudwatch logs and processed automatically for metrics creation.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { Metrics, MetricUnit } from '@aws-lambda-powertools/metrics';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName: 'orders' }); // Sets metric namespace, and service as a metric dimension\n     *\n     * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {\n     *   metrics.addMetric('test-metric', MetricUnit.Count, 10);\n     *   metrics.publishStoredMetrics();\n     * };\n     * ```\n     */\n    publishStoredMetrics() {\n        if (!this.shouldThrowOnEmptyMetrics &&\n            Object.keys(this.storedMetrics).length === 0) {\n            console.warn('No application metrics to publish. The cold-start metric may be published if enabled. ' +\n                'If application metrics should never be empty, consider using `throwOnEmptyMetrics`');\n        }\n        const target = this.serializeMetrics();\n        this.console.log(JSON.stringify(target));\n        this.clearMetrics();\n        this.clearDimensions();\n        this.clearMetadata();\n    }\n    /**\n     * Function to create a new metric object compliant with the EMF (Embedded Metric Format) schema which\n     * includes the metric name, unit, and optionally storage resolution.\n     *\n     * The function will create a new EMF blob and log it to standard output to be then ingested by Cloudwatch\n     * logs and processed automatically for metrics creation.\n     *\n     * @returns metrics as JSON object compliant EMF Schema Specification\n     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Specification.html for more details\n     */\n    serializeMetrics() {\n        // Storage resolution is included only for High resolution metrics\n        const metricDefinitions = Object.values(this.storedMetrics).map((metricDefinition) => ({\n            Name: metricDefinition.name,\n            Unit: metricDefinition.unit,\n            ...(metricDefinition.resolution === MetricResolutions.High\n                ? { StorageResolution: metricDefinition.resolution }\n                : {}),\n        }));\n        if (metricDefinitions.length === 0 && this.shouldThrowOnEmptyMetrics) {\n            throw new RangeError('The number of metrics recorded must be higher than zero');\n        }\n        if (!this.namespace)\n            console.warn('Namespace should be defined, default used');\n        // We reduce the stored metrics to a single object with the metric\n        // name as the key and the value as the value.\n        const metricValues = Object.values(this.storedMetrics).reduce((result, { name, value }) => {\n            result[name] = value;\n            return result;\n        }, {});\n        const dimensionNames = [\n            ...new Set([\n                ...Object.keys(this.defaultDimensions),\n                ...Object.keys(this.dimensions),\n            ]),\n        ];\n        return {\n            _aws: {\n                Timestamp: new Date().getTime(),\n                CloudWatchMetrics: [\n                    {\n                        Namespace: this.namespace || DEFAULT_NAMESPACE,\n                        Dimensions: [dimensionNames],\n                        Metrics: metricDefinitions,\n                    },\n                ],\n            },\n            ...this.defaultDimensions,\n            ...this.dimensions,\n            ...metricValues,\n            ...this.metadata,\n        };\n    }\n    /**\n     * Sets default dimensions that will be added to all metrics.\n     *\n     * @param dimensions The default dimensions to be added to all metrics.\n     */\n    setDefaultDimensions(dimensions) {\n        const targetDimensions = {\n            ...this.defaultDimensions,\n            ...dimensions,\n        };\n        if (MAX_DIMENSION_COUNT <= Object.keys(targetDimensions).length) {\n            throw new Error('Max dimension count hit');\n        }\n        this.defaultDimensions = targetDimensions;\n    }\n    /**\n     * Sets the function name to be added to the metric.\n     *\n     * @param value The function name to be added to the metric.\n     */\n    setFunctionName(value) {\n        this.functionName = value;\n    }\n    /**\n     * CloudWatch EMF uses the same dimensions across all your metrics. Use singleMetric if you have a metric that should have different dimensions.\n     *\n     * You don't need to call publishStoredMetrics() after calling addMetric for a singleMetrics, they will be flushed directly.\n     *\n     * @example\n     *\n     * ```typescript\n     * const singleMetric = metrics.singleMetric();\n     * singleMetric.addDimension('InnerDimension', 'true');\n     * singleMetric.addMetric('single-metric', MetricUnit.Percent, 50);\n     * ```\n     *\n     * @returns the Metrics\n     */\n    singleMetric() {\n        return new Metrics({\n            namespace: this.namespace,\n            serviceName: this.dimensions.service,\n            defaultDimensions: this.defaultDimensions,\n            singleMetric: true,\n        });\n    }\n    /**\n     * Throw an Error if the metrics buffer is empty.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { Metrics } from '@aws-lambda-powertools/metrics';\n     *\n     * const metrics = new Metrics({ namespace: 'serverlessAirline', serviceName:'orders' });\n     *\n     * export const handler = async (_event: unknown, __context: unknown): Promise<void> => {\n     *     metrics.throwOnEmptyMetrics();\n     *     metrics.publishStoredMetrics(); // will throw since no metrics added.\n     * };\n     * ```\n     */\n    throwOnEmptyMetrics() {\n        this.shouldThrowOnEmptyMetrics = true;\n    }\n    /**\n     * Gets the current number of dimensions stored.\n     *\n     * @returns the number of dimensions currently stored\n     */\n    getCurrentDimensionsCount() {\n        return (Object.keys(this.dimensions).length +\n            Object.keys(this.defaultDimensions).length);\n    }\n    /**\n     * Gets the custom config service if it exists.\n     *\n     * @returns the custom config service if it exists, undefined otherwise\n     */\n    getCustomConfigService() {\n        return this.customConfigService;\n    }\n    /**\n     * Gets the environment variables service.\n     *\n     * @returns the environment variables service\n     */\n    getEnvVarsService() {\n        return this.envVarsService;\n    }\n    /**\n     * Checks if a metric is new or not.\n     *\n     * A metric is considered new if there is no metric with the same name already stored.\n     *\n     * When a metric is not new, we also check if the unit is consistent with the stored metric with\n     * the same name. If the units are inconsistent, we throw an error as this is likely a bug or typo.\n     * This can happen if a metric is added without using the `MetricUnit` helper in JavaScript codebases.\n     *\n     * @param name The name of the metric\n     * @param unit The unit of the metric\n     * @returns true if the metric is new, false if another metric with the same name already exists\n     */\n    isNewMetric(name, unit) {\n        if (this.storedMetrics[name]) {\n            if (this.storedMetrics[name].unit !== unit) {\n                const currentUnit = this.storedMetrics[name].unit;\n                throw new Error(`Metric \"${name}\" has already been added with unit \"${currentUnit}\", but we received unit \"${unit}\". Did you mean to use metric unit \"${currentUnit}\"?`);\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * It initializes console property as an instance of the internal version of Console() class (PR #748)\n     * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.\n     *\n     * @private\n     * @returns {void}\n     */\n    setConsole() {\n        if (!this.getEnvVarsService().isDevMode()) {\n            this.console = new Console({\n                stdout: process.stdout,\n                stderr: process.stderr,\n            });\n        }\n        else {\n            this.console = console;\n        }\n    }\n    /**\n     * Sets the custom config service to be used.\n     *\n     * @param customConfigService The custom config service to be used\n     */\n    setCustomConfigService(customConfigService) {\n        this.customConfigService = customConfigService\n            ? customConfigService\n            : undefined;\n    }\n    /**\n     * Sets the environment variables service to be used.\n     */\n    setEnvVarsService() {\n        this.envVarsService = new EnvironmentVariablesService();\n    }\n    /**\n     * Sets the namespace to be used.\n     *\n     * @param namespace The namespace to be used\n     */\n    setNamespace(namespace) {\n        this.namespace = (namespace ||\n            this.getCustomConfigService()?.getNamespace() ||\n            this.getEnvVarsService().getNamespace());\n    }\n    /**\n     * Sets the options to be used by the Metrics instance.\n     *\n     * This method is used during the initialization of the Metrics instance.\n     *\n     * @param options The options to be used\n     * @returns the Metrics instance\n     */\n    setOptions(options) {\n        const { customConfigService, namespace, serviceName, singleMetric, defaultDimensions, } = options;\n        this.setEnvVarsService();\n        this.setConsole();\n        this.setCustomConfigService(customConfigService);\n        this.setNamespace(namespace);\n        this.setService(serviceName);\n        this.setDefaultDimensions(defaultDimensions);\n        this.isSingleMetric = singleMetric || false;\n        return this;\n    }\n    /**\n     * Sets the service to be used.\n     *\n     * @param service The service to be used\n     */\n    setService(service) {\n        const targetService = (service ||\n            this.getCustomConfigService()?.getServiceName() ||\n            this.getEnvVarsService().getServiceName()) ||\n            this.getDefaultServiceName();\n        if (targetService.length > 0) {\n            this.setDefaultDimensions({ service: targetService });\n        }\n    }\n    /**\n     * Stores a metric in the buffer.\n     *\n     * If the buffer is full, or the metric reaches the maximum number of values,\n     * the buffer is published to stdout.\n     *\n     * @param name The name of the metric to store\n     * @param unit The unit of the metric to store\n     * @param value The value of the metric to store\n     * @param resolution The resolution of the metric to store\n     */\n    storeMetric(name, unit, value, resolution) {\n        if (Object.keys(this.storedMetrics).length >= MAX_METRICS_SIZE) {\n            this.publishStoredMetrics();\n        }\n        if (this.isNewMetric(name, unit)) {\n            this.storedMetrics[name] = {\n                unit,\n                value,\n                name,\n                resolution,\n            };\n        }\n        else {\n            const storedMetric = this.storedMetrics[name];\n            if (!Array.isArray(storedMetric.value)) {\n                storedMetric.value = [storedMetric.value];\n            }\n            storedMetric.value.push(value);\n            if (storedMetric.value.length === MAX_METRIC_VALUES_SIZE) {\n                this.publishStoredMetrics();\n            }\n        }\n    }\n}\nexport { Metrics };\n", "import { EnvironmentVariablesService as CommonEnvironmentVariablesService } from '@aws-lambda-powertools/commons';\nclass EnvironmentVariablesService extends CommonEnvironmentVariablesService {\n    namespaceVariable = 'POWERTOOLS_METRICS_NAMESPACE';\n    /**\n     * It returns the value of the POWERTOOLS_METRICS_NAMESPACE environment variable.\n     *\n     * @returns {string}\n     */\n    getNamespace() {\n        return this.get(this.namespaceVariable);\n    }\n}\nexport { EnvironmentVariablesService };\n", "const COLD_START_METRIC = 'ColdStart';\nconst DEFAULT_NAMESPACE = 'default_namespace';\nconst MAX_METRICS_SIZE = 100;\nconst MAX_METRIC_VALUES_SIZE = 100;\nconst MAX_DIMENSION_COUNT = 29;\nconst MetricUnit = {\n    Seconds: 'Seconds',\n    Microseconds: 'Microseconds',\n    Milliseconds: 'Milliseconds',\n    Bytes: 'Bytes',\n    Kilobytes: 'Kilobytes',\n    Megabytes: 'Megabytes',\n    Gigabytes: 'Gigabytes',\n    Terabytes: 'Terabytes',\n    Bits: 'Bits',\n    Kilobits: 'Kilobits',\n    Megabits: 'Megabits',\n    Gigabits: 'Gigabits',\n    Terabits: 'Terabits',\n    Percent: 'Percent',\n    Count: 'Count',\n    BytesPerSecond: 'Bytes/Second',\n    KilobytesPerSecond: 'Kilobytes/Second',\n    MegabytesPerSecond: 'Megabytes/Second',\n    GigabytesPerSecond: 'Gigabytes/Second',\n    TerabytesPerSecond: 'Terabytes/Second',\n    BitsPerSecond: 'Bits/Second',\n    KilobitsPerSecond: 'Kilobits/Second',\n    MegabitsPerSecond: 'Megabits/Second',\n    GigabitsPerSecond: 'Gigabits/Second',\n    TerabitsPerSecond: 'Terabits/Second',\n    CountPerSecond: 'Count/Second',\n};\nconst MetricResolution = {\n    Standard: 60,\n    High: 1,\n};\nexport { COLD_START_METRIC, DEFAULT_NAMESPACE, MAX_METRICS_SIZE, MAX_METRIC_VALUES_SIZE, MAX_DIMENSION_COUNT, MetricUnit, MetricResolution, };\n", "// TODO: get rid of this spurious module\n\nlet IS_DEPLOYED: boolean = true;\nlet ACCOUNT_ID: string;\nif (process.env.STAGE && process.env.STAGE === 'local') {\n  IS_DEPLOYED = false;\n  ACCOUNT_ID = '123456789012'\n}\nelse {\n  ACCOUNT_ID = process.env.ACCOUNT_ID || 'N/A';\n}\n\nconst SERVICE: string = process.env.SERVICE || 'N/A';\nconst STAGE: string = process.env.STAGE  || 'local';\nconst REGION: string  = process.env.REGION || 'N/A';\n\nexport default {\n    IS_DEPLOYED,\n    SERVICE,\n    STAGE,\n    ACCOUNT_ID,\n    REGION\n};", "import { Logger as DeployedLogger } from '@aws-lambda-powertools/logger';\nimport { Metrics } from '@aws-lambda-powertools/metrics';\n\nimport * as envConstants from \"./initConstants\";\n\nclass LocalLogger {\n\n    private _formatMessages(messages: unknown[]): string {\n        return messages.map(m =>\n            typeof m === 'object' ? JSON.stringify(m) : m\n        ).join(' ');\n    }\n\n    debug(...messages: unknown[]) {\n        console.log(`[DEBUG]:`, new Date().toISOString(), `:`, this._formatMessages(messages));\n    }\n\n    info(...messages: unknown[]) {\n        console.log(`[INFO]:`, new Date().toISOString(), `:`, this._formatMessages(messages));\n    }\n\n    error(...messages: unknown[]) {\n        console.error(`[ERROR]:`, new Date().toISOString(), `:`, this._formatMessages(messages));\n    }\n\n    warn(...messages: unknown[]) {\n        console.warn(`[WARNING]:`, new Date().toISOString(), `:`, this._formatMessages(messages));\n    }\n\n    addContext() {\n        // This method is intentionally left blank for compatibility with DeployedLogger\n    }\n}\n\nconst logger = envConstants.default.IS_DEPLOYED\n    ? new DeployedLogger({\n        persistentLogAttributes: {\n            aws_account_id: envConstants.default.ACCOUNT_ID,\n            aws_region: envConstants.default.REGION,\n        },\n    })\n    : new LocalLogger();\n\nconst metrics = new Metrics({\n    defaultDimensions: {\n        aws_account_id: envConstants.default.ACCOUNT_ID,\n        aws_region: envConstants.default.REGION\n    }\n});\n\n\nexport {\n    logger,\n    metrics\n};\n"],
  "mappings": "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",
  "names": ["module", "Buffer", "Symbol", "Uint8Array", "Map", "merge", "import_lodash", "EnvironmentVariablesService", "merge", "EnvironmentVariablesService", "merge", "logger", "import_node_console", "EnvironmentVariablesService", "EnvironmentVariablesService"]
}
